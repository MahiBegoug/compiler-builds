/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@angular/compiler/src/render3/r3_identifiers", ["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CORE = '@angular/core';
    var Identifiers = /** @class */ (function () {
        function Identifiers() {
        }
        /* Methods */
        Identifiers.NEW_METHOD = 'factory';
        Identifiers.TRANSFORM_METHOD = 'transform';
        Identifiers.PATCH_DEPS = 'patchedDeps';
        /* Instructions */
        Identifiers.namespaceHTML = { name: 'ɵnamespaceHTML', moduleName: CORE };
        Identifiers.namespaceMathML = { name: 'ɵnamespaceMathML', moduleName: CORE };
        Identifiers.namespaceSVG = { name: 'ɵnamespaceSVG', moduleName: CORE };
        Identifiers.element = { name: 'ɵelement', moduleName: CORE };
        Identifiers.elementStart = { name: 'ɵelementStart', moduleName: CORE };
        Identifiers.elementEnd = { name: 'ɵelementEnd', moduleName: CORE };
        Identifiers.elementProperty = { name: 'ɵelementProperty', moduleName: CORE };
        Identifiers.elementAttribute = { name: 'ɵelementAttribute', moduleName: CORE };
        Identifiers.elementClassProp = { name: 'ɵelementClassProp', moduleName: CORE };
        Identifiers.elementContainerStart = { name: 'ɵEC', moduleName: CORE };
        Identifiers.elementContainerEnd = { name: 'ɵeC', moduleName: CORE };
        Identifiers.elementStyling = { name: 'ɵelementStyling', moduleName: CORE };
        Identifiers.elementStylingMap = { name: 'ɵelementStylingMap', moduleName: CORE };
        Identifiers.elementStyleProp = { name: 'ɵelementStyleProp', moduleName: CORE };
        Identifiers.elementStylingApply = { name: 'ɵelementStylingApply', moduleName: CORE };
        Identifiers.containerCreate = { name: 'ɵcontainer', moduleName: CORE };
        Identifiers.nextContext = { name: 'ɵnextContext', moduleName: CORE };
        Identifiers.templateCreate = { name: 'ɵtemplate', moduleName: CORE };
        Identifiers.text = { name: 'ɵtext', moduleName: CORE };
        Identifiers.textBinding = { name: 'ɵtextBinding', moduleName: CORE };
        Identifiers.bind = { name: 'ɵbind', moduleName: CORE };
        Identifiers.enableBindings = { name: 'ɵenableBindings', moduleName: CORE };
        Identifiers.disableBindings = { name: 'ɵdisableBindings', moduleName: CORE };
        Identifiers.getCurrentView = { name: 'ɵgetCurrentView', moduleName: CORE };
        Identifiers.restoreView = { name: 'ɵrestoreView', moduleName: CORE };
        Identifiers.interpolation1 = { name: 'ɵinterpolation1', moduleName: CORE };
        Identifiers.interpolation2 = { name: 'ɵinterpolation2', moduleName: CORE };
        Identifiers.interpolation3 = { name: 'ɵinterpolation3', moduleName: CORE };
        Identifiers.interpolation4 = { name: 'ɵinterpolation4', moduleName: CORE };
        Identifiers.interpolation5 = { name: 'ɵinterpolation5', moduleName: CORE };
        Identifiers.interpolation6 = { name: 'ɵinterpolation6', moduleName: CORE };
        Identifiers.interpolation7 = { name: 'ɵinterpolation7', moduleName: CORE };
        Identifiers.interpolation8 = { name: 'ɵinterpolation8', moduleName: CORE };
        Identifiers.interpolationV = { name: 'ɵinterpolationV', moduleName: CORE };
        Identifiers.pureFunction0 = { name: 'ɵpureFunction0', moduleName: CORE };
        Identifiers.pureFunction1 = { name: 'ɵpureFunction1', moduleName: CORE };
        Identifiers.pureFunction2 = { name: 'ɵpureFunction2', moduleName: CORE };
        Identifiers.pureFunction3 = { name: 'ɵpureFunction3', moduleName: CORE };
        Identifiers.pureFunction4 = { name: 'ɵpureFunction4', moduleName: CORE };
        Identifiers.pureFunction5 = { name: 'ɵpureFunction5', moduleName: CORE };
        Identifiers.pureFunction6 = { name: 'ɵpureFunction6', moduleName: CORE };
        Identifiers.pureFunction7 = { name: 'ɵpureFunction7', moduleName: CORE };
        Identifiers.pureFunction8 = { name: 'ɵpureFunction8', moduleName: CORE };
        Identifiers.pureFunctionV = { name: 'ɵpureFunctionV', moduleName: CORE };
        Identifiers.pipeBind1 = { name: 'ɵpipeBind1', moduleName: CORE };
        Identifiers.pipeBind2 = { name: 'ɵpipeBind2', moduleName: CORE };
        Identifiers.pipeBind3 = { name: 'ɵpipeBind3', moduleName: CORE };
        Identifiers.pipeBind4 = { name: 'ɵpipeBind4', moduleName: CORE };
        Identifiers.pipeBindV = { name: 'ɵpipeBindV', moduleName: CORE };
        Identifiers.load = { name: 'ɵload', moduleName: CORE };
        Identifiers.loadDirective = { name: 'ɵloadDirective', moduleName: CORE };
        Identifiers.loadQueryList = { name: 'ɵloadQueryList', moduleName: CORE };
        Identifiers.pipe = { name: 'ɵpipe', moduleName: CORE };
        Identifiers.projection = { name: 'ɵprojection', moduleName: CORE };
        Identifiers.projectionDef = { name: 'ɵprojectionDef', moduleName: CORE };
        Identifiers.reference = { name: 'ɵreference', moduleName: CORE };
        Identifiers.inject = { name: 'inject', moduleName: CORE };
        Identifiers.injectAttribute = { name: 'ɵinjectAttribute', moduleName: CORE };
        Identifiers.injectRenderer2 = { name: 'ɵinjectRenderer2', moduleName: CORE };
        Identifiers.directiveInject = { name: 'ɵdirectiveInject', moduleName: CORE };
        Identifiers.templateRefExtractor = { name: 'ɵtemplateRefExtractor', moduleName: CORE };
        Identifiers.defineBase = { name: 'ɵdefineBase', moduleName: CORE };
        Identifiers.BaseDef = {
            name: 'ɵBaseDef',
            moduleName: CORE,
        };
        Identifiers.defineComponent = { name: 'ɵdefineComponent', moduleName: CORE };
        Identifiers.ComponentDefWithMeta = {
            name: 'ɵComponentDefWithMeta',
            moduleName: CORE,
        };
        Identifiers.defineDirective = {
            name: 'ɵdefineDirective',
            moduleName: CORE,
        };
        Identifiers.DirectiveDefWithMeta = {
            name: 'ɵDirectiveDefWithMeta',
            moduleName: CORE,
        };
        Identifiers.InjectorDef = {
            name: 'ɵInjectorDef',
            moduleName: CORE,
        };
        Identifiers.defineInjector = {
            name: 'defineInjector',
            moduleName: CORE,
        };
        Identifiers.NgModuleDefWithMeta = {
            name: 'ɵNgModuleDefWithMeta',
            moduleName: CORE,
        };
        Identifiers.defineNgModule = { name: 'ɵdefineNgModule', moduleName: CORE };
        Identifiers.PipeDefWithMeta = { name: 'ɵPipeDefWithMeta', moduleName: CORE };
        Identifiers.definePipe = { name: 'ɵdefinePipe', moduleName: CORE };
        Identifiers.query = { name: 'ɵquery', moduleName: CORE };
        Identifiers.queryRefresh = { name: 'ɵqueryRefresh', moduleName: CORE };
        Identifiers.registerContentQuery = { name: 'ɵregisterContentQuery', moduleName: CORE };
        Identifiers.NgOnChangesFeature = { name: 'ɵNgOnChangesFeature', moduleName: CORE };
        Identifiers.InheritDefinitionFeature = { name: 'ɵInheritDefinitionFeature', moduleName: CORE };
        Identifiers.PublicFeature = { name: 'ɵPublicFeature', moduleName: CORE };
        Identifiers.listener = { name: 'ɵlistener', moduleName: CORE };
        Identifiers.getFactoryOf = {
            name: 'ɵgetFactoryOf',
            moduleName: CORE,
        };
        Identifiers.getInheritedFactory = {
            name: 'ɵgetInheritedFactory',
            moduleName: CORE,
        };
        // sanitization-related functions
        Identifiers.sanitizeHtml = { name: 'ɵsanitizeHtml', moduleName: CORE };
        Identifiers.sanitizeStyle = { name: 'ɵsanitizeStyle', moduleName: CORE };
        Identifiers.defaultStyleSanitizer = { name: 'ɵdefaultStyleSanitizer', moduleName: CORE };
        Identifiers.sanitizeResourceUrl = { name: 'ɵsanitizeResourceUrl', moduleName: CORE };
        Identifiers.sanitizeScript = { name: 'ɵsanitizeScript', moduleName: CORE };
        Identifiers.sanitizeUrl = { name: 'ɵsanitizeUrl', moduleName: CORE };
        return Identifiers;
    }());
    exports.Identifiers = Identifiers;
});
//# sourceMappingURL=data:application/json;base64,