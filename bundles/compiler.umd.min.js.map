{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","../../../packages/compiler/esm5/src/ml_parser/tags.js","../../../packages/compiler/esm5/src/ml_parser/html_tags.js","../../../packages/compiler/esm5/src/selector.js","../../../packages/compiler/esm5/src/core.js","../../../packages/compiler/esm5/src/util.js","../../../packages/compiler/esm5/src/template_parser/template_ast.js","../../../packages/compiler/esm5/src/config.js","../../../packages/compiler/esm5/src/aot/static_symbol.js","../../../packages/compiler/esm5/src/compile_metadata.js","../../../packages/compiler/esm5/src/ast_path.js","../../../packages/compiler/esm5/src/ml_parser/ast.js","../../../packages/compiler/esm5/src/assertions.js","../../../packages/compiler/esm5/src/ml_parser/interpolation_config.js","../../../packages/compiler/esm5/src/style_url_resolver.js","../../../packages/compiler/esm5/src/template_parser/template_preparser.js","../../../packages/compiler/esm5/src/directive_normalizer.js","../../../packages/compiler/esm5/src/directive_resolver.js","../../../packages/compiler/esm5/src/chars.js","../../../packages/compiler/esm5/src/expression_parser/lexer.js","../../../packages/compiler/esm5/src/expression_parser/ast.js","../../../packages/compiler/esm5/src/expression_parser/parser.js","../../../packages/compiler/esm5/src/parse_util.js","../../../packages/compiler/esm5/src/ml_parser/lexer.js","../../../packages/compiler/esm5/src/ml_parser/parser.js","../../../packages/compiler/esm5/src/i18n/digest.js","../../../packages/compiler/esm5/src/i18n/i18n_ast.js","../../../packages/compiler/esm5/src/i18n/serializers/placeholder.js","../../../packages/compiler/esm5/src/i18n/i18n_parser.js","../../../packages/compiler/esm5/src/i18n/parse_util.js","../../../packages/compiler/esm5/src/i18n/extractor_merger.js","../../../packages/compiler/esm5/src/ml_parser/xml_tags.js","../../../packages/compiler/esm5/src/ml_parser/xml_parser.js","../../../packages/compiler/esm5/src/i18n/serializers/serializer.js","../../../packages/compiler/esm5/src/i18n/serializers/xml_helper.js","../../../packages/compiler/esm5/src/i18n/serializers/xliff.js","../../../packages/compiler/esm5/src/i18n/serializers/xliff2.js","../../../packages/compiler/esm5/src/i18n/serializers/xmb.js","../../../packages/compiler/esm5/src/i18n/serializers/xtb.js","../../../packages/compiler/esm5/src/ml_parser/html_parser.js","../../../packages/compiler/esm5/src/i18n/translation_bundle.js","../../../packages/compiler/esm5/src/i18n/i18n_html_parser.js","../../../packages/compiler/esm5/src/identifiers.js","../../../packages/compiler/esm5/src/output/output_ast.js","../../../packages/compiler/esm5/src/output/value_util.js","../../../packages/compiler/esm5/src/injectable_compiler.js","../../../packages/compiler/esm5/src/aot/util.js","../../../packages/compiler/esm5/src/lifecycle_reflector.js","../../../packages/compiler/esm5/src/metadata_resolver.js","../../../packages/compiler/esm5/src/provider_analyzer.js","../../../packages/compiler/esm5/src/view_compiler/provider_compiler.js","../../../packages/compiler/esm5/src/ng_module_compiler.js","../../../packages/compiler/esm5/src/ng_module_resolver.js","../../../packages/compiler/esm5/src/output/source_map.js","../../../packages/compiler/esm5/src/output/abstract_emitter.js","../../../packages/compiler/esm5/src/output/ts_emitter.js","../../../packages/compiler/esm5/src/pipe_resolver.js","../../../packages/compiler/esm5/src/schema/dom_security_schema.js","../../../packages/compiler/esm5/src/schema/dom_element_schema_registry.js","../../../packages/compiler/esm5/src/shadow_css.js","../../../packages/compiler/esm5/src/style_compiler.js","../../../packages/compiler/esm5/src/ml_parser/html_whitespaces.js","../../../packages/compiler/esm5/src/ml_parser/icu_ast_expander.js","../../../packages/compiler/esm5/src/template_parser/binding_parser.js","../../../packages/compiler/esm5/src/template_parser/template_parser.js","../../../packages/compiler/esm5/src/compiler_util/expression_converter.js","../../../packages/compiler/esm5/src/view_compiler/type_check_compiler.js","../../../packages/compiler/esm5/src/view_compiler/view_compiler.js","../../../packages/compiler/esm5/src/constant_pool.js","../../../packages/compiler/esm5/src/i18n/message_bundle.js","../../../packages/compiler/esm5/src/render3/r3_identifiers.js","../../../packages/compiler/esm5/src/render3/r3_module_compiler.js","../../../packages/compiler/esm5/src/output/map_util.js","../../../packages/compiler/esm5/src/render3/r3_ast.js","../../../packages/compiler/esm5/src/render3/r3_view_compiler_local.js","../../../packages/compiler/esm5/src/render3/r3_template_transform.js","../../../packages/compiler/esm5/src/aot/generated_file.js","../../../packages/compiler/esm5/src/aot/lazy_routes.js","../../../packages/compiler/esm5/src/aot/static_symbol_resolver.js","../../../packages/compiler/esm5/src/aot/summary_serializer.js","../../../packages/compiler/esm5/src/aot/compiler.js","../../../packages/compiler/esm5/src/render3/r3_pipe_compiler.js","../../../packages/compiler/esm5/src/aot/formatted_error.js","../../../packages/compiler/esm5/src/aot/static_reflector.js","../../../packages/compiler/esm5/src/aot/summary_resolver.js","../../../packages/compiler/esm5/src/aot/compiler_factory.js","../../../packages/compiler/esm5/src/summary_resolver.js","../../../packages/compiler/esm5/src/output/output_interpreter.js","../../../packages/compiler/esm5/src/output/output_jit.js","../../../packages/compiler/esm5/src/output/abstract_js_emitter.js","../../../packages/compiler/esm5/src/jit/compiler.js","../../../packages/compiler/esm5/src/url_resolver.js","../../../packages/compiler/esm5/src/resource_loader.js","../../../packages/compiler/esm5/src/i18n/extractor.js"],"names":["exports","module","factory","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","this","constructor","create","prototype","__assign","assign","t","s","i","n","arguments","length","TagContentType","RAW_TEXT","ESCAPABLE_RAW_TEXT","splitNsName","elementName","colonIndex","indexOf","NAMED_ENTITIES","Aacute","aacute","Acirc","acirc","acute","AElig","aelig","Agrave","agrave","alefsym","Alpha","alpha","amp","and","ang","apos","Aring","aring","asymp","Atilde","atilde","Auml","auml","bdquo","Beta","beta","brvbar","bull","cap","Ccedil","ccedil","cedil","cent","Chi","chi","circ","clubs","cong","copy","crarr","cup","curren","dagger","Dagger","darr","dArr","deg","Delta","delta","diams","divide","Eacute","eacute","Ecirc","ecirc","Egrave","egrave","empty","emsp","ensp","Epsilon","epsilon","equiv","Eta","eta","ETH","eth","Euml","euml","euro","exist","fnof","forall","frac12","frac14","frac34","frasl","Gamma","gamma","ge","gt","harr","hArr","hearts","hellip","Iacute","iacute","Icirc","icirc","iexcl","Igrave","igrave","image","infin","int","Iota","iota","iquest","isin","Iuml","iuml","Kappa","kappa","Lambda","lambda","lang","laquo","larr","lArr","lceil","ldquo","le","lfloor","lowast","loz","lrm","lsaquo","lsquo","lt","macr","mdash","micro","middot","minus","Mu","mu","nabla","nbsp","ndash","ne","ni","not","notin","nsub","Ntilde","ntilde","Nu","nu","Oacute","oacute","Ocirc","ocirc","OElig","oelig","Ograve","ograve","oline","Omega","omega","Omicron","omicron","oplus","or","ordf","ordm","Oslash","oslash","Otilde","otilde","otimes","Ouml","ouml","para","permil","perp","Phi","phi","Pi","pi","piv","plusmn","pound","prime","Prime","prod","prop","Psi","psi","quot","radic","rang","raquo","rarr","rArr","rceil","rdquo","real","reg","rfloor","Rho","rho","rlm","rsaquo","rsquo","sbquo","Scaron","scaron","sdot","sect","shy","Sigma","sigma","sigmaf","sim","spades","sub","sube","sum","sup","sup1","sup2","sup3","supe","szlig","Tau","tau","there4","Theta","theta","thetasym","thinsp","THORN","thorn","tilde","times","trade","Uacute","uacute","uarr","uArr","Ucirc","ucirc","Ugrave","ugrave","uml","upsih","Upsilon","upsilon","Uuml","uuml","weierp","Xi","xi","Yacute","yacute","yen","yuml","Yuml","zwj","zwnj","HtmlTagDefinition","_a","_b","closedByChildren","requiredParents","implicitNamespacePrefix","_c","contentType","PARSABLE_DATA","_d","closedByParent","_e","isVoid","_f","ignoreFirstLf","_this","canSelfClose","forEach","tagName","parentToAdd","requireExtraParent","currentParent","isClosedByChild","TAG_DEFINITIONS","base","meta","area","embed","link","img","input","param","hr","tr","td","th","col","svg","math","li","dt","dd","rb","rt","rtc","rp","optgroup","option","pre","listing","style","_DEFAULT_TAG_DEFINITION","_SELECTOR_REGEXP","RegExp","parse","match","results","_addResult","res","cssSel","notSelectors","element","classNames","attrs","push","cssSelector","CssSelector","current","inNot","lastIndex","exec","selector","Error","setElement","addClassName","addAttribute","isElementSelector","getMatchingElementTemplate","classAttr","join","getAttrs","result","toString","klass","name_1","value","SelectorMatcher","_elementMap","Map","_elementPartialMap","_classMap","createNotMatcher","addSelectables","cssSelectors","callbackCtxt","listContext","SelectorListContext","_listContexts","matcher","selectable","SelectorContext","isTerminal","_addTerminal","_addPartial","className","_classPartialMap","name_2","terminalMap","_attrValueMap","terminalValuesMap","get","set","partialMap","_attrValuePartialMap","partialValuesMap","map","name","terminalList","matchedCallback","alreadyMatched","_matchTerminal","_matchPartial","name_3","selectables","starSelectables","concat","nestedSelector","selectors","cbContext","finalize","callback","createInject","makeMetadataFactory","token","createInjectionToken","desc","_desc","ngInjectableDef","undefined","createAttribute","attributeName","createContentChildren","data","tslib_1.__assign","first","isViewQuery","descendants","createContentChild","createViewChildren","dir","ViewEncapsulation","Emulated","Native","None","ChangeDetectionStrategy","OnPush","Default","changeDetection","c","createPipe","pure","createInput","bindingPropertyName","createOutput","createHostBinding","hostPropertyName","createHostListener","eventName","args","injectable","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","createSelf","createSkipSelf","createHost","Type","Function","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","MissingTranslationStrategy","Warning","props","_i","values","apply","ngMetadataName","Ignore","parserSelectorToR3Selector","positive","parserSelectorToSimpleSelector","classes","TypeElement","TypeText","ProjectedTemplate","CatRenderNode","TypeNgContent","TypePipe","TypePureArray","TypePureObject","TypePurePipe","CatPureExpression","TypeValueProvider","TypeClassProvider","TypeFactoryProvider","TypeUseExistingProvider","LazyProvider","PrivateProvider","TypeDirective","Component","CatProviderNoDirective","CatProvider","OnInit","OnDestroy","DoCheck","OnChanges","AfterContentInit","AfterContentChecked","AfterViewInit","AfterViewChecked","EmbeddedViews","ComponentView","TypeContentQuery","StaticQuery","DynamicQuery","CatQuery","Types","Optional","Self","SkipSelf","Inline","Dynamic","TypeElementAttribute","TypeElementClass","TypeProperty","SyntheticProperty","CatSyntheticProperty","First","All","ElementRef","TemplateRef","ViewContainerRef","Provider","ATTRIBUTE","DASH_CASE_REGEXP","_splitAt","character","defaultValues","visitValue","visitor","context","isArray","visitArray","visitStringMap","ValueTransformer","visitPrimitive","visitOther","isPromise","syntaxError","msg","parseErrors","error","ERROR_SYNTAX_ERROR","ERROR_PARSE_ERRORS","STRING_MAP_PROTO","getPrototypeOf","encoded","index","str","codePoint","charCodeAt","low","String","fromCharCode","stringify","overriddenName","resolveForwardRef","type","obj","then","full","splits","split","major","TextAst","visit","BoundTextAst","AttrAst","Class","Style","Animation","PropertyBindingType","Property","Attribute","BoundPropertyMapping","BoundElementPropertyAst","securityContext","unit","sourceSpan","fromBoundProperty","BoundEventAst","target","phase","handler","fromParsedEvent","ReferenceAst","originalValue","fromParsedVariable","VariableAst","ElementAst","inputs","outputs","references","directives","providers","hasViewContainer","queryMatches","children","ngContentIndex","endSourceSpan","EmbeddedTemplateAst","variables","BoundDirectivePropertyAst","directiveName","templateName","DirectiveAst","directive","hostProperties","hostEvents","contentQueryStartId","ProviderAst","multiProvider","eager","providerType","lifecycleHooks","isModule","ProviderAstType","PublicService","PrivateService","Directive","Builtin","NgContentAst","NullTemplateVisitor","visitNgContent","visitEmbeddedTemplate","visitElement","visitReference","visitVariable","visitEvent","visitElementProperty","visitAttr","visitBoundText","visitText","visitDirective","visitDirectiveProperty","RecursiveTemplateAstVisitor","ast","visitChildren","templateVisitAll","asts","astResult","defaultEncapsulation","useJit","jitDevMode","missingTranslation","preserveWhitespaces","strictInjectionParameters","members","assertNoMembers","declarationFile","key","cache","StaticSymbol","HOST_REG_EXP","_anonymousTypeIndex","identifierName","compileIdentifier","reference","ref","identifier","CompileSummaryKind","Pipe","NgModule","Injectable","tokenReference","moduleUrl","styles","styleUrls","CompileTemplateMetadata","encapsulation","template","templateUrl","htmlAst","externalStylesheets","animations","ngContentSelectors","interpolation","isInline","_normalizeArray","flatten","toSummary","CompileDirectiveMetadata","isHost","isComponent","exportAs","hostListeners","hostAttributes","viewProviders","queries","guards","viewQueries","entryComponents","componentViewType","rendererType","componentFactory","host","keys","matches","inputsMap","bindConfig","parts","splitAtColon","outputsMap","summaryKind","CompilePipeMetadata","CompileNgModuleMetadata","declaredDirectives","exportedDirectives","declaredPipes","exportedPipes","bootstrapComponents","importedModules","exportedModules","schemas","transitiveModule","id","modules","TransitiveCompileNgModuleMetadata","directivesSet","Set","exportedDirectivesSet","pipesSet","pipes","exportedPipesSet","modulesSet","addProvider","addDirective","addExportedDirective","addPipe","addExportedPipe","addModule","addEntryComponent","ec","entryComponentsSet","has","componentType","add","useClass","useValue","useExisting","useFactory","deps","multi","list","url","compMeta","filePath","ngModuleType","AstPath","path","position","defineProperty","parentOf","ctor","pop","Text","Expansion","switchValue","cases","switchValueSourceSpan","visitExpansion","ExpansionCase","expression","valueSourceSpan","expSourceSpan","visitExpansionCase","valueSpan","visitAttribute","Element","startSourceSpan","Comment","visitAll","nodes","RecursiveVisitor","visitComment","assertArrayOfStrings","INTERPOLATION_BLACKLIST_REGEXPS","assertInterpolationSymbols","start_1","end_1","regexp","test","fromArray","markers","DEFAULT_INTERPOLATION_CONFIG","StyleWithImports","isStyleUrlResolvable","NG_CONTENT_SELECT_ATTR","LINK_ELEMENT","LINK_STYLE_REL_ATTR","LINK_STYLE_HREF_ATTR","NG_PROJECT_AS","preparseElement","selectAttr","hrefAttr","relAttr","nonBindable","projectAs","attr","lcAttrName","toLowerCase","NG_NON_BINDABLE_ATTR","normalizeNgContentSelect","nodeName","PreparsedElementType","OTHER","isNgContent","NG_CONTENT","STYLE_ELEMENT","SCRIPT_ELEMENT","STYLESHEET","PreparsedElement","DirectiveNormalizer","_resourceLoader","_urlResolver","_htmlParser","_config","_resourceLoaderCache","clear","clearCacheFor","normalizedDirective","_fetch","normalizeTemplate","prenormData","isDefined","_preParseTemplate","prenomData","templateAbsUrl","interpolationConfig","InterpolationConfig","rootNodesAndErrors","templateSourceUrl","errors","templateMetadataStyles","_normalizeStylesheet","CompileStylesheetMetadata","TemplatePreparseVisitor","rootNodes","templateStyles","_normalizeTemplateMetadata","preparsedTemplate","slice","_inlineStyles","inlineStyleUrls","stylesheets","styleUrl","stylesheet","targetStyles","_loadMissingExternalStylesheets","loadedStylesheets","SyncAsync","filter","loadedStyle","allStyleUrls","resolve","allStyles","resolver","baseUrl","foundUrls","modifiedCssText","styleWithImports","replace","CSS_STRIPPABLE_COMMENT_REGEXP","CSS_IMPORT_REGEXP","m","preparsedElement","ngNonBindableStackCount","textContent_1","child","QUERY_METADATA_IDENTIFIERS","createViewChild","isDirective","DirectiveResolver","throwIfNotFound","typeMetadata","_reflector","annotations","metadata","findLast","isDirectiveMetadata","propertyMetadata","propMetadata","_mergeWithPropertyMetadata","dm","directiveType","propName","a","isTypeOf","output","hostBinding","startWith","hostListener","query","some","def","trim","_dedupeBindings","bindings","names","publicNames","reversedResult","binding","_extractPublicName","mergedInputs","mergedOutputs","mergedHost","mergedQueries","comp","createComponent","moduleId","createDirective","arr","condition","$EOF","$TAB","$LF","$VTAB","$FF","$CR","$SPACE","$DQ","$$","$SQ","$PLUS","$MINUS","$SLASH","$SEMICOLON","$EQ","$GT","$0","$9","$A","$E","$F","$Z","$_","$a","$e","$f","$n","$r","$t","$v","$BT","TokenType","Character","Identifier","Keyword","Operator","Number","tokenize","text","scanner","_Scanner","tokens","scanToken","Lexer","Token","numValue","strValue","isCharacter","code","isOperator","operater","isKeywordUndefined","advance","peek","chars.isDigit","isIdentifierStart","chars.$PERIOD","scanIdentifier","start","chars.$LBRACE","chars.$RBRACE","scanNumber","chars.$LBRACKET","chars.$COLON","chars.$HASH","scanCharacter","chars.$MINUS","chars.$STAR","scanString","chars.$CARET","scanOperator","scanComplexOperator","chars.$AMPERSAND","$NBSP","isWhitespace","one","twoCode","two","threeCode","three","newOperatorToken","isIdentifierPart","simple","isDigit","isExponentSign","parseInt","quote","buffer","marker","substring","unescapedCode","hex","unescape","message","offset","isIdentifier","errLocation","ctxLocation","ParseSpan","end","AST","_super","Quote","span","prefix","uninterpretedExpression","location","call","visitQuote","EmptyExpr","ImplicitReceiver","Chain","tslib_1.__extends","visitChain","Conditional","trueExp","falseExp","visitConditional","PropertyRead","receiver","visitPropertyRead","PropertyWrite","visitPropertyWrite","SafePropertyRead","visitSafePropertyRead","KeyedRead","visitKeyedRead","KeyedWrite","visitKeyedWrite","BindingPipe","exp","visitPipe","LiteralPrimitive","visitLiteralPrimitive","LiteralArray","visitLiteralArray","LiteralMap","visitLiteralMap","Interpolation","strings","expressions","visitInterpolation","Binary","operation","left","right","visitBinary","PrefixNot","visitPrefixNot","NonNullAssert","visitNonNullAssert","MethodCall","visitMethodCall","SafeMethodCall","visitSafeMethodCall","FunctionCall","visitFunctionCall","ASTWithSource","source","keyIsVar","NullAstVisitor","visitImplicitReceiver","RecursiveAstVisitor","AstTransformer","AstMemoryEfficientTransformer","modified","original","isAnimation","ParsedPropertyType","ANIMATION","DEFAULT","LITERAL_ATTR","targetOrPhase","offsets","templateBindings","warnings","_createInterpolateRegExp","config","pattern","escapeRegExp","_checkNoInterpolation","sourceToLex","_stripComments","_parseBindingAst","SimpleExpressionChecker","check","_parseQuote","Parser","prefixSeparatorIndex","splitInterpolation","expressionText","_lexer","_ParseAST","part","_reportError","_findInterpolationErrorColumn","wrapLiteralPrimitive","_commentStart","outerQuote","char","nextChar","isQuote","partInErrIdx","j","inputLength","parseAction","next","optionalCharacter","isKeywordAs","expectCharacter","optionalOperator","op","expectOperator","operator","expectIdentifierOrKeyword","isKeyword","expectIdentifierOrKeywordOrString","isString","parseChain","exprs","inputIndex","expr","parsePipe","parseExpression","parseConditional","parseLogicalOr","yes","no","parseLogicalAnd","parseEquality","parseRelational","parseAdditive","parseMultiplicative","parsePrefix","parseCallChain","parsePrimary","parseAccessMemberOrMethodCall","rbracketsExpected","rparensExpected","parseCallArguments","chars.$RPAREN","isKeywordNull","isKeywordTrue","isKeywordFalse","isKeywordThis","elements","parseExpressionList","$LBRACE","parseLiteralMap","isNumber","toNumber","literalValue","terminator","rbracesExpected","quoted","chars.$COMMA","isSafe","positionals","expectTemplateBindingKey","operatorFound","parseTemplateBindings","tplKey","firstBinding","rawKey","isVar","peekKeywordLet","toUpperCase","peekKeywordAs","EOF","TemplateBinding","letStart","chars.$SEMICOLON","letName","locationText","skip","isError","ParserError","ParseLocation","file","line","moveBy","content","len","ch","priorLine","substr","lastIndexOf","getContext","maxLines","startOffset","endOffset","ctxChars","ctxLines","maxChars","before","after","ParseSourceFile","ParseSourceSpan","details","ParseErrorLevel","WARNING","ERROR","ParseError","level","contextualMessage","typeSourceSpan","kind","identifierModuleUrl","TokenType$1","TAG_OPEN_START","TAG_OPEN_END","TAG_OPEN_END_VOID","TAG_CLOSE","TEXT","COMMENT_START","COMMENT_END","CDATA_START","CDATA_END","ATTR_NAME","ATTR_VALUE","DOC_TYPE","EXPANSION_FORM_START","EXPANSION_CASE_VALUE","EXPANSION_CASE_EXP_START","EXPANSION_CASE_EXP_END","EXPANSION_FORM_END","TokenError","errorMsg","tokenType","TokenizeResult","_CR_OR_CRLF_REGEXP","_unknownEntityErrorMsg","entitySrc","_ControlFlowError","_Tokenizer","_file","_getTagDefinition","_tokenizeIcu","_interpolationConfig","_peek","_nextPeek","_index","_line","_column","_expansionCaseStack","_inInterpolation","_getLocation","_attemptCharCode","_consumeCdata","_consumeComment","_consumeDocType","_consumeTagClose","_consumeTagOpen","_tokenizeExpansionForm","_consumeText","e","srcTokens","dstTokens","lastDstToken","isExpansionFormStart","_input","_consumeExpansionFormStart","_isInExpansionForm","_consumeExpansionCaseStart","_isInExpansionCase","_consumeExpansionCaseEnd","_consumeExpansionFormEnd","_getSpan","_beginToken","_endToken","Token$1","_currentTokenType","_currentTokenStart","_createError","_advance","_length","_unexpectedCharacterErrorMsg","charCode","_attemptCharCodeCaseInsensitive","_requireCharCode","_attemptStr","chars","initialPosition","_savePosition","_restorePosition","_attemptStrCaseInsensitive","_requireStr","_attemptCharCodeUntilFn","_requireCharCodeUntilFn","predicate","_attemptUntilChar","_readChar","decodeEntities","_decodeEntity","startPosition","isNamedEntityEnd","isHex","numberStart","isDigitEntityEnd","strNum","entity","firstCharOfEnd","attemptEndRest","tagCloseStart","textStart","_consumePrefixAndName","nameStart","nameOrPrefixStart","lowercaseTagName","savedPos","isAsciiLetter","_consumeTagOpenStart","isNotWhitespace","_consumeAttributeName","_consumeAttributeValue","_consumeTagOpenEnd","contentTokenType","_consumeRawTextWithTagClose","textToken","_consumeRawText","prefixAndName","quoteChar","valueStart","_processCarriageReturns","_readUntil","_isTextEnd","nbTokens","TreeError","ParseTreeResult","parseExpansionForms","tokensAndErrors","getTagDefinition","tokenizeExpansionForms","treeAndErrors","_TreeBuilder","build","_consumeStartTag","lex.TokenType","_consumeEndTag","_closeVoidElement","_consumeExpansion","_rootNodes","_errors","prev","_advanceIf","expCase","html.Expansion","parsedExp","html.ExpansionCase","_collectExpansionExpTokens","expansionFormStack","lastOnStack","parent_1","_getParentElement","startTagToken","fullName","_getElementFullName","selfClosing","tagDef","getNsPrefix","el","_pushElement","parentEl","_elementStack","_getParentElementSkippingContainers","parent","container","newParent","endTagToken","_popElement","stackIndex","splice","_consumeAttr","attrName","mergeNsAndName","valueToken","Attribute$1","isNgContainer","_addToParent","node","localName","parentElement","utf8","utf8Encode","words32","endian","stringToWords32","Endian","Big","w","h0","h1","h2","h3","h4","rol32","fk","f","k","temp","reduce","add32","decimalDigest","meaning","fingerprint","hi","lo","him","lom","ah","al","count","decimal","toThePower","_SerializerVisitor","visitContainer","visitIcu","visitTagPlaceholder","ph","visitPlaceholder","visitIcuPlaceholder","serializerVisitor","_SerializerIgnoreIcuExpVisitor","icu","strCases","hash32","mix","wordAt","Little","sub32","word","byteAt","addBigInt","x","y","Math","max","carry","tmpSum","num","product","bToThePower","placeholders","placeholderToMessage","description","startLine","startCol","endLine","endCol","Container","Icu","TagPlaceholder","tag","startName","closeName","Placeholder","IcuPlaceholder","CloneVisitor","RecurseVisitor","TAG_TO_PLACEHOLDER_NAMES","A","B","BR","EM","H1","H2","H3","H4","H5","H6","HR","I","LI","LINK","OL","P","Q","S","SMALL","SUB","SUP","TBODY","TD","TFOOT","TH","THEAD","signature","_hashTag","_signatureToName","upperTag","getCloseTagPlaceholderName","_hashClosingTag","PlaceholderRegistry","getPlaceholderName","upperName","getUniquePlaceholder","_generateUniqueName","_placeHolderNameCounts","_isIcu","html.visitAll","_icuDepth","i18n.Message","_placeholderRegistry","_I18nVisitor","getHtmlTagDefinition","startPhName","getStartTagPlaceholderName","_placeholderToContent","i18n.TagPlaceholder","i18nIcuCases","i18nIcu","_visitTextWithInterpolation","Text$1","sDelimiter","eDelimiter","i18n.Text","baseName","i18n.Placeholder","phName","lastStringIdx","_CUSTOM_PH_EXP","I18nError","__extends","_I18N_ATTR","ExtractionResult","messages","_VisitorMode","_init","Extract","translations","Merge","_translations","translatedNode","_Visitor","icuCase","wasInIcu","_inIcu","_isInTranslatableSection","_addMessage","_mode","comment","isOpening","isClosing","_isClosingComment","_inI18nBlock","_depth","_blockStartDepth","_closeTranslatableSection","_blockChildren","_blockMeaningAndDesc","_translateMessage","i18nCommentsWarned","console","warn","_I18N_COMMENT_PREFIX_REGEXP","_openTranslatableSection","_mayBeAddBlockChildren","childNodes","translatedChildNodes","i18nAttr","i18nMeta","isImplicit","_implicitTags","isTopLevelImplicit","wasInImplicitNode","_inI18nNode","isTranslatable","visited","_visitAttributesOf","wasInI18nNode","_inImplicitNode","mode","_msgCountAtSectionStart","_expParser","toI18nMessage","explicitAttrNameToValue","implicitAttrNames","_implicitAttrs","startsWith","msgMeta","_translateAttributes","attributes","i18nParsedMessageMeta","_parseMessageMeta","translatedAttributes","html.Attribute","_createI18nMessage","html.Text","digest","directChildren","startIndex","_messages","i18n","idIndex","ID_SEPARATOR","descIndex","MEANING_SEPARATOR","meaningAndDesc","_TAG_DEFINITION","XmlTagDefinition","Serializer","createNameMapper","SimplePlaceholderMapper","mapName","internalToPublic","toPublicName","toInternalName","visitPlaceholderName","internalName","publicName","publicToInternal","nextId","publicToNextId","_visitor","visitTag","strAttrs","_serializeAttributes","visitDeclaration","visitDoctype","doctype","Declaration","unescapedAttrs","Doctype","Tag","CR","ws","_ESCAPED_CHARS","Xliff","write","locale","_WriteVisitor","transUnits","contextTags","sources","contextGroupTag","xml.CR","purpose","context-type","Text$2","transUnit","datatype","serialize","xml.Text","priority","from","xml.Tag","body","source-language","xml.Declaration","load","XliffParser","msgIdToHtml","i18nNodesByMsgId","converter","XmlToI18n","msgId","convert","i18nNodes","expressionPlaceholder","ctype","getCtypeForTag","equiv-text","ml.visitAll","_unitMlString","_msgIdToHtml","xml","XmlParser","xliff","idAttr","find","_addError","innerTextStart","innerTextEnd","innerText","localeAttr","xmlIcu","nameAttr","i18n.Icu","caseMap","Xliff2","_WriteVisitor$1","units","notes","category","segment","_VERSION","_XMLNS","xml.serialize","_MARKER_TAG","Xliff2Parser","XmlToI18n$1","getTypeForTag","_nextPlaceholderId","disp","tagPc","equivStart","equivEnd","dispStart","dispEnd","idStr","_SOURCE_TAG","_locale","versionAttr","version","startAttr","endAttr","_PLACEHOLDER_TAG","startId","endId","Xmb","exampleVisitor","ExampleVisitor","_Visitor$2","rootNode","sourceTags","encoding","digest$1","startEx","startTagPh","addDefaultExamples","exText","decl","Xtb","XmlToI18n$2","valueFn","enumerable","_","createLazyProperty","XtbParser","xtb","_bundleDepth","langAttr","TranslationBundle","_i18nNodesByMsgId","mapperFactory","missingTranslationStrategy","serializer","srcMsg","html","_i18nToHtml","I18nToHtmlVisitor","_digest","_mapperFactory","_missingTranslationStrategy","_console","_contextStack","_convertToText","HtmlParser","_mapper","_srcMsg","mapper","ctx","I18NHtmlParser","translationsFormat","format","createSerializer","_translationBundle","parseResult","implicitTags","implicitAttrs","merge","Identifiers","ANALYZE_FOR_ENTRY_COMPONENTS","moduleName","CORE","NgModuleRef","ChangeDetectorRef","QueryList","CodegenComponentFactoryResolver","ComponentFactoryResolver","ComponentFactory","ComponentRef","NgModuleFactory","createModuleFactory","moduleDef","moduleProviderDef","RegisterModuleFactoryFn","inject","INJECTOR","Injector","defineInjectable","LOCALE_ID","TRANSLATIONS_FORMAT","inlineInterpolate","interpolate","EMPTY_ARRAY","EMPTY_MAP","Renderer","viewDef","elementDef","anchorDef","textDef","directiveDef","providerDef","queryDef","pureArrayDef","pureObjectDef","purePipeDef","nodeValue","ngContentDef","unwrapValue","createRendererType2","RendererType2","ViewDefinition","TypeModifier","Const","modifiers","hasModifier","modifier","BuiltinTypeName","Bool","Int","Inferred","BuiltinType","visitType","visitBuiltinType","ExpressionType","visitExpressionType","ArrayType","of","visitArrayType","MapType","valueType","visitMapType","Type$1","DYNAMIC_TYPE","INFERRED_TYPE","BinaryOperator","Equals","NotEquals","Identical","NotIdentical","Minus","Plus","Divide","Multiply","Modulo","And","Or","BitwiseAnd","Lower","LowerEquals","Bigger","BiggerEquals","nullSafeIsEquivalent","other","areAllEquivalent","isEquivalent","Expression","callFn","equals","notEquals","identical","notIdentical","plus","multiply","modulo","lower","lowerEquals","bigger","biggerEquals","cast","CastExpr","toStmt","ExpressionStatement","BuiltinVar","This","Super","CatchError","CatchStack","ReadVarExpr","builtin","visitExpression","WriteVarExpr","toDeclStmt","DeclareVarStmt","WriteKeyExpr","visitWriteKeyExpr","WritePropExpr","visitWritePropExpr","BuiltinMethod","ConcatArray","SubscribeObservable","Bind","InvokeMethodExpr","method","visitInvokeMethodExpr","InvokeFunctionExpr","fn","visitInvokeFunctionExpr","InstantiateExpr","classExpr","visitInstantiateExpr","LiteralExpr","visitLiteralExpr","ExternalExpr","typeParams","runtime","visitExternalExpr","ConditionalExpr","trueCase","falseCase","visitConditionalExpr","NotExpr","visitNotExpr","AssertNotNull","visitAssertNotNullExpr","visitCastExpr","FnParam","FunctionExpr","params","statements","DeclareFunctionStmt","BinaryOperatorExpr","lhs","rhs","parens","visitBinaryOperatorExpr","ReadPropExpr","ReadKeyExpr","LiteralArrayExpr","entries","every","isConstant","visitLiteralArrayExpr","LiteralMapEntry","LiteralMapExpr","visitLiteralMapExpr","CommaExpr","NULL_EXPR","TYPED_NULL_EXPR","StmtModifier","Final","Private","Exported","Static","Statement","visitStatement","visitDeclareVarStmt","visitDeclareFunctionStmt","visitExpressionStmt","ReturnStatement","visitReturnStmt","AbstractClassPart","ClassField","initializer","ClassMethod","ClassGetter","ClassStmt","fields","getters","constructorMethod","methods","stmt","visitDeclareClassStmt","IfStmt","visitIfStmt","CommentStmt","multiline","visitCommentStmt","JSDocCommentStmt","tags","visitJSDocCommentStmt","out","tags_1","tagToString","serializeTags","TryCatchStmt","bodyStmts","catchStmts","visitTryCatchStmt","ThrowStmt","transformExpr","transformStmt","visitReadVarExpr","visitWriteVarExpr","visitFunctionExpr","visitReadPropExpr","visitReadKeyExpr","entry","visitCommaExpr","visitAllExpressions","getter","visitAllStatements","ctorMethod","visitThrowStmt","stmts","findReadVarNames","_ReadVarVisitor","varNames","RecursiveAstVisitor$1","_FindExternalReferencesVisitor","applySourceSpanToStatementIfNeeded","applySourceSpanToExpressionIfNeeded","transformer","_ApplySourceSpanTransformer","_clone","clone","convertValueToOutputAst","_ValueOutputAstTransformer","o.LiteralMapExpr","quotedSet","o.literal","mapEntry","InjectableCompiler","depsArray","dep","o.importExpr","flags","v","literal","tokenInjector","importExpr","factoryFor","retValue","clazz","symbol","injectableDef","providedIn","compile","o.ClassMethod","alwaysGenerateDef","splitTypescriptSuffix","forceSourceFile","endsWith","lastDot","LOWERED_SYMBOL","LifecycleHooks","hook","CompileMetadataResolver","_ngModuleResolver","_directiveResolver","_pipeResolver","_summaryResolver","_schemaRegistry","_directiveNormalizer","_staticSymbolCache","_errorCollector","_nonNormalizedDirectiveCache","_directiveCache","_summaryCache","_shallowModuleCache","dirMeta","delete","_pipeCache","_ngModuleOfTypes","clearCache","_createProxyClass","baseType","delegate","proxyClass","setDelegate","getGeneratedClass","dirType","ngfactoryFilePath","getComponentViewClass","getHostComponentViewClass","cpl.identifierName","getRendererType","rendererTypeName","hostView","initComponentFactory","_loadSummary","typeSummary","summary","resolveSummary","getHostComponentMetadata","hostViewType","hostType","cpl.CompileTemplateMetadata","diDeps","isSync","getNonNormalizedDirectiveMetadata","annotation","createDirectiveMetadata","templateMetadata","normalizedDirMeta","templateMeta","componentModuleUrl","cacheEntry","nonNormalizedTemplateMetadata","noUndefined","entryComponentMetadata","_getProvidersMetadata","stringifyType","flattenAndDedupeArray","_getEntryComponentMetadata","getDefaultComponentElementName","_getQueriesMetadata","_getTypeMetadata","changeDetectionStrategy","getComponentFactory","getDirectiveSummary","dirSummary","isPipe","isNgModule","getNgModuleSummary","moduleType","alreadyCollecting","moduleSummary","moduleMeta","getNgModuleMetadata","ngModule","loading","promise","loadDirectiveMetadata","getShallowModuleMetadata","compileMeta","ngModuleMeta","shallowAnnotations","createNgModule","rawExports","rawImports","imports","_ngModuleCache","exportedNonModuleIdentifiers","importedType","importedModuleType","isValidType","moduleWithProviders","_checkSelfImport","_getTypeDescriptor","importedModuleSummary","exportedType","exportedModuleSummary","_getTransitiveNgModuleMetadata","declarations","declaredType","declaredIdentifier","_getIdentifierMetadata","_addTypeToModule","exportedId","bootstrap","oldModule","modulesByToken","cpl.tokenReference","modSummary","mod","addedTokens","tokenRef","provider","prevModules","moduleRef","isInjectable","getInjectableSummary","dependencies","throwOnUnknownDeps","ann","createInjectable","_getFactoryMetadata","pipeType","pipeMeta","getPipeSummary","pipeSummary","getOrLoadPipeMetadata","_loadPipeMetadata","pipeAnnotation","typeOrFunc","hasUnknownDeps","dependenciesMetadata","parameters","isAttribute","isSelf","isSkipSelf","isOptional","paramEntry","createOptional","_getTokenMetadata","depsTokens","targetEntryComponents","debugInfo","compileProviders","providerIdx","providerMeta","cpl.ProviderMeta","_validateProvider","ProviderMeta","provide","providersInfo","soFar","seenProvider","seenProviderIdx","resolveExternalReference","_getEntryComponentsFromProvider","getProviderMetadata","targetIdentifiers","components","collectedIdentifiers","_CompileValueConverter","_getInjectableTypeMetadata","compileDeps","compileTypeMetadata","compileFactoryMetadata","propertyName","q","_queryVarBindings","varName","error$$1","otherType","array","tree","item","flattenArray","ProviderError","reflector","component","viewQueryId","_getViewQueries","ProviderElementContext","viewContext","_parent","_isViewRoot","_directiveAsts","refs","isTemplate","_sourceSpan","_transformedProviders","_seenProviders","_queriedTokens","transformedHasViewContainer","_attrs","attrAst","targetErrors","directivesMeta","directiveAst","_allProviders","_resolveProviders","providersByToken","_contentQueries","contentQueryId","contentQueries","directiveIndex","_getContentQueries","_addQueryReadsTo","templateRefId","createTokenForExternalReference","refAst","defaultQueryValue","lazyProviders","eagerProviders","sortedProviderTypes","transformProviders","sortedDirectives","sort","dir1","dir2","allMatches","defaultValue","queryReadTokens","queryValue","read","_getQueriesFor","currentEl","distance","requestingProviderType","resolvedProvider","transformedProviderAst","tokenName","transformedProviders","transformedUseValue","transformedUseExisting","transformedDeps","existingDiDep","_getDependency","_transformProvider","attrValue","isValue","_getOrCreateLocalProvider","currElement","currEager","_getLocalDependency","prevElement","NgModuleProviderAnalyzer","extraProviders","errorString","requestorSourceSpan","targetProvidersByToken","isUseValue","providerAst","lifecycleHook","lifecycleHookToNodeFlag","allDepDefs","allParams","providerIndex","depExprs","convertDeps","instantiate","literalArr","o.variable","depIndex","paramName","multiProviderDef","singleProviderDef","providerExpr","depsExpr","o.NULL_EXPR","depDef","tokenExpr","nodeFlag","o.literalArr","entryComponentFactories","entryComponent","classMeta","NgModuleCompileResult","ngModuleFactoryVar","providerParser","providerDefs","componentFactoryResolverProviderDef","o.FnParam","ngModuleDef","ngModuleDefFactory","LOG_VAR","_createNgModuleFactory","registerFactoryStmt","variable","NgModuleCompiler","createStub","ngModuleFactoryStmt","NgModuleResolver","SourceMapGenerator","addSource","addLine","col0","sourceUrl","sourceLine0","sourceCol0","currentLine","sourcesContent","lastCol0","hasMappings","configurable","toJSON","sourcesIndex","mappings","lastSourceIndex","lastSourceLine0","segments","segAsStr","toBase64VLQ","lastSourceCol0","VERSION","sourceRoot","toJsComment","b64","i1","i2","i3","toBase64Digit","isNaN","digit","B64_DIGITS","CATCH_STACK_VAR$1","indent","partsLength","srcSpans","EmitterVisitorContext","_indent","_lines","_EmittedLine","createRoot","println","print","lastPart","lineLength","newLine","_currentLine","removeEmptyLastLine","incIndent","decIndent","popClass","_classes","toSource","toSourceMapGenerator","genFilePath","startsAtLine","mapFirstOffsetIfNeeded","firstOffsetMapped","addMapping","sourceLines","lineIdx","spans","_INDENT_WITH","spanIdx","sourceLine","sourceCol","spanOf","column","emittedLine","_preambleLineCount","columnsLeft","_createIndent","partIndex","AbstractEmitterVisitor","hasElseCase","lineWasEmpty","lineIsEmpty","getBuiltinMethodName","o.BuiltinVar","CATCH_ERROR_VAR$1","escapeIdentifier","_escapeDollarInStrings","o.BinaryOperator","opStr","visitAllObjects","separator","incrementedIndent","escapeDollar","alwaysQuote","_SINGLE_QUOTE_ESCAPE_STRING_RE","debugOutputAstAsTypeScript","_TsEmitterVisitor","o.Expression","preamble","emitSourceMaps","referenceFilter","importFilter","preambleLines","reexportsCode","reexports","reexport","as","exportedModuleName","importsWithPrefixes","importedModuleName","lines","sm","emitStatementsAndContext","sourceText","TypeScriptEmitter","defaultType","typeExpression","_printColonType","pushClass","field","_visitClassField","_visitClassConstructor","_visitClassGetter","_visitClassMethod","_visitParams","o.BuiltinTypeName","typeStr","o.BuiltinMethod","size","metas","registerContext","specs","spec","specs_1","SECURITY_SCHEMA","SCHEMA","_ATTR_TO_PROP","class","for","formaction","readonly","DomElementSchemaRegistry","_schema","encodedType","strType","properties","typeNames","superName","superType","property","BOOLEAN","NUMBER","OBJECT","STRING","schemaMetas","schema","hasElement","getMappedPropName","validateProperty","validateAttribute","normalizeAnimationStyleProperty","camelCaseProp","userProvidedProp","val","strVal","valAndSuffixMatch","ElementSchemaRegistry","cssText","hostSelector","commentsWithHash","_commentWithHashRe","_insertDirectives","_cssContentNextSelectorRe","_cssContentRuleRe","scopeSelector","unscopedRules","_extractUnscopedRulesFromCssText","_insertPolyfillHostInCssText","_convertColonHost","_convertColonHostContext","_convertShadowDOMSelectors","r","_cssContentUnscopedRuleRe","regExp","partReplacer","_polyfillHostNoCombinator","suffix","_polyfillHost","_colonHostPartReplacer","ruleCallback","inputWithEscapedBlocks","nextBlockIndex","rule","_scopeSelector","strictStyling","inputParts","_curlyRe","resultParts","escapedBlocks","bracketCount","currentBlockParts","CLOSE_CURLY","BLOCK_PLACEHOLDER","OPEN_CURLY","escapeBlocks","escapedString","_ruleRe","contentPrefix","blocks","CssRule","strict","_shadowDeepSelectors","deepParts","otherParts","shallowPart","_selectorNeedsScoping","_applyStrictSelectorScope","_applySelectorScope","ShadowCss","_makeScopeMatcher","replaceBy_1","_polyfillHostNoCombinatorRe","hnc","colon","_scopeSelectorPart","scopedP","_applySimpleSelectorScope","_polyfillHostRe","safeContent","SafeSelector","shouldScope","sep","part_1","scopedSelector","_colonHostContextRe","_polyfillHostContext","_colonHostRe","keep","replaceBy","_content","pseudo","restore","_parenSuffix","_cssColonHostRe","_cssColonHostContextRe","_shadowDOMSelectorsRe","_commentRe","StringWithEscapedBlocks","setValue","outputCtx","stylesVar","isShimmed","StyleCompiler","compileComponent","_compileStyles","needsStyleShim","shim","isComponentStylesheet","styleExpressions","plainStyle","_shimIfNeeded","StylesCompileDependency","getStylesVarName","exprIndex","PRESERVE_WS_ATTR_NAME","SKIP_WS_TRIM_TAGS","WS_REPLACE_REGEXP","WS_CHARS","WhitespaceVisitor","NO_WS_REGEXP","expandNodes","expander","_Expander","ExpansionResult","isExpanded","expanded","ExpansionError","PLURAL_CASES","html.Element","expansionResult","BindingParser","_exprParser","_targetErrors","pipesByName","_usedPipes","createBoundHostProperties","boundProps_1","parsePropertyBinding","elementSelector","createDirectiveHostEventAsts","targetEvents_1","parseEvent","parseInterpolation","sourceInfo","_reportExpressionParserErrors","_checkPipes","tplValue","targetMatchableAttrs","targetProps","targetVars","_parseTemplateBindings","ParsedVariable","_parsePropertyAst","bindingsResult","warning","_parseAnimation","isAnimationProp","isAnimationLabel","isHostBinding","parseSimpleBinding","parseBinding","createBoundElementProperty","boundProp","BoundElementProperty","bindingType","boundPropertyName","securityContexts","_validatePropertyOrAttributeName","calcPossibleSecurityContexts","nsSeparatorIdx","targetEvents","_parseAnimationEvent","_parseAction","ParsedEvent","collector","PipeCollector","pipeName","isAttr","report","registry","ctxs","elementNames","allKnownElementNames","notElementNames","TemplateParseError","templateAst","usedPipes","TemplateParser","transforms","tryParse","htmlParseResult","getInterpolationConfig","htmlAstWithErrors","uniqDirectives","removeSummaryDuplicates","uniqPipes","providerViewContext","ProviderViewContext","bindingParser","parseVisitor","TemplateParseVisitor","EMPTY_ELEMENT_CONTEXT","getUsedPipes","_assertNoReferenceDuplicationOnTemplate","TemplateParseResult","expandHtml","forced","expandedHtmlAst","existingReferences","_bindingParser","_schemas","selectorMatcher","directivesIndex","ngContentCount","t.TextAst","findNgContentIndex","TEXT_CSS_SELECTOR","matchableAttrs","elementOrDirectiveProps","elementOrDirectiveRefs","elementVars","events","templateElementOrDirectiveProps","templateMatchableAttrs","templateElementVars","hasInlineTemplates","isTemplateElement","isNgTemplate","templateValue","templateKey","hasBinding","_parseAttr","normalizedName","_normalizeAttributeName","hasTemplateBinding","parseInlineTemplateBinding","parsedVariables_1","elementCssSelector","createElementCssSelector","elName","_parseDirectives","directiveMetas","matchElement","boundDirectivePropNames","directiveAsts","_createDirectiveAsts","isViewRoot","providerContext","queryStartIndex","NON_BINDABLE_VISITOR","ElementContext","afterElement","parsedElement","projectionSelector","t.NgContentAst","_isEmptyTextNode","_assertNoComponentsNorElementBindingsOnTemplate","elementProps","transformedDirectiveAsts","_assertElementExists","ngContentIndex_1","templateQueryStartIndex","templateSelector","templateBoundDirectivePropNames","t.EmbeddedTemplateAst","templateElementProps","_createElementPropertyAsts","templateDirectiveAsts","templateProviderContext","targetRefs","srcSpan","boundEvents","bindParts","BIND_NAME_REGEXP","_parseVariable","_parseReference","_parseAssignmentEvent","parseLiteralAttr","parsePropertyInterpolation","t.BoundEventAst","hasElementSelector","elementSourceSpan","targetReferences","targetBoundDirectivePropNames","matchedReferences","directiveProperties","createDirectiveHostPropertyAsts","_checkPropertiesInSchema","parsedEvents","elOrDirRef","isReferenceToDirective","createTokenForReference","refToken","boundProps","targetBoundDirectiveProps","prevValue","boundPropsByName_1","isLiteral","dirProp","elProp","t.BoundDirectivePropertyAst","isEmptyExpression","boundElementProps","_findComponentDirectives","_findComponentDirectiveNames","_assertOnlyOneComponent","componentTypeNames","_assertAllEventsPublishedByDirectives","allDirectiveEvents","event","hasProperty","NonBindableVisitor","attrNameAndValues","ElementOrDirectiveRef","splitClasses","classAttrValue","_ngContentIndexMatcher","_wildcardNgContentIndex","wildcardNgContentIndex","ngContentIndices","elNameNoNs","attrNameNoNs","CLASS_ATTR","items","EventHandlerVars","render3Stmts","statement","allowDefault","convertActionBinding","localResolver","implicitReceiver","action","bindingId","interpolationFunction","DefaultLocalResolver","actionWithoutBuiltins","convertPropertyBindingBuiltins","literalMap","o.literalMap","createPipeConverter","_AstToIrVisitor","actionStmts","flattenStatements","arg","_Mode","temporaryCount","unshift","temporaryDeclaration","returnExpr","convertStmtIntoExpression","preventDefaultVar","createPreventDefaultVar","converterFactory","convertBuiltins","ConvertPropertyBindingResult","currValExpr","BindingForm","General","convertPropertyBinding","expressionWithoutBuiltins","form","createCurrValueExpr","outputExpr","TrySimple","convertToStatementIfNeeded","_BuiltinAstConverter","cdAst.AstTransformer","BuiltinFunctionCall","_converterFactory","createLiteralMapConverter","_localResolver","_implicitReceiver","convertedArgs","_visit","leftMostSafe","leftMostSafeNode","convertSafeAccess","o.DYNAMIC_TYPE","varExpr","_getLocal","guardedExpression","needsTemporary","temporary","allocateTemporary","_resultMap","cdAst.SafeMethodCall","isBlank","access","_nodeMap","visitSome","releaseTemporary","_currentTemporary","temporaryName","getLocal","cdAst.FunctionCall","componentId","externalReferenceVars","embeddedViewCount","viewBuilderFactory","embeddedViewIndex","ViewBuilder","options","TypeCheckCompiler","TypeCheckLocalResolver","isHostComponent","refOutputVars","getOutputVar","getTypeGuardExpressions","guard","useIf","targetStatements","viewStmts","bindingCount","updates","o.ExpressionStatement","preprocessUpdateExpression","o.applySourceSpanToStatementIfNeeded","defaultResolver","actions","guardExpression","guardClause","fullTemplateTypeCheck","visitElementOrTemplate","outputVarType","dirAst","inputAst","hostEventAst","currBuilder","varAst","pipeOutputVar","pipe","argCount","callMethod","ViewCompileResult","viewClassVar","rendererTypeVar","staticQueryIds","findStaticQueryIds","dynamicQueryIds","childData","queryId","renderComponentVarName","template_1","customRenderData","o.LiteralMapEntry","renderComponentVar","o.importType","o.StmtModifier","importType","ViewBuilder$1","viewName","ViewCompiler","LOG_VAR$1","CHECK_VAR","astNodes","nodeStaticQueryIds","purePipeNodeIndices","_createPipe","queryIds_1","queryIndex","calcStaticDynamicQueryFlags","nodeFlags","nodeDef","needsAdditionalRootNode","lastAstNode","_createNodeExpressions","updateRendererStmts","updateDirectivesStmts","nodeDefExprs","updateRendererFn","_createUpdateFn","updateDirectivesFn","o.DeclareFunctionStmt","viewFlags","viewFactory","updateFn","updateStmts","o.fn","preStmts","o.INFERRED_TYPE","COMP_VAR","VIEW_VAR","compType","nodeIndex","updateRendererExpressions","inter","bindingIndex","_preprocessUpdateExpression","checkIndex","childCount","queryMatchesExpr","_createElementHandleEventFn","_visitElementOrTemplate","usedEvents","dirHostBindings","hostBindings","inputDefs","outputDefs","elementBindingDef","compAst","compRendererType","compView","elementAst","mapResult","attrValue2","CLASS_ATTR$1","STYLE_ATTR","elementEventNameAndTarget","elementEventFullName","dirIndex","localDirAst","_visitDirective","dirHostEvents","_visitProvider","queryMatchExprs","refNodeIndices","outputAst","eventAst","elementNodeIndex","queryIds","_visitProviderOrDirective","mapValue","updateDirectiveExpressions","dirContextExpr","updateDirectives","_visitComponentFactoryResolverProvider","componentDirMeta","_addProviderNode","providerFlags","currViewExpr","refNodeIndex","varValue","_createLiteralArrayConverter","valueExpr_1","_createLiteralMapConverter","valueExpr_2","compViewExpr","compBuilder","pipeNodeIndex","pipeValueExpr_1","callUnwrapValue","callCheckStmt","checkIndex_1","nodeValueExpr_1","diDep","pipeDef","self","updateBindingCount","updateRenderer","createUpdateStatements","allowEmptyExprs","o.applySourceSpanToExpressionIfNeeded","handlers","handleEventFn","handleEventStmts","handleEventBindingCount","trueStmts","ALLOW_DEFAULT_VAR","fullEventName","EVENT_NAME_VAR","BOOL_TYPE","isFirst","FixupExpression","resolved","KEY_CONTEXT","fixup","ConstantPool","literals","literalFactories","injectorDefinitions","getConstLiteral","literal$$1","forceShared","keyOf","newValue","shared","freshName","getTranslation","o.JSDocCommentStmt","docStmt","variable$$1","freshTranslationName","fnCall","definitions","definitionsOf","propertyNameOf","argumentsForKey","_getLiteralFactory","expressionForKey","resultMap","literalFactory","literalFactoryArguments","resultExpressions","isVariable","pureFunctionDeclaration","nextNameIndex","componentDefinitions","directiveDefinitions","KeyVisitor","invalid","MessageBundle","htmlParserResult","i18nParserResult","extractMessages","filterSources","mapperVisitor","MapPlaceholderNames","msgList","src","transformedMessage","Message","CORE$1","Identifiers$1","NEW_METHOD","TRANSFORM_METHOD","PATCH_DEPS","createElement","elementEnd","elementProperty","elementAttribute","elementClassNamed","elementStyleNamed","containerCreate","textCreateBound","bind","interpolation1","interpolation2","interpolation3","interpolation4","interpolation5","interpolation6","interpolation7","interpolation8","interpolationV","pureFunction0","pureFunction1","pureFunction2","pureFunction3","pureFunction4","pureFunction5","pureFunction6","pureFunction7","pureFunction8","pureFunctionV","pipeBind1","pipeBind2","pipeBind3","pipeBind4","pipeBindV","projection","projectionDef","injectAttribute","injectElementRef","injectTemplateRef","injectViewContainerRef","directiveInject","defineComponent","defineDirective","defineInjector","definePipe","convertMetaToOutput","compileNgModule","injectableCompiler","injectorDefArg","o.ClassField","rawProviders","BoundText","TextAttribute","BoundAttribute","fromBoundElementProperty","visitBoundAttribute","BoundEvent","visitBoundEvent","Template","visitTemplate","Content","visitContent","Variable","Reference","nodes_1","newNode","nodes_2","compileDirective","definitionMapValues","directiveMetadata","getOwnPropertyNames","createHostAttributesArray","conditionallyCreateMapObjectLiteral","unsupported","feature","R3","_a$1","pipeBindingIdentifiers","constantPool","getLiteralFactory","noop","declared","declareLocalVarCallback","nestedScope","BindingScope","declareCallback","referenceNameIndex","ROOT_SCOPE","TemplateDefinitionBuilder","contextParameter","parentBindingScope","contextName","directiveMatcher","pipeTypeByName","_dataIndex","_bindingContext","_prefixCode","_creationCode","_variableCode","_bindingCode","_postfixCode","_temporary","temporaryAllocator","TEMPORARY_NAME","_unsupported","_inI18nSection","_i18nSectionIndex","_phToNodeIdxes","invalid$1","_bindingScope","lhsVar","_valueConverter","ValueConverter","allocateDataSlot","slot","hasNgContent","variables_1","variableName","scopedName","freshReferenceName","_projectionDefinitionIndex","r3Selectors","parseSelectorToR3Selector","parsed","asLiteral","unParsed","querySlot","getQueryPredicate","instruction","getQueryList","refresh","queryRefresh","updateDirective","CONTEXT_NAME","o.ifStmt","creationCode","updateCode","ifStmt","bitwiseAnd","phToNodeIdx","phMap","o.NUMBER_TYPE","selectorIndex","ngContent","attributeAsList","attribute","elementIndex","outputAttrs","attrI18nMetas","createCssSelector","sel","staticType","hasI18nAttr","parseI18nMeta","attrArg","o.TYPED_NULL_EXPR","i18nMessages","trimTrailingNulls","implicit","sanitizeIdentifier","evName","functionName","localVars","bindingExpr","rhsExpression","listener","convertedBinding","BINDING_INSTRUCTION_MAP","t.visitAll","Text$3","visitAll$1","templateIndex","Element$1","templateContext","attributeNames","attributeMap","visitSingleI18nTextChild","convertedPropertyBinding","bindingContext","createFactory","elementRef","templateRef","viewContainerRef","dependency","directiveInjectArgs","queryDefinitions","queries_1","o.ReturnStatement","extractFlags","createHostBindingsFunction","hostBindingSourceSpan","getDirectiveMemory","assignToTemporary","callQueryRefresh","andExpression","directiveSummary","bindings_1","eventBindings","eventBindings_1","bindingName","typeName","NUMBER_TYPE","allocateSlot","slotPseudoLocal","pipeBinding","ID_SEPARATOR$1","MEANING_SEPARATOR$1","HtmlToTemplateTransform","inlineTemplateSourceSpan","matchableAttributes","parsedProperties","templateMatchableAttributes","templateParsedProperties","templateVariables","normalizeAttributeName","isTemplateBinding","elementHasInlineTemplate","reportError","parseAttribute","NON_BINDABLE_VISITOR$1","t.TextAttribute","isEmptyTextNode","t.Content","attributes_1","t.Template","t.Element","createBoundAttributes","boundAttributes","attributes_2","expansion","KW_BIND_IDX","BIND_NAME_REGEXP$1","parseVariable","parseReference","KW_BINDON_IDX","addEvents","parseAssignmentEvent","IDENT_BANANA_BOX_IDX","IDENT_EVENT_IDX","GeneratedFile","srcFileUrl","genFileUrl","sourceOrStmts","allLazyRoutes","ROUTES","loadChildren_1","_collectLoadChildren","route","parseLazyRoute","routes","routes_1","loadChildren","routePath","routeName","referencedModule","ResolvedStaticSymbol","StaticSymbolResolver","staticSymbolCache","summaryResolver","errorRecorder","metadataCache","resolvedSymbols","resolvedFilePaths","resolveSymbol","_resolveSymbolMembers","staticSymbol","resultFromSummary","_resolveSymbolFromSummary","useSummaries","baseSymbol","getStaticSymbol","baseImportAs","getImportAs","summarizedFileName","summarizedName","summaryForJitFileName","summaryForJitName","resolvedSymbol","unwrapResolvedMetadata","getKnownModuleName","recordImportAs","recordModuleNameForFileName","fileName","symbols","symbolFromFile","symbols_1","ignoreErrorsFor","cb","recorder","baseResolvedSymbol","baseMetadata","__symbolic","statics","getModuleMetadata","metadataKey","getSymbolsOf","summarySymbols","_createSymbolsOf","metadataSymbols","moduleExport","export","exportSymbol","symbolName","symName","unescapeIdentifier","resolvedModule","resolveModule","targetSymbol","sourceSymbol","this_1","createExport","topLevelSymbolNames_1","origins_1","origin","originFilePath","symbolResourcePaths","createResolvedSymbol","symbolMeta","isTsFile","TS","isLibraryFile","transformedMeta_1","arity","_originalFileMemo","getOutputName","topLevelPath","transformedMeta","ReferenceTransformer","functionParams","symbolic","oldLen","getOriginalName","topLevelSymbolNames","unwrappedTransformedMeta","moduleMetadata","moduleMetadatas","getMetadataFor","maxVersion_1","md","errorMessage","containingFile","moduleNameToFileName","createSummaryForJitFunction","fnName","ToJsonSerializer","symbolResolver","srcFileName","indexBySymbol","reexportedBy","processedSummaryBySymbol","addSummary","unprocessedSummary","unprocessedSymbolSummariesBySymbol","processedSummary","processValue","processedSummaries","clone_1","metadata_1","isMethodCallOnVariable","declarationSymbol","ngModuleSummary","summary_1","JSON","importAs","reexportSymbol","__symbol","toSummaryFileName","loadSummary","visitStaticSymbol","ForJitSerializer","addSourceType","addLibType","exportAsArr","exportAsBySymbol","exportAsArr_1","ngModuleSymbols","isLibrary","serializeSummaryWithDeps","ngModuleSymbol","jitExportAsName","serializeSummaryRef","serializeSummary","Transformer","FromJsonDeserializer","symbolCache","deserialize","libraryFileName","json","allImportAs","serializedSymbol","fromSummaryFileName","AotCompiler","_options","_host","_metadataResolver","_templateParser","_styleCompiler","_viewCompiler","_typeCheckCompiler","_ngModuleCompiler","_injectableCompiler","_outputEmitter","_symbolResolver","_analyzedFilesForInjectables","analyzeModulesSync","rootFiles","analyzeResult","analyzeAndValidateNgModules","analyzeModulesAsync","Promise","_analyzeFile","analyzedFile","_analyzedFiles","_analyzeFileForInjectables","findGeneratedFileNames","allowEmptyCodegenFiles","injectables","ngModules","exportsNonSourceFiles","genFileNames","enableSummariesForJit","fileSuffix","normalizeGenFileSuffix","dirSymbol","normalizedUrl","resourceNameToFileName","needsShim","_stylesModuleUrl","emitBasicStub","genFileName","originalFileName","_createOutputContext","originalFile","_createEmptyStub","createForJitStub","emitTypeCheckStub","_createNgFactoryStub","loadFilesAsync","fileNames","tsFiles","files","loadingPromises","loadNgModuleDirectiveAndPipeMetadata","analyzedInjectables","tsFile","all","loadFilesSync","externalReferences","_externalIdentifierReferences","typeIndex","o.expressionType","ngModuleIndex","expressionType","dirId","getDirectiveMetadata","_createTypeCheckBlock","references_1","emitMessageBundle","htmlParser","messageBundle","compMetas","updateFromTemplate","emitAllPartialModules","r3Files","ngModuleByPipeOrDirective","contextMap","_compilePartialModule","_compileShallowModules","shallowModules","schemaRegistry","hostBindingParser","expressionParser","removeWhitespaces","transform","directiveTypeBySel_1","pipeTypeByName_1","directiveTypeBySel","matcher_1","createDirectiveSelector","firstSelector","selectorAttributes","templateTypeName","buildTemplateFunction","features","lifecycle","NgOnChangesFeature","definitionField","definitionFunction","pipeMetadata","getPipeMetadata","templateFactory","emitAllPartialModules2","_emitPartialModule2","emitAllImpls","generatedFiles","_createSummary","_compileModule","stylesheetMeta","_codegenStyles","_compileComponent","componentStylesheet","_compileComponentFactory","ngFactoryCtx","symbolSummaries","typeData","forJitOutputCtx","forJitCtx","types","toJsonSerializer","forJitSerializer_1","serializeSummaries","summaryFileName","normalizedLocale","i18nFormat","hostMeta","hostViewFactoryVar","compFactoryVar","inputsExprs","outputsExprs","createComponentFactory","directiveIdentifiers","componentStyles","_parseTemplate","parsedTemplate","stylesExpr","viewResult","_templateAstCache","importModule","_fileNameToModuleName","suppliedTypeParams","missingTypeParamsCount","stylesheetMetadata","_codegenSourceModule","listLazyRoutes","entryRoute","analyzedModules","visitLazyRoute","seenRoutes","lazyRoutes","lazyRoutes_2","lazyRoute","lazyRoutes_1","staticSymbolResolver","metadataResolver","seenFiles","visitFile","isSourceFile","analyzeFile","modMeta","validateAnalyzedModules","symbolsMissingModule","hasDecorators","isNgSymbol","getInjectableMetadata","Visitor$$1","Visitor","isValueExportingNonSourceFile","mergeAnalyzedFiles","analyzedFiles","allNgModules","allPipesAndDirectives","af","FORMATTED_MESSAGE","formatChain","chain","indentStr","ANGULAR_CORE","HIDDEN_KEY","IGNORE","StaticReflector","knownMetadataClasses","knownMetadataFunctions","annotationCache","shallowAnnotationCache","propertyCache","parameterCache","methodCache","staticCache","conversionMap","resolvedExternalReferences","annotationForParentClassWithSummaryKind","initializeConversionMap","kc","_registerDecoratorOrConstructor","kf","_registerFunction","declarationSymbol_1","refSymbol","getSymbolByModule","findSymbolDeclaration","resolvedMetadata","tryAnnotations","originalRecorder","simplify","classMetadata","getTypeMetadata","parentType","findParentType","parentAnnotations","ownAnnotations_1","requiredAnnotationTypes","requiredType","formatMetadataError","metadataError","parentPropMetadata_1","parentProp","members_1","decorators","parameters_1","ctorData","rawParameterTypes","parameterDecorators_1","rawParamType","nestedResult","paramType","trySimplify","_methodNames","methodNames","parentMethodNames_1","members_2","isMethod","_staticMembers","staticMembers","staticMemberData","hasLifecycleHook","lcProperty","staticMembers_1","findDeclaration","injectionToken","opaqueToken","tryFindDeclaration","lazy","simplifyInContext","depth","simplifyNested","nestedContext","isMetadataError","summaryMsg","REFERENCE_TO_NONEXPORTED_CLASS","VARIABLE_NOT_INITIALIZED","DESTRUCTURE_NOT_SUPPORTED","COULD_NOT_RESOLVE_TYPE","FUNCTION_CALL_NOT_SUPPORTED","REFERENCE_TO_LOCAL_SYMBOL","errorSummary","advise","isPrimitive","spreadArray","simplifyEagerly","spreadArray_1","spreadItem","result_2","value_2","shouldIgnore","declarationValue","resolveReferenceValue","operand","indexTarget","member","selectContext","selectTarget","localValue","scope","BindingScope$1","missing","argExpressions","functionSymbol","targetFunction","targetExpression","value_1","defaults","calling","functionScope","define","result_1","oldScope","done","simplifyCall","USE_VALUE","PROVIDE","simplifyLazily","reportingContext","METADATA_ERROR","o","PopulatedScope","formatMetadataMessageChain","expandedMessage","AotSummaryResolver","rootSymbol","summaryCache","_loadSummaryFile","hasSummary","loadedFilePaths","summaryFilePath","deserializeSummaries","summaries","knownFileNameToModuleNames","basePath","SummaryResolver","_summaries","JitSummaryResolver","_executeFunctionStatements","varValues","childCtx","createChildWihtLocalVars","vars","_ExecutionContext","instance","ReturnValue","StatementInterpreter","initialValue","currCtx","CATCH_ERROR_VAR","CATCH_STACK_VAR","CATCH_ERROR_VAR$2","CATCH_STACK_VAR$2","subscribe","fnExpr","_classStmt","_ctx","propertyDescriptors","instanceCtx","paramNames","ctorParamNames","superClass","createDynamicClass","_declareFn","jitStatements","createSourceMaps","JitEmitterVisitor","createReturnStmt","createSourceMap","fnBody","fnArgNames","fnArgValues","emptyFn","evalExpression","getArgs","_evalArgValues","_evalExportedVars","AbstractJsEmitterVisitor","JitCompiler","_compilerConfig","getExtraNgModuleProviders","_compiledTemplateCache","_compiledHostTemplateCache","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","loadAotSummaries","_addAotSummaries","fn$$1","_addedAotSummaries","_filterJitIdentifiers","_compileModuleAndComponents","_compileModuleAndAllComponents","_loadModules","componentFactories","_compileComponents","mainNgModule","mainModule","nestedNgModule","ngModuleFactory","_compiledNgModuleCache","createOutputContext","compileResult","allComponentFactories","moduleByJitDirective","templates","transJitModules","localMod","localModuleMeta","dirRef","_createCompiledTemplate","_createCompiledHostTemplate","entryComponentType","hasAotSummary","compiledTemplate","assertComponent","viewDefFactory","_compileTemplate","isCompiled","externalStylesheetsByModuleUrl","outputContext","compiledStylesheet","compileStyles","_resolveStylesCompileResult","_resolveAndEvalStylesCompileResult","_interpretOrJit","interpretStatements","CompiledTemplate","compiled","viewClass","_viewClass","resolvedUrl","_split","encodeURI","baseParts","_ComponentIndex","Scheme","_joinAndCanonicalizePath","Port","Path","_resolveUrl","resolvedParts","_packagePrefix","_splitRe","UserInfo","Domain","QueryData","Fragment","opt_scheme","opt_userInfo","opt_domain","opt_port","opt_path","opt_queryData","opt_fragment","leadingSlash","trailingSlash","up","pos","ResourceLoader","Extractor","extract","urlResolver","createAotUrlResolver","StaticSymbolCache","CompilerConfig","normalizer","loadResource","elementSchemaRegistry","staticReflector","PipeResolver","compilerHost","errorCollector","enableIvy","tmplParser","UrlResolver","class_1"],"mappings":"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WA,iBAAA,OACrB+iD,MAAAl5E,KAAAq2B,WAAAC,YAAAhU,kBAAAC,UACJ22D,MAAA,CACG,IAAiBlX,WAAAxrC,SAAA0iD,MAAAr+D,WAAAoc,UACjB,GAAA+qC,WACH,OAAAA,WAGL,GAAO7rC,gBACP,MAAA,IAAA7gB,MAAA,8BAAA8M,UAAAG,gEChDH42D,gBAAArrB,IAAAsrB,0DAED,IAAAC,KAAgBC,QAAA78D,IACZ88D,gBAAeF,KAAA3nD,eAAAo8B,KAInBqrB,gBAAgBp9D,gBAAgBE,sBAEhC,cACI,gCAEWF,gBAAcG,OAAW,4BAErCH,gBAAAK,KACH,eAAgB,YAAgB,YAAc,YAAA,SAC1C,SAAA,kBAAa,kBAAA,WAAA,cACb,UAAA,aAAiB,YAAA,WAAA,SACjB,aAAW,gBAAA,YAAA,eAAA,8BAEAL,gBAAAM,cACX,cACA,kBACA,YACA,YACA,YACA,eACA,gBACA,aACD;;;;;;;;8HCaCm9D,QACA,iYAEA,s1BACA,qgCACA,gOACA,2uBACA,uBACA,2CACA,uBACA,wCACA,uBACA,kCACA,yCACA,mLACA,8JACA,eACA,yBACA,iCACA,iQACA,yHACA,sCACA,+BACA,4BACA,0BACA,8BACA,yCACA,6BACA,0BACA,uDACA,wCACA,qCACA,uGACA,iGACA,sOACA,mDACA,sBACA,wCACA,6BACA,2JACA,oJACA,wbACA,+BACA,8BACA,6BACA,wIACA,yBACA,4HACA,8BACA,mDACA,2DACA,sCACA,kDACA,uIACA,yCACA,6EACA,wDACA,wBACA,gDACA,yBACA,2BACA,qCACA,mCACA,gGACA,wGACA,wBACA,0BACA,mDACA,sBACA,2CACA,8BACA,mHACA,+DACA,oHACA,iDACA,wDACA,0BACA,qNACA,2BACA,sDACA,iCACA,yBACA,oCACA,wBACA,+BACA,qCACA,wCACA,6BACA,+BACA,2BACA,mBACA,sBACA,8BACA,sBACA,4BACA,kCACA,0BACA,+BACA,gCACA,gCACA,6BACA,2BACA,sBACA,+CACA,+CACA,+CACA,+CACA,6BACA,sBACA,sBACA,0BACA,2BACA,uBA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","file":"/home/travis/build/angular/angular/dist/packages-dist/compiler/bundles/compiler.umd.min.js.map","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar TagContentType = {\n    RAW_TEXT: 0,\n    ESCAPABLE_RAW_TEXT: 1,\n    PARSABLE_DATA: 2,\n};\nexport { TagContentType };\nTagContentType[TagContentType.RAW_TEXT] = \"RAW_TEXT\";\nTagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = \"ESCAPABLE_RAW_TEXT\";\nTagContentType[TagContentType.PARSABLE_DATA] = \"PARSABLE_DATA\";\n/**\n * @record\n */\nexport function TagDefinition() { }\nfunction TagDefinition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TagDefinition.prototype.closedByParent;\n    /** @type {?} */\n    TagDefinition.prototype.requiredParents;\n    /** @type {?} */\n    TagDefinition.prototype.parentToAdd;\n    /** @type {?} */\n    TagDefinition.prototype.implicitNamespacePrefix;\n    /** @type {?} */\n    TagDefinition.prototype.contentType;\n    /** @type {?} */\n    TagDefinition.prototype.isVoid;\n    /** @type {?} */\n    TagDefinition.prototype.ignoreFirstLf;\n    /** @type {?} */\n    TagDefinition.prototype.canSelfClose;\n    /** @type {?} */\n    TagDefinition.prototype.requireExtraParent;\n    /** @type {?} */\n    TagDefinition.prototype.isClosedByChild;\n}\n/**\n * @param {?} elementName\n * @return {?}\n */\nexport function splitNsName(elementName) {\n    if (elementName[0] != ':') {\n        return [null, elementName];\n    }\n    var /** @type {?} */ colonIndex = elementName.indexOf(':', 1);\n    if (colonIndex == -1) {\n        throw new Error(\"Unsupported format \\\"\" + elementName + \"\\\" expecting \\\":namespace:name\\\"\");\n    }\n    return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n}\n/**\n * @param {?} tagName\n * @return {?}\n */\nexport function isNgContainer(tagName) {\n    return splitNsName(tagName)[1] === 'ng-container';\n}\n/**\n * @param {?} tagName\n * @return {?}\n */\nexport function isNgContent(tagName) {\n    return splitNsName(tagName)[1] === 'ng-content';\n}\n/**\n * @param {?} tagName\n * @return {?}\n */\nexport function isNgTemplate(tagName) {\n    return splitNsName(tagName)[1] === 'ng-template';\n}\n/**\n * @param {?} fullName\n * @return {?}\n */\nexport function getNsPrefix(fullName) {\n    return fullName === null ? null : splitNsName(fullName)[0];\n}\n/**\n * @param {?} prefix\n * @param {?} localName\n * @return {?}\n */\nexport function mergeNsAndName(prefix, localName) {\n    return prefix ? \":\" + prefix + \":\" + localName : localName;\n}\n// see http://www.w3.org/TR/html51/syntax.html#named-character-references\n// see https://html.spec.whatwg.org/multipage/entities.json\n// This list is not exhaustive to keep the compiler footprint low.\n// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not\n// exist.\nexport var /** @type {?} */ NAMED_ENTITIES = {\n    'Aacute': '\\u00C1',\n    'aacute': '\\u00E1',\n    'Acirc': '\\u00C2',\n    'acirc': '\\u00E2',\n    'acute': '\\u00B4',\n    'AElig': '\\u00C6',\n    'aelig': '\\u00E6',\n    'Agrave': '\\u00C0',\n    'agrave': '\\u00E0',\n    'alefsym': '\\u2135',\n    'Alpha': '\\u0391',\n    'alpha': '\\u03B1',\n    'amp': '&',\n    'and': '\\u2227',\n    'ang': '\\u2220',\n    'apos': '\\u0027',\n    'Aring': '\\u00C5',\n    'aring': '\\u00E5',\n    'asymp': '\\u2248',\n    'Atilde': '\\u00C3',\n    'atilde': '\\u00E3',\n    'Auml': '\\u00C4',\n    'auml': '\\u00E4',\n    'bdquo': '\\u201E',\n    'Beta': '\\u0392',\n    'beta': '\\u03B2',\n    'brvbar': '\\u00A6',\n    'bull': '\\u2022',\n    'cap': '\\u2229',\n    'Ccedil': '\\u00C7',\n    'ccedil': '\\u00E7',\n    'cedil': '\\u00B8',\n    'cent': '\\u00A2',\n    'Chi': '\\u03A7',\n    'chi': '\\u03C7',\n    'circ': '\\u02C6',\n    'clubs': '\\u2663',\n    'cong': '\\u2245',\n    'copy': '\\u00A9',\n    'crarr': '\\u21B5',\n    'cup': '\\u222A',\n    'curren': '\\u00A4',\n    'dagger': '\\u2020',\n    'Dagger': '\\u2021',\n    'darr': '\\u2193',\n    'dArr': '\\u21D3',\n    'deg': '\\u00B0',\n    'Delta': '\\u0394',\n    'delta': '\\u03B4',\n    'diams': '\\u2666',\n    'divide': '\\u00F7',\n    'Eacute': '\\u00C9',\n    'eacute': '\\u00E9',\n    'Ecirc': '\\u00CA',\n    'ecirc': '\\u00EA',\n    'Egrave': '\\u00C8',\n    'egrave': '\\u00E8',\n    'empty': '\\u2205',\n    'emsp': '\\u2003',\n    'ensp': '\\u2002',\n    'Epsilon': '\\u0395',\n    'epsilon': '\\u03B5',\n    'equiv': '\\u2261',\n    'Eta': '\\u0397',\n    'eta': '\\u03B7',\n    'ETH': '\\u00D0',\n    'eth': '\\u00F0',\n    'Euml': '\\u00CB',\n    'euml': '\\u00EB',\n    'euro': '\\u20AC',\n    'exist': '\\u2203',\n    'fnof': '\\u0192',\n    'forall': '\\u2200',\n    'frac12': '\\u00BD',\n    'frac14': '\\u00BC',\n    'frac34': '\\u00BE',\n    'frasl': '\\u2044',\n    'Gamma': '\\u0393',\n    'gamma': '\\u03B3',\n    'ge': '\\u2265',\n    'gt': '>',\n    'harr': '\\u2194',\n    'hArr': '\\u21D4',\n    'hearts': '\\u2665',\n    'hellip': '\\u2026',\n    'Iacute': '\\u00CD',\n    'iacute': '\\u00ED',\n    'Icirc': '\\u00CE',\n    'icirc': '\\u00EE',\n    'iexcl': '\\u00A1',\n    'Igrave': '\\u00CC',\n    'igrave': '\\u00EC',\n    'image': '\\u2111',\n    'infin': '\\u221E',\n    'int': '\\u222B',\n    'Iota': '\\u0399',\n    'iota': '\\u03B9',\n    'iquest': '\\u00BF',\n    'isin': '\\u2208',\n    'Iuml': '\\u00CF',\n    'iuml': '\\u00EF',\n    'Kappa': '\\u039A',\n    'kappa': '\\u03BA',\n    'Lambda': '\\u039B',\n    'lambda': '\\u03BB',\n    'lang': '\\u27E8',\n    'laquo': '\\u00AB',\n    'larr': '\\u2190',\n    'lArr': '\\u21D0',\n    'lceil': '\\u2308',\n    'ldquo': '\\u201C',\n    'le': '\\u2264',\n    'lfloor': '\\u230A',\n    'lowast': '\\u2217',\n    'loz': '\\u25CA',\n    'lrm': '\\u200E',\n    'lsaquo': '\\u2039',\n    'lsquo': '\\u2018',\n    'lt': '<',\n    'macr': '\\u00AF',\n    'mdash': '\\u2014',\n    'micro': '\\u00B5',\n    'middot': '\\u00B7',\n    'minus': '\\u2212',\n    'Mu': '\\u039C',\n    'mu': '\\u03BC',\n    'nabla': '\\u2207',\n    'nbsp': '\\u00A0',\n    'ndash': '\\u2013',\n    'ne': '\\u2260',\n    'ni': '\\u220B',\n    'not': '\\u00AC',\n    'notin': '\\u2209',\n    'nsub': '\\u2284',\n    'Ntilde': '\\u00D1',\n    'ntilde': '\\u00F1',\n    'Nu': '\\u039D',\n    'nu': '\\u03BD',\n    'Oacute': '\\u00D3',\n    'oacute': '\\u00F3',\n    'Ocirc': '\\u00D4',\n    'ocirc': '\\u00F4',\n    'OElig': '\\u0152',\n    'oelig': '\\u0153',\n    'Ograve': '\\u00D2',\n    'ograve': '\\u00F2',\n    'oline': '\\u203E',\n    'Omega': '\\u03A9',\n    'omega': '\\u03C9',\n    'Omicron': '\\u039F',\n    'omicron': '\\u03BF',\n    'oplus': '\\u2295',\n    'or': '\\u2228',\n    'ordf': '\\u00AA',\n    'ordm': '\\u00BA',\n    'Oslash': '\\u00D8',\n    'oslash': '\\u00F8',\n    'Otilde': '\\u00D5',\n    'otilde': '\\u00F5',\n    'otimes': '\\u2297',\n    'Ouml': '\\u00D6',\n    'ouml': '\\u00F6',\n    'para': '\\u00B6',\n    'permil': '\\u2030',\n    'perp': '\\u22A5',\n    'Phi': '\\u03A6',\n    'phi': '\\u03C6',\n    'Pi': '\\u03A0',\n    'pi': '\\u03C0',\n    'piv': '\\u03D6',\n    'plusmn': '\\u00B1',\n    'pound': '\\u00A3',\n    'prime': '\\u2032',\n    'Prime': '\\u2033',\n    'prod': '\\u220F',\n    'prop': '\\u221D',\n    'Psi': '\\u03A8',\n    'psi': '\\u03C8',\n    'quot': '\\u0022',\n    'radic': '\\u221A',\n    'rang': '\\u27E9',\n    'raquo': '\\u00BB',\n    'rarr': '\\u2192',\n    'rArr': '\\u21D2',\n    'rceil': '\\u2309',\n    'rdquo': '\\u201D',\n    'real': '\\u211C',\n    'reg': '\\u00AE',\n    'rfloor': '\\u230B',\n    'Rho': '\\u03A1',\n    'rho': '\\u03C1',\n    'rlm': '\\u200F',\n    'rsaquo': '\\u203A',\n    'rsquo': '\\u2019',\n    'sbquo': '\\u201A',\n    'Scaron': '\\u0160',\n    'scaron': '\\u0161',\n    'sdot': '\\u22C5',\n    'sect': '\\u00A7',\n    'shy': '\\u00AD',\n    'Sigma': '\\u03A3',\n    'sigma': '\\u03C3',\n    'sigmaf': '\\u03C2',\n    'sim': '\\u223C',\n    'spades': '\\u2660',\n    'sub': '\\u2282',\n    'sube': '\\u2286',\n    'sum': '\\u2211',\n    'sup': '\\u2283',\n    'sup1': '\\u00B9',\n    'sup2': '\\u00B2',\n    'sup3': '\\u00B3',\n    'supe': '\\u2287',\n    'szlig': '\\u00DF',\n    'Tau': '\\u03A4',\n    'tau': '\\u03C4',\n    'there4': '\\u2234',\n    'Theta': '\\u0398',\n    'theta': '\\u03B8',\n    'thetasym': '\\u03D1',\n    'thinsp': '\\u2009',\n    'THORN': '\\u00DE',\n    'thorn': '\\u00FE',\n    'tilde': '\\u02DC',\n    'times': '\\u00D7',\n    'trade': '\\u2122',\n    'Uacute': '\\u00DA',\n    'uacute': '\\u00FA',\n    'uarr': '\\u2191',\n    'uArr': '\\u21D1',\n    'Ucirc': '\\u00DB',\n    'ucirc': '\\u00FB',\n    'Ugrave': '\\u00D9',\n    'ugrave': '\\u00F9',\n    'uml': '\\u00A8',\n    'upsih': '\\u03D2',\n    'Upsilon': '\\u03A5',\n    'upsilon': '\\u03C5',\n    'Uuml': '\\u00DC',\n    'uuml': '\\u00FC',\n    'weierp': '\\u2118',\n    'Xi': '\\u039E',\n    'xi': '\\u03BE',\n    'Yacute': '\\u00DD',\n    'yacute': '\\u00FD',\n    'yen': '\\u00A5',\n    'yuml': '\\u00FF',\n    'Yuml': '\\u0178',\n    'Zeta': '\\u0396',\n    'zeta': '\\u03B6',\n    'zwj': '\\u200D',\n    'zwnj': '\\u200C',\n};\n// The &ngsp; pseudo-entity is denoting a space. see:\n// https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart\nexport var /** @type {?} */ NGSP_UNICODE = '\\uE500';\nNAMED_ENTITIES['ngsp'] = NGSP_UNICODE;\n//# sourceMappingURL=tags.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TagContentType } from './tags';\nvar HtmlTagDefinition = /** @class */ (function () {\n    function HtmlTagDefinition(_a) {\n        var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;\n        var _this = this;\n        this.closedByChildren = {};\n        this.closedByParent = false;\n        this.canSelfClose = false;\n        if (closedByChildren && closedByChildren.length > 0) {\n            closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });\n        }\n        this.isVoid = isVoid;\n        this.closedByParent = closedByParent || isVoid;\n        if (requiredParents && requiredParents.length > 0) {\n            this.requiredParents = {};\n            // The first parent is the list is automatically when none of the listed parents are present\n            this.parentToAdd = requiredParents[0];\n            requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });\n        }\n        this.implicitNamespacePrefix = implicitNamespacePrefix || null;\n        this.contentType = contentType;\n        this.ignoreFirstLf = ignoreFirstLf;\n    }\n    /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n    HtmlTagDefinition.prototype.requireExtraParent = /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n    function (currentParent) {\n        if (!this.requiredParents) {\n            return false;\n        }\n        if (!currentParent) {\n            return true;\n        }\n        var /** @type {?} */ lcParent = currentParent.toLowerCase();\n        var /** @type {?} */ isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';\n        return !isParentTemplate && this.requiredParents[lcParent] != true;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    HtmlTagDefinition.prototype.isClosedByChild = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this.isVoid || name.toLowerCase() in this.closedByChildren;\n    };\n    return HtmlTagDefinition;\n}());\nexport { HtmlTagDefinition };\nfunction HtmlTagDefinition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HtmlTagDefinition.prototype.closedByChildren;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.closedByParent;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.requiredParents;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.parentToAdd;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.implicitNamespacePrefix;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.contentType;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.isVoid;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.ignoreFirstLf;\n    /** @type {?} */\n    HtmlTagDefinition.prototype.canSelfClose;\n}\n// see http://www.w3.org/TR/html51/syntax.html#optional-tags\n// This implementation does not fully conform to the HTML5 spec.\nvar /** @type {?} */ TAG_DEFINITIONS = {\n    'base': new HtmlTagDefinition({ isVoid: true }),\n    'meta': new HtmlTagDefinition({ isVoid: true }),\n    'area': new HtmlTagDefinition({ isVoid: true }),\n    'embed': new HtmlTagDefinition({ isVoid: true }),\n    'link': new HtmlTagDefinition({ isVoid: true }),\n    'img': new HtmlTagDefinition({ isVoid: true }),\n    'input': new HtmlTagDefinition({ isVoid: true }),\n    'param': new HtmlTagDefinition({ isVoid: true }),\n    'hr': new HtmlTagDefinition({ isVoid: true }),\n    'br': new HtmlTagDefinition({ isVoid: true }),\n    'source': new HtmlTagDefinition({ isVoid: true }),\n    'track': new HtmlTagDefinition({ isVoid: true }),\n    'wbr': new HtmlTagDefinition({ isVoid: true }),\n    'p': new HtmlTagDefinition({\n        closedByChildren: [\n            'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',\n            'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'\n        ],\n        closedByParent: true\n    }),\n    'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),\n    'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),\n    'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),\n    'tr': new HtmlTagDefinition({\n        closedByChildren: ['tr'],\n        requiredParents: ['tbody', 'tfoot', 'thead'],\n        closedByParent: true\n    }),\n    'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n    'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),\n    'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),\n    'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),\n    'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),\n    'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),\n    'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),\n    'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),\n    'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n    'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n    'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),\n    'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),\n    'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),\n    'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),\n    'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),\n    'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),\n    'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n    'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),\n    'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),\n    'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),\n};\nvar /** @type {?} */ _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();\n/**\n * @param {?} tagName\n * @return {?}\n */\nexport function getHtmlTagDefinition(tagName) {\n    return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;\n}\n//# sourceMappingURL=html_tags.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { getHtmlTagDefinition } from './ml_parser/html_tags';\nvar /** @type {?} */ _SELECTOR_REGEXP = new RegExp('(\\\\:not\\\\()|' + //\":not(\"\n    '([-\\\\w]+)|' + // \"tag\"\n    '(?:\\\\.([-\\\\w]+))|' + // \".class\"\n    '(?:\\\\[([-.\\\\w*]+)(?:=([\\\"\\']?)([^\\\\]\\\"\\']*)\\\\5)?\\\\])|' + // \"[name]\", \"[name=value]\",\n    '(\\\\))|' + // \")\"\n    '(\\\\s*,\\\\s*)', // \",\"\n'g');\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nvar /**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nCssSelector = /** @class */ (function () {\n    function CssSelector() {\n        this.element = null;\n        this.classNames = [];\n        /**\n         * The selectors are encoded in pairs where:\n         * - even locations are attribute names\n         * - odd locations are attribute values.\n         *\n         * Example:\n         * Selector: `[key1=value1][key2]` would parse to:\n         * ```\n         * ['key1', 'value1', 'key2', '']\n         * ```\n         */\n        this.attrs = [];\n        this.notSelectors = [];\n    }\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    CssSelector.parse = /**\n     * @param {?} selector\n     * @return {?}\n     */\n    function (selector) {\n        var /** @type {?} */ results = [];\n        var /** @type {?} */ _addResult = function (res, cssSel) {\n            if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&\n                cssSel.attrs.length == 0) {\n                cssSel.element = '*';\n            }\n            res.push(cssSel);\n        };\n        var /** @type {?} */ cssSelector = new CssSelector();\n        var /** @type {?} */ match;\n        var /** @type {?} */ current = cssSelector;\n        var /** @type {?} */ inNot = false;\n        _SELECTOR_REGEXP.lastIndex = 0;\n        while (match = _SELECTOR_REGEXP.exec(selector)) {\n            if (match[1]) {\n                if (inNot) {\n                    throw new Error('Nesting :not is not allowed in a selector');\n                }\n                inNot = true;\n                current = new CssSelector();\n                cssSelector.notSelectors.push(current);\n            }\n            if (match[2]) {\n                current.setElement(match[2]);\n            }\n            if (match[3]) {\n                current.addClassName(match[3]);\n            }\n            if (match[4]) {\n                current.addAttribute(match[4], match[6]);\n            }\n            if (match[7]) {\n                inNot = false;\n                current = cssSelector;\n            }\n            if (match[8]) {\n                if (inNot) {\n                    throw new Error('Multiple selectors in :not are not supported');\n                }\n                _addResult(results, cssSelector);\n                cssSelector = current = new CssSelector();\n            }\n        }\n        _addResult(results, cssSelector);\n        return results;\n    };\n    /**\n     * @return {?}\n     */\n    CssSelector.prototype.isElementSelector = /**\n     * @return {?}\n     */\n    function () {\n        return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&\n            this.notSelectors.length === 0;\n    };\n    /**\n     * @return {?}\n     */\n    CssSelector.prototype.hasElementSelector = /**\n     * @return {?}\n     */\n    function () { return !!this.element; };\n    /**\n     * @param {?=} element\n     * @return {?}\n     */\n    CssSelector.prototype.setElement = /**\n     * @param {?=} element\n     * @return {?}\n     */\n    function (element) {\n        if (element === void 0) { element = null; }\n        this.element = element;\n    };\n    /** Gets a template string for an element that matches the selector. */\n    /**\n     * Gets a template string for an element that matches the selector.\n     * @return {?}\n     */\n    CssSelector.prototype.getMatchingElementTemplate = /**\n     * Gets a template string for an element that matches the selector.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ tagName = this.element || 'div';\n        var /** @type {?} */ classAttr = this.classNames.length > 0 ? \" class=\\\"\" + this.classNames.join(' ') + \"\\\"\" : '';\n        var /** @type {?} */ attrs = '';\n        for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {\n            var /** @type {?} */ attrName = this.attrs[i];\n            var /** @type {?} */ attrValue = this.attrs[i + 1] !== '' ? \"=\\\"\" + this.attrs[i + 1] + \"\\\"\" : '';\n            attrs += \" \" + attrName + attrValue;\n        }\n        return getHtmlTagDefinition(tagName).isVoid ? \"<\" + tagName + classAttr + attrs + \"/>\" :\n            \"<\" + tagName + classAttr + attrs + \"></\" + tagName + \">\";\n    };\n    /**\n     * @return {?}\n     */\n    CssSelector.prototype.getAttrs = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = [];\n        if (this.classNames.length > 0) {\n            result.push('class', this.classNames.join(' '));\n        }\n        return result.concat(this.attrs);\n    };\n    /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    CssSelector.prototype.addAttribute = /**\n     * @param {?} name\n     * @param {?=} value\n     * @return {?}\n     */\n    function (name, value) {\n        if (value === void 0) { value = ''; }\n        this.attrs.push(name, value && value.toLowerCase() || '');\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    CssSelector.prototype.addClassName = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { this.classNames.push(name.toLowerCase()); };\n    /**\n     * @return {?}\n     */\n    CssSelector.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ res = this.element || '';\n        if (this.classNames) {\n            this.classNames.forEach(function (klass) { return res += \".\" + klass; });\n        }\n        if (this.attrs) {\n            for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {\n                var /** @type {?} */ name_1 = this.attrs[i];\n                var /** @type {?} */ value = this.attrs[i + 1];\n                res += \"[\" + name_1 + (value ? '=' + value : '') + \"]\";\n            }\n        }\n        this.notSelectors.forEach(function (notSelector) { return res += \":not(\" + notSelector + \")\"; });\n        return res;\n    };\n    return CssSelector;\n}());\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nexport { CssSelector };\nfunction CssSelector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CssSelector.prototype.element;\n    /** @type {?} */\n    CssSelector.prototype.classNames;\n    /**\n     * The selectors are encoded in pairs where:\n     * - even locations are attribute names\n     * - odd locations are attribute values.\n     *\n     * Example:\n     * Selector: `[key1=value1][key2]` would parse to:\n     * ```\n     * ['key1', 'value1', 'key2', '']\n     * ```\n     * @type {?}\n     */\n    CssSelector.prototype.attrs;\n    /** @type {?} */\n    CssSelector.prototype.notSelectors;\n}\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nvar /**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nSelectorMatcher = /** @class */ (function () {\n    function SelectorMatcher() {\n        this._elementMap = new Map();\n        this._elementPartialMap = new Map();\n        this._classMap = new Map();\n        this._classPartialMap = new Map();\n        this._attrValueMap = new Map();\n        this._attrValuePartialMap = new Map();\n        this._listContexts = [];\n    }\n    /**\n     * @param {?} notSelectors\n     * @return {?}\n     */\n    SelectorMatcher.createNotMatcher = /**\n     * @param {?} notSelectors\n     * @return {?}\n     */\n    function (notSelectors) {\n        var /** @type {?} */ notMatcher = new SelectorMatcher();\n        notMatcher.addSelectables(notSelectors, null);\n        return notMatcher;\n    };\n    /**\n     * @param {?} cssSelectors\n     * @param {?=} callbackCtxt\n     * @return {?}\n     */\n    SelectorMatcher.prototype.addSelectables = /**\n     * @param {?} cssSelectors\n     * @param {?=} callbackCtxt\n     * @return {?}\n     */\n    function (cssSelectors, callbackCtxt) {\n        var /** @type {?} */ listContext = /** @type {?} */ ((null));\n        if (cssSelectors.length > 1) {\n            listContext = new SelectorListContext(cssSelectors);\n            this._listContexts.push(listContext);\n        }\n        for (var /** @type {?} */ i = 0; i < cssSelectors.length; i++) {\n            this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n        }\n    };\n    /**\n     * Add an object that can be found later on by calling `match`.\n     * @param {?} cssSelector A css selector\n     * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function\n     * @param {?} listContext\n     * @return {?}\n     */\n    SelectorMatcher.prototype._addSelectable = /**\n     * Add an object that can be found later on by calling `match`.\n     * @param {?} cssSelector A css selector\n     * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function\n     * @param {?} listContext\n     * @return {?}\n     */\n    function (cssSelector, callbackCtxt, listContext) {\n        var /** @type {?} */ matcher = this;\n        var /** @type {?} */ element = cssSelector.element;\n        var /** @type {?} */ classNames = cssSelector.classNames;\n        var /** @type {?} */ attrs = cssSelector.attrs;\n        var /** @type {?} */ selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n        if (element) {\n            var /** @type {?} */ isTerminal = attrs.length === 0 && classNames.length === 0;\n            if (isTerminal) {\n                this._addTerminal(matcher._elementMap, element, selectable);\n            }\n            else {\n                matcher = this._addPartial(matcher._elementPartialMap, element);\n            }\n        }\n        if (classNames) {\n            for (var /** @type {?} */ i = 0; i < classNames.length; i++) {\n                var /** @type {?} */ isTerminal = attrs.length === 0 && i === classNames.length - 1;\n                var /** @type {?} */ className = classNames[i];\n                if (isTerminal) {\n                    this._addTerminal(matcher._classMap, className, selectable);\n                }\n                else {\n                    matcher = this._addPartial(matcher._classPartialMap, className);\n                }\n            }\n        }\n        if (attrs) {\n            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n                var /** @type {?} */ isTerminal = i === attrs.length - 2;\n                var /** @type {?} */ name_2 = attrs[i];\n                var /** @type {?} */ value = attrs[i + 1];\n                if (isTerminal) {\n                    var /** @type {?} */ terminalMap = matcher._attrValueMap;\n                    var /** @type {?} */ terminalValuesMap = terminalMap.get(name_2);\n                    if (!terminalValuesMap) {\n                        terminalValuesMap = new Map();\n                        terminalMap.set(name_2, terminalValuesMap);\n                    }\n                    this._addTerminal(terminalValuesMap, value, selectable);\n                }\n                else {\n                    var /** @type {?} */ partialMap = matcher._attrValuePartialMap;\n                    var /** @type {?} */ partialValuesMap = partialMap.get(name_2);\n                    if (!partialValuesMap) {\n                        partialValuesMap = new Map();\n                        partialMap.set(name_2, partialValuesMap);\n                    }\n                    matcher = this._addPartial(partialValuesMap, value);\n                }\n            }\n        }\n    };\n    /**\n     * @param {?} map\n     * @param {?} name\n     * @param {?} selectable\n     * @return {?}\n     */\n    SelectorMatcher.prototype._addTerminal = /**\n     * @param {?} map\n     * @param {?} name\n     * @param {?} selectable\n     * @return {?}\n     */\n    function (map, name, selectable) {\n        var /** @type {?} */ terminalList = map.get(name);\n        if (!terminalList) {\n            terminalList = [];\n            map.set(name, terminalList);\n        }\n        terminalList.push(selectable);\n    };\n    /**\n     * @param {?} map\n     * @param {?} name\n     * @return {?}\n     */\n    SelectorMatcher.prototype._addPartial = /**\n     * @param {?} map\n     * @param {?} name\n     * @return {?}\n     */\n    function (map, name) {\n        var /** @type {?} */ matcher = map.get(name);\n        if (!matcher) {\n            matcher = new SelectorMatcher();\n            map.set(name, matcher);\n        }\n        return matcher;\n    };\n    /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param cssSelector A css selector\n     * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return boolean true if a match was found\n    */\n    /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param {?} cssSelector A css selector\n     * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return {?} boolean true if a match was found\n     */\n    SelectorMatcher.prototype.match = /**\n     * Find the objects that have been added via `addSelectable`\n     * whose css selector is contained in the given css selector.\n     * @param {?} cssSelector A css selector\n     * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`\n     * @return {?} boolean true if a match was found\n     */\n    function (cssSelector, matchedCallback) {\n        var /** @type {?} */ result = false;\n        var /** @type {?} */ element = /** @type {?} */ ((cssSelector.element));\n        var /** @type {?} */ classNames = cssSelector.classNames;\n        var /** @type {?} */ attrs = cssSelector.attrs;\n        for (var /** @type {?} */ i = 0; i < this._listContexts.length; i++) {\n            this._listContexts[i].alreadyMatched = false;\n        }\n        result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n        result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||\n            result;\n        if (classNames) {\n            for (var /** @type {?} */ i = 0; i < classNames.length; i++) {\n                var /** @type {?} */ className = classNames[i];\n                result =\n                    this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n                result =\n                    this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||\n                        result;\n            }\n        }\n        if (attrs) {\n            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n                var /** @type {?} */ name_3 = attrs[i];\n                var /** @type {?} */ value = attrs[i + 1];\n                var /** @type {?} */ terminalValuesMap = /** @type {?} */ ((this._attrValueMap.get(name_3)));\n                if (value) {\n                    result =\n                        this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n                }\n                result =\n                    this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n                var /** @type {?} */ partialValuesMap = /** @type {?} */ ((this._attrValuePartialMap.get(name_3)));\n                if (value) {\n                    result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n                }\n                result =\n                    this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n            }\n        }\n        return result;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} map\n     * @param {?} name\n     * @param {?} cssSelector\n     * @param {?} matchedCallback\n     * @return {?}\n     */\n    SelectorMatcher.prototype._matchTerminal = /**\n     * \\@internal\n     * @param {?} map\n     * @param {?} name\n     * @param {?} cssSelector\n     * @param {?} matchedCallback\n     * @return {?}\n     */\n    function (map, name, cssSelector, matchedCallback) {\n        if (!map || typeof name !== 'string') {\n            return false;\n        }\n        var /** @type {?} */ selectables = map.get(name) || [];\n        var /** @type {?} */ starSelectables = /** @type {?} */ ((map.get('*')));\n        if (starSelectables) {\n            selectables = selectables.concat(starSelectables);\n        }\n        if (selectables.length === 0) {\n            return false;\n        }\n        var /** @type {?} */ selectable;\n        var /** @type {?} */ result = false;\n        for (var /** @type {?} */ i = 0; i < selectables.length; i++) {\n            selectable = selectables[i];\n            result = selectable.finalize(cssSelector, matchedCallback) || result;\n        }\n        return result;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} map\n     * @param {?} name\n     * @param {?} cssSelector\n     * @param {?} matchedCallback\n     * @return {?}\n     */\n    SelectorMatcher.prototype._matchPartial = /**\n     * \\@internal\n     * @param {?} map\n     * @param {?} name\n     * @param {?} cssSelector\n     * @param {?} matchedCallback\n     * @return {?}\n     */\n    function (map, name, cssSelector, matchedCallback) {\n        if (!map || typeof name !== 'string') {\n            return false;\n        }\n        var /** @type {?} */ nestedSelector = map.get(name);\n        if (!nestedSelector) {\n            return false;\n        }\n        // TODO(perf): get rid of recursion and measure again\n        // TODO(perf): don't pass the whole selector into the recursion,\n        // but only the not processed parts\n        return nestedSelector.match(cssSelector, matchedCallback);\n    };\n    return SelectorMatcher;\n}());\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nexport { SelectorMatcher };\nfunction SelectorMatcher_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SelectorMatcher.prototype._elementMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._elementPartialMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._classMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._classPartialMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._attrValueMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._attrValuePartialMap;\n    /** @type {?} */\n    SelectorMatcher.prototype._listContexts;\n}\nvar SelectorListContext = /** @class */ (function () {\n    function SelectorListContext(selectors) {\n        this.selectors = selectors;\n        this.alreadyMatched = false;\n    }\n    return SelectorListContext;\n}());\nexport { SelectorListContext };\nfunction SelectorListContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SelectorListContext.prototype.alreadyMatched;\n    /** @type {?} */\n    SelectorListContext.prototype.selectors;\n}\nvar SelectorContext = /** @class */ (function () {\n    function SelectorContext(selector, cbContext, listContext) {\n        this.selector = selector;\n        this.cbContext = cbContext;\n        this.listContext = listContext;\n        this.notSelectors = selector.notSelectors;\n    }\n    /**\n     * @param {?} cssSelector\n     * @param {?} callback\n     * @return {?}\n     */\n    SelectorContext.prototype.finalize = /**\n     * @param {?} cssSelector\n     * @param {?} callback\n     * @return {?}\n     */\n    function (cssSelector, callback) {\n        var /** @type {?} */ result = true;\n        if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n            var /** @type {?} */ notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n            result = !notMatcher.match(cssSelector, null);\n        }\n        if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n            if (this.listContext) {\n                this.listContext.alreadyMatched = true;\n            }\n            callback(this.selector, this.cbContext);\n        }\n        return result;\n    };\n    return SelectorContext;\n}());\nexport { SelectorContext };\nfunction SelectorContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SelectorContext.prototype.notSelectors;\n    /** @type {?} */\n    SelectorContext.prototype.selector;\n    /** @type {?} */\n    SelectorContext.prototype.cbContext;\n    /** @type {?} */\n    SelectorContext.prototype.listContext;\n}\n//# sourceMappingURL=selector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { CssSelector } from './selector';\n/**\n * @record\n */\nexport function Inject() { }\nfunction Inject_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Inject.prototype.token;\n}\nexport var /** @type {?} */ createInject = makeMetadataFactory('Inject', function (token) { return ({ token: token }); });\nexport var /** @type {?} */ createInjectionToken = makeMetadataFactory('InjectionToken', function (desc) { return ({ _desc: desc, ngInjectableDef: undefined }); });\n/**\n * @record\n */\nexport function Attribute() { }\nfunction Attribute_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Attribute.prototype.attributeName;\n}\nexport var /** @type {?} */ createAttribute = makeMetadataFactory('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });\n/**\n * @record\n */\nexport function Query() { }\nfunction Query_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Query.prototype.descendants;\n    /** @type {?} */\n    Query.prototype.first;\n    /** @type {?} */\n    Query.prototype.read;\n    /** @type {?} */\n    Query.prototype.isViewQuery;\n    /** @type {?} */\n    Query.prototype.selector;\n}\nexport var /** @type {?} */ createContentChildren = makeMetadataFactory('ContentChildren', function (selector, data) {\n    if (data === void 0) { data = {}; }\n    return (tslib_1.__assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));\n});\nexport var /** @type {?} */ createContentChild = makeMetadataFactory('ContentChild', function (selector, data) {\n    if (data === void 0) { data = {}; }\n    return (tslib_1.__assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));\n});\nexport var /** @type {?} */ createViewChildren = makeMetadataFactory('ViewChildren', function (selector, data) {\n    if (data === void 0) { data = {}; }\n    return (tslib_1.__assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));\n});\nexport var /** @type {?} */ createViewChild = makeMetadataFactory('ViewChild', function (selector, data) {\n    return (tslib_1.__assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data));\n});\n/**\n * @record\n */\nexport function Directive() { }\nfunction Directive_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Directive.prototype.selector;\n    /** @type {?|undefined} */\n    Directive.prototype.inputs;\n    /** @type {?|undefined} */\n    Directive.prototype.outputs;\n    /** @type {?|undefined} */\n    Directive.prototype.host;\n    /** @type {?|undefined} */\n    Directive.prototype.providers;\n    /** @type {?|undefined} */\n    Directive.prototype.exportAs;\n    /** @type {?|undefined} */\n    Directive.prototype.queries;\n    /** @type {?|undefined} */\n    Directive.prototype.guards;\n}\nexport var /** @type {?} */ createDirective = makeMetadataFactory('Directive', function (dir) {\n    if (dir === void 0) { dir = {}; }\n    return dir;\n});\n/**\n * @record\n */\nexport function Component() { }\nfunction Component_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Component.prototype.changeDetection;\n    /** @type {?|undefined} */\n    Component.prototype.viewProviders;\n    /** @type {?|undefined} */\n    Component.prototype.moduleId;\n    /** @type {?|undefined} */\n    Component.prototype.templateUrl;\n    /** @type {?|undefined} */\n    Component.prototype.template;\n    /** @type {?|undefined} */\n    Component.prototype.styleUrls;\n    /** @type {?|undefined} */\n    Component.prototype.styles;\n    /** @type {?|undefined} */\n    Component.prototype.animations;\n    /** @type {?|undefined} */\n    Component.prototype.encapsulation;\n    /** @type {?|undefined} */\n    Component.prototype.interpolation;\n    /** @type {?|undefined} */\n    Component.prototype.entryComponents;\n    /** @type {?|undefined} */\n    Component.prototype.preserveWhitespaces;\n}\n/** @enum {number} */\nvar ViewEncapsulation = {\n    Emulated: 0,\n    Native: 1,\n    None: 2,\n};\nexport { ViewEncapsulation };\nViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\nViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\nViewEncapsulation[ViewEncapsulation.None] = \"None\";\n/** @enum {number} */\nvar ChangeDetectionStrategy = {\n    OnPush: 0,\n    Default: 1,\n};\nexport { ChangeDetectionStrategy };\nChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\nChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\nexport var /** @type {?} */ createComponent = makeMetadataFactory('Component', function (c) {\n    if (c === void 0) { c = {}; }\n    return (tslib_1.__assign({ changeDetection: ChangeDetectionStrategy.Default }, c));\n});\n/**\n * @record\n */\nexport function Pipe() { }\nfunction Pipe_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Pipe.prototype.name;\n    /** @type {?|undefined} */\n    Pipe.prototype.pure;\n}\nexport var /** @type {?} */ createPipe = makeMetadataFactory('Pipe', function (p) { return (tslib_1.__assign({ pure: true }, p)); });\n/**\n * @record\n */\nexport function Input() { }\nfunction Input_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Input.prototype.bindingPropertyName;\n}\nexport var /** @type {?} */ createInput = makeMetadataFactory('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n/**\n * @record\n */\nexport function Output() { }\nfunction Output_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Output.prototype.bindingPropertyName;\n}\nexport var /** @type {?} */ createOutput = makeMetadataFactory('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });\n/**\n * @record\n */\nexport function HostBinding() { }\nfunction HostBinding_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    HostBinding.prototype.hostPropertyName;\n}\nexport var /** @type {?} */ createHostBinding = makeMetadataFactory('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });\n/**\n * @record\n */\nexport function HostListener() { }\nfunction HostListener_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    HostListener.prototype.eventName;\n    /** @type {?|undefined} */\n    HostListener.prototype.args;\n}\nexport var /** @type {?} */ createHostListener = makeMetadataFactory('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });\n/**\n * @record\n */\nexport function NgModule() { }\nfunction NgModule_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    NgModule.prototype.providers;\n    /** @type {?|undefined} */\n    NgModule.prototype.declarations;\n    /** @type {?|undefined} */\n    NgModule.prototype.imports;\n    /** @type {?|undefined} */\n    NgModule.prototype.exports;\n    /** @type {?|undefined} */\n    NgModule.prototype.entryComponents;\n    /** @type {?|undefined} */\n    NgModule.prototype.bootstrap;\n    /** @type {?|undefined} */\n    NgModule.prototype.schemas;\n    /** @type {?|undefined} */\n    NgModule.prototype.id;\n}\nexport var /** @type {?} */ createNgModule = makeMetadataFactory('NgModule', function (ngModule) { return ngModule; });\n/**\n * @record\n */\nexport function ModuleWithProviders() { }\nfunction ModuleWithProviders_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ModuleWithProviders.prototype.ngModule;\n    /** @type {?|undefined} */\n    ModuleWithProviders.prototype.providers;\n}\n/**\n * @record\n */\nexport function Injectable() { }\nfunction Injectable_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Injectable.prototype.providedIn;\n    /** @type {?|undefined} */\n    Injectable.prototype.useClass;\n    /** @type {?|undefined} */\n    Injectable.prototype.useExisting;\n    /** @type {?|undefined} */\n    Injectable.prototype.useValue;\n    /** @type {?|undefined} */\n    Injectable.prototype.useFactory;\n    /** @type {?|undefined} */\n    Injectable.prototype.deps;\n}\nexport var /** @type {?} */ createInjectable = makeMetadataFactory('Injectable', function (injectable) {\n    if (injectable === void 0) { injectable = {}; }\n    return injectable;\n});\n/**\n * @record\n */\nexport function SchemaMetadata() { }\nfunction SchemaMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SchemaMetadata.prototype.name;\n}\nexport var /** @type {?} */ CUSTOM_ELEMENTS_SCHEMA = {\n    name: 'custom-elements'\n};\nexport var /** @type {?} */ NO_ERRORS_SCHEMA = {\n    name: 'no-errors-schema'\n};\nexport var /** @type {?} */ createOptional = makeMetadataFactory('Optional');\nexport var /** @type {?} */ createSelf = makeMetadataFactory('Self');\nexport var /** @type {?} */ createSkipSelf = makeMetadataFactory('SkipSelf');\nexport var /** @type {?} */ createHost = makeMetadataFactory('Host');\nexport var /** @type {?} */ Type = Function;\n/** @enum {number} */\nvar SecurityContext = {\n    NONE: 0,\n    HTML: 1,\n    STYLE: 2,\n    SCRIPT: 3,\n    URL: 4,\n    RESOURCE_URL: 5,\n};\nexport { SecurityContext };\nSecurityContext[SecurityContext.NONE] = \"NONE\";\nSecurityContext[SecurityContext.HTML] = \"HTML\";\nSecurityContext[SecurityContext.STYLE] = \"STYLE\";\nSecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\nSecurityContext[SecurityContext.URL] = \"URL\";\nSecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n/** @enum {number} */\nvar NodeFlags = {\n    None: 0,\n    TypeElement: 1,\n    TypeText: 2,\n    ProjectedTemplate: 4,\n    CatRenderNode: 3,\n    TypeNgContent: 8,\n    TypePipe: 16,\n    TypePureArray: 32,\n    TypePureObject: 64,\n    TypePurePipe: 128,\n    CatPureExpression: 224,\n    TypeValueProvider: 256,\n    TypeClassProvider: 512,\n    TypeFactoryProvider: 1024,\n    TypeUseExistingProvider: 2048,\n    LazyProvider: 4096,\n    PrivateProvider: 8192,\n    TypeDirective: 16384,\n    Component: 32768,\n    CatProviderNoDirective: 3840,\n    CatProvider: 20224,\n    OnInit: 65536,\n    OnDestroy: 131072,\n    DoCheck: 262144,\n    OnChanges: 524288,\n    AfterContentInit: 1048576,\n    AfterContentChecked: 2097152,\n    AfterViewInit: 4194304,\n    AfterViewChecked: 8388608,\n    EmbeddedViews: 16777216,\n    ComponentView: 33554432,\n    TypeContentQuery: 67108864,\n    TypeViewQuery: 134217728,\n    StaticQuery: 268435456,\n    DynamicQuery: 536870912,\n    TypeModuleProvider: 1073741824,\n    CatQuery: 201326592,\n    // mutually exclusive values...\n    Types: 201347067,\n};\nexport { NodeFlags };\n/** @enum {number} */\nvar DepFlags = {\n    None: 0,\n    SkipSelf: 1,\n    Optional: 2,\n    Self: 4,\n    Value: 8,\n};\nexport { DepFlags };\n/** @enum {number} */\nvar InjectFlags = {\n    Default: 0,\n    /**\n       * Specifies that an injector should retrieve a dependency from any injector until reaching the\n       * host element of the current component. (Only used with Element Injector)\n       */\n    Host: 1,\n    /** Don't descend into ancestors of the node requesting injection. */\n    Self: 2,\n    /** Skip the node that is requesting injection. */\n    SkipSelf: 4,\n    /** Inject `defaultValue` instead if token not found. */\n    Optional: 8,\n};\nexport { InjectFlags };\n/** @enum {number} */\nvar ArgumentType = { Inline: 0, Dynamic: 1, };\nexport { ArgumentType };\n/** @enum {number} */\nvar BindingFlags = {\n    TypeElementAttribute: 1,\n    TypeElementClass: 2,\n    TypeElementStyle: 4,\n    TypeProperty: 8,\n    SyntheticProperty: 16,\n    SyntheticHostProperty: 32,\n    CatSyntheticProperty: 48,\n    // mutually exclusive values...\n    Types: 15,\n};\nexport { BindingFlags };\n/** @enum {number} */\nvar QueryBindingType = { First: 0, All: 1, };\nexport { QueryBindingType };\n/** @enum {number} */\nvar QueryValueType = {\n    ElementRef: 0,\n    RenderElement: 1,\n    TemplateRef: 2,\n    ViewContainerRef: 3,\n    Provider: 4,\n};\nexport { QueryValueType };\n/** @enum {number} */\nvar ViewFlags = {\n    None: 0,\n    OnPush: 2,\n};\nexport { ViewFlags };\n/** @enum {number} */\nvar MissingTranslationStrategy = {\n    Error: 0,\n    Warning: 1,\n    Ignore: 2,\n};\nexport { MissingTranslationStrategy };\nMissingTranslationStrategy[MissingTranslationStrategy.Error] = \"Error\";\nMissingTranslationStrategy[MissingTranslationStrategy.Warning] = \"Warning\";\nMissingTranslationStrategy[MissingTranslationStrategy.Ignore] = \"Ignore\";\n/**\n * @record\n * @template T\n */\nexport function MetadataFactory() { }\nfunction MetadataFactory_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (...args: any[]): T;\n    */\n    /** @type {?} */\n    MetadataFactory.prototype.isTypeOf;\n    /** @type {?} */\n    MetadataFactory.prototype.ngMetadataName;\n}\n/**\n * @template T\n * @param {?} name\n * @param {?=} props\n * @return {?}\n */\nfunction makeMetadataFactory(name, props) {\n    var /** @type {?} */ factory = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var /** @type {?} */ values = props ? props.apply(void 0, args) : {};\n        return tslib_1.__assign({ ngMetadataName: name }, values);\n    };\n    factory.isTypeOf = function (obj) { return obj && obj.ngMetadataName === name; };\n    factory.ngMetadataName = name;\n    return factory;\n}\n/**\n * @record\n */\nexport function Route() { }\nfunction Route_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Route.prototype.children;\n    /** @type {?|undefined} */\n    Route.prototype.loadChildren;\n}\n/** @enum {number} */\nvar SelectorFlags = {\n    /** Indicates this is the beginning of a new negative selector */\n    NOT: 1,\n    /** Mode for matching attributes */\n    ATTRIBUTE: 2,\n    /** Mode for matching tag names */\n    ELEMENT: 4,\n    /** Mode for matching class names */\n    CLASS: 8,\n};\nexport { SelectorFlags };\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction parserSelectorToSimpleSelector(selector) {\n    var /** @type {?} */ classes = selector.classNames && selector.classNames.length ? [8 /* CLASS */].concat(selector.classNames) :\n        [];\n    var /** @type {?} */ elementName = selector.element && selector.element !== '*' ? selector.element : '';\n    return [elementName].concat(selector.attrs, classes);\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction parserSelectorToNegativeSelector(selector) {\n    var /** @type {?} */ classes = selector.classNames && selector.classNames.length ? [8 /* CLASS */].concat(selector.classNames) :\n        [];\n    if (selector.element) {\n        return [\n            1 /* NOT */ | 4 /* ELEMENT */, selector.element\n        ].concat(selector.attrs, classes);\n    }\n    else if (selector.attrs.length) {\n        return [1 /* NOT */ | 2 /* ATTRIBUTE */].concat(selector.attrs, classes);\n    }\n    else {\n        return selector.classNames && selector.classNames.length ? [1 /* NOT */ | 8 /* CLASS */].concat(selector.classNames) :\n            [];\n    }\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction parserSelectorToR3Selector(selector) {\n    var /** @type {?} */ positive = parserSelectorToSimpleSelector(selector);\n    var /** @type {?} */ negative = selector.notSelectors && selector.notSelectors.length ?\n        selector.notSelectors.map(function (notSelector) { return parserSelectorToNegativeSelector(notSelector); }) :\n        [];\n    return positive.concat.apply(positive, negative);\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nexport function parseSelectorToR3Selector(selector) {\n    var /** @type {?} */ selectors = CssSelector.parse(selector);\n    return selectors.map(parserSelectorToR3Selector);\n}\n//# sourceMappingURL=core.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ DASH_CASE_REGEXP = /-+([a-z0-9])/g;\n/**\n * @param {?} input\n * @return {?}\n */\nexport function dashCaseToCamelCase(input) {\n    return input.replace(DASH_CASE_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        return m[1].toUpperCase();\n    });\n}\n/**\n * @param {?} input\n * @param {?} defaultValues\n * @return {?}\n */\nexport function splitAtColon(input, defaultValues) {\n    return _splitAt(input, ':', defaultValues);\n}\n/**\n * @param {?} input\n * @param {?} defaultValues\n * @return {?}\n */\nexport function splitAtPeriod(input, defaultValues) {\n    return _splitAt(input, '.', defaultValues);\n}\n/**\n * @param {?} input\n * @param {?} character\n * @param {?} defaultValues\n * @return {?}\n */\nfunction _splitAt(input, character, defaultValues) {\n    var /** @type {?} */ characterIndex = input.indexOf(character);\n    if (characterIndex == -1)\n        return defaultValues;\n    return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];\n}\n/**\n * @param {?} value\n * @param {?} visitor\n * @param {?} context\n * @return {?}\n */\nexport function visitValue(value, visitor, context) {\n    if (Array.isArray(value)) {\n        return visitor.visitArray(/** @type {?} */ (value), context);\n    }\n    if (isStrictStringMap(value)) {\n        return visitor.visitStringMap(/** @type {?} */ (value), context);\n    }\n    if (value == null || typeof value == 'string' || typeof value == 'number' ||\n        typeof value == 'boolean') {\n        return visitor.visitPrimitive(value, context);\n    }\n    return visitor.visitOther(value, context);\n}\n/**\n * @param {?} val\n * @return {?}\n */\nexport function isDefined(val) {\n    return val !== null && val !== undefined;\n}\n/**\n * @template T\n * @param {?} val\n * @return {?}\n */\nexport function noUndefined(val) {\n    return val === undefined ? /** @type {?} */ ((null)) : val;\n}\n/**\n * @record\n */\nexport function ValueVisitor() { }\nfunction ValueVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ValueVisitor.prototype.visitArray;\n    /** @type {?} */\n    ValueVisitor.prototype.visitStringMap;\n    /** @type {?} */\n    ValueVisitor.prototype.visitPrimitive;\n    /** @type {?} */\n    ValueVisitor.prototype.visitOther;\n}\nvar ValueTransformer = /** @class */ (function () {\n    function ValueTransformer() {\n    }\n    /**\n     * @param {?} arr\n     * @param {?} context\n     * @return {?}\n     */\n    ValueTransformer.prototype.visitArray = /**\n     * @param {?} arr\n     * @param {?} context\n     * @return {?}\n     */\n    function (arr, context) {\n        var _this = this;\n        return arr.map(function (value) { return visitValue(value, _this, context); });\n    };\n    /**\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    ValueTransformer.prototype.visitStringMap = /**\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    function (map, context) {\n        var _this = this;\n        var /** @type {?} */ result = {};\n        Object.keys(map).forEach(function (key) { result[key] = visitValue(map[key], _this, context); });\n        return result;\n    };\n    /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    ValueTransformer.prototype.visitPrimitive = /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    function (value, context) { return value; };\n    /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    ValueTransformer.prototype.visitOther = /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    function (value, context) { return value; };\n    return ValueTransformer;\n}());\nexport { ValueTransformer };\nexport var /** @type {?} */ SyncAsync = {\n    assertSync: function (value) {\n        if (isPromise(value)) {\n            throw new Error(\"Illegal state: value cannot be a promise\");\n        }\n        return value;\n    },\n    then: function (value, cb) { return isPromise(value) ? value.then(cb) : cb(value); },\n    all: function (syncAsyncValues) {\n        return syncAsyncValues.some(isPromise) ? Promise.all(syncAsyncValues) : /** @type {?} */ (syncAsyncValues);\n    }\n};\n/**\n * @param {?} msg\n * @return {?}\n */\nexport function error(msg) {\n    throw new Error(\"Internal Error: \" + msg);\n}\n/**\n * @param {?} msg\n * @param {?=} parseErrors\n * @return {?}\n */\nexport function syntaxError(msg, parseErrors) {\n    var /** @type {?} */ error = Error(msg);\n    (/** @type {?} */ (error))[ERROR_SYNTAX_ERROR] = true;\n    if (parseErrors)\n        (/** @type {?} */ (error))[ERROR_PARSE_ERRORS] = parseErrors;\n    return error;\n}\nvar /** @type {?} */ ERROR_SYNTAX_ERROR = 'ngSyntaxError';\nvar /** @type {?} */ ERROR_PARSE_ERRORS = 'ngParseErrors';\n/**\n * @param {?} error\n * @return {?}\n */\nexport function isSyntaxError(error) {\n    return (/** @type {?} */ (error))[ERROR_SYNTAX_ERROR];\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function getParseErrors(error) {\n    return (/** @type {?} */ (error))[ERROR_PARSE_ERRORS] || [];\n}\n/**\n * @param {?} s\n * @return {?}\n */\nexport function escapeRegExp(s) {\n    return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}\nvar /** @type {?} */ STRING_MAP_PROTO = Object.getPrototypeOf({});\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction isStrictStringMap(obj) {\n    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nexport function utf8Encode(str) {\n    var /** @type {?} */ encoded = '';\n    for (var /** @type {?} */ index = 0; index < str.length; index++) {\n        var /** @type {?} */ codePoint = str.charCodeAt(index);\n        // decode surrogate\n        // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        if (codePoint >= 0xd800 && codePoint <= 0xdbff && str.length > (index + 1)) {\n            var /** @type {?} */ low = str.charCodeAt(index + 1);\n            if (low >= 0xdc00 && low <= 0xdfff) {\n                index++;\n                codePoint = ((codePoint - 0xd800) << 10) + low - 0xdc00 + 0x10000;\n            }\n        }\n        if (codePoint <= 0x7f) {\n            encoded += String.fromCharCode(codePoint);\n        }\n        else if (codePoint <= 0x7ff) {\n            encoded += String.fromCharCode(((codePoint >> 6) & 0x1F) | 0xc0, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0xffff) {\n            encoded += String.fromCharCode((codePoint >> 12) | 0xe0, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n        else if (codePoint <= 0x1fffff) {\n            encoded += String.fromCharCode(((codePoint >> 18) & 0x07) | 0xf0, ((codePoint >> 12) & 0x3f) | 0x80, ((codePoint >> 6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);\n        }\n    }\n    return encoded;\n}\n/**\n * @record\n */\nexport function OutputContext() { }\nfunction OutputContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    OutputContext.prototype.genFilePath;\n    /** @type {?} */\n    OutputContext.prototype.statements;\n    /** @type {?} */\n    OutputContext.prototype.constantPool;\n    /** @type {?} */\n    OutputContext.prototype.importExpr;\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function stringify(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n    if (token instanceof Array) {\n        return '[' + token.map(stringify).join(', ') + ']';\n    }\n    if (token == null) {\n        return '' + token;\n    }\n    if (token.overriddenName) {\n        return \"\" + token.overriddenName;\n    }\n    if (token.name) {\n        return \"\" + token.name;\n    }\n    // WARNING: do not try to `JSON.stringify(token)` here\n    // see https://github.com/angular/angular/issues/23440\n    var /** @type {?} */ res = token.toString();\n    if (res == null) {\n        return '' + res;\n    }\n    var /** @type {?} */ newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n/**\n * Lazily retrieves the reference value from a forwardRef.\n * @param {?} type\n * @return {?}\n */\nexport function resolveForwardRef(type) {\n    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__')) {\n        return type();\n    }\n    else {\n        return type;\n    }\n}\n/**\n * Determine if the argument is shaped like a Promise\n * @param {?} obj\n * @return {?}\n */\nexport function isPromise(obj) {\n    // allow any Promise/A+ compliant thenable.\n    // It's up to the caller to ensure that obj.then conforms to the spec\n    return !!obj && typeof obj.then === 'function';\n}\nvar Version = /** @class */ (function () {\n    function Version(full) {\n        this.full = full;\n        var /** @type {?} */ splits = full.split('.');\n        this.major = splits[0];\n        this.minor = splits[1];\n        this.patch = splits.slice(2).join('.');\n    }\n    return Version;\n}());\nexport { Version };\nfunction Version_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Version.prototype.major;\n    /** @type {?} */\n    Version.prototype.minor;\n    /** @type {?} */\n    Version.prototype.patch;\n    /** @type {?} */\n    Version.prototype.full;\n}\n/**\n * @record\n */\nexport function Console() { }\nfunction Console_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Console.prototype.log;\n    /** @type {?} */\n    Console.prototype.warn;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * An Abstract Syntax Tree node representing part of a parsed Angular template.\n * @record\n */\nexport function TemplateAst() { }\nfunction TemplateAst_tsickle_Closure_declarations() {\n    /**\n     * The source span from which this node was parsed.\n     * @type {?}\n     */\n    TemplateAst.prototype.sourceSpan;\n    /**\n     * Visit this node and possibly transform it.\n     * @type {?}\n     */\n    TemplateAst.prototype.visit;\n}\n/**\n * A segment of text within the template.\n */\nvar /**\n * A segment of text within the template.\n */\nTextAst = /** @class */ (function () {\n    function TextAst(value, ngContentIndex, sourceSpan) {\n        this.value = value;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    TextAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitText(this, context); };\n    return TextAst;\n}());\n/**\n * A segment of text within the template.\n */\nexport { TextAst };\nfunction TextAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TextAst.prototype.value;\n    /** @type {?} */\n    TextAst.prototype.ngContentIndex;\n    /** @type {?} */\n    TextAst.prototype.sourceSpan;\n}\n/**\n * A bound expression within the text of a template.\n */\nvar /**\n * A bound expression within the text of a template.\n */\nBoundTextAst = /** @class */ (function () {\n    function BoundTextAst(value, ngContentIndex, sourceSpan) {\n        this.value = value;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BoundTextAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitBoundText(this, context);\n    };\n    return BoundTextAst;\n}());\n/**\n * A bound expression within the text of a template.\n */\nexport { BoundTextAst };\nfunction BoundTextAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundTextAst.prototype.value;\n    /** @type {?} */\n    BoundTextAst.prototype.ngContentIndex;\n    /** @type {?} */\n    BoundTextAst.prototype.sourceSpan;\n}\n/**\n * A plain attribute on an element.\n */\nvar /**\n * A plain attribute on an element.\n */\nAttrAst = /** @class */ (function () {\n    function AttrAst(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    AttrAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitAttr(this, context); };\n    return AttrAst;\n}());\n/**\n * A plain attribute on an element.\n */\nexport { AttrAst };\nfunction AttrAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AttrAst.prototype.name;\n    /** @type {?} */\n    AttrAst.prototype.value;\n    /** @type {?} */\n    AttrAst.prototype.sourceSpan;\n}\n/** @enum {number} */\nvar PropertyBindingType = {\n    // A normal binding to a property (e.g. `[property]=\"expression\"`).\n    Property: 0,\n    // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n    Attribute: 1,\n    // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n    Class: 2,\n    // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n    Style: 3,\n    // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n    Animation: 4,\n};\nexport { PropertyBindingType };\nPropertyBindingType[PropertyBindingType.Property] = \"Property\";\nPropertyBindingType[PropertyBindingType.Attribute] = \"Attribute\";\nPropertyBindingType[PropertyBindingType.Class] = \"Class\";\nPropertyBindingType[PropertyBindingType.Style] = \"Style\";\nPropertyBindingType[PropertyBindingType.Animation] = \"Animation\";\nvar /** @type {?} */ BoundPropertyMapping = (_a = {},\n    _a[4 /* Animation */] = PropertyBindingType.Animation,\n    _a[1 /* Attribute */] = PropertyBindingType.Attribute,\n    _a[2 /* Class */] = PropertyBindingType.Class,\n    _a[0 /* Property */] = PropertyBindingType.Property,\n    _a[3 /* Style */] = PropertyBindingType.Style,\n    _a);\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[\\@trigger]=\"stateExp\"`)\n */\nvar /**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[\\@trigger]=\"stateExp\"`)\n */\nBoundElementPropertyAst = /** @class */ (function () {\n    function BoundElementPropertyAst(name, type, securityContext, value, unit, sourceSpan) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n        this.isAnimation = this.type === PropertyBindingType.Animation;\n    }\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    BoundElementPropertyAst.fromBoundProperty = /**\n     * @param {?} prop\n     * @return {?}\n     */\n    function (prop) {\n        var /** @type {?} */ type = BoundPropertyMapping[prop.type];\n        return new BoundElementPropertyAst(prop.name, type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BoundElementPropertyAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitElementProperty(this, context);\n    };\n    return BoundElementPropertyAst;\n}());\n/**\n * A binding for an element property (e.g. `[property]=\"expression\"`) or an animation trigger (e.g.\n * `[\\@trigger]=\"stateExp\"`)\n */\nexport { BoundElementPropertyAst };\nfunction BoundElementPropertyAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.isAnimation;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.name;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.type;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.securityContext;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.value;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.unit;\n    /** @type {?} */\n    BoundElementPropertyAst.prototype.sourceSpan;\n}\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(\\@trigger.phase)=\"callback($event)\"`).\n */\nvar /**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(\\@trigger.phase)=\"callback($event)\"`).\n */\nBoundEventAst = /** @class */ (function () {\n    function BoundEventAst(name, target, phase, handler, sourceSpan) {\n        this.name = name;\n        this.target = target;\n        this.phase = phase;\n        this.handler = handler;\n        this.sourceSpan = sourceSpan;\n        this.fullName = BoundEventAst.calcFullName(this.name, this.target, this.phase);\n        this.isAnimation = !!this.phase;\n    }\n    /**\n     * @param {?} name\n     * @param {?} target\n     * @param {?} phase\n     * @return {?}\n     */\n    BoundEventAst.calcFullName = /**\n     * @param {?} name\n     * @param {?} target\n     * @param {?} phase\n     * @return {?}\n     */\n    function (name, target, phase) {\n        if (target) {\n            return target + \":\" + name;\n        }\n        if (phase) {\n            return \"@\" + name + \".\" + phase;\n        }\n        return name;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    BoundEventAst.fromParsedEvent = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var /** @type {?} */ target = event.type === 0 /* Regular */ ? event.targetOrPhase : null;\n        var /** @type {?} */ phase = event.type === 1 /* Animation */ ? event.targetOrPhase : null;\n        return new BoundEventAst(event.name, target, phase, event.handler, event.sourceSpan);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BoundEventAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitEvent(this, context);\n    };\n    return BoundEventAst;\n}());\n/**\n * A binding for an element event (e.g. `(event)=\"handler()\"`) or an animation trigger event (e.g.\n * `(\\@trigger.phase)=\"callback($event)\"`).\n */\nexport { BoundEventAst };\nfunction BoundEventAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundEventAst.prototype.fullName;\n    /** @type {?} */\n    BoundEventAst.prototype.isAnimation;\n    /** @type {?} */\n    BoundEventAst.prototype.name;\n    /** @type {?} */\n    BoundEventAst.prototype.target;\n    /** @type {?} */\n    BoundEventAst.prototype.phase;\n    /** @type {?} */\n    BoundEventAst.prototype.handler;\n    /** @type {?} */\n    BoundEventAst.prototype.sourceSpan;\n}\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nvar /**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nReferenceAst = /** @class */ (function () {\n    function ReferenceAst(name, value, originalValue, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.originalValue = originalValue;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ReferenceAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitReference(this, context);\n    };\n    return ReferenceAst;\n}());\n/**\n * A reference declaration on an element (e.g. `let someName=\"expression\"`).\n */\nexport { ReferenceAst };\nfunction ReferenceAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReferenceAst.prototype.name;\n    /** @type {?} */\n    ReferenceAst.prototype.value;\n    /** @type {?} */\n    ReferenceAst.prototype.originalValue;\n    /** @type {?} */\n    ReferenceAst.prototype.sourceSpan;\n}\n/**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nvar /**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nVariableAst = /** @class */ (function () {\n    function VariableAst(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    VariableAst.fromParsedVariable = /**\n     * @param {?} v\n     * @return {?}\n     */\n    function (v) {\n        return new VariableAst(v.name, v.value, v.sourceSpan);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    VariableAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitVariable(this, context);\n    };\n    return VariableAst;\n}());\n/**\n * A variable declaration on a <ng-template> (e.g. `var-someName=\"someLocalName\"`).\n */\nexport { VariableAst };\nfunction VariableAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    VariableAst.prototype.name;\n    /** @type {?} */\n    VariableAst.prototype.value;\n    /** @type {?} */\n    VariableAst.prototype.sourceSpan;\n}\n/**\n * An element declaration in a template.\n */\nvar /**\n * An element declaration in a template.\n */\nElementAst = /** @class */ (function () {\n    function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan, endSourceSpan) {\n        this.name = name;\n        this.attrs = attrs;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.references = references;\n        this.directives = directives;\n        this.providers = providers;\n        this.hasViewContainer = hasViewContainer;\n        this.queryMatches = queryMatches;\n        this.children = children;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ElementAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitElement(this, context);\n    };\n    return ElementAst;\n}());\n/**\n * An element declaration in a template.\n */\nexport { ElementAst };\nfunction ElementAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementAst.prototype.name;\n    /** @type {?} */\n    ElementAst.prototype.attrs;\n    /** @type {?} */\n    ElementAst.prototype.inputs;\n    /** @type {?} */\n    ElementAst.prototype.outputs;\n    /** @type {?} */\n    ElementAst.prototype.references;\n    /** @type {?} */\n    ElementAst.prototype.directives;\n    /** @type {?} */\n    ElementAst.prototype.providers;\n    /** @type {?} */\n    ElementAst.prototype.hasViewContainer;\n    /** @type {?} */\n    ElementAst.prototype.queryMatches;\n    /** @type {?} */\n    ElementAst.prototype.children;\n    /** @type {?} */\n    ElementAst.prototype.ngContentIndex;\n    /** @type {?} */\n    ElementAst.prototype.sourceSpan;\n    /** @type {?} */\n    ElementAst.prototype.endSourceSpan;\n}\n/**\n * A `<ng-template>` element included in an Angular template.\n */\nvar /**\n * A `<ng-template>` element included in an Angular template.\n */\nEmbeddedTemplateAst = /** @class */ (function () {\n    function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, queryMatches, children, ngContentIndex, sourceSpan) {\n        this.attrs = attrs;\n        this.outputs = outputs;\n        this.references = references;\n        this.variables = variables;\n        this.directives = directives;\n        this.providers = providers;\n        this.hasViewContainer = hasViewContainer;\n        this.queryMatches = queryMatches;\n        this.children = children;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    EmbeddedTemplateAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitEmbeddedTemplate(this, context);\n    };\n    return EmbeddedTemplateAst;\n}());\n/**\n * A `<ng-template>` element included in an Angular template.\n */\nexport { EmbeddedTemplateAst };\nfunction EmbeddedTemplateAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.attrs;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.outputs;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.references;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.variables;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.directives;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.providers;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.hasViewContainer;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.queryMatches;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.children;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.ngContentIndex;\n    /** @type {?} */\n    EmbeddedTemplateAst.prototype.sourceSpan;\n}\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nvar /**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nBoundDirectivePropertyAst = /** @class */ (function () {\n    function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {\n        this.directiveName = directiveName;\n        this.templateName = templateName;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BoundDirectivePropertyAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitDirectiveProperty(this, context);\n    };\n    return BoundDirectivePropertyAst;\n}());\n/**\n * A directive property with a bound value (e.g. `*ngIf=\"condition\").\n */\nexport { BoundDirectivePropertyAst };\nfunction BoundDirectivePropertyAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundDirectivePropertyAst.prototype.directiveName;\n    /** @type {?} */\n    BoundDirectivePropertyAst.prototype.templateName;\n    /** @type {?} */\n    BoundDirectivePropertyAst.prototype.value;\n    /** @type {?} */\n    BoundDirectivePropertyAst.prototype.sourceSpan;\n}\n/**\n * A directive declared on an element.\n */\nvar /**\n * A directive declared on an element.\n */\nDirectiveAst = /** @class */ (function () {\n    function DirectiveAst(directive, inputs, hostProperties, hostEvents, contentQueryStartId, sourceSpan) {\n        this.directive = directive;\n        this.inputs = inputs;\n        this.hostProperties = hostProperties;\n        this.hostEvents = hostEvents;\n        this.contentQueryStartId = contentQueryStartId;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    DirectiveAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitDirective(this, context);\n    };\n    return DirectiveAst;\n}());\n/**\n * A directive declared on an element.\n */\nexport { DirectiveAst };\nfunction DirectiveAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DirectiveAst.prototype.directive;\n    /** @type {?} */\n    DirectiveAst.prototype.inputs;\n    /** @type {?} */\n    DirectiveAst.prototype.hostProperties;\n    /** @type {?} */\n    DirectiveAst.prototype.hostEvents;\n    /** @type {?} */\n    DirectiveAst.prototype.contentQueryStartId;\n    /** @type {?} */\n    DirectiveAst.prototype.sourceSpan;\n}\n/**\n * A provider declared on an element\n */\nvar /**\n * A provider declared on an element\n */\nProviderAst = /** @class */ (function () {\n    function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan, isModule) {\n        this.token = token;\n        this.multiProvider = multiProvider;\n        this.eager = eager;\n        this.providers = providers;\n        this.providerType = providerType;\n        this.lifecycleHooks = lifecycleHooks;\n        this.sourceSpan = sourceSpan;\n        this.isModule = isModule;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ProviderAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        // No visit method in the visitor for now...\n        return null;\n    };\n    return ProviderAst;\n}());\n/**\n * A provider declared on an element\n */\nexport { ProviderAst };\nfunction ProviderAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderAst.prototype.token;\n    /** @type {?} */\n    ProviderAst.prototype.multiProvider;\n    /** @type {?} */\n    ProviderAst.prototype.eager;\n    /** @type {?} */\n    ProviderAst.prototype.providers;\n    /** @type {?} */\n    ProviderAst.prototype.providerType;\n    /** @type {?} */\n    ProviderAst.prototype.lifecycleHooks;\n    /** @type {?} */\n    ProviderAst.prototype.sourceSpan;\n    /** @type {?} */\n    ProviderAst.prototype.isModule;\n}\n/** @enum {number} */\nvar ProviderAstType = {\n    PublicService: 0,\n    PrivateService: 1,\n    Component: 2,\n    Directive: 3,\n    Builtin: 4,\n};\nexport { ProviderAstType };\nProviderAstType[ProviderAstType.PublicService] = \"PublicService\";\nProviderAstType[ProviderAstType.PrivateService] = \"PrivateService\";\nProviderAstType[ProviderAstType.Component] = \"Component\";\nProviderAstType[ProviderAstType.Directive] = \"Directive\";\nProviderAstType[ProviderAstType.Builtin] = \"Builtin\";\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nvar /**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nNgContentAst = /** @class */ (function () {\n    function NgContentAst(index, ngContentIndex, sourceSpan) {\n        this.index = index;\n        this.ngContentIndex = ngContentIndex;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    NgContentAst.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitNgContent(this, context);\n    };\n    return NgContentAst;\n}());\n/**\n * Position where content is to be projected (instance of `<ng-content>` in a template).\n */\nexport { NgContentAst };\nfunction NgContentAst_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgContentAst.prototype.index;\n    /** @type {?} */\n    NgContentAst.prototype.ngContentIndex;\n    /** @type {?} */\n    NgContentAst.prototype.sourceSpan;\n}\n/**\n * @record\n */\nexport function QueryMatch() { }\nfunction QueryMatch_tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryMatch.prototype.queryId;\n    /** @type {?} */\n    QueryMatch.prototype.value;\n}\n/**\n * A visitor for {\\@link TemplateAst} trees that will process each node.\n * @record\n */\nexport function TemplateAstVisitor() { }\nfunction TemplateAstVisitor_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    TemplateAstVisitor.prototype.visit;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitNgContent;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitEmbeddedTemplate;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitElement;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitReference;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitVariable;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitEvent;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitElementProperty;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitAttr;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitBoundText;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitText;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitDirective;\n    /** @type {?} */\n    TemplateAstVisitor.prototype.visitDirectiveProperty;\n}\n/**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nvar /**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nNullTemplateVisitor = /** @class */ (function () {\n    function NullTemplateVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitNgContent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitEmbeddedTemplate = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitReference = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitVariable = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitEvent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitElementProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitAttr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitBoundText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitDirective = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullTemplateVisitor.prototype.visitDirectiveProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    return NullTemplateVisitor;\n}());\n/**\n * A visitor that accepts each node but doesn't do anything. It is intended to be used\n * as the base class for a visitor that is only interested in a subset of the node types.\n */\nexport { NullTemplateVisitor };\n/**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nvar /**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nRecursiveTemplateAstVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(RecursiveTemplateAstVisitor, _super);\n    function RecursiveTemplateAstVisitor() {\n        return _super.call(this) || this;\n    }\n    // Nodes with children\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveTemplateAstVisitor.prototype.visitEmbeddedTemplate = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitChildren(context, function (visit) {\n            visit(ast.attrs);\n            visit(ast.references);\n            visit(ast.variables);\n            visit(ast.directives);\n            visit(ast.providers);\n            visit(ast.children);\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveTemplateAstVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitChildren(context, function (visit) {\n            visit(ast.attrs);\n            visit(ast.inputs);\n            visit(ast.outputs);\n            visit(ast.references);\n            visit(ast.directives);\n            visit(ast.providers);\n            visit(ast.children);\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveTemplateAstVisitor.prototype.visitDirective = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitChildren(context, function (visit) {\n            visit(ast.inputs);\n            visit(ast.hostProperties);\n            visit(ast.hostEvents);\n        });\n    };\n    /**\n     * @template T\n     * @param {?} context\n     * @param {?} cb\n     * @return {?}\n     */\n    RecursiveTemplateAstVisitor.prototype.visitChildren = /**\n     * @template T\n     * @param {?} context\n     * @param {?} cb\n     * @return {?}\n     */\n    function (context, cb) {\n        var /** @type {?} */ results = [];\n        var /** @type {?} */ t = this;\n        /**\n         * @template T\n         * @param {?} children\n         * @return {?}\n         */\n        function visit(children) {\n            if (children && children.length)\n                results.push(templateVisitAll(t, children, context));\n        }\n        cb(visit);\n        return [].concat.apply([], results);\n    };\n    return RecursiveTemplateAstVisitor;\n}(NullTemplateVisitor));\n/**\n * Base class that can be used to build a visitor that visits each node\n * in an template ast recursively.\n */\nexport { RecursiveTemplateAstVisitor };\n/**\n * Visit every node in a list of {\\@link TemplateAst}s with the given {\\@link TemplateAstVisitor}.\n * @param {?} visitor\n * @param {?} asts\n * @param {?=} context\n * @return {?}\n */\nexport function templateVisitAll(visitor, asts, context) {\n    if (context === void 0) { context = null; }\n    var /** @type {?} */ result = [];\n    var /** @type {?} */ visit = visitor.visit ?\n        function (ast) { return ((visitor.visit))(ast, context) || ast.visit(visitor, context); } :\n        function (ast) { return ast.visit(visitor, context); };\n    asts.forEach(function (ast) {\n        var /** @type {?} */ astResult = visit(ast);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\nvar _a;\n//# sourceMappingURL=template_ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ViewEncapsulation } from './core';\nimport { noUndefined } from './util';\nvar CompilerConfig = /** @class */ (function () {\n    function CompilerConfig(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.defaultEncapsulation, defaultEncapsulation = _c === void 0 ? ViewEncapsulation.Emulated : _c, _d = _b.useJit, useJit = _d === void 0 ? true : _d, _e = _b.jitDevMode, jitDevMode = _e === void 0 ? false : _e, _f = _b.missingTranslation, missingTranslation = _f === void 0 ? null : _f, preserveWhitespaces = _b.preserveWhitespaces, strictInjectionParameters = _b.strictInjectionParameters;\n        this.defaultEncapsulation = defaultEncapsulation;\n        this.useJit = !!useJit;\n        this.jitDevMode = !!jitDevMode;\n        this.missingTranslation = missingTranslation;\n        this.preserveWhitespaces = preserveWhitespacesDefault(noUndefined(preserveWhitespaces));\n        this.strictInjectionParameters = strictInjectionParameters === true;\n    }\n    return CompilerConfig;\n}());\nexport { CompilerConfig };\nfunction CompilerConfig_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompilerConfig.prototype.defaultEncapsulation;\n    /** @type {?} */\n    CompilerConfig.prototype.useJit;\n    /** @type {?} */\n    CompilerConfig.prototype.jitDevMode;\n    /** @type {?} */\n    CompilerConfig.prototype.missingTranslation;\n    /** @type {?} */\n    CompilerConfig.prototype.preserveWhitespaces;\n    /** @type {?} */\n    CompilerConfig.prototype.strictInjectionParameters;\n}\n/**\n * @param {?} preserveWhitespacesOption\n * @param {?=} defaultSetting\n * @return {?}\n */\nexport function preserveWhitespacesDefault(preserveWhitespacesOption, defaultSetting) {\n    if (defaultSetting === void 0) { defaultSetting = false; }\n    return preserveWhitespacesOption === null ? defaultSetting : preserveWhitespacesOption;\n}\n//# sourceMappingURL=config.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A token representing the a reference to a static type.\n *\n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nvar /**\n * A token representing the a reference to a static type.\n *\n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nStaticSymbol = /** @class */ (function () {\n    function StaticSymbol(filePath, name, members) {\n        this.filePath = filePath;\n        this.name = name;\n        this.members = members;\n    }\n    /**\n     * @return {?}\n     */\n    StaticSymbol.prototype.assertNoMembers = /**\n     * @return {?}\n     */\n    function () {\n        if (this.members.length) {\n            throw new Error(\"Illegal state: symbol without members expected, but got \" + JSON.stringify(this) + \".\");\n        }\n    };\n    return StaticSymbol;\n}());\n/**\n * A token representing the a reference to a static type.\n *\n * This token is unique for a filePath and name and can be used as a hash table key.\n */\nexport { StaticSymbol };\nfunction StaticSymbol_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticSymbol.prototype.filePath;\n    /** @type {?} */\n    StaticSymbol.prototype.name;\n    /** @type {?} */\n    StaticSymbol.prototype.members;\n}\n/**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nvar /**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nStaticSymbolCache = /** @class */ (function () {\n    function StaticSymbolCache() {\n        this.cache = new Map();\n    }\n    /**\n     * @param {?} declarationFile\n     * @param {?} name\n     * @param {?=} members\n     * @return {?}\n     */\n    StaticSymbolCache.prototype.get = /**\n     * @param {?} declarationFile\n     * @param {?} name\n     * @param {?=} members\n     * @return {?}\n     */\n    function (declarationFile, name, members) {\n        members = members || [];\n        var /** @type {?} */ memberSuffix = members.length ? \".\" + members.join('.') : '';\n        var /** @type {?} */ key = \"\\\"\" + declarationFile + \"\\\".\" + name + memberSuffix;\n        var /** @type {?} */ result = this.cache.get(key);\n        if (!result) {\n            result = new StaticSymbol(declarationFile, name, members);\n            this.cache.set(key, result);\n        }\n        return result;\n    };\n    return StaticSymbolCache;\n}());\n/**\n * A cache of static symbol used by the StaticReflector to return the same symbol for the\n * same symbol values.\n */\nexport { StaticSymbolCache };\nfunction StaticSymbolCache_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticSymbolCache.prototype.cache;\n}\n//# sourceMappingURL=static_symbol.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticSymbol } from './aot/static_symbol';\nimport { splitAtColon, stringify } from './util';\n// group 0: \"[prop] or (event) or @trigger\"\n// group 1: \"prop\" from \"[prop]\"\n// group 2: \"event\" from \"(event)\"\n// group 3: \"@trigger\" from \"@trigger\"\nvar /** @type {?} */ HOST_REG_EXP = /^(?:(?:\\[([^\\]]+)\\])|(?:\\(([^\\)]+)\\)))|(\\@[-\\w]+)$/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function sanitizeIdentifier(name) {\n    return name.replace(/\\W/g, '_');\n}\nvar /** @type {?} */ _anonymousTypeIndex = 0;\n/**\n * @param {?} compileIdentifier\n * @return {?}\n */\nexport function identifierName(compileIdentifier) {\n    if (!compileIdentifier || !compileIdentifier.reference) {\n        return null;\n    }\n    var /** @type {?} */ ref = compileIdentifier.reference;\n    if (ref instanceof StaticSymbol) {\n        return ref.name;\n    }\n    if (ref['__anonymousType']) {\n        return ref['__anonymousType'];\n    }\n    var /** @type {?} */ identifier = stringify(ref);\n    if (identifier.indexOf('(') >= 0) {\n        // case: anonymous functions!\n        identifier = \"anonymous_\" + _anonymousTypeIndex++;\n        ref['__anonymousType'] = identifier;\n    }\n    else {\n        identifier = sanitizeIdentifier(identifier);\n    }\n    return identifier;\n}\n/**\n * @param {?} compileIdentifier\n * @return {?}\n */\nexport function identifierModuleUrl(compileIdentifier) {\n    var /** @type {?} */ ref = compileIdentifier.reference;\n    if (ref instanceof StaticSymbol) {\n        return ref.filePath;\n    }\n    // Runtime type\n    return \"./\" + stringify(ref);\n}\n/**\n * @param {?} compType\n * @param {?} embeddedTemplateIndex\n * @return {?}\n */\nexport function viewClassName(compType, embeddedTemplateIndex) {\n    return \"View_\" + identifierName({ reference: compType }) + \"_\" + embeddedTemplateIndex;\n}\n/**\n * @param {?} compType\n * @return {?}\n */\nexport function rendererTypeName(compType) {\n    return \"RenderType_\" + identifierName({ reference: compType });\n}\n/**\n * @param {?} compType\n * @return {?}\n */\nexport function hostViewClassName(compType) {\n    return \"HostView_\" + identifierName({ reference: compType });\n}\n/**\n * @param {?} compType\n * @return {?}\n */\nexport function componentFactoryName(compType) {\n    return identifierName({ reference: compType }) + \"NgFactory\";\n}\n/**\n * @record\n */\nexport function ProxyClass() { }\nfunction ProxyClass_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProxyClass.prototype.setDelegate;\n}\n/**\n * @record\n */\nexport function CompileIdentifierMetadata() { }\nfunction CompileIdentifierMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileIdentifierMetadata.prototype.reference;\n}\n/** @enum {number} */\nvar CompileSummaryKind = {\n    Pipe: 0,\n    Directive: 1,\n    NgModule: 2,\n    Injectable: 3,\n};\nexport { CompileSummaryKind };\nCompileSummaryKind[CompileSummaryKind.Pipe] = \"Pipe\";\nCompileSummaryKind[CompileSummaryKind.Directive] = \"Directive\";\nCompileSummaryKind[CompileSummaryKind.NgModule] = \"NgModule\";\nCompileSummaryKind[CompileSummaryKind.Injectable] = \"Injectable\";\n/**\n * A CompileSummary is the data needed to use a directive / pipe / module\n * in other modules / components. However, this data is not enough to compile\n * the directive / module itself.\n * @record\n */\nexport function CompileTypeSummary() { }\nfunction CompileTypeSummary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileTypeSummary.prototype.summaryKind;\n    /** @type {?} */\n    CompileTypeSummary.prototype.type;\n}\n/**\n * @record\n */\nexport function CompileDiDependencyMetadata() { }\nfunction CompileDiDependencyMetadata_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isAttribute;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isSelf;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isHost;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isSkipSelf;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isOptional;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.isValue;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.token;\n    /** @type {?|undefined} */\n    CompileDiDependencyMetadata.prototype.value;\n}\n/**\n * @record\n */\nexport function CompileProviderMetadata() { }\nfunction CompileProviderMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileProviderMetadata.prototype.token;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.useClass;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.useValue;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.useExisting;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.useFactory;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.deps;\n    /** @type {?|undefined} */\n    CompileProviderMetadata.prototype.multi;\n}\n/**\n * @record\n */\nexport function CompileFactoryMetadata() { }\nfunction CompileFactoryMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileFactoryMetadata.prototype.diDeps;\n    /** @type {?} */\n    CompileFactoryMetadata.prototype.reference;\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenName(token) {\n    return token.value != null ? sanitizeIdentifier(token.value) : identifierName(token.identifier);\n}\n/**\n * @param {?} token\n * @return {?}\n */\nexport function tokenReference(token) {\n    if (token.identifier != null) {\n        return token.identifier.reference;\n    }\n    else {\n        return token.value;\n    }\n}\n/**\n * @record\n */\nexport function CompileTokenMetadata() { }\nfunction CompileTokenMetadata_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    CompileTokenMetadata.prototype.value;\n    /** @type {?|undefined} */\n    CompileTokenMetadata.prototype.identifier;\n}\n/**\n * @record\n */\nexport function CompileInjectableMetadata() { }\nfunction CompileInjectableMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileInjectableMetadata.prototype.symbol;\n    /** @type {?} */\n    CompileInjectableMetadata.prototype.type;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.providedIn;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.useValue;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.useClass;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.useExisting;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.useFactory;\n    /** @type {?|undefined} */\n    CompileInjectableMetadata.prototype.deps;\n}\n/**\n * Metadata regarding compilation of a type.\n * @record\n */\nexport function CompileTypeMetadata() { }\nfunction CompileTypeMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileTypeMetadata.prototype.diDeps;\n    /** @type {?} */\n    CompileTypeMetadata.prototype.lifecycleHooks;\n    /** @type {?} */\n    CompileTypeMetadata.prototype.reference;\n}\n/**\n * @record\n */\nexport function CompileQueryMetadata() { }\nfunction CompileQueryMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileQueryMetadata.prototype.selectors;\n    /** @type {?} */\n    CompileQueryMetadata.prototype.descendants;\n    /** @type {?} */\n    CompileQueryMetadata.prototype.first;\n    /** @type {?} */\n    CompileQueryMetadata.prototype.propertyName;\n    /** @type {?} */\n    CompileQueryMetadata.prototype.read;\n}\n/**\n * Metadata about a stylesheet\n */\nvar /**\n * Metadata about a stylesheet\n */\nCompileStylesheetMetadata = /** @class */ (function () {\n    function CompileStylesheetMetadata(_a) {\n        var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;\n        this.moduleUrl = moduleUrl || null;\n        this.styles = _normalizeArray(styles);\n        this.styleUrls = _normalizeArray(styleUrls);\n    }\n    return CompileStylesheetMetadata;\n}());\n/**\n * Metadata about a stylesheet\n */\nexport { CompileStylesheetMetadata };\nfunction CompileStylesheetMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileStylesheetMetadata.prototype.moduleUrl;\n    /** @type {?} */\n    CompileStylesheetMetadata.prototype.styles;\n    /** @type {?} */\n    CompileStylesheetMetadata.prototype.styleUrls;\n}\n/**\n * Summary Metadata regarding compilation of a template.\n * @record\n */\nexport function CompileTemplateSummary() { }\nfunction CompileTemplateSummary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileTemplateSummary.prototype.ngContentSelectors;\n    /** @type {?} */\n    CompileTemplateSummary.prototype.encapsulation;\n}\n/**\n * Metadata regarding compilation of a template.\n */\nvar /**\n * Metadata regarding compilation of a template.\n */\nCompileTemplateMetadata = /** @class */ (function () {\n    function CompileTemplateMetadata(_a) {\n        var encapsulation = _a.encapsulation, template = _a.template, templateUrl = _a.templateUrl, htmlAst = _a.htmlAst, styles = _a.styles, styleUrls = _a.styleUrls, externalStylesheets = _a.externalStylesheets, animations = _a.animations, ngContentSelectors = _a.ngContentSelectors, interpolation = _a.interpolation, isInline = _a.isInline, preserveWhitespaces = _a.preserveWhitespaces;\n        this.encapsulation = encapsulation;\n        this.template = template;\n        this.templateUrl = templateUrl;\n        this.htmlAst = htmlAst;\n        this.styles = _normalizeArray(styles);\n        this.styleUrls = _normalizeArray(styleUrls);\n        this.externalStylesheets = _normalizeArray(externalStylesheets);\n        this.animations = animations ? flatten(animations) : [];\n        this.ngContentSelectors = ngContentSelectors || [];\n        if (interpolation && interpolation.length != 2) {\n            throw new Error(\"'interpolation' should have a start and an end symbol.\");\n        }\n        this.interpolation = interpolation;\n        this.isInline = isInline;\n        this.preserveWhitespaces = preserveWhitespaces;\n    }\n    /**\n     * @return {?}\n     */\n    CompileTemplateMetadata.prototype.toSummary = /**\n     * @return {?}\n     */\n    function () {\n        return {\n            ngContentSelectors: this.ngContentSelectors,\n            encapsulation: this.encapsulation,\n        };\n    };\n    return CompileTemplateMetadata;\n}());\n/**\n * Metadata regarding compilation of a template.\n */\nexport { CompileTemplateMetadata };\nfunction CompileTemplateMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.encapsulation;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.template;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.templateUrl;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.htmlAst;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.isInline;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.styles;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.styleUrls;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.externalStylesheets;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.animations;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.ngContentSelectors;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.interpolation;\n    /** @type {?} */\n    CompileTemplateMetadata.prototype.preserveWhitespaces;\n}\n/**\n * @record\n */\nexport function CompileEntryComponentMetadata() { }\nfunction CompileEntryComponentMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileEntryComponentMetadata.prototype.componentType;\n    /** @type {?} */\n    CompileEntryComponentMetadata.prototype.componentFactory;\n}\n/**\n * @record\n */\nexport function CompileDirectiveSummary() { }\nfunction CompileDirectiveSummary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.type;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.isComponent;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.selector;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.exportAs;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.inputs;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.outputs;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.hostListeners;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.hostProperties;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.hostAttributes;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.providers;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.viewProviders;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.queries;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.guards;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.viewQueries;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.entryComponents;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.changeDetection;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.template;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.componentViewType;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.rendererType;\n    /** @type {?} */\n    CompileDirectiveSummary.prototype.componentFactory;\n}\n/**\n * Metadata regarding compilation of a directive.\n */\nvar /**\n * Metadata regarding compilation of a directive.\n */\nCompileDirectiveMetadata = /** @class */ (function () {\n    function CompileDirectiveMetadata(_a) {\n        var isHost = _a.isHost, type = _a.type, isComponent = _a.isComponent, selector = _a.selector, exportAs = _a.exportAs, changeDetection = _a.changeDetection, inputs = _a.inputs, outputs = _a.outputs, hostListeners = _a.hostListeners, hostProperties = _a.hostProperties, hostAttributes = _a.hostAttributes, providers = _a.providers, viewProviders = _a.viewProviders, queries = _a.queries, guards = _a.guards, viewQueries = _a.viewQueries, entryComponents = _a.entryComponents, template = _a.template, componentViewType = _a.componentViewType, rendererType = _a.rendererType, componentFactory = _a.componentFactory;\n        this.isHost = !!isHost;\n        this.type = type;\n        this.isComponent = isComponent;\n        this.selector = selector;\n        this.exportAs = exportAs;\n        this.changeDetection = changeDetection;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.hostListeners = hostListeners;\n        this.hostProperties = hostProperties;\n        this.hostAttributes = hostAttributes;\n        this.providers = _normalizeArray(providers);\n        this.viewProviders = _normalizeArray(viewProviders);\n        this.queries = _normalizeArray(queries);\n        this.guards = guards;\n        this.viewQueries = _normalizeArray(viewQueries);\n        this.entryComponents = _normalizeArray(entryComponents);\n        this.template = template;\n        this.componentViewType = componentViewType;\n        this.rendererType = rendererType;\n        this.componentFactory = componentFactory;\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    CompileDirectiveMetadata.create = /**\n     * @param {?} __0\n     * @return {?}\n     */\n    function (_a) {\n        var isHost = _a.isHost, type = _a.type, isComponent = _a.isComponent, selector = _a.selector, exportAs = _a.exportAs, changeDetection = _a.changeDetection, inputs = _a.inputs, outputs = _a.outputs, host = _a.host, providers = _a.providers, viewProviders = _a.viewProviders, queries = _a.queries, guards = _a.guards, viewQueries = _a.viewQueries, entryComponents = _a.entryComponents, template = _a.template, componentViewType = _a.componentViewType, rendererType = _a.rendererType, componentFactory = _a.componentFactory;\n        var /** @type {?} */ hostListeners = {};\n        var /** @type {?} */ hostProperties = {};\n        var /** @type {?} */ hostAttributes = {};\n        if (host != null) {\n            Object.keys(host).forEach(function (key) {\n                var /** @type {?} */ value = host[key];\n                var /** @type {?} */ matches = key.match(HOST_REG_EXP);\n                if (matches === null) {\n                    hostAttributes[key] = value;\n                }\n                else if (matches[1] != null) {\n                    hostProperties[matches[1]] = value;\n                }\n                else if (matches[2] != null) {\n                    hostListeners[matches[2]] = value;\n                }\n            });\n        }\n        var /** @type {?} */ inputsMap = {};\n        if (inputs != null) {\n            inputs.forEach(function (bindConfig) {\n                // canonical syntax: `dirProp: elProp`\n                // if there is no `:`, use dirProp = elProp\n                var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n                inputsMap[parts[0]] = parts[1];\n            });\n        }\n        var /** @type {?} */ outputsMap = {};\n        if (outputs != null) {\n            outputs.forEach(function (bindConfig) {\n                // canonical syntax: `dirProp: elProp`\n                // if there is no `:`, use dirProp = elProp\n                var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);\n                outputsMap[parts[0]] = parts[1];\n            });\n        }\n        return new CompileDirectiveMetadata({\n            isHost: isHost,\n            type: type,\n            isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection,\n            inputs: inputsMap,\n            outputs: outputsMap,\n            hostListeners: hostListeners,\n            hostProperties: hostProperties,\n            hostAttributes: hostAttributes,\n            providers: providers,\n            viewProviders: viewProviders,\n            queries: queries,\n            guards: guards,\n            viewQueries: viewQueries,\n            entryComponents: entryComponents,\n            template: template,\n            componentViewType: componentViewType,\n            rendererType: rendererType,\n            componentFactory: componentFactory,\n        });\n    };\n    /**\n     * @return {?}\n     */\n    CompileDirectiveMetadata.prototype.toSummary = /**\n     * @return {?}\n     */\n    function () {\n        return {\n            summaryKind: CompileSummaryKind.Directive,\n            type: this.type,\n            isComponent: this.isComponent,\n            selector: this.selector,\n            exportAs: this.exportAs,\n            inputs: this.inputs,\n            outputs: this.outputs,\n            hostListeners: this.hostListeners,\n            hostProperties: this.hostProperties,\n            hostAttributes: this.hostAttributes,\n            providers: this.providers,\n            viewProviders: this.viewProviders,\n            queries: this.queries,\n            guards: this.guards,\n            viewQueries: this.viewQueries,\n            entryComponents: this.entryComponents,\n            changeDetection: this.changeDetection,\n            template: this.template && this.template.toSummary(),\n            componentViewType: this.componentViewType,\n            rendererType: this.rendererType,\n            componentFactory: this.componentFactory\n        };\n    };\n    return CompileDirectiveMetadata;\n}());\n/**\n * Metadata regarding compilation of a directive.\n */\nexport { CompileDirectiveMetadata };\nfunction CompileDirectiveMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.isHost;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.type;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.isComponent;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.selector;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.exportAs;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.changeDetection;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.inputs;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.outputs;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.hostListeners;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.hostProperties;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.hostAttributes;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.providers;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.viewProviders;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.queries;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.guards;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.viewQueries;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.entryComponents;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.template;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.componentViewType;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.rendererType;\n    /** @type {?} */\n    CompileDirectiveMetadata.prototype.componentFactory;\n}\n/**\n * @record\n */\nexport function CompilePipeSummary() { }\nfunction CompilePipeSummary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompilePipeSummary.prototype.type;\n    /** @type {?} */\n    CompilePipeSummary.prototype.name;\n    /** @type {?} */\n    CompilePipeSummary.prototype.pure;\n}\nvar CompilePipeMetadata = /** @class */ (function () {\n    function CompilePipeMetadata(_a) {\n        var type = _a.type, name = _a.name, pure = _a.pure;\n        this.type = type;\n        this.name = name;\n        this.pure = !!pure;\n    }\n    /**\n     * @return {?}\n     */\n    CompilePipeMetadata.prototype.toSummary = /**\n     * @return {?}\n     */\n    function () {\n        return {\n            summaryKind: CompileSummaryKind.Pipe,\n            type: this.type,\n            name: this.name,\n            pure: this.pure\n        };\n    };\n    return CompilePipeMetadata;\n}());\nexport { CompilePipeMetadata };\nfunction CompilePipeMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompilePipeMetadata.prototype.type;\n    /** @type {?} */\n    CompilePipeMetadata.prototype.name;\n    /** @type {?} */\n    CompilePipeMetadata.prototype.pure;\n}\n/**\n * @record\n */\nexport function CompileNgModuleSummary() { }\nfunction CompileNgModuleSummary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.type;\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.exportedDirectives;\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.exportedPipes;\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.entryComponents;\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.providers;\n    /** @type {?} */\n    CompileNgModuleSummary.prototype.modules;\n}\nvar CompileShallowModuleMetadata = /** @class */ (function () {\n    function CompileShallowModuleMetadata() {\n    }\n    return CompileShallowModuleMetadata;\n}());\nexport { CompileShallowModuleMetadata };\nfunction CompileShallowModuleMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileShallowModuleMetadata.prototype.type;\n    /** @type {?} */\n    CompileShallowModuleMetadata.prototype.rawExports;\n    /** @type {?} */\n    CompileShallowModuleMetadata.prototype.rawImports;\n    /** @type {?} */\n    CompileShallowModuleMetadata.prototype.rawProviders;\n}\n/**\n * Metadata regarding compilation of a module.\n */\nvar /**\n * Metadata regarding compilation of a module.\n */\nCompileNgModuleMetadata = /** @class */ (function () {\n    function CompileNgModuleMetadata(_a) {\n        var type = _a.type, providers = _a.providers, declaredDirectives = _a.declaredDirectives, exportedDirectives = _a.exportedDirectives, declaredPipes = _a.declaredPipes, exportedPipes = _a.exportedPipes, entryComponents = _a.entryComponents, bootstrapComponents = _a.bootstrapComponents, importedModules = _a.importedModules, exportedModules = _a.exportedModules, schemas = _a.schemas, transitiveModule = _a.transitiveModule, id = _a.id;\n        this.type = type || null;\n        this.declaredDirectives = _normalizeArray(declaredDirectives);\n        this.exportedDirectives = _normalizeArray(exportedDirectives);\n        this.declaredPipes = _normalizeArray(declaredPipes);\n        this.exportedPipes = _normalizeArray(exportedPipes);\n        this.providers = _normalizeArray(providers);\n        this.entryComponents = _normalizeArray(entryComponents);\n        this.bootstrapComponents = _normalizeArray(bootstrapComponents);\n        this.importedModules = _normalizeArray(importedModules);\n        this.exportedModules = _normalizeArray(exportedModules);\n        this.schemas = _normalizeArray(schemas);\n        this.id = id || null;\n        this.transitiveModule = transitiveModule || null;\n    }\n    /**\n     * @return {?}\n     */\n    CompileNgModuleMetadata.prototype.toSummary = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ module = /** @type {?} */ ((this.transitiveModule));\n        return {\n            summaryKind: CompileSummaryKind.NgModule,\n            type: this.type,\n            entryComponents: module.entryComponents,\n            providers: module.providers,\n            modules: module.modules,\n            exportedDirectives: module.exportedDirectives,\n            exportedPipes: module.exportedPipes\n        };\n    };\n    return CompileNgModuleMetadata;\n}());\n/**\n * Metadata regarding compilation of a module.\n */\nexport { CompileNgModuleMetadata };\nfunction CompileNgModuleMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.type;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.declaredDirectives;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.exportedDirectives;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.declaredPipes;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.exportedPipes;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.entryComponents;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.bootstrapComponents;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.providers;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.importedModules;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.exportedModules;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.schemas;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.id;\n    /** @type {?} */\n    CompileNgModuleMetadata.prototype.transitiveModule;\n}\nvar TransitiveCompileNgModuleMetadata = /** @class */ (function () {\n    function TransitiveCompileNgModuleMetadata() {\n        this.directivesSet = new Set();\n        this.directives = [];\n        this.exportedDirectivesSet = new Set();\n        this.exportedDirectives = [];\n        this.pipesSet = new Set();\n        this.pipes = [];\n        this.exportedPipesSet = new Set();\n        this.exportedPipes = [];\n        this.modulesSet = new Set();\n        this.modules = [];\n        this.entryComponentsSet = new Set();\n        this.entryComponents = [];\n        this.providers = [];\n    }\n    /**\n     * @param {?} provider\n     * @param {?} module\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addProvider = /**\n     * @param {?} provider\n     * @param {?} module\n     * @return {?}\n     */\n    function (provider, module) {\n        this.providers.push({ provider: provider, module: module });\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addDirective = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        if (!this.directivesSet.has(id.reference)) {\n            this.directivesSet.add(id.reference);\n            this.directives.push(id);\n        }\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        if (!this.exportedDirectivesSet.has(id.reference)) {\n            this.exportedDirectivesSet.add(id.reference);\n            this.exportedDirectives.push(id);\n        }\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addPipe = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        if (!this.pipesSet.has(id.reference)) {\n            this.pipesSet.add(id.reference);\n            this.pipes.push(id);\n        }\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        if (!this.exportedPipesSet.has(id.reference)) {\n            this.exportedPipesSet.add(id.reference);\n            this.exportedPipes.push(id);\n        }\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addModule = /**\n     * @param {?} id\n     * @return {?}\n     */\n    function (id) {\n        if (!this.modulesSet.has(id.reference)) {\n            this.modulesSet.add(id.reference);\n            this.modules.push(id);\n        }\n    };\n    /**\n     * @param {?} ec\n     * @return {?}\n     */\n    TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = /**\n     * @param {?} ec\n     * @return {?}\n     */\n    function (ec) {\n        if (!this.entryComponentsSet.has(ec.componentType)) {\n            this.entryComponentsSet.add(ec.componentType);\n            this.entryComponents.push(ec);\n        }\n    };\n    return TransitiveCompileNgModuleMetadata;\n}());\nexport { TransitiveCompileNgModuleMetadata };\nfunction TransitiveCompileNgModuleMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.directivesSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.directives;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.exportedDirectivesSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.exportedDirectives;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.pipesSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.pipes;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.exportedPipesSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.exportedPipes;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.modulesSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.modules;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.entryComponentsSet;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.entryComponents;\n    /** @type {?} */\n    TransitiveCompileNgModuleMetadata.prototype.providers;\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nfunction _normalizeArray(obj) {\n    return obj || [];\n}\nvar ProviderMeta = /** @class */ (function () {\n    function ProviderMeta(token, _a) {\n        var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;\n        this.token = token;\n        this.useClass = useClass || null;\n        this.useValue = useValue;\n        this.useExisting = useExisting;\n        this.useFactory = useFactory || null;\n        this.dependencies = deps || null;\n        this.multi = !!multi;\n    }\n    return ProviderMeta;\n}());\nexport { ProviderMeta };\nfunction ProviderMeta_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderMeta.prototype.token;\n    /** @type {?} */\n    ProviderMeta.prototype.useClass;\n    /** @type {?} */\n    ProviderMeta.prototype.useValue;\n    /** @type {?} */\n    ProviderMeta.prototype.useExisting;\n    /** @type {?} */\n    ProviderMeta.prototype.useFactory;\n    /** @type {?} */\n    ProviderMeta.prototype.dependencies;\n    /** @type {?} */\n    ProviderMeta.prototype.multi;\n}\n/**\n * @template T\n * @param {?} list\n * @return {?}\n */\nexport function flatten(list) {\n    return list.reduce(function (flat, item) {\n        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;\n        return (/** @type {?} */ (flat)).concat(flatItem);\n    }, []);\n}\n/**\n * @param {?} url\n * @return {?}\n */\nfunction jitSourceUrl(url) {\n    // Note: We need 3 \"/\" so that ng shows up as a separate domain\n    // in the chrome dev tools.\n    return url.replace(/(\\w+:\\/\\/[\\w:-]+)?(\\/+)?/, 'ng:///');\n}\n/**\n * @param {?} ngModuleType\n * @param {?} compMeta\n * @param {?} templateMeta\n * @return {?}\n */\nexport function templateSourceUrl(ngModuleType, compMeta, templateMeta) {\n    var /** @type {?} */ url;\n    if (templateMeta.isInline) {\n        if (compMeta.type.reference instanceof StaticSymbol) {\n            // Note: a .ts file might contain multiple components with inline templates,\n            // so we need to give them unique urls, as these will be used for sourcemaps.\n            url = compMeta.type.reference.filePath + \".\" + compMeta.type.reference.name + \".html\";\n        }\n        else {\n            url = identifierName(ngModuleType) + \"/\" + identifierName(compMeta.type) + \".html\";\n        }\n    }\n    else {\n        url = /** @type {?} */ ((templateMeta.templateUrl));\n    }\n    return compMeta.type.reference instanceof StaticSymbol ? url : jitSourceUrl(url);\n}\n/**\n * @param {?} meta\n * @param {?} id\n * @return {?}\n */\nexport function sharedStylesheetJitUrl(meta, id) {\n    var /** @type {?} */ pathParts = /** @type {?} */ ((meta.moduleUrl)).split(/\\/\\\\/g);\n    var /** @type {?} */ baseName = pathParts[pathParts.length - 1];\n    return jitSourceUrl(\"css/\" + id + baseName + \".ngstyle.js\");\n}\n/**\n * @param {?} moduleMeta\n * @return {?}\n */\nexport function ngModuleJitUrl(moduleMeta) {\n    return jitSourceUrl(identifierName(moduleMeta.type) + \"/module.ngfactory.js\");\n}\n/**\n * @param {?} ngModuleType\n * @param {?} compMeta\n * @return {?}\n */\nexport function templateJitUrl(ngModuleType, compMeta) {\n    return jitSourceUrl(identifierName(ngModuleType) + \"/\" + identifierName(compMeta.type) + \".ngfactory.js\");\n}\n//# sourceMappingURL=compile_metadata.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n *\n * For example, the expression `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n *\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n * @template T\n */\nvar /**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n *\n * For example, the expression `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n *\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n * @template T\n */\nAstPath = /** @class */ (function () {\n    function AstPath(path, position) {\n        if (position === void 0) { position = -1; }\n        this.path = path;\n        this.position = position;\n    }\n    Object.defineProperty(AstPath.prototype, \"empty\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return !this.path || !this.path.length; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AstPath.prototype, \"head\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.path[0]; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AstPath.prototype, \"tail\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.path[this.path.length - 1]; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    AstPath.prototype.parentOf = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        return node && this.path[this.path.indexOf(node) - 1];\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    AstPath.prototype.childOf = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { return this.path[this.path.indexOf(node) + 1]; };\n    /**\n     * @template N\n     * @param {?} ctor\n     * @return {?}\n     */\n    AstPath.prototype.first = /**\n     * @template N\n     * @param {?} ctor\n     * @return {?}\n     */\n    function (ctor) {\n        for (var /** @type {?} */ i = this.path.length - 1; i >= 0; i--) {\n            var /** @type {?} */ item = this.path[i];\n            if (item instanceof ctor)\n                return /** @type {?} */ (item);\n        }\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    AstPath.prototype.push = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) { this.path.push(node); };\n    /**\n     * @return {?}\n     */\n    AstPath.prototype.pop = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((this.path.pop())); };\n    return AstPath;\n}());\n/**\n * A path is an ordered set of elements. Typically a path is to  a\n * particular offset in a source file. The head of the list is the top\n * most node. The tail is the node that contains the offset directly.\n *\n * For example, the expression `a + b + c` might have an ast that looks\n * like:\n *     +\n *    / \\\n *   a   +\n *      / \\\n *     b   c\n *\n * The path to the node at offset 9 would be `['+' at 1-10, '+' at 7-10,\n * 'c' at 9-10]` and the path the node at offset 1 would be\n * `['+' at 1-10, 'a' at 1-2]`.\n * @template T\n */\nexport { AstPath };\nfunction AstPath_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AstPath.prototype.path;\n    /** @type {?} */\n    AstPath.prototype.position;\n}\n//# sourceMappingURL=ast_path.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { AstPath } from '../ast_path';\n/**\n * @record\n */\nexport function Node() { }\nfunction Node_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Node.prototype.sourceSpan;\n    /** @type {?} */\n    Node.prototype.visit;\n}\nvar Text = /** @class */ (function () {\n    function Text(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Text.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitText(this, context); };\n    return Text;\n}());\nexport { Text };\nfunction Text_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Text.prototype.value;\n    /** @type {?} */\n    Text.prototype.sourceSpan;\n}\nvar Expansion = /** @class */ (function () {\n    function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {\n        this.switchValue = switchValue;\n        this.type = type;\n        this.cases = cases;\n        this.sourceSpan = sourceSpan;\n        this.switchValueSourceSpan = switchValueSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Expansion.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitExpansion(this, context); };\n    return Expansion;\n}());\nexport { Expansion };\nfunction Expansion_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Expansion.prototype.switchValue;\n    /** @type {?} */\n    Expansion.prototype.type;\n    /** @type {?} */\n    Expansion.prototype.cases;\n    /** @type {?} */\n    Expansion.prototype.sourceSpan;\n    /** @type {?} */\n    Expansion.prototype.switchValueSourceSpan;\n}\nvar ExpansionCase = /** @class */ (function () {\n    function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {\n        this.value = value;\n        this.expression = expression;\n        this.sourceSpan = sourceSpan;\n        this.valueSourceSpan = valueSourceSpan;\n        this.expSourceSpan = expSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ExpansionCase.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitExpansionCase(this, context); };\n    return ExpansionCase;\n}());\nexport { ExpansionCase };\nfunction ExpansionCase_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExpansionCase.prototype.value;\n    /** @type {?} */\n    ExpansionCase.prototype.expression;\n    /** @type {?} */\n    ExpansionCase.prototype.sourceSpan;\n    /** @type {?} */\n    ExpansionCase.prototype.valueSourceSpan;\n    /** @type {?} */\n    ExpansionCase.prototype.expSourceSpan;\n}\nvar Attribute = /** @class */ (function () {\n    function Attribute(name, value, sourceSpan, valueSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.valueSpan = valueSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Attribute.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitAttribute(this, context); };\n    return Attribute;\n}());\nexport { Attribute };\nfunction Attribute_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Attribute.prototype.name;\n    /** @type {?} */\n    Attribute.prototype.value;\n    /** @type {?} */\n    Attribute.prototype.sourceSpan;\n    /** @type {?} */\n    Attribute.prototype.valueSpan;\n}\nvar Element = /** @class */ (function () {\n    function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {\n        if (startSourceSpan === void 0) { startSourceSpan = null; }\n        if (endSourceSpan === void 0) { endSourceSpan = null; }\n        this.name = name;\n        this.attrs = attrs;\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Element.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitElement(this, context); };\n    return Element;\n}());\nexport { Element };\nfunction Element_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Element.prototype.name;\n    /** @type {?} */\n    Element.prototype.attrs;\n    /** @type {?} */\n    Element.prototype.children;\n    /** @type {?} */\n    Element.prototype.sourceSpan;\n    /** @type {?} */\n    Element.prototype.startSourceSpan;\n    /** @type {?} */\n    Element.prototype.endSourceSpan;\n}\nvar Comment = /** @class */ (function () {\n    function Comment(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Comment.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitComment(this, context); };\n    return Comment;\n}());\nexport { Comment };\nfunction Comment_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Comment.prototype.value;\n    /** @type {?} */\n    Comment.prototype.sourceSpan;\n}\n/**\n * @record\n */\nexport function Visitor() { }\nfunction Visitor_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Visitor.prototype.visit;\n    /** @type {?} */\n    Visitor.prototype.visitElement;\n    /** @type {?} */\n    Visitor.prototype.visitAttribute;\n    /** @type {?} */\n    Visitor.prototype.visitText;\n    /** @type {?} */\n    Visitor.prototype.visitComment;\n    /** @type {?} */\n    Visitor.prototype.visitExpansion;\n    /** @type {?} */\n    Visitor.prototype.visitExpansionCase;\n}\n/**\n * @param {?} visitor\n * @param {?} nodes\n * @param {?=} context\n * @return {?}\n */\nexport function visitAll(visitor, nodes, context) {\n    if (context === void 0) { context = null; }\n    var /** @type {?} */ result = [];\n    var /** @type {?} */ visit = visitor.visit ?\n        function (ast) { return ((visitor.visit))(ast, context) || ast.visit(visitor, context); } :\n        function (ast) { return ast.visit(visitor, context); };\n    nodes.forEach(function (ast) {\n        var /** @type {?} */ astResult = visit(ast);\n        if (astResult) {\n            result.push(astResult);\n        }\n    });\n    return result;\n}\nvar RecursiveVisitor = /** @class */ (function () {\n    function RecursiveVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.visitChildren(context, function (visit) {\n            visit(ast.attrs);\n            visit(ast.children);\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitAttribute = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitComment = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitExpansion = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitChildren(context, function (visit) { visit(ast.cases); });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitExpansionCase = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @template T\n     * @param {?} context\n     * @param {?} cb\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitChildren = /**\n     * @template T\n     * @param {?} context\n     * @param {?} cb\n     * @return {?}\n     */\n    function (context, cb) {\n        var /** @type {?} */ results = [];\n        var /** @type {?} */ t = this;\n        /**\n         * @template T\n         * @param {?} children\n         * @return {?}\n         */\n        function visit(children) {\n            if (children)\n                results.push(visitAll(t, children, context));\n        }\n        cb(visit);\n        return [].concat.apply([], results);\n    };\n    return RecursiveVisitor;\n}());\nexport { RecursiveVisitor };\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction spanOf(ast) {\n    var /** @type {?} */ start = ast.sourceSpan.start.offset;\n    var /** @type {?} */ end = ast.sourceSpan.end.offset;\n    if (ast instanceof Element) {\n        if (ast.endSourceSpan) {\n            end = ast.endSourceSpan.end.offset;\n        }\n        else if (ast.children && ast.children.length) {\n            end = spanOf(ast.children[ast.children.length - 1]).end;\n        }\n    }\n    return { start: start, end: end };\n}\n/**\n * @param {?} nodes\n * @param {?} position\n * @return {?}\n */\nexport function findNode(nodes, position) {\n    var /** @type {?} */ path = [];\n    var /** @type {?} */ visitor = new /** @class */ (function (_super) {\n        tslib_1.__extends(class_1, _super);\n        function class_1() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        /**\n         * @param {?} ast\n         * @param {?} context\n         * @return {?}\n         */\n        class_1.prototype.visit = /**\n         * @param {?} ast\n         * @param {?} context\n         * @return {?}\n         */\n        function (ast, context) {\n            var /** @type {?} */ span = spanOf(ast);\n            if (span.start <= position && position < span.end) {\n                path.push(ast);\n            }\n            else {\n                // Returning a value here will result in the children being skipped.\n                return true;\n            }\n        };\n        return class_1;\n    }(RecursiveVisitor));\n    visitAll(visitor, nodes);\n    return new AstPath(path, position);\n}\n//# sourceMappingURL=ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} identifier\n * @param {?} value\n * @return {?}\n */\nexport function assertArrayOfStrings(identifier, value) {\n    if (value == null) {\n        return;\n    }\n    if (!Array.isArray(value)) {\n        throw new Error(\"Expected '\" + identifier + \"' to be an array of strings.\");\n    }\n    for (var /** @type {?} */ i = 0; i < value.length; i += 1) {\n        if (typeof value[i] !== 'string') {\n            throw new Error(\"Expected '\" + identifier + \"' to be an array of strings.\");\n        }\n    }\n}\nvar /** @type {?} */ INTERPOLATION_BLACKLIST_REGEXPS = [\n    /^\\s*$/,\n    /[<>]/,\n    /^[{}]$/,\n    /&(#|[a-z])/i,\n    /^\\/\\//,\n];\n/**\n * @param {?} identifier\n * @param {?} value\n * @return {?}\n */\nexport function assertInterpolationSymbols(identifier, value) {\n    if (value != null && !(Array.isArray(value) && value.length == 2)) {\n        throw new Error(\"Expected '\" + identifier + \"' to be an array, [start, end].\");\n    }\n    else if (value != null) {\n        var /** @type {?} */ start_1 = /** @type {?} */ (value[0]);\n        var /** @type {?} */ end_1 = /** @type {?} */ (value[1]);\n        // black list checking\n        INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {\n            if (regexp.test(start_1) || regexp.test(end_1)) {\n                throw new Error(\"['\" + start_1 + \"', '\" + end_1 + \"'] contains unusable interpolation symbol.\");\n            }\n        });\n    }\n}\n//# sourceMappingURL=assertions.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { assertInterpolationSymbols } from '../assertions';\nvar InterpolationConfig = /** @class */ (function () {\n    function InterpolationConfig(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    /**\n     * @param {?} markers\n     * @return {?}\n     */\n    InterpolationConfig.fromArray = /**\n     * @param {?} markers\n     * @return {?}\n     */\n    function (markers) {\n        if (!markers) {\n            return DEFAULT_INTERPOLATION_CONFIG;\n        }\n        assertInterpolationSymbols('interpolation', markers);\n        return new InterpolationConfig(markers[0], markers[1]);\n    };\n    return InterpolationConfig;\n}());\nexport { InterpolationConfig };\nfunction InterpolationConfig_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InterpolationConfig.prototype.start;\n    /** @type {?} */\n    InterpolationConfig.prototype.end;\n}\nexport var /** @type {?} */ DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');\n//# sourceMappingURL=interpolation_config.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar StyleWithImports = /** @class */ (function () {\n    function StyleWithImports(style, styleUrls) {\n        this.style = style;\n        this.styleUrls = styleUrls;\n    }\n    return StyleWithImports;\n}());\nexport { StyleWithImports };\nfunction StyleWithImports_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StyleWithImports.prototype.style;\n    /** @type {?} */\n    StyleWithImports.prototype.styleUrls;\n}\n/**\n * @param {?} url\n * @return {?}\n */\nexport function isStyleUrlResolvable(url) {\n    if (url == null || url.length === 0 || url[0] == '/')\n        return false;\n    var /** @type {?} */ schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);\n    return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';\n}\n/**\n * Rewrites stylesheets by resolving and removing the \\@import urls that\n * are either relative or don't have a `package:` scheme\n * @param {?} resolver\n * @param {?} baseUrl\n * @param {?} cssText\n * @return {?}\n */\nexport function extractStyleUrls(resolver, baseUrl, cssText) {\n    var /** @type {?} */ foundUrls = [];\n    var /** @type {?} */ modifiedCssText = cssText.replace(CSS_STRIPPABLE_COMMENT_REGEXP, '')\n        .replace(CSS_IMPORT_REGEXP, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var /** @type {?} */ url = m[1] || m[2];\n        if (!isStyleUrlResolvable(url)) {\n            // Do not attempt to resolve non-package absolute URLs with URI\n            // scheme\n            return m[0];\n        }\n        foundUrls.push(resolver.resolve(baseUrl, url));\n        return '';\n    });\n    return new StyleWithImports(modifiedCssText, foundUrls);\n}\nvar /** @type {?} */ CSS_IMPORT_REGEXP = /@import\\s+(?:url\\()?\\s*(?:(?:['\"]([^'\"]*))|([^;\\)\\s]*))[^;]*;?/g;\nvar /** @type {?} */ CSS_STRIPPABLE_COMMENT_REGEXP = /\\/\\*(?!#\\s*(?:sourceURL|sourceMappingURL)=)[\\s\\S]+?\\*\\//g;\nvar /** @type {?} */ URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;\n//# sourceMappingURL=style_url_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { isNgContent } from '../ml_parser/tags';\nvar /** @type {?} */ NG_CONTENT_SELECT_ATTR = 'select';\nvar /** @type {?} */ LINK_ELEMENT = 'link';\nvar /** @type {?} */ LINK_STYLE_REL_ATTR = 'rel';\nvar /** @type {?} */ LINK_STYLE_HREF_ATTR = 'href';\nvar /** @type {?} */ LINK_STYLE_REL_VALUE = 'stylesheet';\nvar /** @type {?} */ STYLE_ELEMENT = 'style';\nvar /** @type {?} */ SCRIPT_ELEMENT = 'script';\nvar /** @type {?} */ NG_NON_BINDABLE_ATTR = 'ngNonBindable';\nvar /** @type {?} */ NG_PROJECT_AS = 'ngProjectAs';\n/**\n * @param {?} ast\n * @return {?}\n */\nexport function preparseElement(ast) {\n    var /** @type {?} */ selectAttr = /** @type {?} */ ((null));\n    var /** @type {?} */ hrefAttr = /** @type {?} */ ((null));\n    var /** @type {?} */ relAttr = /** @type {?} */ ((null));\n    var /** @type {?} */ nonBindable = false;\n    var /** @type {?} */ projectAs = '';\n    ast.attrs.forEach(function (attr) {\n        var /** @type {?} */ lcAttrName = attr.name.toLowerCase();\n        if (lcAttrName == NG_CONTENT_SELECT_ATTR) {\n            selectAttr = attr.value;\n        }\n        else if (lcAttrName == LINK_STYLE_HREF_ATTR) {\n            hrefAttr = attr.value;\n        }\n        else if (lcAttrName == LINK_STYLE_REL_ATTR) {\n            relAttr = attr.value;\n        }\n        else if (attr.name == NG_NON_BINDABLE_ATTR) {\n            nonBindable = true;\n        }\n        else if (attr.name == NG_PROJECT_AS) {\n            if (attr.value.length > 0) {\n                projectAs = attr.value;\n            }\n        }\n    });\n    selectAttr = normalizeNgContentSelect(selectAttr);\n    var /** @type {?} */ nodeName = ast.name.toLowerCase();\n    var /** @type {?} */ type = PreparsedElementType.OTHER;\n    if (isNgContent(nodeName)) {\n        type = PreparsedElementType.NG_CONTENT;\n    }\n    else if (nodeName == STYLE_ELEMENT) {\n        type = PreparsedElementType.STYLE;\n    }\n    else if (nodeName == SCRIPT_ELEMENT) {\n        type = PreparsedElementType.SCRIPT;\n    }\n    else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {\n        type = PreparsedElementType.STYLESHEET;\n    }\n    return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);\n}\n/** @enum {number} */\nvar PreparsedElementType = {\n    NG_CONTENT: 0,\n    STYLE: 1,\n    STYLESHEET: 2,\n    SCRIPT: 3,\n    OTHER: 4,\n};\nexport { PreparsedElementType };\nPreparsedElementType[PreparsedElementType.NG_CONTENT] = \"NG_CONTENT\";\nPreparsedElementType[PreparsedElementType.STYLE] = \"STYLE\";\nPreparsedElementType[PreparsedElementType.STYLESHEET] = \"STYLESHEET\";\nPreparsedElementType[PreparsedElementType.SCRIPT] = \"SCRIPT\";\nPreparsedElementType[PreparsedElementType.OTHER] = \"OTHER\";\nvar PreparsedElement = /** @class */ (function () {\n    function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {\n        this.type = type;\n        this.selectAttr = selectAttr;\n        this.hrefAttr = hrefAttr;\n        this.nonBindable = nonBindable;\n        this.projectAs = projectAs;\n    }\n    return PreparsedElement;\n}());\nexport { PreparsedElement };\nfunction PreparsedElement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PreparsedElement.prototype.type;\n    /** @type {?} */\n    PreparsedElement.prototype.selectAttr;\n    /** @type {?} */\n    PreparsedElement.prototype.hrefAttr;\n    /** @type {?} */\n    PreparsedElement.prototype.nonBindable;\n    /** @type {?} */\n    PreparsedElement.prototype.projectAs;\n}\n/**\n * @param {?} selectAttr\n * @return {?}\n */\nfunction normalizeNgContentSelect(selectAttr) {\n    if (selectAttr === null || selectAttr.length === 0) {\n        return '*';\n    }\n    return selectAttr;\n}\n//# sourceMappingURL=template_preparser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileStylesheetMetadata, CompileTemplateMetadata, templateSourceUrl } from './compile_metadata';\nimport { preserveWhitespacesDefault } from './config';\nimport { ViewEncapsulation } from './core';\nimport * as html from './ml_parser/ast';\nimport { InterpolationConfig } from './ml_parser/interpolation_config';\nimport { extractStyleUrls, isStyleUrlResolvable } from './style_url_resolver';\nimport { PreparsedElementType, preparseElement } from './template_parser/template_preparser';\nimport { SyncAsync, isDefined, stringify, syntaxError } from './util';\n/**\n * @record\n */\nexport function PrenormalizedTemplateMetadata() { }\nfunction PrenormalizedTemplateMetadata_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.ngModuleType;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.componentType;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.moduleUrl;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.template;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.templateUrl;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.styles;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.styleUrls;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.interpolation;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.encapsulation;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.animations;\n    /** @type {?} */\n    PrenormalizedTemplateMetadata.prototype.preserveWhitespaces;\n}\nvar DirectiveNormalizer = /** @class */ (function () {\n    function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {\n        this._resourceLoader = _resourceLoader;\n        this._urlResolver = _urlResolver;\n        this._htmlParser = _htmlParser;\n        this._config = _config;\n        this._resourceLoaderCache = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype.clearCache = /**\n     * @return {?}\n     */\n    function () { this._resourceLoaderCache.clear(); };\n    /**\n     * @param {?} normalizedDirective\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype.clearCacheFor = /**\n     * @param {?} normalizedDirective\n     * @return {?}\n     */\n    function (normalizedDirective) {\n        var _this = this;\n        if (!normalizedDirective.isComponent) {\n            return;\n        }\n        var /** @type {?} */ template = /** @type {?} */ ((normalizedDirective.template));\n        this._resourceLoaderCache.delete(/** @type {?} */ ((template.templateUrl)));\n        template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(/** @type {?} */ ((stylesheet.moduleUrl))); });\n    };\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._fetch = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) {\n        var /** @type {?} */ result = this._resourceLoaderCache.get(url);\n        if (!result) {\n            result = this._resourceLoader.get(url);\n            this._resourceLoaderCache.set(url, result);\n        }\n        return result;\n    };\n    /**\n     * @param {?} prenormData\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype.normalizeTemplate = /**\n     * @param {?} prenormData\n     * @return {?}\n     */\n    function (prenormData) {\n        var _this = this;\n        if (isDefined(prenormData.template)) {\n            if (isDefined(prenormData.templateUrl)) {\n                throw syntaxError(\"'\" + stringify(prenormData.componentType) + \"' component cannot define both template and templateUrl\");\n            }\n            if (typeof prenormData.template !== 'string') {\n                throw syntaxError(\"The template specified for component \" + stringify(prenormData.componentType) + \" is not a string\");\n            }\n        }\n        else if (isDefined(prenormData.templateUrl)) {\n            if (typeof prenormData.templateUrl !== 'string') {\n                throw syntaxError(\"The templateUrl specified for component \" + stringify(prenormData.componentType) + \" is not a string\");\n            }\n        }\n        else {\n            throw syntaxError(\"No template specified for component \" + stringify(prenormData.componentType));\n        }\n        if (isDefined(prenormData.preserveWhitespaces) &&\n            typeof prenormData.preserveWhitespaces !== 'boolean') {\n            throw syntaxError(\"The preserveWhitespaces option for component \" + stringify(prenormData.componentType) + \" must be a boolean\");\n        }\n        return SyncAsync.then(this._preParseTemplate(prenormData), function (preparsedTemplate) { return _this._normalizeTemplateMetadata(prenormData, preparsedTemplate); });\n    };\n    /**\n     * @param {?} prenomData\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._preParseTemplate = /**\n     * @param {?} prenomData\n     * @return {?}\n     */\n    function (prenomData) {\n        var _this = this;\n        var /** @type {?} */ template;\n        var /** @type {?} */ templateUrl;\n        if (prenomData.template != null) {\n            template = prenomData.template;\n            templateUrl = prenomData.moduleUrl;\n        }\n        else {\n            templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, /** @type {?} */ ((prenomData.templateUrl)));\n            template = this._fetch(templateUrl);\n        }\n        return SyncAsync.then(template, function (template) { return _this._preparseLoadedTemplate(prenomData, template, templateUrl); });\n    };\n    /**\n     * @param {?} prenormData\n     * @param {?} template\n     * @param {?} templateAbsUrl\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._preparseLoadedTemplate = /**\n     * @param {?} prenormData\n     * @param {?} template\n     * @param {?} templateAbsUrl\n     * @return {?}\n     */\n    function (prenormData, template, templateAbsUrl) {\n        var /** @type {?} */ isInline = !!prenormData.template;\n        var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((prenormData.interpolation)));\n        var /** @type {?} */ rootNodesAndErrors = this._htmlParser.parse(template, templateSourceUrl({ reference: prenormData.ngModuleType }, { type: { reference: prenormData.componentType } }, { isInline: isInline, templateUrl: templateAbsUrl }), true, interpolationConfig);\n        if (rootNodesAndErrors.errors.length > 0) {\n            var /** @type {?} */ errorString = rootNodesAndErrors.errors.join('\\n');\n            throw syntaxError(\"Template parse errors:\\n\" + errorString);\n        }\n        var /** @type {?} */ templateMetadataStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: prenormData.styles, moduleUrl: prenormData.moduleUrl }));\n        var /** @type {?} */ visitor = new TemplatePreparseVisitor();\n        html.visitAll(visitor, rootNodesAndErrors.rootNodes);\n        var /** @type {?} */ templateStyles = this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));\n        var /** @type {?} */ styles = templateMetadataStyles.styles.concat(templateStyles.styles);\n        var /** @type {?} */ inlineStyleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);\n        var /** @type {?} */ styleUrls = this\n            ._normalizeStylesheet(new CompileStylesheetMetadata({ styleUrls: prenormData.styleUrls, moduleUrl: prenormData.moduleUrl }))\n            .styleUrls;\n        return {\n            template: template,\n            templateUrl: templateAbsUrl, isInline: isInline,\n            htmlAst: rootNodesAndErrors, styles: styles, inlineStyleUrls: inlineStyleUrls, styleUrls: styleUrls,\n            ngContentSelectors: visitor.ngContentSelectors,\n        };\n    };\n    /**\n     * @param {?} prenormData\n     * @param {?} preparsedTemplate\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._normalizeTemplateMetadata = /**\n     * @param {?} prenormData\n     * @param {?} preparsedTemplate\n     * @return {?}\n     */\n    function (prenormData, preparsedTemplate) {\n        var _this = this;\n        return SyncAsync.then(this._loadMissingExternalStylesheets(preparsedTemplate.styleUrls.concat(preparsedTemplate.inlineStyleUrls)), function (externalStylesheets) {\n            return _this._normalizeLoadedTemplateMetadata(prenormData, preparsedTemplate, externalStylesheets);\n        });\n    };\n    /**\n     * @param {?} prenormData\n     * @param {?} preparsedTemplate\n     * @param {?} stylesheets\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._normalizeLoadedTemplateMetadata = /**\n     * @param {?} prenormData\n     * @param {?} preparsedTemplate\n     * @param {?} stylesheets\n     * @return {?}\n     */\n    function (prenormData, preparsedTemplate, stylesheets) {\n        var _this = this;\n        // Algorithm:\n        // - produce exactly 1 entry per original styleUrl in\n        // CompileTemplateMetadata.externalStylesheets with all styles inlined\n        // - inline all styles that are referenced by the template into CompileTemplateMetadata.styles.\n        // Reason: be able to determine how many stylesheets there are even without loading\n        // the template nor the stylesheets, so we can create a stub for TypeScript always synchronously\n        // (as resource loading may be async)\n        var /** @type {?} */ styles = preparsedTemplate.styles.slice();\n        this._inlineStyles(preparsedTemplate.inlineStyleUrls, stylesheets, styles);\n        var /** @type {?} */ styleUrls = preparsedTemplate.styleUrls;\n        var /** @type {?} */ externalStylesheets = styleUrls.map(function (styleUrl) {\n            var /** @type {?} */ stylesheet = /** @type {?} */ ((stylesheets.get(styleUrl)));\n            var /** @type {?} */ styles = stylesheet.styles.slice();\n            _this._inlineStyles(stylesheet.styleUrls, stylesheets, styles);\n            return new CompileStylesheetMetadata({ moduleUrl: styleUrl, styles: styles });\n        });\n        var /** @type {?} */ encapsulation = prenormData.encapsulation;\n        if (encapsulation == null) {\n            encapsulation = this._config.defaultEncapsulation;\n        }\n        if (encapsulation === ViewEncapsulation.Emulated && styles.length === 0 &&\n            styleUrls.length === 0) {\n            encapsulation = ViewEncapsulation.None;\n        }\n        return new CompileTemplateMetadata({\n            encapsulation: encapsulation,\n            template: preparsedTemplate.template,\n            templateUrl: preparsedTemplate.templateUrl,\n            htmlAst: preparsedTemplate.htmlAst, styles: styles, styleUrls: styleUrls,\n            ngContentSelectors: preparsedTemplate.ngContentSelectors,\n            animations: prenormData.animations,\n            interpolation: prenormData.interpolation,\n            isInline: preparsedTemplate.isInline, externalStylesheets: externalStylesheets,\n            preserveWhitespaces: preserveWhitespacesDefault(prenormData.preserveWhitespaces, this._config.preserveWhitespaces),\n        });\n    };\n    /**\n     * @param {?} styleUrls\n     * @param {?} stylesheets\n     * @param {?} targetStyles\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._inlineStyles = /**\n     * @param {?} styleUrls\n     * @param {?} stylesheets\n     * @param {?} targetStyles\n     * @return {?}\n     */\n    function (styleUrls, stylesheets, targetStyles) {\n        var _this = this;\n        styleUrls.forEach(function (styleUrl) {\n            var /** @type {?} */ stylesheet = /** @type {?} */ ((stylesheets.get(styleUrl)));\n            stylesheet.styles.forEach(function (style) { return targetStyles.push(style); });\n            _this._inlineStyles(stylesheet.styleUrls, stylesheets, targetStyles);\n        });\n    };\n    /**\n     * @param {?} styleUrls\n     * @param {?=} loadedStylesheets\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._loadMissingExternalStylesheets = /**\n     * @param {?} styleUrls\n     * @param {?=} loadedStylesheets\n     * @return {?}\n     */\n    function (styleUrls, loadedStylesheets) {\n        var _this = this;\n        if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }\n        return SyncAsync.then(SyncAsync.all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })\n            .map(function (styleUrl) {\n            return SyncAsync.then(_this._fetch(styleUrl), function (loadedStyle) {\n                var /** @type {?} */ stylesheet = _this._normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));\n                loadedStylesheets.set(styleUrl, stylesheet);\n                return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);\n            });\n        })), function (_) { return loadedStylesheets; });\n    };\n    /**\n     * @param {?} stylesheet\n     * @return {?}\n     */\n    DirectiveNormalizer.prototype._normalizeStylesheet = /**\n     * @param {?} stylesheet\n     * @return {?}\n     */\n    function (stylesheet) {\n        var _this = this;\n        var /** @type {?} */ moduleUrl = /** @type {?} */ ((stylesheet.moduleUrl));\n        var /** @type {?} */ allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)\n            .map(function (url) { return _this._urlResolver.resolve(moduleUrl, url); });\n        var /** @type {?} */ allStyles = stylesheet.styles.map(function (style) {\n            var /** @type {?} */ styleWithImports = extractStyleUrls(_this._urlResolver, moduleUrl, style);\n            allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);\n            return styleWithImports.style;\n        });\n        return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: moduleUrl });\n    };\n    return DirectiveNormalizer;\n}());\nexport { DirectiveNormalizer };\nfunction DirectiveNormalizer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DirectiveNormalizer.prototype._resourceLoaderCache;\n    /** @type {?} */\n    DirectiveNormalizer.prototype._resourceLoader;\n    /** @type {?} */\n    DirectiveNormalizer.prototype._urlResolver;\n    /** @type {?} */\n    DirectiveNormalizer.prototype._htmlParser;\n    /** @type {?} */\n    DirectiveNormalizer.prototype._config;\n}\n/**\n * @record\n */\nfunction PreparsedTemplate() { }\nfunction PreparsedTemplate_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PreparsedTemplate.prototype.template;\n    /** @type {?} */\n    PreparsedTemplate.prototype.templateUrl;\n    /** @type {?} */\n    PreparsedTemplate.prototype.isInline;\n    /** @type {?} */\n    PreparsedTemplate.prototype.htmlAst;\n    /** @type {?} */\n    PreparsedTemplate.prototype.styles;\n    /** @type {?} */\n    PreparsedTemplate.prototype.inlineStyleUrls;\n    /** @type {?} */\n    PreparsedTemplate.prototype.styleUrls;\n    /** @type {?} */\n    PreparsedTemplate.prototype.ngContentSelectors;\n}\nvar TemplatePreparseVisitor = /** @class */ (function () {\n    function TemplatePreparseVisitor() {\n        this.ngContentSelectors = [];\n        this.styles = [];\n        this.styleUrls = [];\n        this.ngNonBindableStackCount = 0;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ preparsedElement = preparseElement(ast);\n        switch (preparsedElement.type) {\n            case PreparsedElementType.NG_CONTENT:\n                if (this.ngNonBindableStackCount === 0) {\n                    this.ngContentSelectors.push(preparsedElement.selectAttr);\n                }\n                break;\n            case PreparsedElementType.STYLE:\n                var /** @type {?} */ textContent_1 = '';\n                ast.children.forEach(function (child) {\n                    if (child instanceof html.Text) {\n                        textContent_1 += child.value;\n                    }\n                });\n                this.styles.push(textContent_1);\n                break;\n            case PreparsedElementType.STYLESHEET:\n                this.styleUrls.push(preparsedElement.hrefAttr);\n                break;\n            default:\n                break;\n        }\n        if (preparsedElement.nonBindable) {\n            this.ngNonBindableStackCount++;\n        }\n        html.visitAll(this, ast.children);\n        if (preparsedElement.nonBindable) {\n            this.ngNonBindableStackCount--;\n        }\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitExpansion = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { html.visitAll(this, ast.cases); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitExpansionCase = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        html.visitAll(this, ast.expression);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitComment = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitAttribute = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    TemplatePreparseVisitor.prototype.visitText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    return TemplatePreparseVisitor;\n}());\nfunction TemplatePreparseVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplatePreparseVisitor.prototype.ngContentSelectors;\n    /** @type {?} */\n    TemplatePreparseVisitor.prototype.styles;\n    /** @type {?} */\n    TemplatePreparseVisitor.prototype.styleUrls;\n    /** @type {?} */\n    TemplatePreparseVisitor.prototype.ngNonBindableStackCount;\n}\n//# sourceMappingURL=directive_normalizer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { createComponent, createContentChild, createContentChildren, createDirective, createHostBinding, createHostListener, createInput, createOutput, createViewChild, createViewChildren } from './core';\nimport { resolveForwardRef, splitAtColon, stringify } from './util';\nvar /** @type {?} */ QUERY_METADATA_IDENTIFIERS = [\n    createViewChild,\n    createViewChildren,\n    createContentChild,\n    createContentChildren,\n];\nvar DirectiveResolver = /** @class */ (function () {\n    function DirectiveResolver(_reflector) {\n        this._reflector = _reflector;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    DirectiveResolver.prototype.isDirective = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n        return typeMetadata && typeMetadata.some(isDirectiveMetadata);\n    };\n    /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    DirectiveResolver.prototype.resolve = /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n        if (typeMetadata) {\n            var /** @type {?} */ metadata = findLast(typeMetadata, isDirectiveMetadata);\n            if (metadata) {\n                var /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);\n                var /** @type {?} */ guards = this._reflector.guards(type);\n                return this._mergeWithPropertyMetadata(metadata, propertyMetadata, guards, type);\n            }\n        }\n        if (throwIfNotFound) {\n            throw new Error(\"No Directive annotation found on \" + stringify(type));\n        }\n        return null;\n    };\n    /**\n     * @param {?} dm\n     * @param {?} propertyMetadata\n     * @param {?} guards\n     * @param {?} directiveType\n     * @return {?}\n     */\n    DirectiveResolver.prototype._mergeWithPropertyMetadata = /**\n     * @param {?} dm\n     * @param {?} propertyMetadata\n     * @param {?} guards\n     * @param {?} directiveType\n     * @return {?}\n     */\n    function (dm, propertyMetadata, guards, directiveType) {\n        var /** @type {?} */ inputs = [];\n        var /** @type {?} */ outputs = [];\n        var /** @type {?} */ host = {};\n        var /** @type {?} */ queries = {};\n        Object.keys(propertyMetadata).forEach(function (propName) {\n            var /** @type {?} */ input = findLast(propertyMetadata[propName], function (a) { return createInput.isTypeOf(a); });\n            if (input) {\n                if (input.bindingPropertyName) {\n                    inputs.push(propName + \": \" + input.bindingPropertyName);\n                }\n                else {\n                    inputs.push(propName);\n                }\n            }\n            var /** @type {?} */ output = findLast(propertyMetadata[propName], function (a) { return createOutput.isTypeOf(a); });\n            if (output) {\n                if (output.bindingPropertyName) {\n                    outputs.push(propName + \": \" + output.bindingPropertyName);\n                }\n                else {\n                    outputs.push(propName);\n                }\n            }\n            var /** @type {?} */ hostBindings = propertyMetadata[propName].filter(function (a) { return createHostBinding.isTypeOf(a); });\n            hostBindings.forEach(function (hostBinding) {\n                if (hostBinding.hostPropertyName) {\n                    var /** @type {?} */ startWith = hostBinding.hostPropertyName[0];\n                    if (startWith === '(') {\n                        throw new Error(\"@HostBinding can not bind to events. Use @HostListener instead.\");\n                    }\n                    else if (startWith === '[') {\n                        throw new Error(\"@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.\");\n                    }\n                    host[\"[\" + hostBinding.hostPropertyName + \"]\"] = propName;\n                }\n                else {\n                    host[\"[\" + propName + \"]\"] = propName;\n                }\n            });\n            var /** @type {?} */ hostListeners = propertyMetadata[propName].filter(function (a) { return createHostListener.isTypeOf(a); });\n            hostListeners.forEach(function (hostListener) {\n                var /** @type {?} */ args = hostListener.args || [];\n                host[\"(\" + hostListener.eventName + \")\"] = propName + \"(\" + args.join(',') + \")\";\n            });\n            var /** @type {?} */ query = findLast(propertyMetadata[propName], function (a) { return QUERY_METADATA_IDENTIFIERS.some(function (i) { return i.isTypeOf(a); }); });\n            if (query) {\n                queries[propName] = query;\n            }\n        });\n        return this._merge(dm, inputs, outputs, host, queries, guards, directiveType);\n    };\n    /**\n     * @param {?} def\n     * @return {?}\n     */\n    DirectiveResolver.prototype._extractPublicName = /**\n     * @param {?} def\n     * @return {?}\n     */\n    function (def) { return splitAtColon(def, [/** @type {?} */ ((null)), def])[1].trim(); };\n    /**\n     * @param {?} bindings\n     * @return {?}\n     */\n    DirectiveResolver.prototype._dedupeBindings = /**\n     * @param {?} bindings\n     * @return {?}\n     */\n    function (bindings) {\n        var /** @type {?} */ names = new Set();\n        var /** @type {?} */ publicNames = new Set();\n        var /** @type {?} */ reversedResult = [];\n        // go last to first to allow later entries to overwrite previous entries\n        for (var /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {\n            var /** @type {?} */ binding = bindings[i];\n            var /** @type {?} */ name_1 = this._extractPublicName(binding);\n            publicNames.add(name_1);\n            if (!names.has(name_1)) {\n                names.add(name_1);\n                reversedResult.push(binding);\n            }\n        }\n        return reversedResult.reverse();\n    };\n    /**\n     * @param {?} directive\n     * @param {?} inputs\n     * @param {?} outputs\n     * @param {?} host\n     * @param {?} queries\n     * @param {?} guards\n     * @param {?} directiveType\n     * @return {?}\n     */\n    DirectiveResolver.prototype._merge = /**\n     * @param {?} directive\n     * @param {?} inputs\n     * @param {?} outputs\n     * @param {?} host\n     * @param {?} queries\n     * @param {?} guards\n     * @param {?} directiveType\n     * @return {?}\n     */\n    function (directive, inputs, outputs, host, queries, guards, directiveType) {\n        var /** @type {?} */ mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);\n        var /** @type {?} */ mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);\n        var /** @type {?} */ mergedHost = directive.host ? tslib_1.__assign({}, directive.host, host) : host;\n        var /** @type {?} */ mergedQueries = directive.queries ? tslib_1.__assign({}, directive.queries, queries) : queries;\n        if (createComponent.isTypeOf(directive)) {\n            var /** @type {?} */ comp = /** @type {?} */ (directive);\n            return createComponent({\n                selector: comp.selector,\n                inputs: mergedInputs,\n                outputs: mergedOutputs,\n                host: mergedHost,\n                exportAs: comp.exportAs,\n                moduleId: comp.moduleId,\n                queries: mergedQueries,\n                changeDetection: comp.changeDetection,\n                providers: comp.providers,\n                viewProviders: comp.viewProviders,\n                entryComponents: comp.entryComponents,\n                template: comp.template,\n                templateUrl: comp.templateUrl,\n                styles: comp.styles,\n                styleUrls: comp.styleUrls,\n                encapsulation: comp.encapsulation,\n                animations: comp.animations,\n                interpolation: comp.interpolation,\n                preserveWhitespaces: directive.preserveWhitespaces,\n            });\n        }\n        else {\n            return createDirective({\n                selector: directive.selector,\n                inputs: mergedInputs,\n                outputs: mergedOutputs,\n                host: mergedHost,\n                exportAs: directive.exportAs,\n                queries: mergedQueries,\n                providers: directive.providers, guards: guards\n            });\n        }\n    };\n    return DirectiveResolver;\n}());\nexport { DirectiveResolver };\nfunction DirectiveResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DirectiveResolver.prototype._reflector;\n}\n/**\n * @param {?} type\n * @return {?}\n */\nfunction isDirectiveMetadata(type) {\n    return createDirective.isTypeOf(type) || createComponent.isTypeOf(type);\n}\n/**\n * @template T\n * @param {?} arr\n * @param {?} condition\n * @return {?}\n */\nexport function findLast(arr, condition) {\n    for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n        if (condition(arr[i])) {\n            return arr[i];\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=directive_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var /** @type {?} */ $EOF = 0;\nexport var /** @type {?} */ $TAB = 9;\nexport var /** @type {?} */ $LF = 10;\nexport var /** @type {?} */ $VTAB = 11;\nexport var /** @type {?} */ $FF = 12;\nexport var /** @type {?} */ $CR = 13;\nexport var /** @type {?} */ $SPACE = 32;\nexport var /** @type {?} */ $BANG = 33;\nexport var /** @type {?} */ $DQ = 34;\nexport var /** @type {?} */ $HASH = 35;\nexport var /** @type {?} */ $$ = 36;\nexport var /** @type {?} */ $PERCENT = 37;\nexport var /** @type {?} */ $AMPERSAND = 38;\nexport var /** @type {?} */ $SQ = 39;\nexport var /** @type {?} */ $LPAREN = 40;\nexport var /** @type {?} */ $RPAREN = 41;\nexport var /** @type {?} */ $STAR = 42;\nexport var /** @type {?} */ $PLUS = 43;\nexport var /** @type {?} */ $COMMA = 44;\nexport var /** @type {?} */ $MINUS = 45;\nexport var /** @type {?} */ $PERIOD = 46;\nexport var /** @type {?} */ $SLASH = 47;\nexport var /** @type {?} */ $COLON = 58;\nexport var /** @type {?} */ $SEMICOLON = 59;\nexport var /** @type {?} */ $LT = 60;\nexport var /** @type {?} */ $EQ = 61;\nexport var /** @type {?} */ $GT = 62;\nexport var /** @type {?} */ $QUESTION = 63;\nexport var /** @type {?} */ $0 = 48;\nexport var /** @type {?} */ $9 = 57;\nexport var /** @type {?} */ $A = 65;\nexport var /** @type {?} */ $E = 69;\nexport var /** @type {?} */ $F = 70;\nexport var /** @type {?} */ $X = 88;\nexport var /** @type {?} */ $Z = 90;\nexport var /** @type {?} */ $LBRACKET = 91;\nexport var /** @type {?} */ $BACKSLASH = 92;\nexport var /** @type {?} */ $RBRACKET = 93;\nexport var /** @type {?} */ $CARET = 94;\nexport var /** @type {?} */ $_ = 95;\nexport var /** @type {?} */ $a = 97;\nexport var /** @type {?} */ $e = 101;\nexport var /** @type {?} */ $f = 102;\nexport var /** @type {?} */ $n = 110;\nexport var /** @type {?} */ $r = 114;\nexport var /** @type {?} */ $t = 116;\nexport var /** @type {?} */ $u = 117;\nexport var /** @type {?} */ $v = 118;\nexport var /** @type {?} */ $x = 120;\nexport var /** @type {?} */ $z = 122;\nexport var /** @type {?} */ $LBRACE = 123;\nexport var /** @type {?} */ $BAR = 124;\nexport var /** @type {?} */ $RBRACE = 125;\nexport var /** @type {?} */ $NBSP = 160;\nexport var /** @type {?} */ $PIPE = 124;\nexport var /** @type {?} */ $TILDA = 126;\nexport var /** @type {?} */ $AT = 64;\nexport var /** @type {?} */ $BT = 96;\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isWhitespace(code) {\n    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isDigit(code) {\n    return $0 <= code && code <= $9;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isAsciiLetter(code) {\n    return code >= $a && code <= $z || code >= $A && code <= $Z;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isAsciiHexDigit(code) {\n    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n}\n//# sourceMappingURL=chars.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as chars from '../chars';\n/** @enum {number} */\nvar TokenType = {\n    Character: 0,\n    Identifier: 1,\n    Keyword: 2,\n    String: 3,\n    Operator: 4,\n    Number: 5,\n    Error: 6,\n};\nexport { TokenType };\nTokenType[TokenType.Character] = \"Character\";\nTokenType[TokenType.Identifier] = \"Identifier\";\nTokenType[TokenType.Keyword] = \"Keyword\";\nTokenType[TokenType.String] = \"String\";\nTokenType[TokenType.Operator] = \"Operator\";\nTokenType[TokenType.Number] = \"Number\";\nTokenType[TokenType.Error] = \"Error\";\nvar /** @type {?} */ KEYWORDS = ['var', 'let', 'as', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\nvar Lexer = /** @class */ (function () {\n    function Lexer() {\n    }\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    Lexer.prototype.tokenize = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) {\n        var /** @type {?} */ scanner = new _Scanner(text);\n        var /** @type {?} */ tokens = [];\n        var /** @type {?} */ token = scanner.scanToken();\n        while (token != null) {\n            tokens.push(token);\n            token = scanner.scanToken();\n        }\n        return tokens;\n    };\n    return Lexer;\n}());\nexport { Lexer };\nvar Token = /** @class */ (function () {\n    function Token(index, type, numValue, strValue) {\n        this.index = index;\n        this.type = type;\n        this.numValue = numValue;\n        this.strValue = strValue;\n    }\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    Token.prototype.isCharacter = /**\n     * @param {?} code\n     * @return {?}\n     */\n    function (code) {\n        return this.type == TokenType.Character && this.numValue == code;\n    };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isNumber = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Number; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isString = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.String; };\n    /**\n     * @param {?} operater\n     * @return {?}\n     */\n    Token.prototype.isOperator = /**\n     * @param {?} operater\n     * @return {?}\n     */\n    function (operater) {\n        return this.type == TokenType.Operator && this.strValue == operater;\n    };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isIdentifier = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Identifier; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeyword = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordLet = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'let'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordAs = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'as'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordNull = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'null'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordUndefined = /**\n     * @return {?}\n     */\n    function () {\n        return this.type == TokenType.Keyword && this.strValue == 'undefined';\n    };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordTrue = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'true'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordFalse = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'false'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isKeywordThis = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Keyword && this.strValue == 'this'; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.isError = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Error; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.toNumber = /**\n     * @return {?}\n     */\n    function () { return this.type == TokenType.Number ? this.numValue : -1; };\n    /**\n     * @return {?}\n     */\n    Token.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        switch (this.type) {\n            case TokenType.Character:\n            case TokenType.Identifier:\n            case TokenType.Keyword:\n            case TokenType.Operator:\n            case TokenType.String:\n            case TokenType.Error:\n                return this.strValue;\n            case TokenType.Number:\n                return this.numValue.toString();\n            default:\n                return null;\n        }\n    };\n    return Token;\n}());\nexport { Token };\nfunction Token_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Token.prototype.index;\n    /** @type {?} */\n    Token.prototype.type;\n    /** @type {?} */\n    Token.prototype.numValue;\n    /** @type {?} */\n    Token.prototype.strValue;\n}\n/**\n * @param {?} index\n * @param {?} code\n * @return {?}\n */\nfunction newCharacterToken(index, code) {\n    return new Token(index, TokenType.Character, code, String.fromCharCode(code));\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newIdentifierToken(index, text) {\n    return new Token(index, TokenType.Identifier, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newKeywordToken(index, text) {\n    return new Token(index, TokenType.Keyword, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newOperatorToken(index, text) {\n    return new Token(index, TokenType.Operator, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} text\n * @return {?}\n */\nfunction newStringToken(index, text) {\n    return new Token(index, TokenType.String, 0, text);\n}\n/**\n * @param {?} index\n * @param {?} n\n * @return {?}\n */\nfunction newNumberToken(index, n) {\n    return new Token(index, TokenType.Number, n, '');\n}\n/**\n * @param {?} index\n * @param {?} message\n * @return {?}\n */\nfunction newErrorToken(index, message) {\n    return new Token(index, TokenType.Error, 0, message);\n}\nexport var /** @type {?} */ EOF = new Token(-1, TokenType.Character, 0, '');\nvar _Scanner = /** @class */ (function () {\n    function _Scanner(input) {\n        this.input = input;\n        this.peek = 0;\n        this.index = -1;\n        this.length = input.length;\n        this.advance();\n    }\n    /**\n     * @return {?}\n     */\n    _Scanner.prototype.advance = /**\n     * @return {?}\n     */\n    function () {\n        this.peek = ++this.index >= this.length ? chars.$EOF : this.input.charCodeAt(this.index);\n    };\n    /**\n     * @return {?}\n     */\n    _Scanner.prototype.scanToken = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ input = this.input, /** @type {?} */ length = this.length;\n        var /** @type {?} */ peek = this.peek, /** @type {?} */ index = this.index;\n        // Skip whitespace.\n        while (peek <= chars.$SPACE) {\n            if (++index >= length) {\n                peek = chars.$EOF;\n                break;\n            }\n            else {\n                peek = input.charCodeAt(index);\n            }\n        }\n        this.peek = peek;\n        this.index = index;\n        if (index >= length) {\n            return null;\n        }\n        // Handle identifiers and numbers.\n        if (isIdentifierStart(peek))\n            return this.scanIdentifier();\n        if (chars.isDigit(peek))\n            return this.scanNumber(index);\n        var /** @type {?} */ start = index;\n        switch (peek) {\n            case chars.$PERIOD:\n                this.advance();\n                return chars.isDigit(this.peek) ? this.scanNumber(start) :\n                    newCharacterToken(start, chars.$PERIOD);\n            case chars.$LPAREN:\n            case chars.$RPAREN:\n            case chars.$LBRACE:\n            case chars.$RBRACE:\n            case chars.$LBRACKET:\n            case chars.$RBRACKET:\n            case chars.$COMMA:\n            case chars.$COLON:\n            case chars.$SEMICOLON:\n                return this.scanCharacter(start, peek);\n            case chars.$SQ:\n            case chars.$DQ:\n                return this.scanString();\n            case chars.$HASH:\n            case chars.$PLUS:\n            case chars.$MINUS:\n            case chars.$STAR:\n            case chars.$SLASH:\n            case chars.$PERCENT:\n            case chars.$CARET:\n                return this.scanOperator(start, String.fromCharCode(peek));\n            case chars.$QUESTION:\n                return this.scanComplexOperator(start, '?', chars.$PERIOD, '.');\n            case chars.$LT:\n            case chars.$GT:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), chars.$EQ, '=');\n            case chars.$BANG:\n            case chars.$EQ:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), chars.$EQ, '=', chars.$EQ, '=');\n            case chars.$AMPERSAND:\n                return this.scanComplexOperator(start, '&', chars.$AMPERSAND, '&');\n            case chars.$BAR:\n                return this.scanComplexOperator(start, '|', chars.$BAR, '|');\n            case chars.$NBSP:\n                while (chars.isWhitespace(this.peek))\n                    this.advance();\n                return this.scanToken();\n        }\n        this.advance();\n        return this.error(\"Unexpected character [\" + String.fromCharCode(peek) + \"]\", 0);\n    };\n    /**\n     * @param {?} start\n     * @param {?} code\n     * @return {?}\n     */\n    _Scanner.prototype.scanCharacter = /**\n     * @param {?} start\n     * @param {?} code\n     * @return {?}\n     */\n    function (start, code) {\n        this.advance();\n        return newCharacterToken(start, code);\n    };\n    /**\n     * @param {?} start\n     * @param {?} str\n     * @return {?}\n     */\n    _Scanner.prototype.scanOperator = /**\n     * @param {?} start\n     * @param {?} str\n     * @return {?}\n     */\n    function (start, str) {\n        this.advance();\n        return newOperatorToken(start, str);\n    };\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param start start index in the expression\n     * @param one first symbol (always part of the operator)\n     * @param twoCode code point for the second symbol\n     * @param two second symbol (part of the operator when the second code point matches)\n     * @param threeCode code point for the third symbol\n     * @param three third symbol (part of the operator when provided and matches source expression)\n     */\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param {?} start start index in the expression\n     * @param {?} one first symbol (always part of the operator)\n     * @param {?} twoCode code point for the second symbol\n     * @param {?} two second symbol (part of the operator when the second code point matches)\n     * @param {?=} threeCode code point for the third symbol\n     * @param {?=} three third symbol (part of the operator when provided and matches source expression)\n     * @return {?}\n     */\n    _Scanner.prototype.scanComplexOperator = /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param {?} start start index in the expression\n     * @param {?} one first symbol (always part of the operator)\n     * @param {?} twoCode code point for the second symbol\n     * @param {?} two second symbol (part of the operator when the second code point matches)\n     * @param {?=} threeCode code point for the third symbol\n     * @param {?=} three third symbol (part of the operator when provided and matches source expression)\n     * @return {?}\n     */\n    function (start, one, twoCode, two, threeCode, three) {\n        this.advance();\n        var /** @type {?} */ str = one;\n        if (this.peek == twoCode) {\n            this.advance();\n            str += two;\n        }\n        if (threeCode != null && this.peek == threeCode) {\n            this.advance();\n            str += three;\n        }\n        return newOperatorToken(start, str);\n    };\n    /**\n     * @return {?}\n     */\n    _Scanner.prototype.scanIdentifier = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this.index;\n        this.advance();\n        while (isIdentifierPart(this.peek))\n            this.advance();\n        var /** @type {?} */ str = this.input.substring(start, this.index);\n        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :\n            newIdentifierToken(start, str);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Scanner.prototype.scanNumber = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        var /** @type {?} */ simple = (this.index === start);\n        this.advance(); // Skip initial digit.\n        while (true) {\n            if (chars.isDigit(this.peek)) {\n                // Do nothing.\n            }\n            else if (this.peek == chars.$PERIOD) {\n                simple = false;\n            }\n            else if (isExponentStart(this.peek)) {\n                this.advance();\n                if (isExponentSign(this.peek))\n                    this.advance();\n                if (!chars.isDigit(this.peek))\n                    return this.error('Invalid exponent', -1);\n                simple = false;\n            }\n            else {\n                break;\n            }\n            this.advance();\n        }\n        var /** @type {?} */ str = this.input.substring(start, this.index);\n        var /** @type {?} */ value = simple ? parseIntAutoRadix(str) : parseFloat(str);\n        return newNumberToken(start, value);\n    };\n    /**\n     * @return {?}\n     */\n    _Scanner.prototype.scanString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this.index;\n        var /** @type {?} */ quote = this.peek;\n        this.advance(); // Skip initial quote.\n        var /** @type {?} */ buffer = '';\n        var /** @type {?} */ marker = this.index;\n        var /** @type {?} */ input = this.input;\n        while (this.peek != quote) {\n            if (this.peek == chars.$BACKSLASH) {\n                buffer += input.substring(marker, this.index);\n                this.advance();\n                var /** @type {?} */ unescapedCode = void 0;\n                // Workaround for TS2.1-introduced type strictness\n                this.peek = this.peek;\n                if (this.peek == chars.$u) {\n                    // 4 character hex code for unicode character.\n                    var /** @type {?} */ hex = input.substring(this.index + 1, this.index + 5);\n                    if (/^[0-9a-f]+$/i.test(hex)) {\n                        unescapedCode = parseInt(hex, 16);\n                    }\n                    else {\n                        return this.error(\"Invalid unicode escape [\\\\u\" + hex + \"]\", 0);\n                    }\n                    for (var /** @type {?} */ i = 0; i < 5; i++) {\n                        this.advance();\n                    }\n                }\n                else {\n                    unescapedCode = unescape(this.peek);\n                    this.advance();\n                }\n                buffer += String.fromCharCode(unescapedCode);\n                marker = this.index;\n            }\n            else if (this.peek == chars.$EOF) {\n                return this.error('Unterminated quote', 0);\n            }\n            else {\n                this.advance();\n            }\n        }\n        var /** @type {?} */ last = input.substring(marker, this.index);\n        this.advance(); // Skip terminating quote.\n        return newStringToken(start, buffer + last);\n    };\n    /**\n     * @param {?} message\n     * @param {?} offset\n     * @return {?}\n     */\n    _Scanner.prototype.error = /**\n     * @param {?} message\n     * @param {?} offset\n     * @return {?}\n     */\n    function (message, offset) {\n        var /** @type {?} */ position = this.index + offset;\n        return newErrorToken(position, \"Lexer Error: \" + message + \" at column \" + position + \" in expression [\" + this.input + \"]\");\n    };\n    return _Scanner;\n}());\nfunction _Scanner_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _Scanner.prototype.length;\n    /** @type {?} */\n    _Scanner.prototype.peek;\n    /** @type {?} */\n    _Scanner.prototype.index;\n    /** @type {?} */\n    _Scanner.prototype.input;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isIdentifierStart(code) {\n    return (chars.$a <= code && code <= chars.$z) || (chars.$A <= code && code <= chars.$Z) ||\n        (code == chars.$_) || (code == chars.$$);\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function isIdentifier(input) {\n    if (input.length == 0)\n        return false;\n    var /** @type {?} */ scanner = new _Scanner(input);\n    if (!isIdentifierStart(scanner.peek))\n        return false;\n    scanner.advance();\n    while (scanner.peek !== chars.$EOF) {\n        if (!isIdentifierPart(scanner.peek))\n            return false;\n        scanner.advance();\n    }\n    return true;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isIdentifierPart(code) {\n    return chars.isAsciiLetter(code) || chars.isDigit(code) || (code == chars.$_) ||\n        (code == chars.$$);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isExponentStart(code) {\n    return code == chars.$e || code == chars.$E;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isExponentSign(code) {\n    return code == chars.$MINUS || code == chars.$PLUS;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nexport function isQuote(code) {\n    return code === chars.$SQ || code === chars.$DQ || code === chars.$BT;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction unescape(code) {\n    switch (code) {\n        case chars.$n:\n            return chars.$LF;\n        case chars.$f:\n            return chars.$FF;\n        case chars.$r:\n            return chars.$CR;\n        case chars.$t:\n            return chars.$TAB;\n        case chars.$v:\n            return chars.$VTAB;\n        default:\n            return code;\n    }\n}\n/**\n * @param {?} text\n * @return {?}\n */\nfunction parseIntAutoRadix(text) {\n    var /** @type {?} */ result = parseInt(text);\n    if (isNaN(result)) {\n        throw new Error('Invalid integer literal when parsing ' + text);\n    }\n    return result;\n}\n//# sourceMappingURL=lexer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nvar ParserError = /** @class */ (function () {\n    function ParserError(message, input, errLocation, ctxLocation) {\n        this.input = input;\n        this.errLocation = errLocation;\n        this.ctxLocation = ctxLocation;\n        this.message = \"Parser Error: \" + message + \" \" + errLocation + \" [\" + input + \"] in \" + ctxLocation;\n    }\n    return ParserError;\n}());\nexport { ParserError };\nfunction ParserError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParserError.prototype.message;\n    /** @type {?} */\n    ParserError.prototype.input;\n    /** @type {?} */\n    ParserError.prototype.errLocation;\n    /** @type {?} */\n    ParserError.prototype.ctxLocation;\n}\nvar ParseSpan = /** @class */ (function () {\n    function ParseSpan(start, end) {\n        this.start = start;\n        this.end = end;\n    }\n    return ParseSpan;\n}());\nexport { ParseSpan };\nfunction ParseSpan_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseSpan.prototype.start;\n    /** @type {?} */\n    ParseSpan.prototype.end;\n}\nvar AST = /** @class */ (function () {\n    function AST(span) {\n        this.span = span;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    AST.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return null;\n    };\n    /**\n     * @return {?}\n     */\n    AST.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return 'AST'; };\n    return AST;\n}());\nexport { AST };\nfunction AST_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AST.prototype.span;\n}\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nvar /**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nQuote = /** @class */ (function (_super) {\n    tslib_1.__extends(Quote, _super);\n    function Quote(span, prefix, uninterpretedExpression, location) {\n        var _this = _super.call(this, span) || this;\n        _this.prefix = prefix;\n        _this.uninterpretedExpression = uninterpretedExpression;\n        _this.location = location;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Quote.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitQuote(this, context);\n    };\n    /**\n     * @return {?}\n     */\n    Quote.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return 'Quote'; };\n    return Quote;\n}(AST));\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport { Quote };\nfunction Quote_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Quote.prototype.prefix;\n    /** @type {?} */\n    Quote.prototype.uninterpretedExpression;\n    /** @type {?} */\n    Quote.prototype.location;\n}\nvar EmptyExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(EmptyExpr, _super);\n    function EmptyExpr() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    EmptyExpr.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        // do nothing\n    };\n    return EmptyExpr;\n}(AST));\nexport { EmptyExpr };\nvar ImplicitReceiver = /** @class */ (function (_super) {\n    tslib_1.__extends(ImplicitReceiver, _super);\n    function ImplicitReceiver() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    ImplicitReceiver.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitImplicitReceiver(this, context);\n    };\n    return ImplicitReceiver;\n}(AST));\nexport { ImplicitReceiver };\n/**\n * Multiple expressions separated by a semicolon.\n */\nvar /**\n * Multiple expressions separated by a semicolon.\n */\nChain = /** @class */ (function (_super) {\n    tslib_1.__extends(Chain, _super);\n    function Chain(span, expressions) {\n        var _this = _super.call(this, span) || this;\n        _this.expressions = expressions;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Chain.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitChain(this, context);\n    };\n    return Chain;\n}(AST));\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport { Chain };\nfunction Chain_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Chain.prototype.expressions;\n}\nvar Conditional = /** @class */ (function (_super) {\n    tslib_1.__extends(Conditional, _super);\n    function Conditional(span, condition, trueExp, falseExp) {\n        var _this = _super.call(this, span) || this;\n        _this.condition = condition;\n        _this.trueExp = trueExp;\n        _this.falseExp = falseExp;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Conditional.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitConditional(this, context);\n    };\n    return Conditional;\n}(AST));\nexport { Conditional };\nfunction Conditional_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Conditional.prototype.condition;\n    /** @type {?} */\n    Conditional.prototype.trueExp;\n    /** @type {?} */\n    Conditional.prototype.falseExp;\n}\nvar PropertyRead = /** @class */ (function (_super) {\n    tslib_1.__extends(PropertyRead, _super);\n    function PropertyRead(span, receiver, name) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    PropertyRead.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitPropertyRead(this, context);\n    };\n    return PropertyRead;\n}(AST));\nexport { PropertyRead };\nfunction PropertyRead_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PropertyRead.prototype.receiver;\n    /** @type {?} */\n    PropertyRead.prototype.name;\n}\nvar PropertyWrite = /** @class */ (function (_super) {\n    tslib_1.__extends(PropertyWrite, _super);\n    function PropertyWrite(span, receiver, name, value) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    PropertyWrite.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitPropertyWrite(this, context);\n    };\n    return PropertyWrite;\n}(AST));\nexport { PropertyWrite };\nfunction PropertyWrite_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PropertyWrite.prototype.receiver;\n    /** @type {?} */\n    PropertyWrite.prototype.name;\n    /** @type {?} */\n    PropertyWrite.prototype.value;\n}\nvar SafePropertyRead = /** @class */ (function (_super) {\n    tslib_1.__extends(SafePropertyRead, _super);\n    function SafePropertyRead(span, receiver, name) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    SafePropertyRead.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitSafePropertyRead(this, context);\n    };\n    return SafePropertyRead;\n}(AST));\nexport { SafePropertyRead };\nfunction SafePropertyRead_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SafePropertyRead.prototype.receiver;\n    /** @type {?} */\n    SafePropertyRead.prototype.name;\n}\nvar KeyedRead = /** @class */ (function (_super) {\n    tslib_1.__extends(KeyedRead, _super);\n    function KeyedRead(span, obj, key) {\n        var _this = _super.call(this, span) || this;\n        _this.obj = obj;\n        _this.key = key;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    KeyedRead.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitKeyedRead(this, context);\n    };\n    return KeyedRead;\n}(AST));\nexport { KeyedRead };\nfunction KeyedRead_tsickle_Closure_declarations() {\n    /** @type {?} */\n    KeyedRead.prototype.obj;\n    /** @type {?} */\n    KeyedRead.prototype.key;\n}\nvar KeyedWrite = /** @class */ (function (_super) {\n    tslib_1.__extends(KeyedWrite, _super);\n    function KeyedWrite(span, obj, key, value) {\n        var _this = _super.call(this, span) || this;\n        _this.obj = obj;\n        _this.key = key;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    KeyedWrite.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitKeyedWrite(this, context);\n    };\n    return KeyedWrite;\n}(AST));\nexport { KeyedWrite };\nfunction KeyedWrite_tsickle_Closure_declarations() {\n    /** @type {?} */\n    KeyedWrite.prototype.obj;\n    /** @type {?} */\n    KeyedWrite.prototype.key;\n    /** @type {?} */\n    KeyedWrite.prototype.value;\n}\nvar BindingPipe = /** @class */ (function (_super) {\n    tslib_1.__extends(BindingPipe, _super);\n    function BindingPipe(span, exp, name, args) {\n        var _this = _super.call(this, span) || this;\n        _this.exp = exp;\n        _this.name = name;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    BindingPipe.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitPipe(this, context);\n    };\n    return BindingPipe;\n}(AST));\nexport { BindingPipe };\nfunction BindingPipe_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingPipe.prototype.exp;\n    /** @type {?} */\n    BindingPipe.prototype.name;\n    /** @type {?} */\n    BindingPipe.prototype.args;\n}\nvar LiteralPrimitive = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralPrimitive, _super);\n    function LiteralPrimitive(span, value) {\n        var _this = _super.call(this, span) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    LiteralPrimitive.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitLiteralPrimitive(this, context);\n    };\n    return LiteralPrimitive;\n}(AST));\nexport { LiteralPrimitive };\nfunction LiteralPrimitive_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralPrimitive.prototype.value;\n}\nvar LiteralArray = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralArray, _super);\n    function LiteralArray(span, expressions) {\n        var _this = _super.call(this, span) || this;\n        _this.expressions = expressions;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    LiteralArray.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitLiteralArray(this, context);\n    };\n    return LiteralArray;\n}(AST));\nexport { LiteralArray };\nfunction LiteralArray_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralArray.prototype.expressions;\n}\nvar LiteralMap = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralMap, _super);\n    function LiteralMap(span, keys, values) {\n        var _this = _super.call(this, span) || this;\n        _this.keys = keys;\n        _this.values = values;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    LiteralMap.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitLiteralMap(this, context);\n    };\n    return LiteralMap;\n}(AST));\nexport { LiteralMap };\nfunction LiteralMap_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralMap.prototype.keys;\n    /** @type {?} */\n    LiteralMap.prototype.values;\n}\nvar Interpolation = /** @class */ (function (_super) {\n    tslib_1.__extends(Interpolation, _super);\n    function Interpolation(span, strings, expressions) {\n        var _this = _super.call(this, span) || this;\n        _this.strings = strings;\n        _this.expressions = expressions;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Interpolation.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitInterpolation(this, context);\n    };\n    return Interpolation;\n}(AST));\nexport { Interpolation };\nfunction Interpolation_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Interpolation.prototype.strings;\n    /** @type {?} */\n    Interpolation.prototype.expressions;\n}\nvar Binary = /** @class */ (function (_super) {\n    tslib_1.__extends(Binary, _super);\n    function Binary(span, operation, left, right) {\n        var _this = _super.call(this, span) || this;\n        _this.operation = operation;\n        _this.left = left;\n        _this.right = right;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Binary.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitBinary(this, context);\n    };\n    return Binary;\n}(AST));\nexport { Binary };\nfunction Binary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Binary.prototype.operation;\n    /** @type {?} */\n    Binary.prototype.left;\n    /** @type {?} */\n    Binary.prototype.right;\n}\nvar PrefixNot = /** @class */ (function (_super) {\n    tslib_1.__extends(PrefixNot, _super);\n    function PrefixNot(span, expression) {\n        var _this = _super.call(this, span) || this;\n        _this.expression = expression;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    PrefixNot.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitPrefixNot(this, context);\n    };\n    return PrefixNot;\n}(AST));\nexport { PrefixNot };\nfunction PrefixNot_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PrefixNot.prototype.expression;\n}\nvar NonNullAssert = /** @class */ (function (_super) {\n    tslib_1.__extends(NonNullAssert, _super);\n    function NonNullAssert(span, expression) {\n        var _this = _super.call(this, span) || this;\n        _this.expression = expression;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    NonNullAssert.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitNonNullAssert(this, context);\n    };\n    return NonNullAssert;\n}(AST));\nexport { NonNullAssert };\nfunction NonNullAssert_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NonNullAssert.prototype.expression;\n}\nvar MethodCall = /** @class */ (function (_super) {\n    tslib_1.__extends(MethodCall, _super);\n    function MethodCall(span, receiver, name, args) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    MethodCall.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitMethodCall(this, context);\n    };\n    return MethodCall;\n}(AST));\nexport { MethodCall };\nfunction MethodCall_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MethodCall.prototype.receiver;\n    /** @type {?} */\n    MethodCall.prototype.name;\n    /** @type {?} */\n    MethodCall.prototype.args;\n}\nvar SafeMethodCall = /** @class */ (function (_super) {\n    tslib_1.__extends(SafeMethodCall, _super);\n    function SafeMethodCall(span, receiver, name, args) {\n        var _this = _super.call(this, span) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    SafeMethodCall.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitSafeMethodCall(this, context);\n    };\n    return SafeMethodCall;\n}(AST));\nexport { SafeMethodCall };\nfunction SafeMethodCall_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SafeMethodCall.prototype.receiver;\n    /** @type {?} */\n    SafeMethodCall.prototype.name;\n    /** @type {?} */\n    SafeMethodCall.prototype.args;\n}\nvar FunctionCall = /** @class */ (function (_super) {\n    tslib_1.__extends(FunctionCall, _super);\n    function FunctionCall(span, target, args) {\n        var _this = _super.call(this, span) || this;\n        _this.target = target;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    FunctionCall.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return visitor.visitFunctionCall(this, context);\n    };\n    return FunctionCall;\n}(AST));\nexport { FunctionCall };\nfunction FunctionCall_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FunctionCall.prototype.target;\n    /** @type {?} */\n    FunctionCall.prototype.args;\n}\nvar ASTWithSource = /** @class */ (function (_super) {\n    tslib_1.__extends(ASTWithSource, _super);\n    function ASTWithSource(ast, source, location, errors) {\n        var _this = _super.call(this, new ParseSpan(0, source == null ? 0 : source.length)) || this;\n        _this.ast = ast;\n        _this.source = source;\n        _this.location = location;\n        _this.errors = errors;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    ASTWithSource.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === void 0) { context = null; }\n        return this.ast.visit(visitor, context);\n    };\n    /**\n     * @return {?}\n     */\n    ASTWithSource.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return this.source + \" in \" + this.location; };\n    return ASTWithSource;\n}(AST));\nexport { ASTWithSource };\nfunction ASTWithSource_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ASTWithSource.prototype.ast;\n    /** @type {?} */\n    ASTWithSource.prototype.source;\n    /** @type {?} */\n    ASTWithSource.prototype.location;\n    /** @type {?} */\n    ASTWithSource.prototype.errors;\n}\nvar TemplateBinding = /** @class */ (function () {\n    function TemplateBinding(span, key, keyIsVar, name, expression) {\n        this.span = span;\n        this.key = key;\n        this.keyIsVar = keyIsVar;\n        this.name = name;\n        this.expression = expression;\n    }\n    return TemplateBinding;\n}());\nexport { TemplateBinding };\nfunction TemplateBinding_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateBinding.prototype.span;\n    /** @type {?} */\n    TemplateBinding.prototype.key;\n    /** @type {?} */\n    TemplateBinding.prototype.keyIsVar;\n    /** @type {?} */\n    TemplateBinding.prototype.name;\n    /** @type {?} */\n    TemplateBinding.prototype.expression;\n}\n/**\n * @record\n */\nexport function AstVisitor() { }\nfunction AstVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AstVisitor.prototype.visitBinary;\n    /** @type {?} */\n    AstVisitor.prototype.visitChain;\n    /** @type {?} */\n    AstVisitor.prototype.visitConditional;\n    /** @type {?} */\n    AstVisitor.prototype.visitFunctionCall;\n    /** @type {?} */\n    AstVisitor.prototype.visitImplicitReceiver;\n    /** @type {?} */\n    AstVisitor.prototype.visitInterpolation;\n    /** @type {?} */\n    AstVisitor.prototype.visitKeyedRead;\n    /** @type {?} */\n    AstVisitor.prototype.visitKeyedWrite;\n    /** @type {?} */\n    AstVisitor.prototype.visitLiteralArray;\n    /** @type {?} */\n    AstVisitor.prototype.visitLiteralMap;\n    /** @type {?} */\n    AstVisitor.prototype.visitLiteralPrimitive;\n    /** @type {?} */\n    AstVisitor.prototype.visitMethodCall;\n    /** @type {?} */\n    AstVisitor.prototype.visitPipe;\n    /** @type {?} */\n    AstVisitor.prototype.visitPrefixNot;\n    /** @type {?} */\n    AstVisitor.prototype.visitNonNullAssert;\n    /** @type {?} */\n    AstVisitor.prototype.visitPropertyRead;\n    /** @type {?} */\n    AstVisitor.prototype.visitPropertyWrite;\n    /** @type {?} */\n    AstVisitor.prototype.visitQuote;\n    /** @type {?} */\n    AstVisitor.prototype.visitSafeMethodCall;\n    /** @type {?} */\n    AstVisitor.prototype.visitSafePropertyRead;\n    /** @type {?|undefined} */\n    AstVisitor.prototype.visit;\n}\nvar NullAstVisitor = /** @class */ (function () {\n    function NullAstVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    NullAstVisitor.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    return NullAstVisitor;\n}());\nexport { NullAstVisitor };\nvar RecursiveAstVisitor = /** @class */ (function () {\n    function RecursiveAstVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.left.visit(this);\n        ast.right.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return this.visitAll(ast.expressions, context); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.condition.visit(this);\n        ast.trueExp.visit(this);\n        ast.falseExp.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.exp.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        /** @type {?} */ ((ast.target)).visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitAll(ast.expressions, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.obj.visit(this);\n        ast.key.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.obj.visit(this);\n        ast.key.visit(this);\n        ast.value.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitAll(ast.expressions, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return this.visitAll(ast.values, context); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visit(this);\n        return this.visitAll(ast.args, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.expression.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.expression.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visit(this);\n        ast.value.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visit(this);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visit(this);\n        return this.visitAll(ast.args, context);\n    };\n    /**\n     * @param {?} asts\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitAll = /**\n     * @param {?} asts\n     * @param {?} context\n     * @return {?}\n     */\n    function (asts, context) {\n        var _this = this;\n        asts.forEach(function (ast) { return ast.visit(_this, context); });\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return null; };\n    return RecursiveAstVisitor;\n}());\nexport { RecursiveAstVisitor };\nvar AstTransformer = /** @class */ (function () {\n    function AstTransformer() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return ast; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new LiteralPrimitive(ast.span, ast.value);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new SafeMethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new FunctionCall(ast.span, /** @type {?} */ ((ast.target)).visit(this), this.visitAll(ast.args));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new PrefixNot(ast.span, ast.expression.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new NonNullAssert(ast.span, ast.expression.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new Conditional(ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new KeyedWrite(ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n    };\n    /**\n     * @param {?} asts\n     * @return {?}\n     */\n    AstTransformer.prototype.visitAll = /**\n     * @param {?} asts\n     * @return {?}\n     */\n    function (asts) {\n        var /** @type {?} */ res = new Array(asts.length);\n        for (var /** @type {?} */ i = 0; i < asts.length; ++i) {\n            res[i] = asts[i].visit(this);\n        }\n        return res;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new Chain(ast.span, this.visitAll(ast.expressions));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n    };\n    return AstTransformer;\n}());\nexport { AstTransformer };\nvar AstMemoryEfficientTransformer = /** @class */ (function () {\n    function AstMemoryEfficientTransformer() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return ast; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions)\n            return new Interpolation(ast.span, ast.strings, expressions);\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return ast; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new PropertyRead(ast.span, receiver, ast.name);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ receiver = ast.receiver.visit(this);\n        var /** @type {?} */ value = ast.value.visit(this);\n        if (receiver !== ast.receiver || value !== ast.value) {\n            return new PropertyWrite(ast.span, receiver, ast.name, value);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new SafePropertyRead(ast.span, receiver, ast.name);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ receiver = ast.receiver.visit(this);\n        if (receiver !== ast.receiver) {\n            return new MethodCall(ast.span, receiver, ast.name, this.visitAll(ast.args));\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ receiver = ast.receiver.visit(this);\n        var /** @type {?} */ args = this.visitAll(ast.args);\n        if (receiver !== ast.receiver || args !== ast.args) {\n            return new SafeMethodCall(ast.span, receiver, ast.name, args);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ target = ast.target && ast.target.visit(this);\n        var /** @type {?} */ args = this.visitAll(ast.args);\n        if (target !== ast.target || args !== ast.args) {\n            return new FunctionCall(ast.span, target, args);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions) {\n            return new LiteralArray(ast.span, expressions);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ values = this.visitAll(ast.values);\n        if (values !== ast.values) {\n            return new LiteralMap(ast.span, ast.keys, values);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ left = ast.left.visit(this);\n        var /** @type {?} */ right = ast.right.visit(this);\n        if (left !== ast.left || right !== ast.right) {\n            return new Binary(ast.span, ast.operation, left, right);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ expression = ast.expression.visit(this);\n        if (expression !== ast.expression) {\n            return new PrefixNot(ast.span, expression);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ expression = ast.expression.visit(this);\n        if (expression !== ast.expression) {\n            return new NonNullAssert(ast.span, expression);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ condition = ast.condition.visit(this);\n        var /** @type {?} */ trueExp = ast.trueExp.visit(this);\n        var /** @type {?} */ falseExp = ast.falseExp.visit(this);\n        if (condition !== ast.condition || trueExp !== ast.trueExp || falseExp !== falseExp) {\n            return new Conditional(ast.span, condition, trueExp, falseExp);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ exp = ast.exp.visit(this);\n        var /** @type {?} */ args = this.visitAll(ast.args);\n        if (exp !== ast.exp || args !== ast.args) {\n            return new BindingPipe(ast.span, exp, ast.name, args);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ obj = ast.obj.visit(this);\n        var /** @type {?} */ key = ast.key.visit(this);\n        if (obj !== ast.obj || key !== ast.key) {\n            return new KeyedRead(ast.span, obj, key);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ obj = ast.obj.visit(this);\n        var /** @type {?} */ key = ast.key.visit(this);\n        var /** @type {?} */ value = ast.value.visit(this);\n        if (obj !== ast.obj || key !== ast.key || value !== ast.value) {\n            return new KeyedWrite(ast.span, obj, key, value);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} asts\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitAll = /**\n     * @param {?} asts\n     * @return {?}\n     */\n    function (asts) {\n        var /** @type {?} */ res = new Array(asts.length);\n        var /** @type {?} */ modified = false;\n        for (var /** @type {?} */ i = 0; i < asts.length; ++i) {\n            var /** @type {?} */ original = asts[i];\n            var /** @type {?} */ value = original.visit(this);\n            res[i] = value;\n            modified = modified || value !== original;\n        }\n        return modified ? res : asts;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ expressions = this.visitAll(ast.expressions);\n        if (expressions !== ast.expressions) {\n            return new Chain(ast.span, expressions);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstMemoryEfficientTransformer.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return ast; };\n    return AstMemoryEfficientTransformer;\n}());\nexport { AstMemoryEfficientTransformer };\n/**\n * @param {?} ast\n * @param {?} visitor\n * @param {?=} context\n * @return {?}\n */\nexport function visitAstChildren(ast, visitor, context) {\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function visit(ast) {\n        visitor.visit && visitor.visit(ast, context) || ast.visit(visitor, context);\n    }\n    /**\n     * @template T\n     * @param {?} asts\n     * @return {?}\n     */\n    function visitAll(asts) { asts.forEach(visit); }\n    ast.visit({\n        visitBinary: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.left);\n            visit(ast.right);\n        },\n        visitChain: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visitAll(ast.expressions); },\n        visitConditional: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.condition);\n            visit(ast.trueExp);\n            visit(ast.falseExp);\n        },\n        visitFunctionCall: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            if (ast.target) {\n                visit(ast.target);\n            }\n            visitAll(ast.args);\n        },\n        visitImplicitReceiver: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { },\n        visitInterpolation: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visitAll(ast.expressions); },\n        visitKeyedRead: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.obj);\n            visit(ast.key);\n        },\n        visitKeyedWrite: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.obj);\n            visit(ast.key);\n            visit(ast.obj);\n        },\n        visitLiteralArray: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visitAll(ast.expressions); },\n        visitLiteralMap: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { },\n        visitLiteralPrimitive: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { },\n        visitMethodCall: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.receiver);\n            visitAll(ast.args);\n        },\n        visitPipe: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.exp);\n            visitAll(ast.args);\n        },\n        visitPrefixNot: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visit(ast.expression); },\n        visitNonNullAssert: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visit(ast.expression); },\n        visitPropertyRead: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visit(ast.receiver); },\n        visitPropertyWrite: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.receiver);\n            visit(ast.value);\n        },\n        visitQuote: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { },\n        visitSafeMethodCall: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) {\n            visit(ast.receiver);\n            visitAll(ast.args);\n        },\n        visitSafePropertyRead: /**\n         * @param {?} ast\n         * @return {?}\n         */\n        function (ast) { visit(ast.receiver); },\n    });\n}\nvar ParsedProperty = /** @class */ (function () {\n    function ParsedProperty(name, expression, type, sourceSpan) {\n        this.name = name;\n        this.expression = expression;\n        this.type = type;\n        this.sourceSpan = sourceSpan;\n        this.isLiteral = this.type === ParsedPropertyType.LITERAL_ATTR;\n        this.isAnimation = this.type === ParsedPropertyType.ANIMATION;\n    }\n    return ParsedProperty;\n}());\nexport { ParsedProperty };\nfunction ParsedProperty_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParsedProperty.prototype.isLiteral;\n    /** @type {?} */\n    ParsedProperty.prototype.isAnimation;\n    /** @type {?} */\n    ParsedProperty.prototype.name;\n    /** @type {?} */\n    ParsedProperty.prototype.expression;\n    /** @type {?} */\n    ParsedProperty.prototype.type;\n    /** @type {?} */\n    ParsedProperty.prototype.sourceSpan;\n}\n/** @enum {number} */\nvar ParsedPropertyType = {\n    DEFAULT: 0,\n    LITERAL_ATTR: 1,\n    ANIMATION: 2,\n};\nexport { ParsedPropertyType };\nParsedPropertyType[ParsedPropertyType.DEFAULT] = \"DEFAULT\";\nParsedPropertyType[ParsedPropertyType.LITERAL_ATTR] = \"LITERAL_ATTR\";\nParsedPropertyType[ParsedPropertyType.ANIMATION] = \"ANIMATION\";\n/** @enum {number} */\nvar ParsedEventType = {\n    // DOM or Directive event\n    Regular: 0,\n    // Animation specific event\n    Animation: 1,\n};\nexport { ParsedEventType };\nvar ParsedEvent = /** @class */ (function () {\n    // Regular events have a target\n    // Animation events have a phase\n    function ParsedEvent(name, targetOrPhase, type, handler, sourceSpan) {\n        this.name = name;\n        this.targetOrPhase = targetOrPhase;\n        this.type = type;\n        this.handler = handler;\n        this.sourceSpan = sourceSpan;\n    }\n    return ParsedEvent;\n}());\nexport { ParsedEvent };\nfunction ParsedEvent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParsedEvent.prototype.name;\n    /** @type {?} */\n    ParsedEvent.prototype.targetOrPhase;\n    /** @type {?} */\n    ParsedEvent.prototype.type;\n    /** @type {?} */\n    ParsedEvent.prototype.handler;\n    /** @type {?} */\n    ParsedEvent.prototype.sourceSpan;\n}\nvar ParsedVariable = /** @class */ (function () {\n    function ParsedVariable(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    return ParsedVariable;\n}());\nexport { ParsedVariable };\nfunction ParsedVariable_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParsedVariable.prototype.name;\n    /** @type {?} */\n    ParsedVariable.prototype.value;\n    /** @type {?} */\n    ParsedVariable.prototype.sourceSpan;\n}\n/** @enum {number} */\nvar BoundElementBindingType = {\n    // A regular binding to a property (e.g. `[property]=\"expression\"`).\n    Property: 0,\n    // A binding to an element attribute (e.g. `[attr.name]=\"expression\"`).\n    Attribute: 1,\n    // A binding to a CSS class (e.g. `[class.name]=\"condition\"`).\n    Class: 2,\n    // A binding to a style rule (e.g. `[style.rule]=\"expression\"`).\n    Style: 3,\n    // A binding to an animation reference (e.g. `[animate.key]=\"expression\"`).\n    Animation: 4,\n};\nexport { BoundElementBindingType };\nvar BoundElementProperty = /** @class */ (function () {\n    function BoundElementProperty(name, type, securityContext, value, unit, sourceSpan) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n    }\n    return BoundElementProperty;\n}());\nexport { BoundElementProperty };\nfunction BoundElementProperty_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundElementProperty.prototype.name;\n    /** @type {?} */\n    BoundElementProperty.prototype.type;\n    /** @type {?} */\n    BoundElementProperty.prototype.securityContext;\n    /** @type {?} */\n    BoundElementProperty.prototype.value;\n    /** @type {?} */\n    BoundElementProperty.prototype.unit;\n    /** @type {?} */\n    BoundElementProperty.prototype.sourceSpan;\n}\n//# sourceMappingURL=ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as chars from '../chars';\nimport { DEFAULT_INTERPOLATION_CONFIG } from '../ml_parser/interpolation_config';\nimport { escapeRegExp } from '../util';\nimport { ASTWithSource, Binary, BindingPipe, Chain, Conditional, EmptyExpr, FunctionCall, ImplicitReceiver, Interpolation, KeyedRead, KeyedWrite, LiteralArray, LiteralMap, LiteralPrimitive, MethodCall, NonNullAssert, ParseSpan, ParserError, PrefixNot, PropertyRead, PropertyWrite, Quote, SafeMethodCall, SafePropertyRead, TemplateBinding } from './ast';\nimport { EOF, TokenType, isIdentifier, isQuote } from './lexer';\nvar SplitInterpolation = /** @class */ (function () {\n    function SplitInterpolation(strings, expressions, offsets) {\n        this.strings = strings;\n        this.expressions = expressions;\n        this.offsets = offsets;\n    }\n    return SplitInterpolation;\n}());\nexport { SplitInterpolation };\nfunction SplitInterpolation_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SplitInterpolation.prototype.strings;\n    /** @type {?} */\n    SplitInterpolation.prototype.expressions;\n    /** @type {?} */\n    SplitInterpolation.prototype.offsets;\n}\nvar TemplateBindingParseResult = /** @class */ (function () {\n    function TemplateBindingParseResult(templateBindings, warnings, errors) {\n        this.templateBindings = templateBindings;\n        this.warnings = warnings;\n        this.errors = errors;\n    }\n    return TemplateBindingParseResult;\n}());\nexport { TemplateBindingParseResult };\nfunction TemplateBindingParseResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateBindingParseResult.prototype.templateBindings;\n    /** @type {?} */\n    TemplateBindingParseResult.prototype.warnings;\n    /** @type {?} */\n    TemplateBindingParseResult.prototype.errors;\n}\n/**\n * @param {?} config\n * @return {?}\n */\nfunction _createInterpolateRegExp(config) {\n    var /** @type {?} */ pattern = escapeRegExp(config.start) + '([\\\\s\\\\S]*?)' + escapeRegExp(config.end);\n    return new RegExp(pattern, 'g');\n}\nvar Parser = /** @class */ (function () {\n    function Parser(_lexer) {\n        this._lexer = _lexer;\n        this.errors = [];\n    }\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseAction = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        var /** @type {?} */ sourceToLex = this._stripComments(input);\n        var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));\n        var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)\n            .parseChain();\n        return new ASTWithSource(ast, input, location, this.errors);\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseBinding = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);\n        return new ASTWithSource(ast, input, location, this.errors);\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseSimpleBinding = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);\n        var /** @type {?} */ errors = SimpleExpressionChecker.check(ast);\n        if (errors.length > 0) {\n            this._reportError(\"Host binding expression cannot contain \" + errors.join(' '), input, location);\n        }\n        return new ASTWithSource(ast, input, location, this.errors);\n    };\n    /**\n     * @param {?} message\n     * @param {?} input\n     * @param {?} errLocation\n     * @param {?=} ctxLocation\n     * @return {?}\n     */\n    Parser.prototype._reportError = /**\n     * @param {?} message\n     * @param {?} input\n     * @param {?} errLocation\n     * @param {?=} ctxLocation\n     * @return {?}\n     */\n    function (message, input, errLocation, ctxLocation) {\n        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype._parseBindingAst = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        // Quotes expressions use 3rd-party expression language. We don't want to use\n        // our lexer or parser for that, so we check for that ahead of time.\n        var /** @type {?} */ quote = this._parseQuote(input, location);\n        if (quote != null) {\n            return quote;\n        }\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        var /** @type {?} */ sourceToLex = this._stripComments(input);\n        var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);\n        return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)\n            .parseChain();\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    Parser.prototype._parseQuote = /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    function (input, location) {\n        if (input == null)\n            return null;\n        var /** @type {?} */ prefixSeparatorIndex = input.indexOf(':');\n        if (prefixSeparatorIndex == -1)\n            return null;\n        var /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();\n        if (!isIdentifier(prefix))\n            return null;\n        var /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n        return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);\n    };\n    /**\n     * @param {?} tplKey\n     * @param {?} tplValue\n     * @param {?} location\n     * @return {?}\n     */\n    Parser.prototype.parseTemplateBindings = /**\n     * @param {?} tplKey\n     * @param {?} tplValue\n     * @param {?} location\n     * @return {?}\n     */\n    function (tplKey, tplValue, location) {\n        var /** @type {?} */ tokens = this._lexer.tokenize(tplValue);\n        return new _ParseAST(tplValue, location, tokens, tplValue.length, false, this.errors, 0)\n            .parseTemplateBindings(tplKey);\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parseInterpolation = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ split = this.splitInterpolation(input, location, interpolationConfig);\n        if (split == null)\n            return null;\n        var /** @type {?} */ expressions = [];\n        for (var /** @type {?} */ i = 0; i < split.expressions.length; ++i) {\n            var /** @type {?} */ expressionText = split.expressions[i];\n            var /** @type {?} */ sourceToLex = this._stripComments(expressionText);\n            var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);\n            var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))\n                .parseChain();\n            expressions.push(ast);\n        }\n        return new ASTWithSource(new Interpolation(new ParseSpan(0, input == null ? 0 : input.length), split.strings, expressions), input, location, this.errors);\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.splitInterpolation = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);\n        var /** @type {?} */ parts = input.split(regexp);\n        if (parts.length <= 1) {\n            return null;\n        }\n        var /** @type {?} */ strings = [];\n        var /** @type {?} */ expressions = [];\n        var /** @type {?} */ offsets = [];\n        var /** @type {?} */ offset = 0;\n        for (var /** @type {?} */ i = 0; i < parts.length; i++) {\n            var /** @type {?} */ part = parts[i];\n            if (i % 2 === 0) {\n                // fixed string\n                strings.push(part);\n                offset += part.length;\n            }\n            else if (part.trim().length > 0) {\n                offset += interpolationConfig.start.length;\n                expressions.push(part);\n                offsets.push(offset);\n                offset += part.length + interpolationConfig.end.length;\n            }\n            else {\n                this._reportError('Blank expressions are not allowed in interpolated strings', input, \"at column \" + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + \" in\", location);\n                expressions.push('$implict');\n                offsets.push(offset);\n            }\n        }\n        return new SplitInterpolation(strings, expressions, offsets);\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    Parser.prototype.wrapLiteralPrimitive = /**\n     * @param {?} input\n     * @param {?} location\n     * @return {?}\n     */\n    function (input, location) {\n        return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, input == null ? 0 : input.length), input), input, location, this.errors);\n    };\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    Parser.prototype._stripComments = /**\n     * @param {?} input\n     * @return {?}\n     */\n    function (input) {\n        var /** @type {?} */ i = this._commentStart(input);\n        return i != null ? input.substring(0, i).trim() : input;\n    };\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    Parser.prototype._commentStart = /**\n     * @param {?} input\n     * @return {?}\n     */\n    function (input) {\n        var /** @type {?} */ outerQuote = null;\n        for (var /** @type {?} */ i = 0; i < input.length - 1; i++) {\n            var /** @type {?} */ char = input.charCodeAt(i);\n            var /** @type {?} */ nextChar = input.charCodeAt(i + 1);\n            if (char === chars.$SLASH && nextChar == chars.$SLASH && outerQuote == null)\n                return i;\n            if (outerQuote === char) {\n                outerQuote = null;\n            }\n            else if (outerQuote == null && isQuote(char)) {\n                outerQuote = char;\n            }\n        }\n        return null;\n    };\n    /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype._checkNoInterpolation = /**\n     * @param {?} input\n     * @param {?} location\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (input, location, interpolationConfig) {\n        var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);\n        var /** @type {?} */ parts = input.split(regexp);\n        if (parts.length > 1) {\n            this._reportError(\"Got interpolation (\" + interpolationConfig.start + interpolationConfig.end + \") where expression was expected\", input, \"at column \" + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + \" in\", location);\n        }\n    };\n    /**\n     * @param {?} parts\n     * @param {?} partInErrIdx\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype._findInterpolationErrorColumn = /**\n     * @param {?} parts\n     * @param {?} partInErrIdx\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (parts, partInErrIdx, interpolationConfig) {\n        var /** @type {?} */ errLocation = '';\n        for (var /** @type {?} */ j = 0; j < partInErrIdx; j++) {\n            errLocation += j % 2 === 0 ?\n                parts[j] :\n                \"\" + interpolationConfig.start + parts[j] + interpolationConfig.end;\n        }\n        return errLocation.length;\n    };\n    return Parser;\n}());\nexport { Parser };\nfunction Parser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Parser.prototype.errors;\n    /** @type {?} */\n    Parser.prototype._lexer;\n}\nvar _ParseAST = /** @class */ (function () {\n    function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {\n        this.input = input;\n        this.location = location;\n        this.tokens = tokens;\n        this.inputLength = inputLength;\n        this.parseAction = parseAction;\n        this.errors = errors;\n        this.offset = offset;\n        this.rparensExpected = 0;\n        this.rbracketsExpected = 0;\n        this.rbracesExpected = 0;\n        this.index = 0;\n    }\n    /**\n     * @param {?} offset\n     * @return {?}\n     */\n    _ParseAST.prototype.peek = /**\n     * @param {?} offset\n     * @return {?}\n     */\n    function (offset) {\n        var /** @type {?} */ i = this.index + offset;\n        return i < this.tokens.length ? this.tokens[i] : EOF;\n    };\n    Object.defineProperty(_ParseAST.prototype, \"next\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.peek(0); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(_ParseAST.prototype, \"inputIndex\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return (this.index < this.tokens.length) ? this.next.index + this.offset :\n                this.inputLength + this.offset;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _ParseAST.prototype.span = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) { return new ParseSpan(start, this.inputIndex); };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.advance = /**\n     * @return {?}\n     */\n    function () { this.index++; };\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    _ParseAST.prototype.optionalCharacter = /**\n     * @param {?} code\n     * @return {?}\n     */\n    function (code) {\n        if (this.next.isCharacter(code)) {\n            this.advance();\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.peekKeywordLet = /**\n     * @return {?}\n     */\n    function () { return this.next.isKeywordLet(); };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.peekKeywordAs = /**\n     * @return {?}\n     */\n    function () { return this.next.isKeywordAs(); };\n    /**\n     * @param {?} code\n     * @return {?}\n     */\n    _ParseAST.prototype.expectCharacter = /**\n     * @param {?} code\n     * @return {?}\n     */\n    function (code) {\n        if (this.optionalCharacter(code))\n            return;\n        this.error(\"Missing expected \" + String.fromCharCode(code));\n    };\n    /**\n     * @param {?} op\n     * @return {?}\n     */\n    _ParseAST.prototype.optionalOperator = /**\n     * @param {?} op\n     * @return {?}\n     */\n    function (op) {\n        if (this.next.isOperator(op)) {\n            this.advance();\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * @param {?} operator\n     * @return {?}\n     */\n    _ParseAST.prototype.expectOperator = /**\n     * @param {?} operator\n     * @return {?}\n     */\n    function (operator) {\n        if (this.optionalOperator(operator))\n            return;\n        this.error(\"Missing expected operator \" + operator);\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.expectIdentifierOrKeyword = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword()) {\n            this.error(\"Unexpected token \" + n + \", expected identifier or keyword\");\n            return '';\n        }\n        this.advance();\n        return /** @type {?} */ (n.toString());\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.expectIdentifierOrKeywordOrString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n            this.error(\"Unexpected token \" + n + \", expected identifier, keyword, or string\");\n            return '';\n        }\n        this.advance();\n        return /** @type {?} */ (n.toString());\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseChain = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ exprs = [];\n        var /** @type {?} */ start = this.inputIndex;\n        while (this.index < this.tokens.length) {\n            var /** @type {?} */ expr = this.parsePipe();\n            exprs.push(expr);\n            if (this.optionalCharacter(chars.$SEMICOLON)) {\n                if (!this.parseAction) {\n                    this.error('Binding expression cannot contain chained expression');\n                }\n                while (this.optionalCharacter(chars.$SEMICOLON)) {\n                } // read all semicolons\n            }\n            else if (this.index < this.tokens.length) {\n                this.error(\"Unexpected token '\" + this.next + \"'\");\n            }\n        }\n        if (exprs.length == 0)\n            return new EmptyExpr(this.span(start));\n        if (exprs.length == 1)\n            return exprs[0];\n        return new Chain(this.span(start), exprs);\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parsePipe = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = this.parseExpression();\n        if (this.optionalOperator('|')) {\n            if (this.parseAction) {\n                this.error('Cannot have a pipe in an action expression');\n            }\n            do {\n                var /** @type {?} */ name_1 = this.expectIdentifierOrKeyword();\n                var /** @type {?} */ args = [];\n                while (this.optionalCharacter(chars.$COLON)) {\n                    args.push(this.parseExpression());\n                }\n                result = new BindingPipe(this.span(result.span.start), result, name_1, args);\n            } while (this.optionalOperator('|'));\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseExpression = /**\n     * @return {?}\n     */\n    function () { return this.parseConditional(); };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseConditional = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this.inputIndex;\n        var /** @type {?} */ result = this.parseLogicalOr();\n        if (this.optionalOperator('?')) {\n            var /** @type {?} */ yes = this.parsePipe();\n            var /** @type {?} */ no = void 0;\n            if (!this.optionalCharacter(chars.$COLON)) {\n                var /** @type {?} */ end = this.inputIndex;\n                var /** @type {?} */ expression = this.input.substring(start, end);\n                this.error(\"Conditional expression \" + expression + \" requires all 3 expressions\");\n                no = new EmptyExpr(this.span(start));\n            }\n            else {\n                no = this.parsePipe();\n            }\n            return new Conditional(this.span(start), result, yes, no);\n        }\n        else {\n            return result;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseLogicalOr = /**\n     * @return {?}\n     */\n    function () {\n        // '||'\n        var /** @type {?} */ result = this.parseLogicalAnd();\n        while (this.optionalOperator('||')) {\n            var /** @type {?} */ right = this.parseLogicalAnd();\n            result = new Binary(this.span(result.span.start), '||', result, right);\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseLogicalAnd = /**\n     * @return {?}\n     */\n    function () {\n        // '&&'\n        var /** @type {?} */ result = this.parseEquality();\n        while (this.optionalOperator('&&')) {\n            var /** @type {?} */ right = this.parseEquality();\n            result = new Binary(this.span(result.span.start), '&&', result, right);\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseEquality = /**\n     * @return {?}\n     */\n    function () {\n        // '==','!=','===','!=='\n        var /** @type {?} */ result = this.parseRelational();\n        while (this.next.type == TokenType.Operator) {\n            var /** @type {?} */ operator = this.next.strValue;\n            switch (operator) {\n                case '==':\n                case '===':\n                case '!=':\n                case '!==':\n                    this.advance();\n                    var /** @type {?} */ right = this.parseRelational();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseRelational = /**\n     * @return {?}\n     */\n    function () {\n        // '<', '>', '<=', '>='\n        var /** @type {?} */ result = this.parseAdditive();\n        while (this.next.type == TokenType.Operator) {\n            var /** @type {?} */ operator = this.next.strValue;\n            switch (operator) {\n                case '<':\n                case '>':\n                case '<=':\n                case '>=':\n                    this.advance();\n                    var /** @type {?} */ right = this.parseAdditive();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseAdditive = /**\n     * @return {?}\n     */\n    function () {\n        // '+', '-'\n        var /** @type {?} */ result = this.parseMultiplicative();\n        while (this.next.type == TokenType.Operator) {\n            var /** @type {?} */ operator = this.next.strValue;\n            switch (operator) {\n                case '+':\n                case '-':\n                    this.advance();\n                    var /** @type {?} */ right = this.parseMultiplicative();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseMultiplicative = /**\n     * @return {?}\n     */\n    function () {\n        // '*', '%', '/'\n        var /** @type {?} */ result = this.parsePrefix();\n        while (this.next.type == TokenType.Operator) {\n            var /** @type {?} */ operator = this.next.strValue;\n            switch (operator) {\n                case '*':\n                case '%':\n                case '/':\n                    this.advance();\n                    var /** @type {?} */ right = this.parsePrefix();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parsePrefix = /**\n     * @return {?}\n     */\n    function () {\n        if (this.next.type == TokenType.Operator) {\n            var /** @type {?} */ start = this.inputIndex;\n            var /** @type {?} */ operator = this.next.strValue;\n            var /** @type {?} */ result = void 0;\n            switch (operator) {\n                case '+':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new Binary(this.span(start), '-', result, new LiteralPrimitive(new ParseSpan(start, start), 0));\n                case '-':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);\n                case '!':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new PrefixNot(this.span(start), result);\n            }\n        }\n        return this.parseCallChain();\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseCallChain = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = this.parsePrimary();\n        while (true) {\n            if (this.optionalCharacter(chars.$PERIOD)) {\n                result = this.parseAccessMemberOrMethodCall(result, false);\n            }\n            else if (this.optionalOperator('?.')) {\n                result = this.parseAccessMemberOrMethodCall(result, true);\n            }\n            else if (this.optionalCharacter(chars.$LBRACKET)) {\n                this.rbracketsExpected++;\n                var /** @type {?} */ key = this.parsePipe();\n                this.rbracketsExpected--;\n                this.expectCharacter(chars.$RBRACKET);\n                if (this.optionalOperator('=')) {\n                    var /** @type {?} */ value = this.parseConditional();\n                    result = new KeyedWrite(this.span(result.span.start), result, key, value);\n                }\n                else {\n                    result = new KeyedRead(this.span(result.span.start), result, key);\n                }\n            }\n            else if (this.optionalCharacter(chars.$LPAREN)) {\n                this.rparensExpected++;\n                var /** @type {?} */ args = this.parseCallArguments();\n                this.rparensExpected--;\n                this.expectCharacter(chars.$RPAREN);\n                result = new FunctionCall(this.span(result.span.start), result, args);\n            }\n            else if (this.optionalOperator('!')) {\n                result = new NonNullAssert(this.span(result.span.start), result);\n            }\n            else {\n                return result;\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parsePrimary = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this.inputIndex;\n        if (this.optionalCharacter(chars.$LPAREN)) {\n            this.rparensExpected++;\n            var /** @type {?} */ result = this.parsePipe();\n            this.rparensExpected--;\n            this.expectCharacter(chars.$RPAREN);\n            return result;\n        }\n        else if (this.next.isKeywordNull()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), null);\n        }\n        else if (this.next.isKeywordUndefined()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), void 0);\n        }\n        else if (this.next.isKeywordTrue()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), true);\n        }\n        else if (this.next.isKeywordFalse()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), false);\n        }\n        else if (this.next.isKeywordThis()) {\n            this.advance();\n            return new ImplicitReceiver(this.span(start));\n        }\n        else if (this.optionalCharacter(chars.$LBRACKET)) {\n            this.rbracketsExpected++;\n            var /** @type {?} */ elements = this.parseExpressionList(chars.$RBRACKET);\n            this.rbracketsExpected--;\n            this.expectCharacter(chars.$RBRACKET);\n            return new LiteralArray(this.span(start), elements);\n        }\n        else if (this.next.isCharacter(chars.$LBRACE)) {\n            return this.parseLiteralMap();\n        }\n        else if (this.next.isIdentifier()) {\n            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);\n        }\n        else if (this.next.isNumber()) {\n            var /** @type {?} */ value = this.next.toNumber();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), value);\n        }\n        else if (this.next.isString()) {\n            var /** @type {?} */ literalValue = this.next.toString();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), literalValue);\n        }\n        else if (this.index >= this.tokens.length) {\n            this.error(\"Unexpected end of expression: \" + this.input);\n            return new EmptyExpr(this.span(start));\n        }\n        else {\n            this.error(\"Unexpected token \" + this.next);\n            return new EmptyExpr(this.span(start));\n        }\n    };\n    /**\n     * @param {?} terminator\n     * @return {?}\n     */\n    _ParseAST.prototype.parseExpressionList = /**\n     * @param {?} terminator\n     * @return {?}\n     */\n    function (terminator) {\n        var /** @type {?} */ result = [];\n        if (!this.next.isCharacter(terminator)) {\n            do {\n                result.push(this.parsePipe());\n            } while (this.optionalCharacter(chars.$COMMA));\n        }\n        return result;\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseLiteralMap = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ keys = [];\n        var /** @type {?} */ values = [];\n        var /** @type {?} */ start = this.inputIndex;\n        this.expectCharacter(chars.$LBRACE);\n        if (!this.optionalCharacter(chars.$RBRACE)) {\n            this.rbracesExpected++;\n            do {\n                var /** @type {?} */ quoted = this.next.isString();\n                var /** @type {?} */ key = this.expectIdentifierOrKeywordOrString();\n                keys.push({ key: key, quoted: quoted });\n                this.expectCharacter(chars.$COLON);\n                values.push(this.parsePipe());\n            } while (this.optionalCharacter(chars.$COMMA));\n            this.rbracesExpected--;\n            this.expectCharacter(chars.$RBRACE);\n        }\n        return new LiteralMap(this.span(start), keys, values);\n    };\n    /**\n     * @param {?} receiver\n     * @param {?=} isSafe\n     * @return {?}\n     */\n    _ParseAST.prototype.parseAccessMemberOrMethodCall = /**\n     * @param {?} receiver\n     * @param {?=} isSafe\n     * @return {?}\n     */\n    function (receiver, isSafe) {\n        if (isSafe === void 0) { isSafe = false; }\n        var /** @type {?} */ start = receiver.span.start;\n        var /** @type {?} */ id = this.expectIdentifierOrKeyword();\n        if (this.optionalCharacter(chars.$LPAREN)) {\n            this.rparensExpected++;\n            var /** @type {?} */ args = this.parseCallArguments();\n            this.expectCharacter(chars.$RPAREN);\n            this.rparensExpected--;\n            var /** @type {?} */ span = this.span(start);\n            return isSafe ? new SafeMethodCall(span, receiver, id, args) :\n                new MethodCall(span, receiver, id, args);\n        }\n        else {\n            if (isSafe) {\n                if (this.optionalOperator('=')) {\n                    this.error('The \\'?.\\' operator cannot be used in the assignment');\n                    return new EmptyExpr(this.span(start));\n                }\n                else {\n                    return new SafePropertyRead(this.span(start), receiver, id);\n                }\n            }\n            else {\n                if (this.optionalOperator('=')) {\n                    if (!this.parseAction) {\n                        this.error('Bindings cannot contain assignments');\n                        return new EmptyExpr(this.span(start));\n                    }\n                    var /** @type {?} */ value = this.parseConditional();\n                    return new PropertyWrite(this.span(start), receiver, id, value);\n                }\n                else {\n                    return new PropertyRead(this.span(start), receiver, id);\n                }\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.parseCallArguments = /**\n     * @return {?}\n     */\n    function () {\n        if (this.next.isCharacter(chars.$RPAREN))\n            return [];\n        var /** @type {?} */ positionals = [];\n        do {\n            positionals.push(this.parsePipe());\n        } while (this.optionalCharacter(chars.$COMMA));\n        return /** @type {?} */ (positionals);\n    };\n    /**\n     * An identifier, a keyword, a string with an optional `-` in between.\n     */\n    /**\n     * An identifier, a keyword, a string with an optional `-` in between.\n     * @return {?}\n     */\n    _ParseAST.prototype.expectTemplateBindingKey = /**\n     * An identifier, a keyword, a string with an optional `-` in between.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = '';\n        var /** @type {?} */ operatorFound = false;\n        do {\n            result += this.expectIdentifierOrKeywordOrString();\n            operatorFound = this.optionalOperator('-');\n            if (operatorFound) {\n                result += '-';\n            }\n        } while (operatorFound);\n        return result.toString();\n    };\n    // Parses the AST for `<some-tag *tplKey=AST>`\n    /**\n     * @param {?} tplKey\n     * @return {?}\n     */\n    _ParseAST.prototype.parseTemplateBindings = /**\n     * @param {?} tplKey\n     * @return {?}\n     */\n    function (tplKey) {\n        var /** @type {?} */ firstBinding = true;\n        var /** @type {?} */ bindings = [];\n        var /** @type {?} */ warnings = [];\n        do {\n            var /** @type {?} */ start = this.inputIndex;\n            var /** @type {?} */ rawKey = void 0;\n            var /** @type {?} */ key = void 0;\n            var /** @type {?} */ isVar = false;\n            if (firstBinding) {\n                rawKey = key = tplKey;\n                firstBinding = false;\n            }\n            else {\n                isVar = this.peekKeywordLet();\n                if (isVar)\n                    this.advance();\n                rawKey = this.expectTemplateBindingKey();\n                key = isVar ? rawKey : tplKey + rawKey[0].toUpperCase() + rawKey.substring(1);\n                this.optionalCharacter(chars.$COLON);\n            }\n            var /** @type {?} */ name_2 = /** @type {?} */ ((null));\n            var /** @type {?} */ expression = null;\n            if (isVar) {\n                if (this.optionalOperator('=')) {\n                    name_2 = this.expectTemplateBindingKey();\n                }\n                else {\n                    name_2 = '\\$implicit';\n                }\n            }\n            else if (this.peekKeywordAs()) {\n                this.advance(); // consume `as`\n                name_2 = rawKey;\n                key = this.expectTemplateBindingKey(); // read local var name\n                isVar = true;\n            }\n            else if (this.next !== EOF && !this.peekKeywordLet()) {\n                var /** @type {?} */ start_1 = this.inputIndex;\n                var /** @type {?} */ ast = this.parsePipe();\n                var /** @type {?} */ source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);\n                expression = new ASTWithSource(ast, source, this.location, this.errors);\n            }\n            bindings.push(new TemplateBinding(this.span(start), key, isVar, name_2, expression));\n            if (this.peekKeywordAs() && !isVar) {\n                var /** @type {?} */ letStart = this.inputIndex;\n                this.advance(); // consume `as`\n                var /** @type {?} */ letName = this.expectTemplateBindingKey(); // read local var name\n                bindings.push(new TemplateBinding(this.span(letStart), letName, true, key, /** @type {?} */ ((null))));\n            }\n            if (!this.optionalCharacter(chars.$SEMICOLON)) {\n                this.optionalCharacter(chars.$COMMA);\n            }\n        } while (this.index < this.tokens.length);\n        return new TemplateBindingParseResult(bindings, warnings, this.errors);\n    };\n    /**\n     * @param {?} message\n     * @param {?=} index\n     * @return {?}\n     */\n    _ParseAST.prototype.error = /**\n     * @param {?} message\n     * @param {?=} index\n     * @return {?}\n     */\n    function (message, index) {\n        if (index === void 0) { index = null; }\n        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n        this.skip();\n    };\n    /**\n     * @param {?=} index\n     * @return {?}\n     */\n    _ParseAST.prototype.locationText = /**\n     * @param {?=} index\n     * @return {?}\n     */\n    function (index) {\n        if (index === void 0) { index = null; }\n        if (index == null)\n            index = this.index;\n        return (index < this.tokens.length) ? \"at column \" + (this.tokens[index].index + 1) + \" in\" :\n            \"at the end of the expression\";\n    };\n    /**\n     * @return {?}\n     */\n    _ParseAST.prototype.skip = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ n = this.next;\n        while (this.index < this.tokens.length && !n.isCharacter(chars.$SEMICOLON) &&\n            (this.rparensExpected <= 0 || !n.isCharacter(chars.$RPAREN)) &&\n            (this.rbracesExpected <= 0 || !n.isCharacter(chars.$RBRACE)) &&\n            (this.rbracketsExpected <= 0 || !n.isCharacter(chars.$RBRACKET))) {\n            if (this.next.isError()) {\n                this.errors.push(new ParserError(/** @type {?} */ ((this.next.toString())), this.input, this.locationText(), this.location));\n            }\n            this.advance();\n            n = this.next;\n        }\n    };\n    return _ParseAST;\n}());\nexport { _ParseAST };\nfunction _ParseAST_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ParseAST.prototype.rparensExpected;\n    /** @type {?} */\n    _ParseAST.prototype.rbracketsExpected;\n    /** @type {?} */\n    _ParseAST.prototype.rbracesExpected;\n    /** @type {?} */\n    _ParseAST.prototype.index;\n    /** @type {?} */\n    _ParseAST.prototype.input;\n    /** @type {?} */\n    _ParseAST.prototype.location;\n    /** @type {?} */\n    _ParseAST.prototype.tokens;\n    /** @type {?} */\n    _ParseAST.prototype.inputLength;\n    /** @type {?} */\n    _ParseAST.prototype.parseAction;\n    /** @type {?} */\n    _ParseAST.prototype.errors;\n    /** @type {?} */\n    _ParseAST.prototype.offset;\n}\nvar SimpleExpressionChecker = /** @class */ (function () {\n    function SimpleExpressionChecker() {\n        this.errors = [];\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    SimpleExpressionChecker.check = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var /** @type {?} */ s = new SimpleExpressionChecker();\n        ast.visit(s);\n        return s.errors;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { this.visitAll(ast.expressions); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { this.visitAll(ast.values); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { this.errors.push('pipes'); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} asts\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitAll = /**\n     * @param {?} asts\n     * @return {?}\n     */\n    function (asts) {\n        var _this = this;\n        return asts.map(function (node) { return node.visit(_this); });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    SimpleExpressionChecker.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    return SimpleExpressionChecker;\n}());\nfunction SimpleExpressionChecker_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SimpleExpressionChecker.prototype.errors;\n}\n//# sourceMappingURL=parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as chars from './chars';\nimport { identifierModuleUrl, identifierName } from './compile_metadata';\nvar ParseLocation = /** @class */ (function () {\n    function ParseLocation(file, offset, line, col) {\n        this.file = file;\n        this.offset = offset;\n        this.line = line;\n        this.col = col;\n    }\n    /**\n     * @return {?}\n     */\n    ParseLocation.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return this.offset != null ? this.file.url + \"@\" + this.line + \":\" + this.col : this.file.url;\n    };\n    /**\n     * @param {?} delta\n     * @return {?}\n     */\n    ParseLocation.prototype.moveBy = /**\n     * @param {?} delta\n     * @return {?}\n     */\n    function (delta) {\n        var /** @type {?} */ source = this.file.content;\n        var /** @type {?} */ len = source.length;\n        var /** @type {?} */ offset = this.offset;\n        var /** @type {?} */ line = this.line;\n        var /** @type {?} */ col = this.col;\n        while (offset > 0 && delta < 0) {\n            offset--;\n            delta++;\n            var /** @type {?} */ ch = source.charCodeAt(offset);\n            if (ch == chars.$LF) {\n                line--;\n                var /** @type {?} */ priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode(chars.$LF));\n                col = priorLine > 0 ? offset - priorLine : offset;\n            }\n            else {\n                col--;\n            }\n        }\n        while (offset < len && delta > 0) {\n            var /** @type {?} */ ch = source.charCodeAt(offset);\n            offset++;\n            delta--;\n            if (ch == chars.$LF) {\n                line++;\n                col = 0;\n            }\n            else {\n                col++;\n            }\n        }\n        return new ParseLocation(this.file, offset, line, col);\n    };\n    // Return the source around the location\n    // Up to `maxChars` or `maxLines` on each side of the location\n    /**\n     * @param {?} maxChars\n     * @param {?} maxLines\n     * @return {?}\n     */\n    ParseLocation.prototype.getContext = /**\n     * @param {?} maxChars\n     * @param {?} maxLines\n     * @return {?}\n     */\n    function (maxChars, maxLines) {\n        var /** @type {?} */ content = this.file.content;\n        var /** @type {?} */ startOffset = this.offset;\n        if (startOffset != null) {\n            if (startOffset > content.length - 1) {\n                startOffset = content.length - 1;\n            }\n            var /** @type {?} */ endOffset = startOffset;\n            var /** @type {?} */ ctxChars = 0;\n            var /** @type {?} */ ctxLines = 0;\n            while (ctxChars < maxChars && startOffset > 0) {\n                startOffset--;\n                ctxChars++;\n                if (content[startOffset] == '\\n') {\n                    if (++ctxLines == maxLines) {\n                        break;\n                    }\n                }\n            }\n            ctxChars = 0;\n            ctxLines = 0;\n            while (ctxChars < maxChars && endOffset < content.length - 1) {\n                endOffset++;\n                ctxChars++;\n                if (content[endOffset] == '\\n') {\n                    if (++ctxLines == maxLines) {\n                        break;\n                    }\n                }\n            }\n            return {\n                before: content.substring(startOffset, this.offset),\n                after: content.substring(this.offset, endOffset + 1),\n            };\n        }\n        return null;\n    };\n    return ParseLocation;\n}());\nexport { ParseLocation };\nfunction ParseLocation_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseLocation.prototype.file;\n    /** @type {?} */\n    ParseLocation.prototype.offset;\n    /** @type {?} */\n    ParseLocation.prototype.line;\n    /** @type {?} */\n    ParseLocation.prototype.col;\n}\nvar ParseSourceFile = /** @class */ (function () {\n    function ParseSourceFile(content, url) {\n        this.content = content;\n        this.url = url;\n    }\n    return ParseSourceFile;\n}());\nexport { ParseSourceFile };\nfunction ParseSourceFile_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseSourceFile.prototype.content;\n    /** @type {?} */\n    ParseSourceFile.prototype.url;\n}\nvar ParseSourceSpan = /** @class */ (function () {\n    function ParseSourceSpan(start, end, details) {\n        if (details === void 0) { details = null; }\n        this.start = start;\n        this.end = end;\n        this.details = details;\n    }\n    /**\n     * @return {?}\n     */\n    ParseSourceSpan.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return this.start.file.content.substring(this.start.offset, this.end.offset);\n    };\n    return ParseSourceSpan;\n}());\nexport { ParseSourceSpan };\nfunction ParseSourceSpan_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseSourceSpan.prototype.start;\n    /** @type {?} */\n    ParseSourceSpan.prototype.end;\n    /** @type {?} */\n    ParseSourceSpan.prototype.details;\n}\n/** @enum {number} */\nvar ParseErrorLevel = {\n    WARNING: 0,\n    ERROR: 1,\n};\nexport { ParseErrorLevel };\nParseErrorLevel[ParseErrorLevel.WARNING] = \"WARNING\";\nParseErrorLevel[ParseErrorLevel.ERROR] = \"ERROR\";\nvar ParseError = /** @class */ (function () {\n    function ParseError(span, msg, level) {\n        if (level === void 0) { level = ParseErrorLevel.ERROR; }\n        this.span = span;\n        this.msg = msg;\n        this.level = level;\n    }\n    /**\n     * @return {?}\n     */\n    ParseError.prototype.contextualMessage = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ ctx = this.span.start.getContext(100, 3);\n        return ctx ? this.msg + \" (\\\"\" + ctx.before + \"[\" + ParseErrorLevel[this.level] + \" ->]\" + ctx.after + \"\\\")\" :\n            this.msg;\n    };\n    /**\n     * @return {?}\n     */\n    ParseError.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ details = this.span.details ? \", \" + this.span.details : '';\n        return this.contextualMessage() + \": \" + this.span.start + details;\n    };\n    return ParseError;\n}());\nexport { ParseError };\nfunction ParseError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseError.prototype.span;\n    /** @type {?} */\n    ParseError.prototype.msg;\n    /** @type {?} */\n    ParseError.prototype.level;\n}\n/**\n * @param {?} kind\n * @param {?} type\n * @return {?}\n */\nexport function typeSourceSpan(kind, type) {\n    var /** @type {?} */ moduleUrl = identifierModuleUrl(type);\n    var /** @type {?} */ sourceFileName = moduleUrl != null ? \"in \" + kind + \" \" + identifierName(type) + \" in \" + moduleUrl :\n        \"in \" + kind + \" \" + identifierName(type);\n    var /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);\n    return new ParseSourceSpan(new ParseLocation(sourceFile, -1, -1, -1), new ParseLocation(sourceFile, -1, -1, -1));\n}\n//# sourceMappingURL=parse_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as chars from '../chars';\nimport { ParseError, ParseLocation, ParseSourceFile, ParseSourceSpan } from '../parse_util';\nimport { DEFAULT_INTERPOLATION_CONFIG } from './interpolation_config';\nimport { NAMED_ENTITIES, TagContentType } from './tags';\n/** @enum {number} */\nvar TokenType = {\n    TAG_OPEN_START: 0,\n    TAG_OPEN_END: 1,\n    TAG_OPEN_END_VOID: 2,\n    TAG_CLOSE: 3,\n    TEXT: 4,\n    ESCAPABLE_RAW_TEXT: 5,\n    RAW_TEXT: 6,\n    COMMENT_START: 7,\n    COMMENT_END: 8,\n    CDATA_START: 9,\n    CDATA_END: 10,\n    ATTR_NAME: 11,\n    ATTR_VALUE: 12,\n    DOC_TYPE: 13,\n    EXPANSION_FORM_START: 14,\n    EXPANSION_CASE_VALUE: 15,\n    EXPANSION_CASE_EXP_START: 16,\n    EXPANSION_CASE_EXP_END: 17,\n    EXPANSION_FORM_END: 18,\n    EOF: 19,\n};\nexport { TokenType };\nTokenType[TokenType.TAG_OPEN_START] = \"TAG_OPEN_START\";\nTokenType[TokenType.TAG_OPEN_END] = \"TAG_OPEN_END\";\nTokenType[TokenType.TAG_OPEN_END_VOID] = \"TAG_OPEN_END_VOID\";\nTokenType[TokenType.TAG_CLOSE] = \"TAG_CLOSE\";\nTokenType[TokenType.TEXT] = \"TEXT\";\nTokenType[TokenType.ESCAPABLE_RAW_TEXT] = \"ESCAPABLE_RAW_TEXT\";\nTokenType[TokenType.RAW_TEXT] = \"RAW_TEXT\";\nTokenType[TokenType.COMMENT_START] = \"COMMENT_START\";\nTokenType[TokenType.COMMENT_END] = \"COMMENT_END\";\nTokenType[TokenType.CDATA_START] = \"CDATA_START\";\nTokenType[TokenType.CDATA_END] = \"CDATA_END\";\nTokenType[TokenType.ATTR_NAME] = \"ATTR_NAME\";\nTokenType[TokenType.ATTR_VALUE] = \"ATTR_VALUE\";\nTokenType[TokenType.DOC_TYPE] = \"DOC_TYPE\";\nTokenType[TokenType.EXPANSION_FORM_START] = \"EXPANSION_FORM_START\";\nTokenType[TokenType.EXPANSION_CASE_VALUE] = \"EXPANSION_CASE_VALUE\";\nTokenType[TokenType.EXPANSION_CASE_EXP_START] = \"EXPANSION_CASE_EXP_START\";\nTokenType[TokenType.EXPANSION_CASE_EXP_END] = \"EXPANSION_CASE_EXP_END\";\nTokenType[TokenType.EXPANSION_FORM_END] = \"EXPANSION_FORM_END\";\nTokenType[TokenType.EOF] = \"EOF\";\nvar Token = /** @class */ (function () {\n    function Token(type, parts, sourceSpan) {\n        this.type = type;\n        this.parts = parts;\n        this.sourceSpan = sourceSpan;\n    }\n    return Token;\n}());\nexport { Token };\nfunction Token_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Token.prototype.type;\n    /** @type {?} */\n    Token.prototype.parts;\n    /** @type {?} */\n    Token.prototype.sourceSpan;\n}\nvar TokenError = /** @class */ (function (_super) {\n    tslib_1.__extends(TokenError, _super);\n    function TokenError(errorMsg, tokenType, span) {\n        var _this = _super.call(this, span, errorMsg) || this;\n        _this.tokenType = tokenType;\n        return _this;\n    }\n    return TokenError;\n}(ParseError));\nexport { TokenError };\nfunction TokenError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TokenError.prototype.tokenType;\n}\nvar TokenizeResult = /** @class */ (function () {\n    function TokenizeResult(tokens, errors) {\n        this.tokens = tokens;\n        this.errors = errors;\n    }\n    return TokenizeResult;\n}());\nexport { TokenizeResult };\nfunction TokenizeResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TokenizeResult.prototype.tokens;\n    /** @type {?} */\n    TokenizeResult.prototype.errors;\n}\n/**\n * @param {?} source\n * @param {?} url\n * @param {?} getTagDefinition\n * @param {?=} tokenizeExpansionForms\n * @param {?=} interpolationConfig\n * @return {?}\n */\nexport function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {\n    if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }\n    if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n    return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)\n        .tokenize();\n}\nvar /** @type {?} */ _CR_OR_CRLF_REGEXP = /\\r\\n?/g;\n/**\n * @param {?} charCode\n * @return {?}\n */\nfunction _unexpectedCharacterErrorMsg(charCode) {\n    var /** @type {?} */ char = charCode === chars.$EOF ? 'EOF' : String.fromCharCode(charCode);\n    return \"Unexpected character \\\"\" + char + \"\\\"\";\n}\n/**\n * @param {?} entitySrc\n * @return {?}\n */\nfunction _unknownEntityErrorMsg(entitySrc) {\n    return \"Unknown entity \\\"\" + entitySrc + \"\\\" - use the \\\"&#<decimal>;\\\" or  \\\"&#x<hex>;\\\" syntax\";\n}\nvar _ControlFlowError = /** @class */ (function () {\n    function _ControlFlowError(error) {\n        this.error = error;\n    }\n    return _ControlFlowError;\n}());\nfunction _ControlFlowError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ControlFlowError.prototype.error;\n}\nvar _Tokenizer = /** @class */ (function () {\n    /**\n     * @param _file The html source\n     * @param _getTagDefinition\n     * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)\n     * @param _interpolationConfig\n     */\n    function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {\n        if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        this._file = _file;\n        this._getTagDefinition = _getTagDefinition;\n        this._tokenizeIcu = _tokenizeIcu;\n        this._interpolationConfig = _interpolationConfig;\n        this._peek = -1;\n        this._nextPeek = -1;\n        this._index = -1;\n        this._line = 0;\n        this._column = -1;\n        this._expansionCaseStack = [];\n        this._inInterpolation = false;\n        this.tokens = [];\n        this.errors = [];\n        this._input = _file.content;\n        this._length = _file.content.length;\n        this._advance();\n    }\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    _Tokenizer.prototype._processCarriageReturns = /**\n     * @param {?} content\n     * @return {?}\n     */\n    function (content) {\n        // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream\n        // In order to keep the original position in the source, we can not\n        // pre-process it.\n        // Instead CRs are processed right before instantiating the tokens.\n        return content.replace(_CR_OR_CRLF_REGEXP, '\\n');\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype.tokenize = /**\n     * @return {?}\n     */\n    function () {\n        while (this._peek !== chars.$EOF) {\n            var /** @type {?} */ start = this._getLocation();\n            try {\n                if (this._attemptCharCode(chars.$LT)) {\n                    if (this._attemptCharCode(chars.$BANG)) {\n                        if (this._attemptCharCode(chars.$LBRACKET)) {\n                            this._consumeCdata(start);\n                        }\n                        else if (this._attemptCharCode(chars.$MINUS)) {\n                            this._consumeComment(start);\n                        }\n                        else {\n                            this._consumeDocType(start);\n                        }\n                    }\n                    else if (this._attemptCharCode(chars.$SLASH)) {\n                        this._consumeTagClose(start);\n                    }\n                    else {\n                        this._consumeTagOpen(start);\n                    }\n                }\n                else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {\n                    this._consumeText();\n                }\n            }\n            catch (/** @type {?} */ e) {\n                if (e instanceof _ControlFlowError) {\n                    this.errors.push(e.error);\n                }\n                else {\n                    throw e;\n                }\n            }\n        }\n        this._beginToken(TokenType.EOF);\n        this._endToken([]);\n        return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);\n    };\n    /**\n     * \\@internal\n     * @return {?} whether an ICU token has been created\n     */\n    _Tokenizer.prototype._tokenizeExpansionForm = /**\n     * \\@internal\n     * @return {?} whether an ICU token has been created\n     */\n    function () {\n        if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n            this._consumeExpansionFormStart();\n            return true;\n        }\n        if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {\n            this._consumeExpansionCaseStart();\n            return true;\n        }\n        if (this._peek === chars.$RBRACE) {\n            if (this._isInExpansionCase()) {\n                this._consumeExpansionCaseEnd();\n                return true;\n            }\n            if (this._isInExpansionForm()) {\n                this._consumeExpansionFormEnd();\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._getLocation = /**\n     * @return {?}\n     */\n    function () {\n        return new ParseLocation(this._file, this._index, this._line, this._column);\n    };\n    /**\n     * @param {?=} start\n     * @param {?=} end\n     * @return {?}\n     */\n    _Tokenizer.prototype._getSpan = /**\n     * @param {?=} start\n     * @param {?=} end\n     * @return {?}\n     */\n    function (start, end) {\n        if (start === void 0) { start = this._getLocation(); }\n        if (end === void 0) { end = this._getLocation(); }\n        return new ParseSourceSpan(start, end);\n    };\n    /**\n     * @param {?} type\n     * @param {?=} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._beginToken = /**\n     * @param {?} type\n     * @param {?=} start\n     * @return {?}\n     */\n    function (type, start) {\n        if (start === void 0) { start = this._getLocation(); }\n        this._currentTokenStart = start;\n        this._currentTokenType = type;\n    };\n    /**\n     * @param {?} parts\n     * @param {?=} end\n     * @return {?}\n     */\n    _Tokenizer.prototype._endToken = /**\n     * @param {?} parts\n     * @param {?=} end\n     * @return {?}\n     */\n    function (parts, end) {\n        if (end === void 0) { end = this._getLocation(); }\n        var /** @type {?} */ token = new Token(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));\n        this.tokens.push(token);\n        this._currentTokenStart = /** @type {?} */ ((null));\n        this._currentTokenType = /** @type {?} */ ((null));\n        return token;\n    };\n    /**\n     * @param {?} msg\n     * @param {?} span\n     * @return {?}\n     */\n    _Tokenizer.prototype._createError = /**\n     * @param {?} msg\n     * @param {?} span\n     * @return {?}\n     */\n    function (msg, span) {\n        if (this._isInExpansionForm()) {\n            msg += \" (Do you have an unescaped \\\"{\\\" in your template? Use \\\"{{ '{' }}\\\") to escape it.)\";\n        }\n        var /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);\n        this._currentTokenStart = /** @type {?} */ ((null));\n        this._currentTokenType = /** @type {?} */ ((null));\n        return new _ControlFlowError(error);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._advance = /**\n     * @return {?}\n     */\n    function () {\n        if (this._index >= this._length) {\n            throw this._createError(_unexpectedCharacterErrorMsg(chars.$EOF), this._getSpan());\n        }\n        if (this._peek === chars.$LF) {\n            this._line++;\n            this._column = 0;\n        }\n        else if (this._peek !== chars.$LF && this._peek !== chars.$CR) {\n            this._column++;\n        }\n        this._index++;\n        this._peek = this._index >= this._length ? chars.$EOF : this._input.charCodeAt(this._index);\n        this._nextPeek =\n            this._index + 1 >= this._length ? chars.$EOF : this._input.charCodeAt(this._index + 1);\n    };\n    /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptCharCode = /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    function (charCode) {\n        if (this._peek === charCode) {\n            this._advance();\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptCharCodeCaseInsensitive = /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    function (charCode) {\n        if (compareCharCodeCaseInsensitive(this._peek, charCode)) {\n            this._advance();\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    _Tokenizer.prototype._requireCharCode = /**\n     * @param {?} charCode\n     * @return {?}\n     */\n    function (charCode) {\n        var /** @type {?} */ location = this._getLocation();\n        if (!this._attemptCharCode(charCode)) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));\n        }\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptStr = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) {\n        var /** @type {?} */ len = chars.length;\n        if (this._index + len > this._length) {\n            return false;\n        }\n        var /** @type {?} */ initialPosition = this._savePosition();\n        for (var /** @type {?} */ i = 0; i < len; i++) {\n            if (!this._attemptCharCode(chars.charCodeAt(i))) {\n                // If attempting to parse the string fails, we want to reset the parser\n                // to where it was before the attempt\n                this._restorePosition(initialPosition);\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptStrCaseInsensitive = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) {\n        for (var /** @type {?} */ i = 0; i < chars.length; i++) {\n            if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     * @param {?} chars\n     * @return {?}\n     */\n    _Tokenizer.prototype._requireStr = /**\n     * @param {?} chars\n     * @return {?}\n     */\n    function (chars) {\n        var /** @type {?} */ location = this._getLocation();\n        if (!this._attemptStr(chars)) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));\n        }\n    };\n    /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptCharCodeUntilFn = /**\n     * @param {?} predicate\n     * @return {?}\n     */\n    function (predicate) {\n        while (!predicate(this._peek)) {\n            this._advance();\n        }\n    };\n    /**\n     * @param {?} predicate\n     * @param {?} len\n     * @return {?}\n     */\n    _Tokenizer.prototype._requireCharCodeUntilFn = /**\n     * @param {?} predicate\n     * @param {?} len\n     * @return {?}\n     */\n    function (predicate, len) {\n        var /** @type {?} */ start = this._getLocation();\n        this._attemptCharCodeUntilFn(predicate);\n        if (this._index - start.offset < len) {\n            throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));\n        }\n    };\n    /**\n     * @param {?} char\n     * @return {?}\n     */\n    _Tokenizer.prototype._attemptUntilChar = /**\n     * @param {?} char\n     * @return {?}\n     */\n    function (char) {\n        while (this._peek !== char) {\n            this._advance();\n        }\n    };\n    /**\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n    _Tokenizer.prototype._readChar = /**\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n    function (decodeEntities) {\n        if (decodeEntities && this._peek === chars.$AMPERSAND) {\n            return this._decodeEntity();\n        }\n        else {\n            var /** @type {?} */ index = this._index;\n            this._advance();\n            return this._input[index];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._decodeEntity = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this._getLocation();\n        this._advance();\n        if (this._attemptCharCode(chars.$HASH)) {\n            var /** @type {?} */ isHex = this._attemptCharCode(chars.$x) || this._attemptCharCode(chars.$X);\n            var /** @type {?} */ numberStart = this._getLocation().offset;\n            this._attemptCharCodeUntilFn(isDigitEntityEnd);\n            if (this._peek != chars.$SEMICOLON) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n            }\n            this._advance();\n            var /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);\n            try {\n                var /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);\n                return String.fromCharCode(charCode);\n            }\n            catch (/** @type {?} */ e) {\n                var /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);\n                throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));\n            }\n        }\n        else {\n            var /** @type {?} */ startPosition = this._savePosition();\n            this._attemptCharCodeUntilFn(isNamedEntityEnd);\n            if (this._peek != chars.$SEMICOLON) {\n                this._restorePosition(startPosition);\n                return '&';\n            }\n            this._advance();\n            var /** @type {?} */ name_1 = this._input.substring(start.offset + 1, this._index - 1);\n            var /** @type {?} */ char = NAMED_ENTITIES[name_1];\n            if (!char) {\n                throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));\n            }\n            return char;\n        }\n    };\n    /**\n     * @param {?} decodeEntities\n     * @param {?} firstCharOfEnd\n     * @param {?} attemptEndRest\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeRawText = /**\n     * @param {?} decodeEntities\n     * @param {?} firstCharOfEnd\n     * @param {?} attemptEndRest\n     * @return {?}\n     */\n    function (decodeEntities, firstCharOfEnd, attemptEndRest) {\n        var /** @type {?} */ tagCloseStart;\n        var /** @type {?} */ textStart = this._getLocation();\n        this._beginToken(decodeEntities ? TokenType.ESCAPABLE_RAW_TEXT : TokenType.RAW_TEXT, textStart);\n        var /** @type {?} */ parts = [];\n        while (true) {\n            tagCloseStart = this._getLocation();\n            if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {\n                break;\n            }\n            if (this._index > tagCloseStart.offset) {\n                // add the characters consumed by the previous if statement to the output\n                parts.push(this._input.substring(tagCloseStart.offset, this._index));\n            }\n            while (this._peek !== firstCharOfEnd) {\n                parts.push(this._readChar(decodeEntities));\n            }\n        }\n        return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeComment = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        var _this = this;\n        this._beginToken(TokenType.COMMENT_START, start);\n        this._requireCharCode(chars.$MINUS);\n        this._endToken([]);\n        var /** @type {?} */ textToken = this._consumeRawText(false, chars.$MINUS, function () { return _this._attemptStr('->'); });\n        this._beginToken(TokenType.COMMENT_END, textToken.sourceSpan.end);\n        this._endToken([]);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeCdata = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        var _this = this;\n        this._beginToken(TokenType.CDATA_START, start);\n        this._requireStr('CDATA[');\n        this._endToken([]);\n        var /** @type {?} */ textToken = this._consumeRawText(false, chars.$RBRACKET, function () { return _this._attemptStr(']>'); });\n        this._beginToken(TokenType.CDATA_END, textToken.sourceSpan.end);\n        this._endToken([]);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeDocType = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        this._beginToken(TokenType.DOC_TYPE, start);\n        this._attemptUntilChar(chars.$GT);\n        this._advance();\n        this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumePrefixAndName = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ nameOrPrefixStart = this._index;\n        var /** @type {?} */ prefix = /** @type {?} */ ((null));\n        while (this._peek !== chars.$COLON && !isPrefixEnd(this._peek)) {\n            this._advance();\n        }\n        var /** @type {?} */ nameStart;\n        if (this._peek === chars.$COLON) {\n            this._advance();\n            prefix = this._input.substring(nameOrPrefixStart, this._index - 1);\n            nameStart = this._index;\n        }\n        else {\n            nameStart = nameOrPrefixStart;\n        }\n        this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);\n        var /** @type {?} */ name = this._input.substring(nameStart, this._index);\n        return [prefix, name];\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeTagOpen = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        var /** @type {?} */ savedPos = this._savePosition();\n        var /** @type {?} */ tagName;\n        var /** @type {?} */ lowercaseTagName;\n        try {\n            if (!chars.isAsciiLetter(this._peek)) {\n                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());\n            }\n            var /** @type {?} */ nameStart = this._index;\n            this._consumeTagOpenStart(start);\n            tagName = this._input.substring(nameStart, this._index);\n            lowercaseTagName = tagName.toLowerCase();\n            this._attemptCharCodeUntilFn(isNotWhitespace);\n            while (this._peek !== chars.$SLASH && this._peek !== chars.$GT) {\n                this._consumeAttributeName();\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n                if (this._attemptCharCode(chars.$EQ)) {\n                    this._attemptCharCodeUntilFn(isNotWhitespace);\n                    this._consumeAttributeValue();\n                }\n                this._attemptCharCodeUntilFn(isNotWhitespace);\n            }\n            this._consumeTagOpenEnd();\n        }\n        catch (/** @type {?} */ e) {\n            if (e instanceof _ControlFlowError) {\n                // When the start tag is invalid, assume we want a \"<\"\n                this._restorePosition(savedPos);\n                // Back to back text tokens are merged at the end\n                this._beginToken(TokenType.TEXT, start);\n                this._endToken(['<']);\n                return;\n            }\n            throw e;\n        }\n        var /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;\n        if (contentTokenType === TagContentType.RAW_TEXT) {\n            this._consumeRawTextWithTagClose(lowercaseTagName, false);\n        }\n        else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {\n            this._consumeRawTextWithTagClose(lowercaseTagName, true);\n        }\n    };\n    /**\n     * @param {?} lowercaseTagName\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeRawTextWithTagClose = /**\n     * @param {?} lowercaseTagName\n     * @param {?} decodeEntities\n     * @return {?}\n     */\n    function (lowercaseTagName, decodeEntities) {\n        var _this = this;\n        var /** @type {?} */ textToken = this._consumeRawText(decodeEntities, chars.$LT, function () {\n            if (!_this._attemptCharCode(chars.$SLASH))\n                return false;\n            _this._attemptCharCodeUntilFn(isNotWhitespace);\n            if (!_this._attemptStrCaseInsensitive(lowercaseTagName))\n                return false;\n            _this._attemptCharCodeUntilFn(isNotWhitespace);\n            return _this._attemptCharCode(chars.$GT);\n        });\n        this._beginToken(TokenType.TAG_CLOSE, textToken.sourceSpan.end);\n        this._endToken([/** @type {?} */ ((null)), lowercaseTagName]);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeTagOpenStart = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        this._beginToken(TokenType.TAG_OPEN_START, start);\n        var /** @type {?} */ parts = this._consumePrefixAndName();\n        this._endToken(parts);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeAttributeName = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.ATTR_NAME);\n        var /** @type {?} */ prefixAndName = this._consumePrefixAndName();\n        this._endToken(prefixAndName);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeAttributeValue = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.ATTR_VALUE);\n        var /** @type {?} */ value;\n        if (this._peek === chars.$SQ || this._peek === chars.$DQ) {\n            var /** @type {?} */ quoteChar = this._peek;\n            this._advance();\n            var /** @type {?} */ parts = [];\n            while (this._peek !== quoteChar) {\n                parts.push(this._readChar(true));\n            }\n            value = parts.join('');\n            this._advance();\n        }\n        else {\n            var /** @type {?} */ valueStart = this._index;\n            this._requireCharCodeUntilFn(isNameEnd, 1);\n            value = this._input.substring(valueStart, this._index);\n        }\n        this._endToken([this._processCarriageReturns(value)]);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeTagOpenEnd = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ tokenType = this._attemptCharCode(chars.$SLASH) ? TokenType.TAG_OPEN_END_VOID : TokenType.TAG_OPEN_END;\n        this._beginToken(tokenType);\n        this._requireCharCode(chars.$GT);\n        this._endToken([]);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeTagClose = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        this._beginToken(TokenType.TAG_CLOSE, start);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        var /** @type {?} */ prefixAndName = this._consumePrefixAndName();\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._requireCharCode(chars.$GT);\n        this._endToken(prefixAndName);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeExpansionFormStart = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.EXPANSION_FORM_START, this._getLocation());\n        this._requireCharCode(chars.$LBRACE);\n        this._endToken([]);\n        this._expansionCaseStack.push(TokenType.EXPANSION_FORM_START);\n        this._beginToken(TokenType.RAW_TEXT, this._getLocation());\n        var /** @type {?} */ condition = this._readUntil(chars.$COMMA);\n        this._endToken([condition], this._getLocation());\n        this._requireCharCode(chars.$COMMA);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._beginToken(TokenType.RAW_TEXT, this._getLocation());\n        var /** @type {?} */ type = this._readUntil(chars.$COMMA);\n        this._endToken([type], this._getLocation());\n        this._requireCharCode(chars.$COMMA);\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeExpansionCaseStart = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.EXPANSION_CASE_VALUE, this._getLocation());\n        var /** @type {?} */ value = this._readUntil(chars.$LBRACE).trim();\n        this._endToken([value], this._getLocation());\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._beginToken(TokenType.EXPANSION_CASE_EXP_START, this._getLocation());\n        this._requireCharCode(chars.$LBRACE);\n        this._endToken([], this._getLocation());\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._expansionCaseStack.push(TokenType.EXPANSION_CASE_EXP_START);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeExpansionCaseEnd = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.EXPANSION_CASE_EXP_END, this._getLocation());\n        this._requireCharCode(chars.$RBRACE);\n        this._endToken([], this._getLocation());\n        this._attemptCharCodeUntilFn(isNotWhitespace);\n        this._expansionCaseStack.pop();\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeExpansionFormEnd = /**\n     * @return {?}\n     */\n    function () {\n        this._beginToken(TokenType.EXPANSION_FORM_END, this._getLocation());\n        this._requireCharCode(chars.$RBRACE);\n        this._endToken([]);\n        this._expansionCaseStack.pop();\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._consumeText = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ start = this._getLocation();\n        this._beginToken(TokenType.TEXT, start);\n        var /** @type {?} */ parts = [];\n        do {\n            if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {\n                parts.push(this._interpolationConfig.start);\n                this._inInterpolation = true;\n            }\n            else if (this._interpolationConfig && this._inInterpolation &&\n                this._attemptStr(this._interpolationConfig.end)) {\n                parts.push(this._interpolationConfig.end);\n                this._inInterpolation = false;\n            }\n            else {\n                parts.push(this._readChar(true));\n            }\n        } while (!this._isTextEnd());\n        this._endToken([this._processCarriageReturns(parts.join(''))]);\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._isTextEnd = /**\n     * @return {?}\n     */\n    function () {\n        if (this._peek === chars.$LT || this._peek === chars.$EOF) {\n            return true;\n        }\n        if (this._tokenizeIcu && !this._inInterpolation) {\n            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {\n                // start of an expansion form\n                return true;\n            }\n            if (this._peek === chars.$RBRACE && this._isInExpansionCase()) {\n                // end of and expansion case\n                return true;\n            }\n        }\n        return false;\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._savePosition = /**\n     * @return {?}\n     */\n    function () {\n        return [this._peek, this._index, this._column, this._line, this.tokens.length];\n    };\n    /**\n     * @param {?} char\n     * @return {?}\n     */\n    _Tokenizer.prototype._readUntil = /**\n     * @param {?} char\n     * @return {?}\n     */\n    function (char) {\n        var /** @type {?} */ start = this._index;\n        this._attemptUntilChar(char);\n        return this._input.substring(start, this._index);\n    };\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    _Tokenizer.prototype._restorePosition = /**\n     * @param {?} position\n     * @return {?}\n     */\n    function (position) {\n        this._peek = position[0];\n        this._index = position[1];\n        this._column = position[2];\n        this._line = position[3];\n        var /** @type {?} */ nbTokens = position[4];\n        if (nbTokens < this.tokens.length) {\n            // remove any extra tokens\n            this.tokens = this.tokens.slice(0, nbTokens);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._isInExpansionCase = /**\n     * @return {?}\n     */\n    function () {\n        return this._expansionCaseStack.length > 0 &&\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                TokenType.EXPANSION_CASE_EXP_START;\n    };\n    /**\n     * @return {?}\n     */\n    _Tokenizer.prototype._isInExpansionForm = /**\n     * @return {?}\n     */\n    function () {\n        return this._expansionCaseStack.length > 0 &&\n            this._expansionCaseStack[this._expansionCaseStack.length - 1] ===\n                TokenType.EXPANSION_FORM_START;\n    };\n    return _Tokenizer;\n}());\nfunction _Tokenizer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _Tokenizer.prototype._input;\n    /** @type {?} */\n    _Tokenizer.prototype._length;\n    /** @type {?} */\n    _Tokenizer.prototype._peek;\n    /** @type {?} */\n    _Tokenizer.prototype._nextPeek;\n    /** @type {?} */\n    _Tokenizer.prototype._index;\n    /** @type {?} */\n    _Tokenizer.prototype._line;\n    /** @type {?} */\n    _Tokenizer.prototype._column;\n    /** @type {?} */\n    _Tokenizer.prototype._currentTokenStart;\n    /** @type {?} */\n    _Tokenizer.prototype._currentTokenType;\n    /** @type {?} */\n    _Tokenizer.prototype._expansionCaseStack;\n    /** @type {?} */\n    _Tokenizer.prototype._inInterpolation;\n    /** @type {?} */\n    _Tokenizer.prototype.tokens;\n    /** @type {?} */\n    _Tokenizer.prototype.errors;\n    /** @type {?} */\n    _Tokenizer.prototype._file;\n    /** @type {?} */\n    _Tokenizer.prototype._getTagDefinition;\n    /** @type {?} */\n    _Tokenizer.prototype._tokenizeIcu;\n    /** @type {?} */\n    _Tokenizer.prototype._interpolationConfig;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNotWhitespace(code) {\n    return !chars.isWhitespace(code) || code === chars.$EOF;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNameEnd(code) {\n    return chars.isWhitespace(code) || code === chars.$GT || code === chars.$SLASH ||\n        code === chars.$SQ || code === chars.$DQ || code === chars.$EQ;\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isPrefixEnd(code) {\n    return (code < chars.$a || chars.$z < code) && (code < chars.$A || chars.$Z < code) &&\n        (code < chars.$0 || code > chars.$9);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isDigitEntityEnd(code) {\n    return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiHexDigit(code);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction isNamedEntityEnd(code) {\n    return code == chars.$SEMICOLON || code == chars.$EOF || !chars.isAsciiLetter(code);\n}\n/**\n * @param {?} input\n * @param {?} offset\n * @param {?} interpolationConfig\n * @return {?}\n */\nfunction isExpansionFormStart(input, offset, interpolationConfig) {\n    var /** @type {?} */ isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;\n    return input.charCodeAt(offset) == chars.$LBRACE && !isInterpolationStart;\n}\n/**\n * @param {?} peek\n * @return {?}\n */\nfunction isExpansionCaseStart(peek) {\n    return peek === chars.$EQ || chars.isAsciiLetter(peek) || chars.isDigit(peek);\n}\n/**\n * @param {?} code1\n * @param {?} code2\n * @return {?}\n */\nfunction compareCharCodeCaseInsensitive(code1, code2) {\n    return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);\n}\n/**\n * @param {?} code\n * @return {?}\n */\nfunction toUpperCaseCharCode(code) {\n    return code >= chars.$a && code <= chars.$z ? code - chars.$a + chars.$A : code;\n}\n/**\n * @param {?} srcTokens\n * @return {?}\n */\nfunction mergeTextTokens(srcTokens) {\n    var /** @type {?} */ dstTokens = [];\n    var /** @type {?} */ lastDstToken = undefined;\n    for (var /** @type {?} */ i = 0; i < srcTokens.length; i++) {\n        var /** @type {?} */ token = srcTokens[i];\n        if (lastDstToken && lastDstToken.type == TokenType.TEXT && token.type == TokenType.TEXT) {\n            lastDstToken.parts[0] += token.parts[0];\n            lastDstToken.sourceSpan.end = token.sourceSpan.end;\n        }\n        else {\n            lastDstToken = token;\n            dstTokens.push(lastDstToken);\n        }\n    }\n    return dstTokens;\n}\n//# sourceMappingURL=lexer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ParseError, ParseSourceSpan } from '../parse_util';\nimport * as html from './ast';\nimport { DEFAULT_INTERPOLATION_CONFIG } from './interpolation_config';\nimport * as lex from './lexer';\nimport { getNsPrefix, isNgContainer, mergeNsAndName } from './tags';\nvar TreeError = /** @class */ (function (_super) {\n    tslib_1.__extends(TreeError, _super);\n    function TreeError(elementName, span, msg) {\n        var _this = _super.call(this, span, msg) || this;\n        _this.elementName = elementName;\n        return _this;\n    }\n    /**\n     * @param {?} elementName\n     * @param {?} span\n     * @param {?} msg\n     * @return {?}\n     */\n    TreeError.create = /**\n     * @param {?} elementName\n     * @param {?} span\n     * @param {?} msg\n     * @return {?}\n     */\n    function (elementName, span, msg) {\n        return new TreeError(elementName, span, msg);\n    };\n    return TreeError;\n}(ParseError));\nexport { TreeError };\nfunction TreeError_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TreeError.prototype.elementName;\n}\nvar ParseTreeResult = /** @class */ (function () {\n    function ParseTreeResult(rootNodes, errors) {\n        this.rootNodes = rootNodes;\n        this.errors = errors;\n    }\n    return ParseTreeResult;\n}());\nexport { ParseTreeResult };\nfunction ParseTreeResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParseTreeResult.prototype.rootNodes;\n    /** @type {?} */\n    ParseTreeResult.prototype.errors;\n}\nvar Parser = /** @class */ (function () {\n    function Parser(getTagDefinition) {\n        this.getTagDefinition = getTagDefinition;\n    }\n    /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    Parser.prototype.parse = /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (source, url, parseExpansionForms, interpolationConfig) {\n        if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ tokensAndErrors = lex.tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);\n        var /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();\n        return new ParseTreeResult(treeAndErrors.rootNodes, (/** @type {?} */ (tokensAndErrors.errors)).concat(treeAndErrors.errors));\n    };\n    return Parser;\n}());\nexport { Parser };\nfunction Parser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Parser.prototype.getTagDefinition;\n}\nvar _TreeBuilder = /** @class */ (function () {\n    function _TreeBuilder(tokens, getTagDefinition) {\n        this.tokens = tokens;\n        this.getTagDefinition = getTagDefinition;\n        this._index = -1;\n        this._rootNodes = [];\n        this._errors = [];\n        this._elementStack = [];\n        this._advance();\n    }\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype.build = /**\n     * @return {?}\n     */\n    function () {\n        while (this._peek.type !== lex.TokenType.EOF) {\n            if (this._peek.type === lex.TokenType.TAG_OPEN_START) {\n                this._consumeStartTag(this._advance());\n            }\n            else if (this._peek.type === lex.TokenType.TAG_CLOSE) {\n                this._consumeEndTag(this._advance());\n            }\n            else if (this._peek.type === lex.TokenType.CDATA_START) {\n                this._closeVoidElement();\n                this._consumeCdata(this._advance());\n            }\n            else if (this._peek.type === lex.TokenType.COMMENT_START) {\n                this._closeVoidElement();\n                this._consumeComment(this._advance());\n            }\n            else if (this._peek.type === lex.TokenType.TEXT || this._peek.type === lex.TokenType.RAW_TEXT ||\n                this._peek.type === lex.TokenType.ESCAPABLE_RAW_TEXT) {\n                this._closeVoidElement();\n                this._consumeText(this._advance());\n            }\n            else if (this._peek.type === lex.TokenType.EXPANSION_FORM_START) {\n                this._consumeExpansion(this._advance());\n            }\n            else {\n                // Skip all other tokens...\n                this._advance();\n            }\n        }\n        return new ParseTreeResult(this._rootNodes, this._errors);\n    };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._advance = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ prev = this._peek;\n        if (this._index < this.tokens.length - 1) {\n            // Note: there is always an EOF token at the end\n            this._index++;\n        }\n        this._peek = this.tokens[this._index];\n        return prev;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    _TreeBuilder.prototype._advanceIf = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        if (this._peek.type === type) {\n            return this._advance();\n        }\n        return null;\n    };\n    /**\n     * @param {?} startToken\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeCdata = /**\n     * @param {?} startToken\n     * @return {?}\n     */\n    function (startToken) {\n        this._consumeText(this._advance());\n        this._advanceIf(lex.TokenType.CDATA_END);\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeComment = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        var /** @type {?} */ text = this._advanceIf(lex.TokenType.RAW_TEXT);\n        this._advanceIf(lex.TokenType.COMMENT_END);\n        var /** @type {?} */ value = text != null ? text.parts[0].trim() : null;\n        this._addToParent(new html.Comment(value, token.sourceSpan));\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeExpansion = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        var /** @type {?} */ switchValue = this._advance();\n        var /** @type {?} */ type = this._advance();\n        var /** @type {?} */ cases = [];\n        // read =\n        while (this._peek.type === lex.TokenType.EXPANSION_CASE_VALUE) {\n            var /** @type {?} */ expCase = this._parseExpansionCase();\n            if (!expCase)\n                return; // error\n            cases.push(expCase);\n        }\n        // read the final }\n        if (this._peek.type !== lex.TokenType.EXPANSION_FORM_END) {\n            this._errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n            return;\n        }\n        var /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);\n        this._addToParent(new html.Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));\n        this._advance();\n    };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._parseExpansionCase = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ value = this._advance();\n        // read {\n        if (this._peek.type !== lex.TokenType.EXPANSION_CASE_EXP_START) {\n            this._errors.push(TreeError.create(null, this._peek.sourceSpan, \"Invalid ICU message. Missing '{'.\"));\n            return null;\n        }\n        // read until }\n        var /** @type {?} */ start = this._advance();\n        var /** @type {?} */ exp = this._collectExpansionExpTokens(start);\n        if (!exp)\n            return null;\n        var /** @type {?} */ end = this._advance();\n        exp.push(new lex.Token(lex.TokenType.EOF, [], end.sourceSpan));\n        // parse everything in between { and }\n        var /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();\n        if (parsedExp.errors.length > 0) {\n            this._errors = this._errors.concat(/** @type {?} */ (parsedExp.errors));\n            return null;\n        }\n        var /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);\n        var /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);\n        return new html.ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);\n    };\n    /**\n     * @param {?} start\n     * @return {?}\n     */\n    _TreeBuilder.prototype._collectExpansionExpTokens = /**\n     * @param {?} start\n     * @return {?}\n     */\n    function (start) {\n        var /** @type {?} */ exp = [];\n        var /** @type {?} */ expansionFormStack = [lex.TokenType.EXPANSION_CASE_EXP_START];\n        while (true) {\n            if (this._peek.type === lex.TokenType.EXPANSION_FORM_START ||\n                this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_START) {\n                expansionFormStack.push(this._peek.type);\n            }\n            if (this._peek.type === lex.TokenType.EXPANSION_CASE_EXP_END) {\n                if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_CASE_EXP_START)) {\n                    expansionFormStack.pop();\n                    if (expansionFormStack.length == 0)\n                        return exp;\n                }\n                else {\n                    this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                    return null;\n                }\n            }\n            if (this._peek.type === lex.TokenType.EXPANSION_FORM_END) {\n                if (lastOnStack(expansionFormStack, lex.TokenType.EXPANSION_FORM_START)) {\n                    expansionFormStack.pop();\n                }\n                else {\n                    this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                    return null;\n                }\n            }\n            if (this._peek.type === lex.TokenType.EOF) {\n                this._errors.push(TreeError.create(null, start.sourceSpan, \"Invalid ICU message. Missing '}'.\"));\n                return null;\n            }\n            exp.push(this._advance());\n        }\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeText = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        var /** @type {?} */ text = token.parts[0];\n        if (text.length > 0 && text[0] == '\\n') {\n            var /** @type {?} */ parent_1 = this._getParentElement();\n            if (parent_1 != null && parent_1.children.length == 0 &&\n                this.getTagDefinition(parent_1.name).ignoreFirstLf) {\n                text = text.substring(1);\n            }\n        }\n        if (text.length > 0) {\n            this._addToParent(new html.Text(text, token.sourceSpan));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._closeVoidElement = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ el = this._getParentElement();\n        if (el && this.getTagDefinition(el.name).isVoid) {\n            this._elementStack.pop();\n        }\n    };\n    /**\n     * @param {?} startTagToken\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeStartTag = /**\n     * @param {?} startTagToken\n     * @return {?}\n     */\n    function (startTagToken) {\n        var /** @type {?} */ prefix = startTagToken.parts[0];\n        var /** @type {?} */ name = startTagToken.parts[1];\n        var /** @type {?} */ attrs = [];\n        while (this._peek.type === lex.TokenType.ATTR_NAME) {\n            attrs.push(this._consumeAttr(this._advance()));\n        }\n        var /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());\n        var /** @type {?} */ selfClosing = false;\n        // Note: There could have been a tokenizer error\n        // so that we don't get a token for the end tag...\n        if (this._peek.type === lex.TokenType.TAG_OPEN_END_VOID) {\n            this._advance();\n            selfClosing = true;\n            var /** @type {?} */ tagDef = this.getTagDefinition(fullName);\n            if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {\n                this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, \"Only void and foreign elements can be self closed \\\"\" + startTagToken.parts[1] + \"\\\"\"));\n            }\n        }\n        else if (this._peek.type === lex.TokenType.TAG_OPEN_END) {\n            this._advance();\n            selfClosing = false;\n        }\n        var /** @type {?} */ end = this._peek.sourceSpan.start;\n        var /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);\n        var /** @type {?} */ el = new html.Element(fullName, attrs, [], span, span, undefined);\n        this._pushElement(el);\n        if (selfClosing) {\n            this._popElement(fullName);\n            el.endSourceSpan = span;\n        }\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    _TreeBuilder.prototype._pushElement = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        var /** @type {?} */ parentEl = this._getParentElement();\n        if (parentEl && this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {\n            this._elementStack.pop();\n        }\n        var /** @type {?} */ tagDef = this.getTagDefinition(el.name);\n        var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;\n        if (parent && tagDef.requireExtraParent(parent.name)) {\n            var /** @type {?} */ newParent = new html.Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n            this._insertBeforeContainer(parent, container, newParent);\n        }\n        this._addToParent(el);\n        this._elementStack.push(el);\n    };\n    /**\n     * @param {?} endTagToken\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeEndTag = /**\n     * @param {?} endTagToken\n     * @return {?}\n     */\n    function (endTagToken) {\n        var /** @type {?} */ fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());\n        if (this._getParentElement()) {\n            /** @type {?} */ ((this._getParentElement())).endSourceSpan = endTagToken.sourceSpan;\n        }\n        if (this.getTagDefinition(fullName).isVoid) {\n            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, \"Void elements do not have end tags \\\"\" + endTagToken.parts[1] + \"\\\"\"));\n        }\n        else if (!this._popElement(fullName)) {\n            var /** @type {?} */ errMsg = \"Unexpected closing tag \\\"\" + fullName + \"\\\". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags\";\n            this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, errMsg));\n        }\n    };\n    /**\n     * @param {?} fullName\n     * @return {?}\n     */\n    _TreeBuilder.prototype._popElement = /**\n     * @param {?} fullName\n     * @return {?}\n     */\n    function (fullName) {\n        for (var /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {\n            var /** @type {?} */ el = this._elementStack[stackIndex];\n            if (el.name == fullName) {\n                this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);\n                return true;\n            }\n            if (!this.getTagDefinition(el.name).closedByParent) {\n                return false;\n            }\n        }\n        return false;\n    };\n    /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    _TreeBuilder.prototype._consumeAttr = /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    function (attrName) {\n        var /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);\n        var /** @type {?} */ end = attrName.sourceSpan.end;\n        var /** @type {?} */ value = '';\n        var /** @type {?} */ valueSpan = /** @type {?} */ ((undefined));\n        if (this._peek.type === lex.TokenType.ATTR_VALUE) {\n            var /** @type {?} */ valueToken = this._advance();\n            value = valueToken.parts[0];\n            end = valueToken.sourceSpan.end;\n            valueSpan = valueToken.sourceSpan;\n        }\n        return new html.Attribute(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);\n    };\n    /**\n     * @return {?}\n     */\n    _TreeBuilder.prototype._getParentElement = /**\n     * @return {?}\n     */\n    function () {\n        return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;\n    };\n    /**\n     * Returns the parent in the DOM and the container.\n     *\n     * `<ng-container>` elements are skipped as they are not rendered as DOM element.\n     * @return {?}\n     */\n    _TreeBuilder.prototype._getParentElementSkippingContainers = /**\n     * Returns the parent in the DOM and the container.\n     *\n     * `<ng-container>` elements are skipped as they are not rendered as DOM element.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ container = null;\n        for (var /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {\n            if (!isNgContainer(this._elementStack[i].name)) {\n                return { parent: this._elementStack[i], container: container };\n            }\n            container = this._elementStack[i];\n        }\n        return { parent: null, container: container };\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    _TreeBuilder.prototype._addToParent = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        var /** @type {?} */ parent = this._getParentElement();\n        if (parent != null) {\n            parent.children.push(node);\n        }\n        else {\n            this._rootNodes.push(node);\n        }\n    };\n    /**\n     * Insert a node between the parent and the container.\n     * When no container is given, the node is appended as a child of the parent.\n     * Also updates the element stack accordingly.\n     *\n     * \\@internal\n     * @param {?} parent\n     * @param {?} container\n     * @param {?} node\n     * @return {?}\n     */\n    _TreeBuilder.prototype._insertBeforeContainer = /**\n     * Insert a node between the parent and the container.\n     * When no container is given, the node is appended as a child of the parent.\n     * Also updates the element stack accordingly.\n     *\n     * \\@internal\n     * @param {?} parent\n     * @param {?} container\n     * @param {?} node\n     * @return {?}\n     */\n    function (parent, container, node) {\n        if (!container) {\n            this._addToParent(node);\n            this._elementStack.push(node);\n        }\n        else {\n            if (parent) {\n                // replace the container with the new node in the children\n                var /** @type {?} */ index = parent.children.indexOf(container);\n                parent.children[index] = node;\n            }\n            else {\n                this._rootNodes.push(node);\n            }\n            node.children.push(container);\n            this._elementStack.splice(this._elementStack.indexOf(container), 0, node);\n        }\n    };\n    /**\n     * @param {?} prefix\n     * @param {?} localName\n     * @param {?} parentElement\n     * @return {?}\n     */\n    _TreeBuilder.prototype._getElementFullName = /**\n     * @param {?} prefix\n     * @param {?} localName\n     * @param {?} parentElement\n     * @return {?}\n     */\n    function (prefix, localName, parentElement) {\n        if (prefix == null) {\n            prefix = /** @type {?} */ ((this.getTagDefinition(localName).implicitNamespacePrefix));\n            if (prefix == null && parentElement != null) {\n                prefix = getNsPrefix(parentElement.name);\n            }\n        }\n        return mergeNsAndName(prefix, localName);\n    };\n    return _TreeBuilder;\n}());\nfunction _TreeBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _TreeBuilder.prototype._index;\n    /** @type {?} */\n    _TreeBuilder.prototype._peek;\n    /** @type {?} */\n    _TreeBuilder.prototype._rootNodes;\n    /** @type {?} */\n    _TreeBuilder.prototype._errors;\n    /** @type {?} */\n    _TreeBuilder.prototype._elementStack;\n    /** @type {?} */\n    _TreeBuilder.prototype.tokens;\n    /** @type {?} */\n    _TreeBuilder.prototype.getTagDefinition;\n}\n/**\n * @param {?} stack\n * @param {?} element\n * @return {?}\n */\nfunction lastOnStack(stack, element) {\n    return stack.length > 0 && stack[stack.length - 1] === element;\n}\n//# sourceMappingURL=parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { utf8Encode } from '../util';\n/**\n * @param {?} message\n * @return {?}\n */\nexport function digest(message) {\n    return message.id || sha1(serializeNodes(message.nodes).join('') + (\"[\" + message.meaning + \"]\"));\n}\n/**\n * @param {?} message\n * @return {?}\n */\nexport function decimalDigest(message) {\n    if (message.id) {\n        return message.id;\n    }\n    var /** @type {?} */ visitor = new _SerializerIgnoreIcuExpVisitor();\n    var /** @type {?} */ parts = message.nodes.map(function (a) { return a.visit(visitor, null); });\n    return computeMsgId(parts.join(''), message.meaning);\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * \\@internal\n */\nvar /**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * The visitor is also used in the i18n parser tests\n *\n * \\@internal\n */\n_SerializerVisitor = /** @class */ (function () {\n    function _SerializerVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { return text.value; };\n    /**\n     * @param {?} container\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        return \"[\" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + \"]\";\n    };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n        return \"{\" + icu.expression + \", \" + icu.type + \", \" + strCases.join(', ') + \"}\";\n    };\n    /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var _this = this;\n        return ph.isVoid ?\n            \"<ph tag name=\\\"\" + ph.startName + \"\\\"/>\" :\n            \"<ph tag name=\\\"\" + ph.startName + \"\\\">\" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + \"</ph name=\\\"\" + ph.closeName + \"\\\">\";\n    };\n    /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?} context\n     * @return {?}\n     */\n    function (ph, context) {\n        return ph.value ? \"<ph name=\\\"\" + ph.name + \"\\\">\" + ph.value + \"</ph>\" : \"<ph name=\\\"\" + ph.name + \"\\\"/>\";\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _SerializerVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        return \"<ph icu name=\\\"\" + ph.name + \"\\\">\" + ph.value.visit(this) + \"</ph>\";\n    };\n    return _SerializerVisitor;\n}());\nvar /** @type {?} */ serializerVisitor = new _SerializerVisitor();\n/**\n * @param {?} nodes\n * @return {?}\n */\nexport function serializeNodes(nodes) {\n    return nodes.map(function (a) { return a.visit(serializerVisitor, null); });\n}\n/**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * \\@internal\n */\nvar /**\n * Serialize the i18n ast to something xml-like in order to generate an UID.\n *\n * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.\n *\n * \\@internal\n */\n_SerializerIgnoreIcuExpVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(_SerializerIgnoreIcuExpVisitor, _super);\n    function _SerializerIgnoreIcuExpVisitor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n        // Do not take the expression into account\n        return \"{\" + icu.type + \", \" + strCases.join(', ') + \"}\";\n    };\n    return _SerializerIgnoreIcuExpVisitor;\n}(_SerializerVisitor));\n/**\n * Compute the SHA1 of the given string\n *\n * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf\n *\n * WARNING: this function has not been designed not tested with security in mind.\n *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.\n * @param {?} str\n * @return {?}\n */\nexport function sha1(str) {\n    var /** @type {?} */ utf8 = utf8Encode(str);\n    var /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);\n    var /** @type {?} */ len = utf8.length * 8;\n    var /** @type {?} */ w = new Array(80);\n    var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];\n    words32[len >> 5] |= 0x80 << (24 - len % 32);\n    words32[((len + 64 >> 9) << 4) + 15] = len;\n    for (var /** @type {?} */ i = 0; i < words32.length; i += 16) {\n        var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];\n        for (var /** @type {?} */ j = 0; j < 80; j++) {\n            if (j < 16) {\n                w[j] = words32[i + j];\n            }\n            else {\n                w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n            }\n            var _c = fk(j, b, c, d), f = _c[0], k = _c[1];\n            var /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);\n            _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];\n        }\n        _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];\n    }\n    return byteStringToHexString(words32ToByteString([a, b, c, d, e]));\n    var _d, _e;\n}\n/**\n * @param {?} index\n * @param {?} b\n * @param {?} c\n * @param {?} d\n * @return {?}\n */\nfunction fk(index, b, c, d) {\n    if (index < 20) {\n        return [(b & c) | (~b & d), 0x5a827999];\n    }\n    if (index < 40) {\n        return [b ^ c ^ d, 0x6ed9eba1];\n    }\n    if (index < 60) {\n        return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];\n    }\n    return [b ^ c ^ d, 0xca62c1d6];\n}\n/**\n * Compute the fingerprint of the given string\n *\n * The output is 64 bit number encoded as a decimal string\n *\n * based on:\n * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java\n * @param {?} str\n * @return {?}\n */\nexport function fingerprint(str) {\n    var /** @type {?} */ utf8 = utf8Encode(str);\n    var _a = [hash32(utf8, 0), hash32(utf8, 102072)], hi = _a[0], lo = _a[1];\n    if (hi == 0 && (lo == 0 || lo == 1)) {\n        hi = hi ^ 0x130f9bef;\n        lo = lo ^ -0x6b5f56d8;\n    }\n    return [hi, lo];\n}\n/**\n * @param {?} msg\n * @param {?} meaning\n * @return {?}\n */\nexport function computeMsgId(msg, meaning) {\n    var _a = fingerprint(msg), hi = _a[0], lo = _a[1];\n    if (meaning) {\n        var _b = fingerprint(meaning), him = _b[0], lom = _b[1];\n        _c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1];\n    }\n    return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));\n    var _c;\n}\n/**\n * @param {?} str\n * @param {?} c\n * @return {?}\n */\nfunction hash32(str, c) {\n    var _a = [0x9e3779b9, 0x9e3779b9], a = _a[0], b = _a[1];\n    var /** @type {?} */ i;\n    var /** @type {?} */ len = str.length;\n    for (i = 0; i + 12 <= len; i += 12) {\n        a = add32(a, wordAt(str, i, Endian.Little));\n        b = add32(b, wordAt(str, i + 4, Endian.Little));\n        c = add32(c, wordAt(str, i + 8, Endian.Little));\n        _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2];\n    }\n    a = add32(a, wordAt(str, i, Endian.Little));\n    b = add32(b, wordAt(str, i + 4, Endian.Little));\n    // the first byte of c is reserved for the length\n    c = add32(c, len);\n    c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);\n    return mix([a, b, c])[2];\n    var _b;\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction mix(_a) {\n    var a = _a[0], b = _a[1], c = _a[2];\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 13;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 8;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 13;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 12;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 16;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 5;\n    a = sub32(a, b);\n    a = sub32(a, c);\n    a ^= c >>> 3;\n    b = sub32(b, c);\n    b = sub32(b, a);\n    b ^= a << 10;\n    c = sub32(c, a);\n    c = sub32(c, b);\n    c ^= b >>> 15;\n    return [a, b, c];\n}\n/** @enum {number} */\nvar Endian = {\n    Little: 0,\n    Big: 1,\n};\nEndian[Endian.Little] = \"Little\";\nEndian[Endian.Big] = \"Big\";\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction add32(a, b) {\n    return add32to64(a, b)[1];\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction add32to64(a, b) {\n    var /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);\n    var /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);\n    return [high >>> 16, (high << 16) | (low & 0xffff)];\n}\n/**\n * @param {?} __0\n * @param {?} __1\n * @return {?}\n */\nfunction add64(_a, _b) {\n    var ah = _a[0], al = _a[1];\n    var bh = _b[0], bl = _b[1];\n    var _c = add32to64(al, bl), carry = _c[0], l = _c[1];\n    var /** @type {?} */ h = add32(add32(ah, bh), carry);\n    return [h, l];\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nfunction sub32(a, b) {\n    var /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);\n    var /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);\n    return (high << 16) | (low & 0xffff);\n}\n/**\n * @param {?} a\n * @param {?} count\n * @return {?}\n */\nfunction rol32(a, count) {\n    return (a << count) | (a >>> (32 - count));\n}\n/**\n * @param {?} __0\n * @param {?} count\n * @return {?}\n */\nfunction rol64(_a, count) {\n    var hi = _a[0], lo = _a[1];\n    var /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));\n    var /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));\n    return [h, l];\n}\n/**\n * @param {?} str\n * @param {?} endian\n * @return {?}\n */\nfunction stringToWords32(str, endian) {\n    var /** @type {?} */ words32 = Array((str.length + 3) >>> 2);\n    for (var /** @type {?} */ i = 0; i < words32.length; i++) {\n        words32[i] = wordAt(str, i * 4, endian);\n    }\n    return words32;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @return {?}\n */\nfunction byteAt(str, index) {\n    return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;\n}\n/**\n * @param {?} str\n * @param {?} index\n * @param {?} endian\n * @return {?}\n */\nfunction wordAt(str, index, endian) {\n    var /** @type {?} */ word = 0;\n    if (endian === Endian.Big) {\n        for (var /** @type {?} */ i = 0; i < 4; i++) {\n            word += byteAt(str, index + i) << (24 - 8 * i);\n        }\n    }\n    else {\n        for (var /** @type {?} */ i = 0; i < 4; i++) {\n            word += byteAt(str, index + i) << 8 * i;\n        }\n    }\n    return word;\n}\n/**\n * @param {?} words32\n * @return {?}\n */\nfunction words32ToByteString(words32) {\n    return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, '');\n}\n/**\n * @param {?} word\n * @return {?}\n */\nfunction word32ToByteString(word) {\n    var /** @type {?} */ str = '';\n    for (var /** @type {?} */ i = 0; i < 4; i++) {\n        str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);\n    }\n    return str;\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction byteStringToHexString(str) {\n    var /** @type {?} */ hex = '';\n    for (var /** @type {?} */ i = 0; i < str.length; i++) {\n        var /** @type {?} */ b = byteAt(str, i);\n        hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);\n    }\n    return hex.toLowerCase();\n}\n/**\n * @param {?} str\n * @return {?}\n */\nfunction byteStringToDecString(str) {\n    var /** @type {?} */ decimal = '';\n    var /** @type {?} */ toThePower = '1';\n    for (var /** @type {?} */ i = str.length - 1; i >= 0; i--) {\n        decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));\n        toThePower = numberTimesBigInt(256, toThePower);\n    }\n    return decimal.split('').reverse().join('');\n}\n/**\n * @param {?} x\n * @param {?} y\n * @return {?}\n */\nfunction addBigInt(x, y) {\n    var /** @type {?} */ sum = '';\n    var /** @type {?} */ len = Math.max(x.length, y.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {\n        var /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);\n        if (tmpSum >= 10) {\n            carry = 1;\n            sum += tmpSum - 10;\n        }\n        else {\n            carry = 0;\n            sum += tmpSum;\n        }\n    }\n    return sum;\n}\n/**\n * @param {?} num\n * @param {?} b\n * @return {?}\n */\nfunction numberTimesBigInt(num, b) {\n    var /** @type {?} */ product = '';\n    var /** @type {?} */ bToThePower = b;\n    for (; num !== 0; num = num >>> 1) {\n        if (num & 1)\n            product = addBigInt(product, bToThePower);\n        bToThePower = addBigInt(bToThePower, bToThePower);\n    }\n    return product;\n}\n//# sourceMappingURL=digest.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar Message = /** @class */ (function () {\n    /**\n     * @param nodes message AST\n     * @param placeholders maps placeholder names to static content\n     * @param placeholderToMessage maps placeholder names to messages (used for nested ICU messages)\n     * @param meaning\n     * @param description\n     * @param id\n     */\n    function Message(nodes, placeholders, placeholderToMessage, meaning, description, id) {\n        this.nodes = nodes;\n        this.placeholders = placeholders;\n        this.placeholderToMessage = placeholderToMessage;\n        this.meaning = meaning;\n        this.description = description;\n        this.id = id;\n        if (nodes.length) {\n            this.sources = [{\n                    filePath: nodes[0].sourceSpan.start.file.url,\n                    startLine: nodes[0].sourceSpan.start.line + 1,\n                    startCol: nodes[0].sourceSpan.start.col + 1,\n                    endLine: nodes[nodes.length - 1].sourceSpan.end.line + 1,\n                    endCol: nodes[0].sourceSpan.start.col + 1\n                }];\n        }\n        else {\n            this.sources = [];\n        }\n    }\n    return Message;\n}());\nexport { Message };\nfunction Message_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Message.prototype.sources;\n    /** @type {?} */\n    Message.prototype.nodes;\n    /** @type {?} */\n    Message.prototype.placeholders;\n    /** @type {?} */\n    Message.prototype.placeholderToMessage;\n    /** @type {?} */\n    Message.prototype.meaning;\n    /** @type {?} */\n    Message.prototype.description;\n    /** @type {?} */\n    Message.prototype.id;\n}\n/**\n * @record\n */\nexport function MessageSpan() { }\nfunction MessageSpan_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MessageSpan.prototype.filePath;\n    /** @type {?} */\n    MessageSpan.prototype.startLine;\n    /** @type {?} */\n    MessageSpan.prototype.startCol;\n    /** @type {?} */\n    MessageSpan.prototype.endLine;\n    /** @type {?} */\n    MessageSpan.prototype.endCol;\n}\n/**\n * @record\n */\nexport function Node() { }\nfunction Node_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Node.prototype.sourceSpan;\n    /** @type {?} */\n    Node.prototype.visit;\n}\nvar Text = /** @class */ (function () {\n    function Text(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Text.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitText(this, context); };\n    return Text;\n}());\nexport { Text };\nfunction Text_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Text.prototype.value;\n    /** @type {?} */\n    Text.prototype.sourceSpan;\n}\nvar Container = /** @class */ (function () {\n    function Container(children, sourceSpan) {\n        this.children = children;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Container.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitContainer(this, context); };\n    return Container;\n}());\nexport { Container };\nfunction Container_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Container.prototype.children;\n    /** @type {?} */\n    Container.prototype.sourceSpan;\n}\nvar Icu = /** @class */ (function () {\n    function Icu(expression, type, cases, sourceSpan) {\n        this.expression = expression;\n        this.type = type;\n        this.cases = cases;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Icu.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitIcu(this, context); };\n    return Icu;\n}());\nexport { Icu };\nfunction Icu_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Icu.prototype.expressionPlaceholder;\n    /** @type {?} */\n    Icu.prototype.expression;\n    /** @type {?} */\n    Icu.prototype.type;\n    /** @type {?} */\n    Icu.prototype.cases;\n    /** @type {?} */\n    Icu.prototype.sourceSpan;\n}\nvar TagPlaceholder = /** @class */ (function () {\n    function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {\n        this.tag = tag;\n        this.attrs = attrs;\n        this.startName = startName;\n        this.closeName = closeName;\n        this.children = children;\n        this.isVoid = isVoid;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    TagPlaceholder.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };\n    return TagPlaceholder;\n}());\nexport { TagPlaceholder };\nfunction TagPlaceholder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TagPlaceholder.prototype.tag;\n    /** @type {?} */\n    TagPlaceholder.prototype.attrs;\n    /** @type {?} */\n    TagPlaceholder.prototype.startName;\n    /** @type {?} */\n    TagPlaceholder.prototype.closeName;\n    /** @type {?} */\n    TagPlaceholder.prototype.children;\n    /** @type {?} */\n    TagPlaceholder.prototype.isVoid;\n    /** @type {?} */\n    TagPlaceholder.prototype.sourceSpan;\n}\nvar Placeholder = /** @class */ (function () {\n    function Placeholder(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    Placeholder.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitPlaceholder(this, context); };\n    return Placeholder;\n}());\nexport { Placeholder };\nfunction Placeholder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Placeholder.prototype.value;\n    /** @type {?} */\n    Placeholder.prototype.name;\n    /** @type {?} */\n    Placeholder.prototype.sourceSpan;\n}\nvar IcuPlaceholder = /** @class */ (function () {\n    function IcuPlaceholder(value, name, sourceSpan) {\n        this.value = value;\n        this.name = name;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    IcuPlaceholder.prototype.visit = /**\n     * @param {?} visitor\n     * @param {?=} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };\n    return IcuPlaceholder;\n}());\nexport { IcuPlaceholder };\nfunction IcuPlaceholder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IcuPlaceholder.prototype.value;\n    /** @type {?} */\n    IcuPlaceholder.prototype.name;\n    /** @type {?} */\n    IcuPlaceholder.prototype.sourceSpan;\n}\n/**\n * @record\n */\nexport function Visitor() { }\nfunction Visitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Visitor.prototype.visitText;\n    /** @type {?} */\n    Visitor.prototype.visitContainer;\n    /** @type {?} */\n    Visitor.prototype.visitIcu;\n    /** @type {?} */\n    Visitor.prototype.visitTagPlaceholder;\n    /** @type {?} */\n    Visitor.prototype.visitPlaceholder;\n    /** @type {?} */\n    Visitor.prototype.visitIcuPlaceholder;\n}\nvar CloneVisitor = /** @class */ (function () {\n    function CloneVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { return new Text(text.value, text.sourceSpan); };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        var /** @type {?} */ children = container.children.map(function (n) { return n.visit(_this, context); });\n        return new Container(children, container.sourceSpan);\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ cases = {};\n        Object.keys(icu.cases).forEach(function (key) { return cases[key] = icu.cases[key].visit(_this, context); });\n        var /** @type {?} */ msg = new Icu(icu.expression, icu.type, cases, icu.sourceSpan);\n        msg.expressionPlaceholder = icu.expressionPlaceholder;\n        return msg;\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var _this = this;\n        var /** @type {?} */ children = ph.children.map(function (n) { return n.visit(_this, context); });\n        return new TagPlaceholder(ph.tag, ph.attrs, ph.startName, ph.closeName, children, ph.isVoid, ph.sourceSpan);\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        return new Placeholder(ph.value, ph.name, ph.sourceSpan);\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    CloneVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        return new IcuPlaceholder(ph.value, ph.name, ph.sourceSpan);\n    };\n    return CloneVisitor;\n}());\nexport { CloneVisitor };\nvar RecurseVisitor = /** @class */ (function () {\n    function RecurseVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        container.children.forEach(function (child) { return child.visit(_this); });\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        Object.keys(icu.cases).forEach(function (k) { icu.cases[k].visit(_this); });\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var _this = this;\n        ph.children.forEach(function (child) { return child.visit(_this); });\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) { };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    RecurseVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) { };\n    return RecurseVisitor;\n}());\nexport { RecurseVisitor };\n//# sourceMappingURL=i18n_ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ TAG_TO_PLACEHOLDER_NAMES = {\n    'A': 'LINK',\n    'B': 'BOLD_TEXT',\n    'BR': 'LINE_BREAK',\n    'EM': 'EMPHASISED_TEXT',\n    'H1': 'HEADING_LEVEL1',\n    'H2': 'HEADING_LEVEL2',\n    'H3': 'HEADING_LEVEL3',\n    'H4': 'HEADING_LEVEL4',\n    'H5': 'HEADING_LEVEL5',\n    'H6': 'HEADING_LEVEL6',\n    'HR': 'HORIZONTAL_RULE',\n    'I': 'ITALIC_TEXT',\n    'LI': 'LIST_ITEM',\n    'LINK': 'MEDIA_LINK',\n    'OL': 'ORDERED_LIST',\n    'P': 'PARAGRAPH',\n    'Q': 'QUOTATION',\n    'S': 'STRIKETHROUGH_TEXT',\n    'SMALL': 'SMALL_TEXT',\n    'SUB': 'SUBSTRIPT',\n    'SUP': 'SUPERSCRIPT',\n    'TBODY': 'TABLE_BODY',\n    'TD': 'TABLE_CELL',\n    'TFOOT': 'TABLE_FOOTER',\n    'TH': 'TABLE_HEADER_CELL',\n    'THEAD': 'TABLE_HEADER',\n    'TR': 'TABLE_ROW',\n    'TT': 'MONOSPACED_TEXT',\n    'U': 'UNDERLINED_TEXT',\n    'UL': 'UNORDERED_LIST',\n};\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nvar /**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nPlaceholderRegistry = /** @class */ (function () {\n    function PlaceholderRegistry() {\n        this._placeHolderNameCounts = {};\n        this._signatureToName = {};\n    }\n    /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getStartTagPlaceholderName = /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n    function (tag, attrs, isVoid) {\n        var /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        var /** @type {?} */ upperTag = tag.toUpperCase();\n        var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n        var /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : \"START_\" + baseName);\n        this._signatureToName[signature] = name;\n        return name;\n    };\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getCloseTagPlaceholderName = /**\n     * @param {?} tag\n     * @return {?}\n     */\n    function (tag) {\n        var /** @type {?} */ signature = this._hashClosingTag(tag);\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        var /** @type {?} */ upperTag = tag.toUpperCase();\n        var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || \"TAG_\" + upperTag;\n        var /** @type {?} */ name = this._generateUniqueName(\"CLOSE_\" + baseName);\n        this._signatureToName[signature] = name;\n        return name;\n    };\n    /**\n     * @param {?} name\n     * @param {?} content\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getPlaceholderName = /**\n     * @param {?} name\n     * @param {?} content\n     * @return {?}\n     */\n    function (name, content) {\n        var /** @type {?} */ upperName = name.toUpperCase();\n        var /** @type {?} */ signature = \"PH: \" + upperName + \"=\" + content;\n        if (this._signatureToName[signature]) {\n            return this._signatureToName[signature];\n        }\n        var /** @type {?} */ uniqueName = this._generateUniqueName(upperName);\n        this._signatureToName[signature] = uniqueName;\n        return uniqueName;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype.getUniquePlaceholder = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this._generateUniqueName(name.toUpperCase());\n    };\n    /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype._hashTag = /**\n     * @param {?} tag\n     * @param {?} attrs\n     * @param {?} isVoid\n     * @return {?}\n     */\n    function (tag, attrs, isVoid) {\n        var /** @type {?} */ start = \"<\" + tag;\n        var /** @type {?} */ strAttrs = Object.keys(attrs).sort().map(function (name) { return \" \" + name + \"=\" + attrs[name]; }).join('');\n        var /** @type {?} */ end = isVoid ? '/>' : \"></\" + tag + \">\";\n        return start + strAttrs + end;\n    };\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype._hashClosingTag = /**\n     * @param {?} tag\n     * @return {?}\n     */\n    function (tag) { return this._hashTag(\"/\" + tag, {}, false); };\n    /**\n     * @param {?} base\n     * @return {?}\n     */\n    PlaceholderRegistry.prototype._generateUniqueName = /**\n     * @param {?} base\n     * @return {?}\n     */\n    function (base) {\n        var /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);\n        if (!seen) {\n            this._placeHolderNameCounts[base] = 1;\n            return base;\n        }\n        var /** @type {?} */ id = this._placeHolderNameCounts[base];\n        this._placeHolderNameCounts[base] = id + 1;\n        return base + \"_\" + id;\n    };\n    return PlaceholderRegistry;\n}());\n/**\n * Creates unique names for placeholder with different content.\n *\n * Returns the same placeholder name when the content is identical.\n */\nexport { PlaceholderRegistry };\nfunction PlaceholderRegistry_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PlaceholderRegistry.prototype._placeHolderNameCounts;\n    /** @type {?} */\n    PlaceholderRegistry.prototype._signatureToName;\n}\n//# sourceMappingURL=placeholder.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Lexer as ExpressionLexer } from '../expression_parser/lexer';\nimport { Parser as ExpressionParser } from '../expression_parser/parser';\nimport * as html from '../ml_parser/ast';\nimport { getHtmlTagDefinition } from '../ml_parser/html_tags';\nimport * as i18n from './i18n_ast';\nimport { PlaceholderRegistry } from './serializers/placeholder';\nvar /** @type {?} */ _expParser = new ExpressionParser(new ExpressionLexer());\n/**\n * Returns a function converting html nodes to an i18n Message given an interpolationConfig\n * @param {?} interpolationConfig\n * @return {?}\n */\nexport function createI18nMessageFactory(interpolationConfig) {\n    var /** @type {?} */ visitor = new _I18nVisitor(_expParser, interpolationConfig);\n    return function (nodes, meaning, description, id) {\n        return visitor.toI18nMessage(nodes, meaning, description, id);\n    };\n}\nvar _I18nVisitor = /** @class */ (function () {\n    function _I18nVisitor(_expressionParser, _interpolationConfig) {\n        this._expressionParser = _expressionParser;\n        this._interpolationConfig = _interpolationConfig;\n    }\n    /**\n     * @param {?} nodes\n     * @param {?} meaning\n     * @param {?} description\n     * @param {?} id\n     * @return {?}\n     */\n    _I18nVisitor.prototype.toI18nMessage = /**\n     * @param {?} nodes\n     * @param {?} meaning\n     * @param {?} description\n     * @param {?} id\n     * @return {?}\n     */\n    function (nodes, meaning, description, id) {\n        this._isIcu = nodes.length == 1 && nodes[0] instanceof html.Expansion;\n        this._icuDepth = 0;\n        this._placeholderRegistry = new PlaceholderRegistry();\n        this._placeholderToContent = {};\n        this._placeholderToMessage = {};\n        var /** @type {?} */ i18nodes = html.visitAll(this, nodes, {});\n        return new i18n.Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description, id);\n    };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    function (el, context) {\n        var /** @type {?} */ children = html.visitAll(this, el.children);\n        var /** @type {?} */ attrs = {};\n        el.attrs.forEach(function (attr) {\n            // Do not visit the attributes, translatable ones are top-level ASTs\n            attrs[attr.name] = attr.value;\n        });\n        var /** @type {?} */ isVoid = getHtmlTagDefinition(el.name).isVoid;\n        var /** @type {?} */ startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);\n        this._placeholderToContent[startPhName] = /** @type {?} */ ((el.sourceSpan)).toString();\n        var /** @type {?} */ closePhName = '';\n        if (!isVoid) {\n            closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);\n            this._placeholderToContent[closePhName] = \"</\" + el.name + \">\";\n        }\n        return new i18n.TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, /** @type {?} */ ((el.sourceSpan)));\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) {\n        return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) {\n        return this._visitTextWithInterpolation(text.value, /** @type {?} */ ((text.sourceSpan)));\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { return null; };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        this._icuDepth++;\n        var /** @type {?} */ i18nIcuCases = {};\n        var /** @type {?} */ i18nIcu = new i18n.Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);\n        icu.cases.forEach(function (caze) {\n            i18nIcuCases[caze.value] = new i18n.Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);\n        });\n        this._icuDepth--;\n        if (this._isIcu || this._icuDepth > 0) {\n            // Returns an ICU node when:\n            // - the message (vs a part of the message) is an ICU message, or\n            // - the ICU message is nested.\n            var /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder(\"VAR_\" + icu.type);\n            i18nIcu.expressionPlaceholder = expPh;\n            this._placeholderToContent[expPh] = icu.switchValue;\n            return i18nIcu;\n        }\n        // Else returns a placeholder\n        // ICU placeholders should not be replaced with their original content but with the their\n        // translations. We need to create a new visitor (they are not re-entrant) to compute the\n        // message id.\n        // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg\n        var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());\n        var /** @type {?} */ visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);\n        this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '', '');\n        return new i18n.IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    _I18nVisitor.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        throw new Error('Unreachable code');\n    };\n    /**\n     * @param {?} text\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    _I18nVisitor.prototype._visitTextWithInterpolation = /**\n     * @param {?} text\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (text, sourceSpan) {\n        var /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);\n        if (!splitInterpolation) {\n            // No expression, return a single text\n            return new i18n.Text(text, sourceSpan);\n        }\n        // Return a group of text + expressions\n        var /** @type {?} */ nodes = [];\n        var /** @type {?} */ container = new i18n.Container(nodes, sourceSpan);\n        var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;\n        for (var /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {\n            var /** @type {?} */ expression = splitInterpolation.expressions[i];\n            var /** @type {?} */ baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';\n            var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);\n            if (splitInterpolation.strings[i].length) {\n                // No need to add empty strings\n                nodes.push(new i18n.Text(splitInterpolation.strings[i], sourceSpan));\n            }\n            nodes.push(new i18n.Placeholder(expression, phName, sourceSpan));\n            this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;\n        }\n        // The last index contains no expression\n        var /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;\n        if (splitInterpolation.strings[lastStringIdx].length) {\n            nodes.push(new i18n.Text(splitInterpolation.strings[lastStringIdx], sourceSpan));\n        }\n        return container;\n    };\n    return _I18nVisitor;\n}());\nfunction _I18nVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _I18nVisitor.prototype._isIcu;\n    /** @type {?} */\n    _I18nVisitor.prototype._icuDepth;\n    /** @type {?} */\n    _I18nVisitor.prototype._placeholderRegistry;\n    /** @type {?} */\n    _I18nVisitor.prototype._placeholderToContent;\n    /** @type {?} */\n    _I18nVisitor.prototype._placeholderToMessage;\n    /** @type {?} */\n    _I18nVisitor.prototype._expressionParser;\n    /** @type {?} */\n    _I18nVisitor.prototype._interpolationConfig;\n}\nvar /** @type {?} */ _CUSTOM_PH_EXP = /\\/\\/[\\s\\S]*i18n[\\s\\S]*\\([\\s\\S]*ph[\\s\\S]*=[\\s\\S]*(\"|')([\\s\\S]*?)\\1[\\s\\S]*\\)/g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction _extractPlaceholderName(input) {\n    return input.split(_CUSTOM_PH_EXP)[2];\n}\n//# sourceMappingURL=i18n_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ParseError } from '../parse_util';\n/**\n * An i18n error.\n */\nvar /**\n * An i18n error.\n */\nI18nError = /** @class */ (function (_super) {\n    tslib_1.__extends(I18nError, _super);\n    function I18nError(span, msg) {\n        return _super.call(this, span, msg) || this;\n    }\n    return I18nError;\n}(ParseError));\n/**\n * An i18n error.\n */\nexport { I18nError };\n//# sourceMappingURL=parse_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as html from '../ml_parser/ast';\nimport { ParseTreeResult } from '../ml_parser/parser';\nimport * as i18n from './i18n_ast';\nimport { createI18nMessageFactory } from './i18n_parser';\nimport { I18nError } from './parse_util';\nvar /** @type {?} */ _I18N_ATTR = 'i18n';\nvar /** @type {?} */ _I18N_ATTR_PREFIX = 'i18n-';\nvar /** @type {?} */ _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;\nvar /** @type {?} */ MEANING_SEPARATOR = '|';\nvar /** @type {?} */ ID_SEPARATOR = '@@';\nvar /** @type {?} */ i18nCommentsWarned = false;\n/**\n * Extract translatable messages from an html AST\n * @param {?} nodes\n * @param {?} interpolationConfig\n * @param {?} implicitTags\n * @param {?} implicitAttrs\n * @return {?}\n */\nexport function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {\n    var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);\n    return visitor.extract(nodes, interpolationConfig);\n}\n/**\n * @param {?} nodes\n * @param {?} translations\n * @param {?} interpolationConfig\n * @param {?} implicitTags\n * @param {?} implicitAttrs\n * @return {?}\n */\nexport function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {\n    var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);\n    return visitor.merge(nodes, translations, interpolationConfig);\n}\nvar ExtractionResult = /** @class */ (function () {\n    function ExtractionResult(messages, errors) {\n        this.messages = messages;\n        this.errors = errors;\n    }\n    return ExtractionResult;\n}());\nexport { ExtractionResult };\nfunction ExtractionResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExtractionResult.prototype.messages;\n    /** @type {?} */\n    ExtractionResult.prototype.errors;\n}\n/** @enum {number} */\nvar _VisitorMode = {\n    Extract: 0,\n    Merge: 1,\n};\n_VisitorMode[_VisitorMode.Extract] = \"Extract\";\n_VisitorMode[_VisitorMode.Merge] = \"Merge\";\n/**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * \\@internal\n */\nvar /**\n * This Visitor is used:\n * 1. to extract all the translatable strings from an html AST (see `extract()`),\n * 2. to replace the translatable strings with the actual translations (see `merge()`)\n *\n * \\@internal\n */\n_Visitor = /** @class */ (function () {\n    function _Visitor(_implicitTags, _implicitAttrs) {\n        this._implicitTags = _implicitTags;\n        this._implicitAttrs = _implicitAttrs;\n    }\n    /**\n     * Extracts the messages from the tree\n     */\n    /**\n     * Extracts the messages from the tree\n     * @param {?} nodes\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    _Visitor.prototype.extract = /**\n     * Extracts the messages from the tree\n     * @param {?} nodes\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (nodes, interpolationConfig) {\n        var _this = this;\n        this._init(_VisitorMode.Extract, interpolationConfig);\n        nodes.forEach(function (node) { return node.visit(_this, null); });\n        if (this._inI18nBlock) {\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n        }\n        return new ExtractionResult(this._messages, this._errors);\n    };\n    /**\n     * Returns a tree where all translatable nodes are translated\n     */\n    /**\n     * Returns a tree where all translatable nodes are translated\n     * @param {?} nodes\n     * @param {?} translations\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    _Visitor.prototype.merge = /**\n     * Returns a tree where all translatable nodes are translated\n     * @param {?} nodes\n     * @param {?} translations\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (nodes, translations, interpolationConfig) {\n        this._init(_VisitorMode.Merge, interpolationConfig);\n        this._translations = translations;\n        // Construct a single fake root element\n        var /** @type {?} */ wrapper = new html.Element('wrapper', [], nodes, /** @type {?} */ ((undefined)), undefined, undefined);\n        var /** @type {?} */ translatedNode = wrapper.visit(this, null);\n        if (this._inI18nBlock) {\n            this._reportError(nodes[nodes.length - 1], 'Unclosed block');\n        }\n        return new ParseTreeResult(translatedNode.children, this._errors);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        // Parse cases for translatable html attributes\n        var /** @type {?} */ expression = html.visitAll(this, icuCase.expression, context);\n        if (this._mode === _VisitorMode.Merge) {\n            return new html.ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);\n        }\n    };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        this._mayBeAddBlockChildren(icu);\n        var /** @type {?} */ wasInIcu = this._inIcu;\n        if (!this._inIcu) {\n            // nested ICU messages should not be extracted but top-level translated as a whole\n            if (this._isInTranslatableSection) {\n                this._addMessage([icu]);\n            }\n            this._inIcu = true;\n        }\n        var /** @type {?} */ cases = html.visitAll(this, icu.cases, context);\n        if (this._mode === _VisitorMode.Merge) {\n            icu = new html.Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);\n        }\n        this._inIcu = wasInIcu;\n        return icu;\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) {\n        var /** @type {?} */ isOpening = _isOpeningComment(comment);\n        if (isOpening && this._isInTranslatableSection) {\n            this._reportError(comment, 'Could not start a block inside a translatable section');\n            return;\n        }\n        var /** @type {?} */ isClosing = _isClosingComment(comment);\n        if (isClosing && !this._inI18nBlock) {\n            this._reportError(comment, 'Trying to close an unopened block');\n            return;\n        }\n        if (!this._inI18nNode && !this._inIcu) {\n            if (!this._inI18nBlock) {\n                if (isOpening) {\n                    // deprecated from v5 you should use <ng-container i18n> instead of i18n comments\n                    if (!i18nCommentsWarned && /** @type {?} */ (console) && /** @type {?} */ (console.warn)) {\n                        i18nCommentsWarned = true;\n                        var /** @type {?} */ details = comment.sourceSpan.details ? \", \" + comment.sourceSpan.details : '';\n                        // TODO(ocombe): use a log service once there is a public one available\n                        console.warn(\"I18n comments are deprecated, use an <ng-container> element instead (\" + comment.sourceSpan.start + details + \")\");\n                    }\n                    this._inI18nBlock = true;\n                    this._blockStartDepth = this._depth;\n                    this._blockChildren = [];\n                    this._blockMeaningAndDesc = /** @type {?} */ ((comment.value)).replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();\n                    this._openTranslatableSection(comment);\n                }\n            }\n            else {\n                if (isClosing) {\n                    if (this._depth == this._blockStartDepth) {\n                        this._closeTranslatableSection(comment, this._blockChildren);\n                        this._inI18nBlock = false;\n                        var /** @type {?} */ message = /** @type {?} */ ((this._addMessage(this._blockChildren, this._blockMeaningAndDesc)));\n                        // merge attributes in sections\n                        var /** @type {?} */ nodes = this._translateMessage(comment, message);\n                        return html.visitAll(this, nodes);\n                    }\n                    else {\n                        this._reportError(comment, 'I18N blocks should not cross element boundaries');\n                        return;\n                    }\n                }\n            }\n        }\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) {\n        if (this._isInTranslatableSection) {\n            this._mayBeAddBlockChildren(text);\n        }\n        return text;\n    };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    function (el, context) {\n        var _this = this;\n        this._mayBeAddBlockChildren(el);\n        this._depth++;\n        var /** @type {?} */ wasInI18nNode = this._inI18nNode;\n        var /** @type {?} */ wasInImplicitNode = this._inImplicitNode;\n        var /** @type {?} */ childNodes = [];\n        var /** @type {?} */ translatedChildNodes = /** @type {?} */ ((undefined));\n        // Extract:\n        // - top level nodes with the (implicit) \"i18n\" attribute if not already in a section\n        // - ICU messages\n        var /** @type {?} */ i18nAttr = _getI18nAttr(el);\n        var /** @type {?} */ i18nMeta = i18nAttr ? i18nAttr.value : '';\n        var /** @type {?} */ isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this._inIcu &&\n            !this._isInTranslatableSection;\n        var /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;\n        this._inImplicitNode = wasInImplicitNode || isImplicit;\n        if (!this._isInTranslatableSection && !this._inIcu) {\n            if (i18nAttr || isTopLevelImplicit) {\n                this._inI18nNode = true;\n                var /** @type {?} */ message = /** @type {?} */ ((this._addMessage(el.children, i18nMeta)));\n                translatedChildNodes = this._translateMessage(el, message);\n            }\n            if (this._mode == _VisitorMode.Extract) {\n                var /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;\n                if (isTranslatable)\n                    this._openTranslatableSection(el);\n                html.visitAll(this, el.children);\n                if (isTranslatable)\n                    this._closeTranslatableSection(el, el.children);\n            }\n        }\n        else {\n            if (i18nAttr || isTopLevelImplicit) {\n                this._reportError(el, 'Could not mark an element as translatable inside a translatable section');\n            }\n            if (this._mode == _VisitorMode.Extract) {\n                // Descend into child nodes for extraction\n                html.visitAll(this, el.children);\n            }\n        }\n        if (this._mode === _VisitorMode.Merge) {\n            var /** @type {?} */ visitNodes = translatedChildNodes || el.children;\n            visitNodes.forEach(function (child) {\n                var /** @type {?} */ visited = child.visit(_this, context);\n                if (visited && !_this._isInTranslatableSection) {\n                    // Do not add the children from translatable sections (= i18n blocks here)\n                    // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)\n                    childNodes = childNodes.concat(visited);\n                }\n            });\n        }\n        this._visitAttributesOf(el);\n        this._depth--;\n        this._inI18nNode = wasInI18nNode;\n        this._inImplicitNode = wasInImplicitNode;\n        if (this._mode === _VisitorMode.Merge) {\n            var /** @type {?} */ translatedAttrs = this._translateAttributes(el);\n            return new html.Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);\n        }\n        return null;\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) {\n        throw new Error('unreachable code');\n    };\n    /**\n     * @param {?} mode\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    _Visitor.prototype._init = /**\n     * @param {?} mode\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (mode, interpolationConfig) {\n        this._mode = mode;\n        this._inI18nBlock = false;\n        this._inI18nNode = false;\n        this._depth = 0;\n        this._inIcu = false;\n        this._msgCountAtSectionStart = undefined;\n        this._errors = [];\n        this._messages = [];\n        this._inImplicitNode = false;\n        this._createI18nMessage = createI18nMessageFactory(interpolationConfig);\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    _Visitor.prototype._visitAttributesOf = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        var _this = this;\n        var /** @type {?} */ explicitAttrNameToValue = {};\n        var /** @type {?} */ implicitAttrNames = this._implicitAttrs[el.name] || [];\n        el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })\n            .forEach(function (attr) {\n            return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                attr.value;\n        });\n        el.attrs.forEach(function (attr) {\n            if (attr.name in explicitAttrNameToValue) {\n                _this._addMessage([attr], explicitAttrNameToValue[attr.name]);\n            }\n            else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {\n                _this._addMessage([attr]);\n            }\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?=} msgMeta\n     * @return {?}\n     */\n    _Visitor.prototype._addMessage = /**\n     * @param {?} ast\n     * @param {?=} msgMeta\n     * @return {?}\n     */\n    function (ast, msgMeta) {\n        if (ast.length == 0 ||\n            ast.length == 1 && ast[0] instanceof html.Attribute && !(/** @type {?} */ (ast[0])).value) {\n            // Do not create empty messages\n            return null;\n        }\n        var _a = _parseMessageMeta(msgMeta), meaning = _a.meaning, description = _a.description, id = _a.id;\n        var /** @type {?} */ message = this._createI18nMessage(ast, meaning, description, id);\n        this._messages.push(message);\n        return message;\n    };\n    /**\n     * @param {?} el\n     * @param {?} message\n     * @return {?}\n     */\n    _Visitor.prototype._translateMessage = /**\n     * @param {?} el\n     * @param {?} message\n     * @return {?}\n     */\n    function (el, message) {\n        if (message && this._mode === _VisitorMode.Merge) {\n            var /** @type {?} */ nodes = this._translations.get(message);\n            if (nodes) {\n                return nodes;\n            }\n            this._reportError(el, \"Translation unavailable for message id=\\\"\" + this._translations.digest(message) + \"\\\"\");\n        }\n        return [];\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    _Visitor.prototype._translateAttributes = /**\n     * @param {?} el\n     * @return {?}\n     */\n    function (el) {\n        var _this = this;\n        var /** @type {?} */ attributes = el.attrs;\n        var /** @type {?} */ i18nParsedMessageMeta = {};\n        attributes.forEach(function (attr) {\n            if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                i18nParsedMessageMeta[attr.name.slice(_I18N_ATTR_PREFIX.length)] =\n                    _parseMessageMeta(attr.value);\n            }\n        });\n        var /** @type {?} */ translatedAttributes = [];\n        attributes.forEach(function (attr) {\n            if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {\n                // strip i18n specific attributes\n                return;\n            }\n            if (attr.value && attr.value != '' && i18nParsedMessageMeta.hasOwnProperty(attr.name)) {\n                var _a = i18nParsedMessageMeta[attr.name], meaning = _a.meaning, description = _a.description, id = _a.id;\n                var /** @type {?} */ message = _this._createI18nMessage([attr], meaning, description, id);\n                var /** @type {?} */ nodes = _this._translations.get(message);\n                if (nodes) {\n                    if (nodes.length == 0) {\n                        translatedAttributes.push(new html.Attribute(attr.name, '', attr.sourceSpan));\n                    }\n                    else if (nodes[0] instanceof html.Text) {\n                        var /** @type {?} */ value = (/** @type {?} */ (nodes[0])).value;\n                        translatedAttributes.push(new html.Attribute(attr.name, value, attr.sourceSpan));\n                    }\n                    else {\n                        _this._reportError(el, \"Unexpected translation for attribute \\\"\" + attr.name + \"\\\" (id=\\\"\" + (id || _this._translations.digest(message)) + \"\\\")\");\n                    }\n                }\n                else {\n                    _this._reportError(el, \"Translation unavailable for attribute \\\"\" + attr.name + \"\\\" (id=\\\"\" + (id || _this._translations.digest(message)) + \"\\\")\");\n                }\n            }\n            else {\n                translatedAttributes.push(attr);\n            }\n        });\n        return translatedAttributes;\n    };\n    /**\n     * Add the node as a child of the block when:\n     * - we are in a block,\n     * - we are not inside a ICU message (those are handled separately),\n     * - the node is a \"direct child\" of the block\n     * @param {?} node\n     * @return {?}\n     */\n    _Visitor.prototype._mayBeAddBlockChildren = /**\n     * Add the node as a child of the block when:\n     * - we are in a block,\n     * - we are not inside a ICU message (those are handled separately),\n     * - the node is a \"direct child\" of the block\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {\n            this._blockChildren.push(node);\n        }\n    };\n    /**\n     * Marks the start of a section, see `_closeTranslatableSection`\n     * @param {?} node\n     * @return {?}\n     */\n    _Visitor.prototype._openTranslatableSection = /**\n     * Marks the start of a section, see `_closeTranslatableSection`\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        if (this._isInTranslatableSection) {\n            this._reportError(node, 'Unexpected section start');\n        }\n        else {\n            this._msgCountAtSectionStart = this._messages.length;\n        }\n    };\n    Object.defineProperty(_Visitor.prototype, \"_isInTranslatableSection\", {\n        get: /**\n         * A translatable section could be:\n         * - the content of translatable element,\n         * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments\n         * @return {?}\n         */\n        function () {\n            return this._msgCountAtSectionStart !== void 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Terminates a section.\n     *\n     * If a section has only one significant children (comments not significant) then we should not\n     * keep the message from this children:\n     *\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n     * - one for the <p> content with meaning and description,\n     * - another one for the ICU message.\n     *\n     * In this case the last message is discarded as it contains less information (the AST is\n     * otherwise identical).\n     *\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\n     * ICU message here)\n     * @param {?} node\n     * @param {?} directChildren\n     * @return {?}\n     */\n    _Visitor.prototype._closeTranslatableSection = /**\n     * Terminates a section.\n     *\n     * If a section has only one significant children (comments not significant) then we should not\n     * keep the message from this children:\n     *\n     * `<p i18n=\"meaning|description\">{ICU message}</p>` would produce two messages:\n     * - one for the <p> content with meaning and description,\n     * - another one for the ICU message.\n     *\n     * In this case the last message is discarded as it contains less information (the AST is\n     * otherwise identical).\n     *\n     * Note that we should still keep messages extracted from attributes inside the section (ie in the\n     * ICU message here)\n     * @param {?} node\n     * @param {?} directChildren\n     * @return {?}\n     */\n    function (node, directChildren) {\n        if (!this._isInTranslatableSection) {\n            this._reportError(node, 'Unexpected section end');\n            return;\n        }\n        var /** @type {?} */ startIndex = this._msgCountAtSectionStart;\n        var /** @type {?} */ significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof html.Comment ? 0 : 1); }, 0);\n        if (significantChildren == 1) {\n            for (var /** @type {?} */ i = this._messages.length - 1; i >= /** @type {?} */ ((startIndex)); i--) {\n                var /** @type {?} */ ast = this._messages[i].nodes;\n                if (!(ast.length == 1 && ast[0] instanceof i18n.Text)) {\n                    this._messages.splice(i, 1);\n                    break;\n                }\n            }\n        }\n        this._msgCountAtSectionStart = undefined;\n    };\n    /**\n     * @param {?} node\n     * @param {?} msg\n     * @return {?}\n     */\n    _Visitor.prototype._reportError = /**\n     * @param {?} node\n     * @param {?} msg\n     * @return {?}\n     */\n    function (node, msg) {\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), msg));\n    };\n    return _Visitor;\n}());\nfunction _Visitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _Visitor.prototype._depth;\n    /** @type {?} */\n    _Visitor.prototype._inI18nNode;\n    /** @type {?} */\n    _Visitor.prototype._inImplicitNode;\n    /** @type {?} */\n    _Visitor.prototype._inI18nBlock;\n    /** @type {?} */\n    _Visitor.prototype._blockMeaningAndDesc;\n    /** @type {?} */\n    _Visitor.prototype._blockChildren;\n    /** @type {?} */\n    _Visitor.prototype._blockStartDepth;\n    /** @type {?} */\n    _Visitor.prototype._inIcu;\n    /** @type {?} */\n    _Visitor.prototype._msgCountAtSectionStart;\n    /** @type {?} */\n    _Visitor.prototype._errors;\n    /** @type {?} */\n    _Visitor.prototype._mode;\n    /** @type {?} */\n    _Visitor.prototype._messages;\n    /** @type {?} */\n    _Visitor.prototype._translations;\n    /** @type {?} */\n    _Visitor.prototype._createI18nMessage;\n    /** @type {?} */\n    _Visitor.prototype._implicitTags;\n    /** @type {?} */\n    _Visitor.prototype._implicitAttrs;\n}\n/**\n * @param {?} n\n * @return {?}\n */\nfunction _isOpeningComment(n) {\n    return !!(n instanceof html.Comment && n.value && n.value.startsWith('i18n'));\n}\n/**\n * @param {?} n\n * @return {?}\n */\nfunction _isClosingComment(n) {\n    return !!(n instanceof html.Comment && n.value && n.value === '/i18n');\n}\n/**\n * @param {?} p\n * @return {?}\n */\nfunction _getI18nAttr(p) {\n    return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;\n}\n/**\n * @param {?=} i18n\n * @return {?}\n */\nfunction _parseMessageMeta(i18n) {\n    if (!i18n)\n        return { meaning: '', description: '', id: '' };\n    var /** @type {?} */ idIndex = i18n.indexOf(ID_SEPARATOR);\n    var /** @type {?} */ descIndex = i18n.indexOf(MEANING_SEPARATOR);\n    var _a = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''], meaningAndDesc = _a[0], id = _a[1];\n    var _b = (descIndex > -1) ?\n        [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n        ['', meaningAndDesc], meaning = _b[0], description = _b[1];\n    return { meaning: meaning, description: description, id: id };\n}\n//# sourceMappingURL=extractor_merger.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { TagContentType } from './tags';\nvar XmlTagDefinition = /** @class */ (function () {\n    function XmlTagDefinition() {\n        this.closedByParent = false;\n        this.contentType = TagContentType.PARSABLE_DATA;\n        this.isVoid = false;\n        this.ignoreFirstLf = false;\n        this.canSelfClose = true;\n    }\n    /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n    XmlTagDefinition.prototype.requireExtraParent = /**\n     * @param {?} currentParent\n     * @return {?}\n     */\n    function (currentParent) { return false; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    XmlTagDefinition.prototype.isClosedByChild = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return false; };\n    return XmlTagDefinition;\n}());\nexport { XmlTagDefinition };\nfunction XmlTagDefinition_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XmlTagDefinition.prototype.closedByParent;\n    /** @type {?} */\n    XmlTagDefinition.prototype.requiredParents;\n    /** @type {?} */\n    XmlTagDefinition.prototype.parentToAdd;\n    /** @type {?} */\n    XmlTagDefinition.prototype.implicitNamespacePrefix;\n    /** @type {?} */\n    XmlTagDefinition.prototype.contentType;\n    /** @type {?} */\n    XmlTagDefinition.prototype.isVoid;\n    /** @type {?} */\n    XmlTagDefinition.prototype.ignoreFirstLf;\n    /** @type {?} */\n    XmlTagDefinition.prototype.canSelfClose;\n}\nvar /** @type {?} */ _TAG_DEFINITION = new XmlTagDefinition();\n/**\n * @param {?} tagName\n * @return {?}\n */\nexport function getXmlTagDefinition(tagName) {\n    return _TAG_DEFINITION;\n}\n//# sourceMappingURL=xml_tags.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { Parser } from './parser';\nimport { getXmlTagDefinition } from './xml_tags';\nexport { ParseTreeResult, TreeError } from './parser';\nvar XmlParser = /** @class */ (function (_super) {\n    tslib_1.__extends(XmlParser, _super);\n    function XmlParser() {\n        return _super.call(this, getXmlTagDefinition) || this;\n    }\n    /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @return {?}\n     */\n    XmlParser.prototype.parse = /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @return {?}\n     */\n    function (source, url, parseExpansionForms) {\n        if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n        return _super.prototype.parse.call(this, source, url, parseExpansionForms);\n    };\n    return XmlParser;\n}(Parser));\nexport { XmlParser };\n//# sourceMappingURL=xml_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as i18n from '../i18n_ast';\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nSerializer = /** @class */ (function () {\n    function Serializer() {\n    }\n    // Creates a name mapper, see `PlaceholderMapper`\n    // Returning `null` means that no name mapping is used.\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Serializer.prototype.createNameMapper = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) { return null; };\n    return Serializer;\n}());\n/**\n * @abstract\n */\nexport { Serializer };\nfunction Serializer_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    Serializer.prototype.write = function (messages, locale) { };\n    /**\n     * @abstract\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    Serializer.prototype.load = function (content, url) { };\n    /**\n     * @abstract\n     * @param {?} message\n     * @return {?}\n     */\n    Serializer.prototype.digest = function (message) { };\n}\n/**\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\n * back.\n *\n * It should be used for serialization format that put constraints on the placeholder names.\n * @record\n */\nexport function PlaceholderMapper() { }\nfunction PlaceholderMapper_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PlaceholderMapper.prototype.toPublicName;\n    /** @type {?} */\n    PlaceholderMapper.prototype.toInternalName;\n}\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nvar /**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nSimplePlaceholderMapper = /** @class */ (function (_super) {\n    tslib_1.__extends(SimplePlaceholderMapper, _super);\n    // create a mapping from the message\n    function SimplePlaceholderMapper(message, mapName) {\n        var _this = _super.call(this) || this;\n        _this.mapName = mapName;\n        _this.internalToPublic = {};\n        _this.publicToNextId = {};\n        _this.publicToInternal = {};\n        message.nodes.forEach(function (node) { return node.visit(_this); });\n        return _this;\n    }\n    /**\n     * @param {?} internalName\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.toPublicName = /**\n     * @param {?} internalName\n     * @return {?}\n     */\n    function (internalName) {\n        return this.internalToPublic.hasOwnProperty(internalName) ?\n            this.internalToPublic[internalName] :\n            null;\n    };\n    /**\n     * @param {?} publicName\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.toInternalName = /**\n     * @param {?} publicName\n     * @return {?}\n     */\n    function (publicName) {\n        return this.publicToInternal.hasOwnProperty(publicName) ? this.publicToInternal[publicName] :\n            null;\n    };\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { return null; };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        this.visitPlaceholderName(ph.startName);\n        _super.prototype.visitTagPlaceholder.call(this, ph, context);\n        this.visitPlaceholderName(ph.closeName);\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) { this.visitPlaceholderName(ph.name); };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        this.visitPlaceholderName(ph.name);\n    };\n    /**\n     * @param {?} internalName\n     * @return {?}\n     */\n    SimplePlaceholderMapper.prototype.visitPlaceholderName = /**\n     * @param {?} internalName\n     * @return {?}\n     */\n    function (internalName) {\n        if (!internalName || this.internalToPublic.hasOwnProperty(internalName)) {\n            return;\n        }\n        var /** @type {?} */ publicName = this.mapName(internalName);\n        if (this.publicToInternal.hasOwnProperty(publicName)) {\n            // Create a new XMB when it has already been used\n            var /** @type {?} */ nextId = this.publicToNextId[publicName];\n            this.publicToNextId[publicName] = nextId + 1;\n            publicName = publicName + \"_\" + nextId;\n        }\n        else {\n            this.publicToNextId[publicName] = 1;\n        }\n        this.internalToPublic[internalName] = publicName;\n        this.publicToInternal[publicName] = internalName;\n    };\n    return SimplePlaceholderMapper;\n}(i18n.RecurseVisitor));\n/**\n * A simple mapper that take a function to transform an internal name to a public name\n */\nexport { SimplePlaceholderMapper };\nfunction SimplePlaceholderMapper_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SimplePlaceholderMapper.prototype.internalToPublic;\n    /** @type {?} */\n    SimplePlaceholderMapper.prototype.publicToNextId;\n    /** @type {?} */\n    SimplePlaceholderMapper.prototype.publicToInternal;\n    /** @type {?} */\n    SimplePlaceholderMapper.prototype.mapName;\n}\n//# sourceMappingURL=serializer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/**\n * @record\n */\nexport function IVisitor() { }\nfunction IVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IVisitor.prototype.visitTag;\n    /** @type {?} */\n    IVisitor.prototype.visitText;\n    /** @type {?} */\n    IVisitor.prototype.visitDeclaration;\n    /** @type {?} */\n    IVisitor.prototype.visitDoctype;\n}\nvar _Visitor = /** @class */ (function () {\n    function _Visitor() {\n    }\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    _Visitor.prototype.visitTag = /**\n     * @param {?} tag\n     * @return {?}\n     */\n    function (tag) {\n        var _this = this;\n        var /** @type {?} */ strAttrs = this._serializeAttributes(tag.attrs);\n        if (tag.children.length == 0) {\n            return \"<\" + tag.name + strAttrs + \"/>\";\n        }\n        var /** @type {?} */ strChildren = tag.children.map(function (node) { return node.visit(_this); });\n        return \"<\" + tag.name + strAttrs + \">\" + strChildren.join('') + \"</\" + tag.name + \">\";\n    };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    _Visitor.prototype.visitText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { return text.value; };\n    /**\n     * @param {?} decl\n     * @return {?}\n     */\n    _Visitor.prototype.visitDeclaration = /**\n     * @param {?} decl\n     * @return {?}\n     */\n    function (decl) {\n        return \"<?xml\" + this._serializeAttributes(decl.attrs) + \" ?>\";\n    };\n    /**\n     * @param {?} attrs\n     * @return {?}\n     */\n    _Visitor.prototype._serializeAttributes = /**\n     * @param {?} attrs\n     * @return {?}\n     */\n    function (attrs) {\n        var /** @type {?} */ strAttrs = Object.keys(attrs).map(function (name) { return name + \"=\\\"\" + attrs[name] + \"\\\"\"; }).join(' ');\n        return strAttrs.length > 0 ? ' ' + strAttrs : '';\n    };\n    /**\n     * @param {?} doctype\n     * @return {?}\n     */\n    _Visitor.prototype.visitDoctype = /**\n     * @param {?} doctype\n     * @return {?}\n     */\n    function (doctype) {\n        return \"<!DOCTYPE \" + doctype.rootTag + \" [\\n\" + doctype.dtd + \"\\n]>\";\n    };\n    return _Visitor;\n}());\nvar /** @type {?} */ _visitor = new _Visitor();\n/**\n * @param {?} nodes\n * @return {?}\n */\nexport function serialize(nodes) {\n    return nodes.map(function (node) { return node.visit(_visitor); }).join('');\n}\n/**\n * @record\n */\nexport function Node() { }\nfunction Node_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Node.prototype.visit;\n}\nvar Declaration = /** @class */ (function () {\n    function Declaration(unescapedAttrs) {\n        var _this = this;\n        this.attrs = {};\n        Object.keys(unescapedAttrs).forEach(function (k) {\n            _this.attrs[k] = escapeXml(unescapedAttrs[k]);\n        });\n    }\n    /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    Declaration.prototype.visit = /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitDeclaration(this); };\n    return Declaration;\n}());\nexport { Declaration };\nfunction Declaration_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Declaration.prototype.attrs;\n}\nvar Doctype = /** @class */ (function () {\n    function Doctype(rootTag, dtd) {\n        this.rootTag = rootTag;\n        this.dtd = dtd;\n    }\n    /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    Doctype.prototype.visit = /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitDoctype(this); };\n    return Doctype;\n}());\nexport { Doctype };\nfunction Doctype_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Doctype.prototype.rootTag;\n    /** @type {?} */\n    Doctype.prototype.dtd;\n}\nvar Tag = /** @class */ (function () {\n    function Tag(name, unescapedAttrs, children) {\n        if (unescapedAttrs === void 0) { unescapedAttrs = {}; }\n        if (children === void 0) { children = []; }\n        var _this = this;\n        this.name = name;\n        this.children = children;\n        this.attrs = {};\n        Object.keys(unescapedAttrs).forEach(function (k) {\n            _this.attrs[k] = escapeXml(unescapedAttrs[k]);\n        });\n    }\n    /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    Tag.prototype.visit = /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitTag(this); };\n    return Tag;\n}());\nexport { Tag };\nfunction Tag_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Tag.prototype.attrs;\n    /** @type {?} */\n    Tag.prototype.name;\n    /** @type {?} */\n    Tag.prototype.children;\n}\nvar Text = /** @class */ (function () {\n    function Text(unescapedValue) {\n        this.value = escapeXml(unescapedValue);\n    }\n    /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    Text.prototype.visit = /**\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitText(this); };\n    return Text;\n}());\nexport { Text };\nfunction Text_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Text.prototype.value;\n}\nvar CR = /** @class */ (function (_super) {\n    tslib_1.__extends(CR, _super);\n    function CR(ws) {\n        if (ws === void 0) { ws = 0; }\n        return _super.call(this, \"\\n\" + new Array(ws + 1).join(' ')) || this;\n    }\n    return CR;\n}(Text));\nexport { CR };\nvar /** @type {?} */ _ESCAPED_CHARS = [\n    [/&/g, '&amp;'],\n    [/\"/g, '&quot;'],\n    [/'/g, '&apos;'],\n    [/</g, '&lt;'],\n    [/>/g, '&gt;'],\n];\n/**\n * @param {?} text\n * @return {?}\n */\nexport function escapeXml(text) {\n    return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);\n}\n//# sourceMappingURL=xml_helper.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as ml from '../../ml_parser/ast';\nimport { XmlParser } from '../../ml_parser/xml_parser';\nimport { digest } from '../digest';\nimport * as i18n from '../i18n_ast';\nimport { I18nError } from '../parse_util';\nimport { Serializer } from './serializer';\nimport * as xml from './xml_helper';\nvar /** @type {?} */ _VERSION = '1.2';\nvar /** @type {?} */ _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';\n// TODO(vicb): make this a param (s/_/-/)\nvar /** @type {?} */ _DEFAULT_SOURCE_LANG = 'en';\nvar /** @type {?} */ _PLACEHOLDER_TAG = 'x';\nvar /** @type {?} */ _MARKER_TAG = 'mrk';\nvar /** @type {?} */ _FILE_TAG = 'file';\nvar /** @type {?} */ _SOURCE_TAG = 'source';\nvar /** @type {?} */ _SEGMENT_SOURCE_TAG = 'seg-source';\nvar /** @type {?} */ _TARGET_TAG = 'target';\nvar /** @type {?} */ _UNIT_TAG = 'trans-unit';\nvar /** @type {?} */ _CONTEXT_GROUP_TAG = 'context-group';\nvar /** @type {?} */ _CONTEXT_TAG = 'context';\nvar Xliff = /** @class */ (function (_super) {\n    tslib_1.__extends(Xliff, _super);\n    function Xliff() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    Xliff.prototype.write = /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    function (messages, locale) {\n        var /** @type {?} */ visitor = new _WriteVisitor();\n        var /** @type {?} */ transUnits = [];\n        messages.forEach(function (message) {\n            var /** @type {?} */ contextTags = [];\n            message.sources.forEach(function (source) {\n                var /** @type {?} */ contextGroupTag = new xml.Tag(_CONTEXT_GROUP_TAG, { purpose: 'location' });\n                contextGroupTag.children.push(new xml.CR(10), new xml.Tag(_CONTEXT_TAG, { 'context-type': 'sourcefile' }, [new xml.Text(source.filePath)]), new xml.CR(10), new xml.Tag(_CONTEXT_TAG, { 'context-type': 'linenumber' }, [new xml.Text(\"\" + source.startLine)]), new xml.CR(8));\n                contextTags.push(new xml.CR(8), contextGroupTag);\n            });\n            var /** @type {?} */ transUnit = new xml.Tag(_UNIT_TAG, { id: message.id, datatype: 'html' });\n            (_a = transUnit.children).push.apply(_a, [new xml.CR(8), new xml.Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes))].concat(contextTags));\n            if (message.description) {\n                transUnit.children.push(new xml.CR(8), new xml.Tag('note', { priority: '1', from: 'description' }, [new xml.Text(message.description)]));\n            }\n            if (message.meaning) {\n                transUnit.children.push(new xml.CR(8), new xml.Tag('note', { priority: '1', from: 'meaning' }, [new xml.Text(message.meaning)]));\n            }\n            transUnit.children.push(new xml.CR(6));\n            transUnits.push(new xml.CR(6), transUnit);\n            var _a;\n        });\n        var /** @type {?} */ body = new xml.Tag('body', {}, transUnits.concat([new xml.CR(4)]));\n        var /** @type {?} */ file = new xml.Tag('file', {\n            'source-language': locale || _DEFAULT_SOURCE_LANG,\n            datatype: 'plaintext',\n            original: 'ng2.template',\n        }, [new xml.CR(4), body, new xml.CR(2)]);\n        var /** @type {?} */ xliff = new xml.Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new xml.CR(2), file, new xml.CR()]);\n        return xml.serialize([\n            new xml.Declaration({ version: '1.0', encoding: 'UTF-8' }), new xml.CR(), xliff, new xml.CR()\n        ]);\n    };\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    Xliff.prototype.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    function (content, url) {\n        // xliff to xml nodes\n        var /** @type {?} */ xliffParser = new XliffParser();\n        var _a = xliffParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;\n        // xml nodes to i18n nodes\n        var /** @type {?} */ i18nNodesByMsgId = {};\n        var /** @type {?} */ converter = new XmlToI18n();\n        Object.keys(msgIdToHtml).forEach(function (msgId) {\n            var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, e = _a.errors;\n            errors.push.apply(errors, e);\n            i18nNodesByMsgId[msgId] = i18nNodes;\n        });\n        if (errors.length) {\n            throw new Error(\"xliff parse errors:\\n\" + errors.join('\\n'));\n        }\n        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId: i18nNodesByMsgId };\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xliff.prototype.digest = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) { return digest(message); };\n    return Xliff;\n}(Serializer));\nexport { Xliff };\nvar _WriteVisitor = /** @class */ (function () {\n    function _WriteVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { return [new xml.Text(text.value)]; };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [];\n        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });\n        return nodes;\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [new xml.Text(\"{\" + icu.expressionPlaceholder + \", \" + icu.type + \", \")];\n        Object.keys(icu.cases).forEach(function (c) {\n            nodes.push.apply(nodes, [new xml.Text(c + \" {\")].concat(icu.cases[c].visit(_this), [new xml.Text(\"} \")]));\n        });\n        nodes.push(new xml.Text(\"}\"));\n        return nodes;\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ ctype = getCtypeForTag(ph.tag);\n        if (ph.isVoid) {\n            // void tags have no children nor closing tags\n            return [new xml.Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype, 'equiv-text': \"<\" + ph.tag + \"/>\" })];\n        }\n        var /** @type {?} */ startTagPh = new xml.Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype, 'equiv-text': \"<\" + ph.tag + \">\" });\n        var /** @type {?} */ closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype, 'equiv-text': \"</\" + ph.tag + \">\" });\n        return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        return [new xml.Tag(_PLACEHOLDER_TAG, { id: ph.name, 'equiv-text': \"{{\" + ph.value + \"}}\" })];\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ equivText = \"{\" + ph.value.expression + \", \" + ph.value.type + \", \" + Object.keys(ph.value.cases).map(function (value) { return value + ' {...}'; }).join(' ') + \"}\";\n        return [new xml.Tag(_PLACEHOLDER_TAG, { id: ph.name, 'equiv-text': equivText })];\n    };\n    /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    _WriteVisitor.prototype.serialize = /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (nodes) {\n        var _this = this;\n        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));\n    };\n    return _WriteVisitor;\n}());\nvar XliffParser = /** @class */ (function () {\n    function XliffParser() {\n        this._locale = null;\n    }\n    /**\n     * @param {?} xliff\n     * @param {?} url\n     * @return {?}\n     */\n    XliffParser.prototype.parse = /**\n     * @param {?} xliff\n     * @param {?} url\n     * @return {?}\n     */\n    function (xliff, url) {\n        this._unitMlString = null;\n        this._msgIdToHtml = {};\n        var /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);\n        this._errors = xml.errors;\n        ml.visitAll(this, xml.rootNodes, null);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    };\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    function (element, context) {\n        switch (element.name) {\n            case _UNIT_TAG:\n                this._unitMlString = /** @type {?} */ ((null));\n                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                if (!idAttr) {\n                    this._addError(element, \"<\" + _UNIT_TAG + \"> misses the \\\"id\\\" attribute\");\n                }\n                else {\n                    var /** @type {?} */ id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, \"Duplicated translations for msg \" + id);\n                    }\n                    else {\n                        ml.visitAll(this, element.children, null);\n                        if (typeof this._unitMlString === 'string') {\n                            this._msgIdToHtml[id] = this._unitMlString;\n                        }\n                        else {\n                            this._addError(element, \"Message \" + id + \" misses a translation\");\n                        }\n                    }\n                }\n                break;\n            // ignore those tags\n            case _SOURCE_TAG:\n            case _SEGMENT_SOURCE_TAG:\n                break;\n            case _TARGET_TAG:\n                var /** @type {?} */ innerTextStart = /** @type {?} */ ((element.startSourceSpan)).end.offset;\n                var /** @type {?} */ innerTextEnd = /** @type {?} */ ((element.endSourceSpan)).start.offset;\n                var /** @type {?} */ content = /** @type {?} */ ((element.startSourceSpan)).start.file.content;\n                var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);\n                this._unitMlString = innerText;\n                break;\n            case _FILE_TAG:\n                var /** @type {?} */ localeAttr = element.attrs.find(function (attr) { return attr.name === 'target-language'; });\n                if (localeAttr) {\n                    this._locale = localeAttr.value;\n                }\n                ml.visitAll(this, element.children, null);\n                break;\n            default:\n                // TODO(vicb): assert file structure, xliff version\n                // For now only recurse on unhandled nodes\n                ml.visitAll(this, element.children, null);\n        }\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    XliffParser.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XliffParser.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n    };\n    return XliffParser;\n}());\nfunction XliffParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XliffParser.prototype._unitMlString;\n    /** @type {?} */\n    XliffParser.prototype._errors;\n    /** @type {?} */\n    XliffParser.prototype._msgIdToHtml;\n    /** @type {?} */\n    XliffParser.prototype._locale;\n}\nvar XmlToI18n = /** @class */ (function () {\n    function XmlToI18n() {\n    }\n    /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    XmlToI18n.prototype.convert = /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    function (message, url) {\n        var /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);\n        this._errors = xmlIcu.errors;\n        var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] : [].concat.apply([], ml.visitAll(this, xmlIcu.rootNodes));\n        return {\n            i18nNodes: i18nNodes,\n            errors: this._errors,\n        };\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { return new i18n.Text(text.value, /** @type {?} */ ((text.sourceSpan))); };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    function (el, context) {\n        if (el.name === _PLACEHOLDER_TAG) {\n            var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'id'; });\n            if (nameAttr) {\n                return new i18n.Placeholder('', nameAttr.value, /** @type {?} */ ((el.sourceSpan)));\n            }\n            this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"id\\\" attribute\");\n            return null;\n        }\n        if (el.name === _MARKER_TAG) {\n            return [].concat.apply([], ml.visitAll(this, el.children));\n        }\n        this._addError(el, \"Unexpected tag\");\n        return null;\n    };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var /** @type {?} */ caseMap = {};\n        ml.visitAll(this, icu.cases).forEach(function (c) {\n            caseMap[c.value] = new i18n.Container(c.nodes, icu.sourceSpan);\n        });\n        return new i18n.Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: ml.visitAll(this, icuCase.expression),\n        };\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n    };\n    return XmlToI18n;\n}());\nfunction XmlToI18n_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XmlToI18n.prototype._errors;\n}\n/**\n * @param {?} tag\n * @return {?}\n */\nfunction getCtypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n        case 'br':\n            return 'lb';\n        case 'img':\n            return 'image';\n        default:\n            return \"x-\" + tag;\n    }\n}\n//# sourceMappingURL=xliff.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as ml from '../../ml_parser/ast';\nimport { XmlParser } from '../../ml_parser/xml_parser';\nimport { decimalDigest } from '../digest';\nimport * as i18n from '../i18n_ast';\nimport { I18nError } from '../parse_util';\nimport { Serializer } from './serializer';\nimport * as xml from './xml_helper';\nvar /** @type {?} */ _VERSION = '2.0';\nvar /** @type {?} */ _XMLNS = 'urn:oasis:names:tc:xliff:document:2.0';\n// TODO(vicb): make this a param (s/_/-/)\nvar /** @type {?} */ _DEFAULT_SOURCE_LANG = 'en';\nvar /** @type {?} */ _PLACEHOLDER_TAG = 'ph';\nvar /** @type {?} */ _PLACEHOLDER_SPANNING_TAG = 'pc';\nvar /** @type {?} */ _MARKER_TAG = 'mrk';\nvar /** @type {?} */ _XLIFF_TAG = 'xliff';\nvar /** @type {?} */ _SOURCE_TAG = 'source';\nvar /** @type {?} */ _TARGET_TAG = 'target';\nvar /** @type {?} */ _UNIT_TAG = 'unit';\nvar Xliff2 = /** @class */ (function (_super) {\n    tslib_1.__extends(Xliff2, _super);\n    function Xliff2() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    Xliff2.prototype.write = /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    function (messages, locale) {\n        var /** @type {?} */ visitor = new _WriteVisitor();\n        var /** @type {?} */ units = [];\n        messages.forEach(function (message) {\n            var /** @type {?} */ unit = new xml.Tag(_UNIT_TAG, { id: message.id });\n            var /** @type {?} */ notes = new xml.Tag('notes');\n            if (message.description || message.meaning) {\n                if (message.description) {\n                    notes.children.push(new xml.CR(8), new xml.Tag('note', { category: 'description' }, [new xml.Text(message.description)]));\n                }\n                if (message.meaning) {\n                    notes.children.push(new xml.CR(8), new xml.Tag('note', { category: 'meaning' }, [new xml.Text(message.meaning)]));\n                }\n            }\n            message.sources.forEach(function (source) {\n                notes.children.push(new xml.CR(8), new xml.Tag('note', { category: 'location' }, [\n                    new xml.Text(source.filePath + \":\" + source.startLine + (source.endLine !== source.startLine ? ',' + source.endLine : ''))\n                ]));\n            });\n            notes.children.push(new xml.CR(6));\n            unit.children.push(new xml.CR(6), notes);\n            var /** @type {?} */ segment = new xml.Tag('segment');\n            segment.children.push(new xml.CR(8), new xml.Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new xml.CR(6));\n            unit.children.push(new xml.CR(6), segment, new xml.CR(4));\n            units.push(new xml.CR(4), unit);\n        });\n        var /** @type {?} */ file = new xml.Tag('file', { 'original': 'ng.template', id: 'ngi18n' }, units.concat([new xml.CR(2)]));\n        var /** @type {?} */ xliff = new xml.Tag(_XLIFF_TAG, { version: _VERSION, xmlns: _XMLNS, srcLang: locale || _DEFAULT_SOURCE_LANG }, [new xml.CR(2), file, new xml.CR()]);\n        return xml.serialize([\n            new xml.Declaration({ version: '1.0', encoding: 'UTF-8' }), new xml.CR(), xliff, new xml.CR()\n        ]);\n    };\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    Xliff2.prototype.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    function (content, url) {\n        // xliff to xml nodes\n        var /** @type {?} */ xliff2Parser = new Xliff2Parser();\n        var _a = xliff2Parser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;\n        // xml nodes to i18n nodes\n        var /** @type {?} */ i18nNodesByMsgId = {};\n        var /** @type {?} */ converter = new XmlToI18n();\n        Object.keys(msgIdToHtml).forEach(function (msgId) {\n            var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, e = _a.errors;\n            errors.push.apply(errors, e);\n            i18nNodesByMsgId[msgId] = i18nNodes;\n        });\n        if (errors.length) {\n            throw new Error(\"xliff2 parse errors:\\n\" + errors.join('\\n'));\n        }\n        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId: i18nNodesByMsgId };\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xliff2.prototype.digest = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) { return decimalDigest(message); };\n    return Xliff2;\n}(Serializer));\nexport { Xliff2 };\nvar _WriteVisitor = /** @class */ (function () {\n    function _WriteVisitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { return [new xml.Text(text.value)]; };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [];\n        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });\n        return nodes;\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [new xml.Text(\"{\" + icu.expressionPlaceholder + \", \" + icu.type + \", \")];\n        Object.keys(icu.cases).forEach(function (c) {\n            nodes.push.apply(nodes, [new xml.Text(c + \" {\")].concat(icu.cases[c].visit(_this), [new xml.Text(\"} \")]));\n        });\n        nodes.push(new xml.Text(\"}\"));\n        return nodes;\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var _this = this;\n        var /** @type {?} */ type = getTypeForTag(ph.tag);\n        if (ph.isVoid) {\n            var /** @type {?} */ tagPh = new xml.Tag(_PLACEHOLDER_TAG, {\n                id: (this._nextPlaceholderId++).toString(),\n                equiv: ph.startName,\n                type: type,\n                disp: \"<\" + ph.tag + \"/>\",\n            });\n            return [tagPh];\n        }\n        var /** @type {?} */ tagPc = new xml.Tag(_PLACEHOLDER_SPANNING_TAG, {\n            id: (this._nextPlaceholderId++).toString(),\n            equivStart: ph.startName,\n            equivEnd: ph.closeName,\n            type: type,\n            dispStart: \"<\" + ph.tag + \">\",\n            dispEnd: \"</\" + ph.tag + \">\",\n        });\n        var /** @type {?} */ nodes = [].concat.apply([], ph.children.map(function (node) { return node.visit(_this); }));\n        if (nodes.length) {\n            nodes.forEach(function (node) { return tagPc.children.push(node); });\n        }\n        else {\n            tagPc.children.push(new xml.Text(''));\n        }\n        return [tagPc];\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ idStr = (this._nextPlaceholderId++).toString();\n        return [new xml.Tag(_PLACEHOLDER_TAG, {\n                id: idStr,\n                equiv: ph.name,\n                disp: \"{{\" + ph.value + \"}}\",\n            })];\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _WriteVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ cases = Object.keys(ph.value.cases).map(function (value) { return value + ' {...}'; }).join(' ');\n        var /** @type {?} */ idStr = (this._nextPlaceholderId++).toString();\n        return [new xml.Tag(_PLACEHOLDER_TAG, { id: idStr, equiv: ph.name, disp: \"{\" + ph.value.expression + \", \" + ph.value.type + \", \" + cases + \"}\" })];\n    };\n    /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    _WriteVisitor.prototype.serialize = /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (nodes) {\n        var _this = this;\n        this._nextPlaceholderId = 0;\n        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));\n    };\n    return _WriteVisitor;\n}());\nfunction _WriteVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _WriteVisitor.prototype._nextPlaceholderId;\n}\nvar Xliff2Parser = /** @class */ (function () {\n    function Xliff2Parser() {\n        this._locale = null;\n    }\n    /**\n     * @param {?} xliff\n     * @param {?} url\n     * @return {?}\n     */\n    Xliff2Parser.prototype.parse = /**\n     * @param {?} xliff\n     * @param {?} url\n     * @return {?}\n     */\n    function (xliff, url) {\n        this._unitMlString = null;\n        this._msgIdToHtml = {};\n        var /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);\n        this._errors = xml.errors;\n        ml.visitAll(this, xml.rootNodes, null);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    };\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    function (element, context) {\n        switch (element.name) {\n            case _UNIT_TAG:\n                this._unitMlString = null;\n                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                if (!idAttr) {\n                    this._addError(element, \"<\" + _UNIT_TAG + \"> misses the \\\"id\\\" attribute\");\n                }\n                else {\n                    var /** @type {?} */ id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, \"Duplicated translations for msg \" + id);\n                    }\n                    else {\n                        ml.visitAll(this, element.children, null);\n                        if (typeof this._unitMlString === 'string') {\n                            this._msgIdToHtml[id] = this._unitMlString;\n                        }\n                        else {\n                            this._addError(element, \"Message \" + id + \" misses a translation\");\n                        }\n                    }\n                }\n                break;\n            case _SOURCE_TAG:\n                // ignore source message\n                break;\n            case _TARGET_TAG:\n                var /** @type {?} */ innerTextStart = /** @type {?} */ ((element.startSourceSpan)).end.offset;\n                var /** @type {?} */ innerTextEnd = /** @type {?} */ ((element.endSourceSpan)).start.offset;\n                var /** @type {?} */ content = /** @type {?} */ ((element.startSourceSpan)).start.file.content;\n                var /** @type {?} */ innerText = content.slice(innerTextStart, innerTextEnd);\n                this._unitMlString = innerText;\n                break;\n            case _XLIFF_TAG:\n                var /** @type {?} */ localeAttr = element.attrs.find(function (attr) { return attr.name === 'trgLang'; });\n                if (localeAttr) {\n                    this._locale = localeAttr.value;\n                }\n                var /** @type {?} */ versionAttr = element.attrs.find(function (attr) { return attr.name === 'version'; });\n                if (versionAttr) {\n                    var /** @type {?} */ version = versionAttr.value;\n                    if (version !== '2.0') {\n                        this._addError(element, \"The XLIFF file version \" + version + \" is not compatible with XLIFF 2.0 serializer\");\n                    }\n                    else {\n                        ml.visitAll(this, element.children, null);\n                    }\n                }\n                break;\n            default:\n                ml.visitAll(this, element.children, null);\n        }\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    Xliff2Parser.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    Xliff2Parser.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    };\n    return Xliff2Parser;\n}());\nfunction Xliff2Parser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Xliff2Parser.prototype._unitMlString;\n    /** @type {?} */\n    Xliff2Parser.prototype._errors;\n    /** @type {?} */\n    Xliff2Parser.prototype._msgIdToHtml;\n    /** @type {?} */\n    Xliff2Parser.prototype._locale;\n}\nvar XmlToI18n = /** @class */ (function () {\n    function XmlToI18n() {\n    }\n    /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    XmlToI18n.prototype.convert = /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    function (message, url) {\n        var /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);\n        this._errors = xmlIcu.errors;\n        var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] : [].concat.apply([], ml.visitAll(this, xmlIcu.rootNodes));\n        return {\n            i18nNodes: i18nNodes,\n            errors: this._errors,\n        };\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { return new i18n.Text(text.value, text.sourceSpan); };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    function (el, context) {\n        var _this = this;\n        switch (el.name) {\n            case _PLACEHOLDER_TAG:\n                var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'equiv'; });\n                if (nameAttr) {\n                    return [new i18n.Placeholder('', nameAttr.value, el.sourceSpan)];\n                }\n                this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"equiv\\\" attribute\");\n                break;\n            case _PLACEHOLDER_SPANNING_TAG:\n                var /** @type {?} */ startAttr = el.attrs.find(function (attr) { return attr.name === 'equivStart'; });\n                var /** @type {?} */ endAttr = el.attrs.find(function (attr) { return attr.name === 'equivEnd'; });\n                if (!startAttr) {\n                    this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"equivStart\\\" attribute\");\n                }\n                else if (!endAttr) {\n                    this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"equivEnd\\\" attribute\");\n                }\n                else {\n                    var /** @type {?} */ startId = startAttr.value;\n                    var /** @type {?} */ endId = endAttr.value;\n                    var /** @type {?} */ nodes = [];\n                    return nodes.concat.apply(nodes, [new i18n.Placeholder('', startId, el.sourceSpan)].concat(el.children.map(function (node) { return node.visit(_this, null); }), [new i18n.Placeholder('', endId, el.sourceSpan)]));\n                }\n                break;\n            case _MARKER_TAG:\n                return [].concat.apply([], ml.visitAll(this, el.children));\n            default:\n                this._addError(el, \"Unexpected tag\");\n        }\n        return null;\n    };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var /** @type {?} */ caseMap = {};\n        ml.visitAll(this, icu.cases).forEach(function (c) {\n            caseMap[c.value] = new i18n.Container(c.nodes, icu.sourceSpan);\n        });\n        return new i18n.Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: [].concat.apply([], ml.visitAll(this, icuCase.expression)),\n        };\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(node.sourceSpan, message));\n    };\n    return XmlToI18n;\n}());\nfunction XmlToI18n_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XmlToI18n.prototype._errors;\n}\n/**\n * @param {?} tag\n * @return {?}\n */\nfunction getTypeForTag(tag) {\n    switch (tag.toLowerCase()) {\n        case 'br':\n        case 'b':\n        case 'i':\n        case 'u':\n            return 'fmt';\n        case 'img':\n            return 'image';\n        case 'a':\n            return 'link';\n        default:\n            return 'other';\n    }\n}\n//# sourceMappingURL=xliff2.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { decimalDigest } from '../digest';\nimport { Serializer, SimplePlaceholderMapper } from './serializer';\nimport * as xml from './xml_helper';\nvar /** @type {?} */ _MESSAGES_TAG = 'messagebundle';\nvar /** @type {?} */ _MESSAGE_TAG = 'msg';\nvar /** @type {?} */ _PLACEHOLDER_TAG = 'ph';\nvar /** @type {?} */ _EXEMPLE_TAG = 'ex';\nvar /** @type {?} */ _SOURCE_TAG = 'source';\nvar /** @type {?} */ _DOCTYPE = \"<!ELEMENT messagebundle (msg)*>\\n<!ATTLIST messagebundle class CDATA #IMPLIED>\\n\\n<!ELEMENT msg (#PCDATA|ph|source)*>\\n<!ATTLIST msg id CDATA #IMPLIED>\\n<!ATTLIST msg seq CDATA #IMPLIED>\\n<!ATTLIST msg name CDATA #IMPLIED>\\n<!ATTLIST msg desc CDATA #IMPLIED>\\n<!ATTLIST msg meaning CDATA #IMPLIED>\\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\\n<!ATTLIST msg xml:space (default|preserve) \\\"default\\\">\\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\\n\\n<!ELEMENT source (#PCDATA)>\\n\\n<!ELEMENT ph (#PCDATA|ex)*>\\n<!ATTLIST ph name CDATA #REQUIRED>\\n\\n<!ELEMENT ex (#PCDATA)>\";\nvar Xmb = /** @class */ (function (_super) {\n    tslib_1.__extends(Xmb, _super);\n    function Xmb() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    Xmb.prototype.write = /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    function (messages, locale) {\n        var /** @type {?} */ exampleVisitor = new ExampleVisitor();\n        var /** @type {?} */ visitor = new _Visitor();\n        var /** @type {?} */ rootNode = new xml.Tag(_MESSAGES_TAG);\n        messages.forEach(function (message) {\n            var /** @type {?} */ attrs = { id: message.id };\n            if (message.description) {\n                attrs['desc'] = message.description;\n            }\n            if (message.meaning) {\n                attrs['meaning'] = message.meaning;\n            }\n            var /** @type {?} */ sourceTags = [];\n            message.sources.forEach(function (source) {\n                sourceTags.push(new xml.Tag(_SOURCE_TAG, {}, [\n                    new xml.Text(source.filePath + \":\" + source.startLine + (source.endLine !== source.startLine ? ',' + source.endLine : ''))\n                ]));\n            });\n            rootNode.children.push(new xml.CR(2), new xml.Tag(_MESSAGE_TAG, attrs, sourceTags.concat(visitor.serialize(message.nodes))));\n        });\n        rootNode.children.push(new xml.CR());\n        return xml.serialize([\n            new xml.Declaration({ version: '1.0', encoding: 'UTF-8' }),\n            new xml.CR(),\n            new xml.Doctype(_MESSAGES_TAG, _DOCTYPE),\n            new xml.CR(),\n            exampleVisitor.addDefaultExamples(rootNode),\n            new xml.CR(),\n        ]);\n    };\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    Xmb.prototype.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    function (content, url) {\n        throw new Error('Unsupported');\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xmb.prototype.digest = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) { return digest(message); };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xmb.prototype.createNameMapper = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        return new SimplePlaceholderMapper(message, toPublicName);\n    };\n    return Xmb;\n}(Serializer));\nexport { Xmb };\nvar _Visitor = /** @class */ (function () {\n    function _Visitor() {\n    }\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) { return [new xml.Text(text.value)]; };\n    /**\n     * @param {?} container\n     * @param {?} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [];\n        container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });\n        return nodes;\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ nodes = [new xml.Text(\"{\" + icu.expressionPlaceholder + \", \" + icu.type + \", \")];\n        Object.keys(icu.cases).forEach(function (c) {\n            nodes.push.apply(nodes, [new xml.Text(c + \" {\")].concat(icu.cases[c].visit(_this), [new xml.Text(\"} \")]));\n        });\n        nodes.push(new xml.Text(\"}\"));\n        return nodes;\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ startEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(\"<\" + ph.tag + \">\")]);\n        var /** @type {?} */ startTagPh = new xml.Tag(_PLACEHOLDER_TAG, { name: ph.startName }, [startEx]);\n        if (ph.isVoid) {\n            // void tags have no children nor closing tags\n            return [startTagPh];\n        }\n        var /** @type {?} */ closeEx = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(\"</\" + ph.tag + \">\")]);\n        var /** @type {?} */ closeTagPh = new xml.Tag(_PLACEHOLDER_TAG, { name: ph.closeName }, [closeEx]);\n        return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ exTag = new xml.Tag(_EXEMPLE_TAG, {}, [new xml.Text(\"{{\" + ph.value + \"}}\")]);\n        return [new xml.Tag(_PLACEHOLDER_TAG, { name: ph.name }, [exTag])];\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    _Visitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ exTag = new xml.Tag(_EXEMPLE_TAG, {}, [\n            new xml.Text(\"{\" + ph.value.expression + \", \" + ph.value.type + \", \" + Object.keys(ph.value.cases).map(function (value) { return value + ' {...}'; }).join(' ') + \"}\")\n        ]);\n        return [new xml.Tag(_PLACEHOLDER_TAG, { name: ph.name }, [exTag])];\n    };\n    /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    _Visitor.prototype.serialize = /**\n     * @param {?} nodes\n     * @return {?}\n     */\n    function (nodes) {\n        var _this = this;\n        return [].concat.apply([], nodes.map(function (node) { return node.visit(_this); }));\n    };\n    return _Visitor;\n}());\n/**\n * @param {?} message\n * @return {?}\n */\nexport function digest(message) {\n    return decimalDigest(message);\n}\nvar ExampleVisitor = /** @class */ (function () {\n    function ExampleVisitor() {\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    ExampleVisitor.prototype.addDefaultExamples = /**\n     * @param {?} node\n     * @return {?}\n     */\n    function (node) {\n        node.visit(this);\n        return node;\n    };\n    /**\n     * @param {?} tag\n     * @return {?}\n     */\n    ExampleVisitor.prototype.visitTag = /**\n     * @param {?} tag\n     * @return {?}\n     */\n    function (tag) {\n        var _this = this;\n        if (tag.name === _PLACEHOLDER_TAG) {\n            if (!tag.children || tag.children.length == 0) {\n                var /** @type {?} */ exText = new xml.Text(tag.attrs['name'] || '...');\n                tag.children = [new xml.Tag(_EXEMPLE_TAG, {}, [exText])];\n            }\n        }\n        else if (tag.children) {\n            tag.children.forEach(function (node) { return node.visit(_this); });\n        }\n    };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    ExampleVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { };\n    /**\n     * @param {?} decl\n     * @return {?}\n     */\n    ExampleVisitor.prototype.visitDeclaration = /**\n     * @param {?} decl\n     * @return {?}\n     */\n    function (decl) { };\n    /**\n     * @param {?} doctype\n     * @return {?}\n     */\n    ExampleVisitor.prototype.visitDoctype = /**\n     * @param {?} doctype\n     * @return {?}\n     */\n    function (doctype) { };\n    return ExampleVisitor;\n}());\n/**\n * @param {?} internalName\n * @return {?}\n */\nexport function toPublicName(internalName) {\n    return internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');\n}\n//# sourceMappingURL=xmb.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as ml from '../../ml_parser/ast';\nimport { XmlParser } from '../../ml_parser/xml_parser';\nimport * as i18n from '../i18n_ast';\nimport { I18nError } from '../parse_util';\nimport { Serializer, SimplePlaceholderMapper } from './serializer';\nimport { digest, toPublicName } from './xmb';\nvar /** @type {?} */ _TRANSLATIONS_TAG = 'translationbundle';\nvar /** @type {?} */ _TRANSLATION_TAG = 'translation';\nvar /** @type {?} */ _PLACEHOLDER_TAG = 'ph';\nvar Xtb = /** @class */ (function (_super) {\n    tslib_1.__extends(Xtb, _super);\n    function Xtb() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    Xtb.prototype.write = /**\n     * @param {?} messages\n     * @param {?} locale\n     * @return {?}\n     */\n    function (messages, locale) { throw new Error('Unsupported'); };\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    Xtb.prototype.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @return {?}\n     */\n    function (content, url) {\n        // xtb to xml nodes\n        var /** @type {?} */ xtbParser = new XtbParser();\n        var _a = xtbParser.parse(content, url), locale = _a.locale, msgIdToHtml = _a.msgIdToHtml, errors = _a.errors;\n        // xml nodes to i18n nodes\n        var /** @type {?} */ i18nNodesByMsgId = {};\n        var /** @type {?} */ converter = new XmlToI18n();\n        // Because we should be able to load xtb files that rely on features not supported by angular,\n        // we need to delay the conversion of html to i18n nodes so that non angular messages are not\n        // converted\n        Object.keys(msgIdToHtml).forEach(function (msgId) {\n            var /** @type {?} */ valueFn = function () {\n                var _a = converter.convert(msgIdToHtml[msgId], url), i18nNodes = _a.i18nNodes, errors = _a.errors;\n                if (errors.length) {\n                    throw new Error(\"xtb parse errors:\\n\" + errors.join('\\n'));\n                }\n                return i18nNodes;\n            };\n            createLazyProperty(i18nNodesByMsgId, msgId, valueFn);\n        });\n        if (errors.length) {\n            throw new Error(\"xtb parse errors:\\n\" + errors.join('\\n'));\n        }\n        return { locale: /** @type {?} */ ((locale)), i18nNodesByMsgId: i18nNodesByMsgId };\n    };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xtb.prototype.digest = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) { return digest(message); };\n    /**\n     * @param {?} message\n     * @return {?}\n     */\n    Xtb.prototype.createNameMapper = /**\n     * @param {?} message\n     * @return {?}\n     */\n    function (message) {\n        return new SimplePlaceholderMapper(message, toPublicName);\n    };\n    return Xtb;\n}(Serializer));\nexport { Xtb };\n/**\n * @param {?} messages\n * @param {?} id\n * @param {?} valueFn\n * @return {?}\n */\nfunction createLazyProperty(messages, id, valueFn) {\n    Object.defineProperty(messages, id, {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n            var /** @type {?} */ value = valueFn();\n            Object.defineProperty(messages, id, { enumerable: true, value: value });\n            return value;\n        },\n        set: function (_) { throw new Error('Could not overwrite an XTB translation'); },\n    });\n}\nvar XtbParser = /** @class */ (function () {\n    function XtbParser() {\n        this._locale = null;\n    }\n    /**\n     * @param {?} xtb\n     * @param {?} url\n     * @return {?}\n     */\n    XtbParser.prototype.parse = /**\n     * @param {?} xtb\n     * @param {?} url\n     * @return {?}\n     */\n    function (xtb, url) {\n        this._bundleDepth = 0;\n        this._msgIdToHtml = {};\n        // We can not parse the ICU messages at this point as some messages might not originate\n        // from Angular that could not be lex'd.\n        var /** @type {?} */ xml = new XmlParser().parse(xtb, url, false);\n        this._errors = xml.errors;\n        ml.visitAll(this, xml.rootNodes);\n        return {\n            msgIdToHtml: this._msgIdToHtml,\n            errors: this._errors,\n            locale: this._locale,\n        };\n    };\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    function (element, context) {\n        switch (element.name) {\n            case _TRANSLATIONS_TAG:\n                this._bundleDepth++;\n                if (this._bundleDepth > 1) {\n                    this._addError(element, \"<\" + _TRANSLATIONS_TAG + \"> elements can not be nested\");\n                }\n                var /** @type {?} */ langAttr = element.attrs.find(function (attr) { return attr.name === 'lang'; });\n                if (langAttr) {\n                    this._locale = langAttr.value;\n                }\n                ml.visitAll(this, element.children, null);\n                this._bundleDepth--;\n                break;\n            case _TRANSLATION_TAG:\n                var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });\n                if (!idAttr) {\n                    this._addError(element, \"<\" + _TRANSLATION_TAG + \"> misses the \\\"id\\\" attribute\");\n                }\n                else {\n                    var /** @type {?} */ id = idAttr.value;\n                    if (this._msgIdToHtml.hasOwnProperty(id)) {\n                        this._addError(element, \"Duplicated translations for msg \" + id);\n                    }\n                    else {\n                        var /** @type {?} */ innerTextStart = /** @type {?} */ ((element.startSourceSpan)).end.offset;\n                        var /** @type {?} */ innerTextEnd = /** @type {?} */ ((element.endSourceSpan)).start.offset;\n                        var /** @type {?} */ content = /** @type {?} */ ((element.startSourceSpan)).start.file.content;\n                        var /** @type {?} */ innerText = content.slice(/** @type {?} */ ((innerTextStart)), /** @type {?} */ ((innerTextEnd)));\n                        this._msgIdToHtml[id] = innerText;\n                    }\n                }\n                break;\n            default:\n                this._addError(element, 'Unexpected tag');\n        }\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    XtbParser.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XtbParser.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n    };\n    return XtbParser;\n}());\nfunction XtbParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XtbParser.prototype._bundleDepth;\n    /** @type {?} */\n    XtbParser.prototype._errors;\n    /** @type {?} */\n    XtbParser.prototype._msgIdToHtml;\n    /** @type {?} */\n    XtbParser.prototype._locale;\n}\nvar XmlToI18n = /** @class */ (function () {\n    function XmlToI18n() {\n    }\n    /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    XmlToI18n.prototype.convert = /**\n     * @param {?} message\n     * @param {?} url\n     * @return {?}\n     */\n    function (message, url) {\n        var /** @type {?} */ xmlIcu = new XmlParser().parse(message, url, true);\n        this._errors = xmlIcu.errors;\n        var /** @type {?} */ i18nNodes = this._errors.length > 0 || xmlIcu.rootNodes.length == 0 ?\n            [] :\n            ml.visitAll(this, xmlIcu.rootNodes);\n        return {\n            i18nNodes: i18nNodes,\n            errors: this._errors,\n        };\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { return new i18n.Text(text.value, /** @type {?} */ ((text.sourceSpan))); };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var /** @type {?} */ caseMap = {};\n        ml.visitAll(this, icu.cases).forEach(function (c) {\n            caseMap[c.value] = new i18n.Container(c.nodes, icu.sourceSpan);\n        });\n        return new i18n.Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        return {\n            value: icuCase.value,\n            nodes: ml.visitAll(this, icuCase.expression),\n        };\n    };\n    /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitElement = /**\n     * @param {?} el\n     * @param {?} context\n     * @return {?}\n     */\n    function (el, context) {\n        if (el.name === _PLACEHOLDER_TAG) {\n            var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'name'; });\n            if (nameAttr) {\n                return new i18n.Placeholder('', nameAttr.value, /** @type {?} */ ((el.sourceSpan)));\n            }\n            this._addError(el, \"<\" + _PLACEHOLDER_TAG + \"> misses the \\\"name\\\" attribute\");\n        }\n        else {\n            this._addError(el, \"Unexpected tag\");\n        }\n        return null;\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    XmlToI18n.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { };\n    /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    XmlToI18n.prototype._addError = /**\n     * @param {?} node\n     * @param {?} message\n     * @return {?}\n     */\n    function (node, message) {\n        this._errors.push(new I18nError(/** @type {?} */ ((node.sourceSpan)), message));\n    };\n    return XmlToI18n;\n}());\nfunction XmlToI18n_tsickle_Closure_declarations() {\n    /** @type {?} */\n    XmlToI18n.prototype._errors;\n}\n//# sourceMappingURL=xtb.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { getHtmlTagDefinition } from './html_tags';\nimport { DEFAULT_INTERPOLATION_CONFIG } from './interpolation_config';\nimport { Parser } from './parser';\nexport { ParseTreeResult, TreeError } from './parser';\nvar HtmlParser = /** @class */ (function (_super) {\n    tslib_1.__extends(HtmlParser, _super);\n    function HtmlParser() {\n        return _super.call(this, getHtmlTagDefinition) || this;\n    }\n    /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    HtmlParser.prototype.parse = /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (source, url, parseExpansionForms, interpolationConfig) {\n        if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);\n    };\n    return HtmlParser;\n}(Parser));\nexport { HtmlParser };\n//# sourceMappingURL=html_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MissingTranslationStrategy } from '../core';\nimport { HtmlParser } from '../ml_parser/html_parser';\nimport { I18nError } from './parse_util';\nimport { escapeXml } from './serializers/xml_helper';\n/**\n * A container for translated messages\n */\nvar /**\n * A container for translated messages\n */\nTranslationBundle = /** @class */ (function () {\n    function TranslationBundle(_i18nNodesByMsgId, locale, digest, mapperFactory, missingTranslationStrategy, console) {\n        if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }\n        if (missingTranslationStrategy === void 0) { missingTranslationStrategy = MissingTranslationStrategy.Warning; }\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this.digest = digest;\n        this.mapperFactory = mapperFactory;\n        this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, locale, digest, /** @type {?} */ ((mapperFactory)), missingTranslationStrategy, console);\n    }\n    // Creates a `TranslationBundle` by parsing the given `content` with the `serializer`.\n    /**\n     * @param {?} content\n     * @param {?} url\n     * @param {?} serializer\n     * @param {?} missingTranslationStrategy\n     * @param {?=} console\n     * @return {?}\n     */\n    TranslationBundle.load = /**\n     * @param {?} content\n     * @param {?} url\n     * @param {?} serializer\n     * @param {?} missingTranslationStrategy\n     * @param {?=} console\n     * @return {?}\n     */\n    function (content, url, serializer, missingTranslationStrategy, console) {\n        var _a = serializer.load(content, url), locale = _a.locale, i18nNodesByMsgId = _a.i18nNodesByMsgId;\n        var /** @type {?} */ digestFn = function (m) { return serializer.digest(m); };\n        var /** @type {?} */ mapperFactory = function (m) { return ((serializer.createNameMapper(m))); };\n        return new TranslationBundle(i18nNodesByMsgId, locale, digestFn, mapperFactory, missingTranslationStrategy, console);\n    };\n    // Returns the translation as HTML nodes from the given source message.\n    /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    TranslationBundle.prototype.get = /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    function (srcMsg) {\n        var /** @type {?} */ html = this._i18nToHtml.convert(srcMsg);\n        if (html.errors.length) {\n            throw new Error(html.errors.join('\\n'));\n        }\n        return html.nodes;\n    };\n    /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    TranslationBundle.prototype.has = /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    function (srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; };\n    return TranslationBundle;\n}());\n/**\n * A container for translated messages\n */\nexport { TranslationBundle };\nfunction TranslationBundle_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TranslationBundle.prototype._i18nToHtml;\n    /** @type {?} */\n    TranslationBundle.prototype._i18nNodesByMsgId;\n    /** @type {?} */\n    TranslationBundle.prototype.digest;\n    /** @type {?} */\n    TranslationBundle.prototype.mapperFactory;\n}\nvar I18nToHtmlVisitor = /** @class */ (function () {\n    function I18nToHtmlVisitor(_i18nNodesByMsgId, _locale, _digest, _mapperFactory, _missingTranslationStrategy, _console) {\n        if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }\n        this._i18nNodesByMsgId = _i18nNodesByMsgId;\n        this._locale = _locale;\n        this._digest = _digest;\n        this._mapperFactory = _mapperFactory;\n        this._missingTranslationStrategy = _missingTranslationStrategy;\n        this._console = _console;\n        this._contextStack = [];\n        this._errors = [];\n    }\n    /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.convert = /**\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    function (srcMsg) {\n        this._contextStack.length = 0;\n        this._errors.length = 0;\n        // i18n to text\n        var /** @type {?} */ text = this._convertToText(srcMsg);\n        // text to html\n        var /** @type {?} */ url = srcMsg.nodes[0].sourceSpan.start.file.url;\n        var /** @type {?} */ html = new HtmlParser().parse(text, url, true);\n        return {\n            nodes: html.rootNodes,\n            errors: this._errors.concat(html.errors),\n        };\n    };\n    /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?=} context\n     * @return {?}\n     */\n    function (text, context) {\n        // `convert()` uses an `HtmlParser` to return `html.Node`s\n        // we should then make sure that any special characters are escaped\n        return escapeXml(text.value);\n    };\n    /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitContainer = /**\n     * @param {?} container\n     * @param {?=} context\n     * @return {?}\n     */\n    function (container, context) {\n        var _this = this;\n        return container.children.map(function (n) { return n.visit(_this); }).join('');\n    };\n    /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitIcu = /**\n     * @param {?} icu\n     * @param {?=} context\n     * @return {?}\n     */\n    function (icu, context) {\n        var _this = this;\n        var /** @type {?} */ cases = Object.keys(icu.cases).map(function (k) { return k + \" {\" + icu.cases[k].visit(_this) + \"}\"; });\n        // TODO(vicb): Once all format switch to using expression placeholders\n        // we should throw when the placeholder is not in the source message\n        var /** @type {?} */ exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?\n            this._srcMsg.placeholders[icu.expression] :\n            icu.expression;\n        return \"{\" + exp + \", \" + icu.type + \", \" + cases.join(' ') + \"}\";\n    };\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var /** @type {?} */ phName = this._mapper(ph.name);\n        if (this._srcMsg.placeholders.hasOwnProperty(phName)) {\n            return this._srcMsg.placeholders[phName];\n        }\n        if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {\n            return this._convertToText(this._srcMsg.placeholderToMessage[phName]);\n        }\n        this._addError(ph, \"Unknown placeholder \\\"\" + ph.name + \"\\\"\");\n        return '';\n    };\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        var _this = this;\n        var /** @type {?} */ tag = \"\" + ph.tag;\n        var /** @type {?} */ attrs = Object.keys(ph.attrs).map(function (name) { return name + \"=\\\"\" + ph.attrs[name] + \"\\\"\"; }).join(' ');\n        if (ph.isVoid) {\n            return \"<\" + tag + \" \" + attrs + \"/>\";\n        }\n        var /** @type {?} */ children = ph.children.map(function (c) { return c.visit(_this); }).join('');\n        return \"<\" + tag + \" \" + attrs + \">\" + children + \"</\" + tag + \">\";\n    };\n    // Loaded message contains only placeholders (vs tag and icu placeholders).\n    // However when a translation can not be found, we need to serialize the source message\n    // which can contain tag placeholders\n    /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?=} context\n     * @return {?}\n     */\n    function (ph, context) {\n        // An ICU placeholder references the source message to be serialized\n        return this._convertToText(this._srcMsg.placeholderToMessage[ph.name]);\n    };\n    /**\n     * Convert a source message to a translated text string:\n     * - text nodes are replaced with their translation,\n     * - placeholders are replaced with their content,\n     * - ICU nodes are converted to ICU expressions.\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype._convertToText = /**\n     * Convert a source message to a translated text string:\n     * - text nodes are replaced with their translation,\n     * - placeholders are replaced with their content,\n     * - ICU nodes are converted to ICU expressions.\n     * @param {?} srcMsg\n     * @return {?}\n     */\n    function (srcMsg) {\n        var _this = this;\n        var /** @type {?} */ id = this._digest(srcMsg);\n        var /** @type {?} */ mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;\n        var /** @type {?} */ nodes;\n        this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });\n        this._srcMsg = srcMsg;\n        if (this._i18nNodesByMsgId.hasOwnProperty(id)) {\n            // When there is a translation use its nodes as the source\n            // And create a mapper to convert serialized placeholder names to internal names\n            nodes = this._i18nNodesByMsgId[id];\n            this._mapper = function (name) { return mapper ? /** @type {?} */ ((mapper.toInternalName(name))) : name; };\n        }\n        else {\n            // When no translation has been found\n            // - report an error / a warning / nothing,\n            // - use the nodes from the original message\n            // - placeholders are already internal and need no mapper\n            if (this._missingTranslationStrategy === MissingTranslationStrategy.Error) {\n                var /** @type {?} */ ctx = this._locale ? \" for locale \\\"\" + this._locale + \"\\\"\" : '';\n                this._addError(srcMsg.nodes[0], \"Missing translation for message \\\"\" + id + \"\\\"\" + ctx);\n            }\n            else if (this._console &&\n                this._missingTranslationStrategy === MissingTranslationStrategy.Warning) {\n                var /** @type {?} */ ctx = this._locale ? \" for locale \\\"\" + this._locale + \"\\\"\" : '';\n                this._console.warn(\"Missing translation for message \\\"\" + id + \"\\\"\" + ctx);\n            }\n            nodes = srcMsg.nodes;\n            this._mapper = function (name) { return name; };\n        }\n        var /** @type {?} */ text = nodes.map(function (node) { return node.visit(_this); }).join('');\n        var /** @type {?} */ context = /** @type {?} */ ((this._contextStack.pop()));\n        this._srcMsg = context.msg;\n        this._mapper = context.mapper;\n        return text;\n    };\n    /**\n     * @param {?} el\n     * @param {?} msg\n     * @return {?}\n     */\n    I18nToHtmlVisitor.prototype._addError = /**\n     * @param {?} el\n     * @param {?} msg\n     * @return {?}\n     */\n    function (el, msg) {\n        this._errors.push(new I18nError(el.sourceSpan, msg));\n    };\n    return I18nToHtmlVisitor;\n}());\nfunction I18nToHtmlVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._srcMsg;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._contextStack;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._errors;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._mapper;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._i18nNodesByMsgId;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._locale;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._digest;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._mapperFactory;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._missingTranslationStrategy;\n    /** @type {?} */\n    I18nToHtmlVisitor.prototype._console;\n}\n//# sourceMappingURL=translation_bundle.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { MissingTranslationStrategy } from '../core';\nimport { DEFAULT_INTERPOLATION_CONFIG } from '../ml_parser/interpolation_config';\nimport { ParseTreeResult } from '../ml_parser/parser';\nimport { digest } from './digest';\nimport { mergeTranslations } from './extractor_merger';\nimport { Xliff } from './serializers/xliff';\nimport { Xliff2 } from './serializers/xliff2';\nimport { Xmb } from './serializers/xmb';\nimport { Xtb } from './serializers/xtb';\nimport { TranslationBundle } from './translation_bundle';\nvar I18NHtmlParser = /** @class */ (function () {\n    function I18NHtmlParser(_htmlParser, translations, translationsFormat, missingTranslation, console) {\n        if (missingTranslation === void 0) { missingTranslation = MissingTranslationStrategy.Warning; }\n        this._htmlParser = _htmlParser;\n        if (translations) {\n            var /** @type {?} */ serializer = createSerializer(translationsFormat);\n            this._translationBundle =\n                TranslationBundle.load(translations, 'i18n', serializer, missingTranslation, console);\n        }\n        else {\n            this._translationBundle =\n                new TranslationBundle({}, null, digest, undefined, missingTranslation, console);\n        }\n    }\n    /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    I18NHtmlParser.prototype.parse = /**\n     * @param {?} source\n     * @param {?} url\n     * @param {?=} parseExpansionForms\n     * @param {?=} interpolationConfig\n     * @return {?}\n     */\n    function (source, url, parseExpansionForms, interpolationConfig) {\n        if (parseExpansionForms === void 0) { parseExpansionForms = false; }\n        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }\n        var /** @type {?} */ parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);\n        if (parseResult.errors.length) {\n            return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);\n        }\n        return mergeTranslations(parseResult.rootNodes, this._translationBundle, interpolationConfig, [], {});\n    };\n    return I18NHtmlParser;\n}());\nexport { I18NHtmlParser };\nfunction I18NHtmlParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    I18NHtmlParser.prototype.getTagDefinition;\n    /** @type {?} */\n    I18NHtmlParser.prototype._translationBundle;\n    /** @type {?} */\n    I18NHtmlParser.prototype._htmlParser;\n}\n/**\n * @param {?=} format\n * @return {?}\n */\nfunction createSerializer(format) {\n    format = (format || 'xlf').toLowerCase();\n    switch (format) {\n        case 'xmb':\n            return new Xmb();\n        case 'xtb':\n            return new Xtb();\n        case 'xliff2':\n        case 'xlf2':\n            return new Xliff2();\n        case 'xliff':\n        case 'xlf':\n        default:\n            return new Xliff();\n    }\n}\n//# sourceMappingURL=i18n_html_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ CORE = '@angular/core';\nvar Identifiers = /** @class */ (function () {\n    function Identifiers() {\n    }\n    Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {\n        name: 'ANALYZE_FOR_ENTRY_COMPONENTS',\n        moduleName: CORE,\n    };\n    Identifiers.ElementRef = { name: 'ElementRef', moduleName: CORE };\n    Identifiers.NgModuleRef = { name: 'NgModuleRef', moduleName: CORE };\n    Identifiers.ViewContainerRef = { name: 'ViewContainerRef', moduleName: CORE };\n    Identifiers.ChangeDetectorRef = {\n        name: 'ChangeDetectorRef',\n        moduleName: CORE,\n    };\n    Identifiers.QueryList = { name: 'QueryList', moduleName: CORE };\n    Identifiers.TemplateRef = { name: 'TemplateRef', moduleName: CORE };\n    Identifiers.CodegenComponentFactoryResolver = {\n        name: 'ɵCodegenComponentFactoryResolver',\n        moduleName: CORE,\n    };\n    Identifiers.ComponentFactoryResolver = {\n        name: 'ComponentFactoryResolver',\n        moduleName: CORE,\n    };\n    Identifiers.ComponentFactory = { name: 'ComponentFactory', moduleName: CORE };\n    Identifiers.ComponentRef = { name: 'ComponentRef', moduleName: CORE };\n    Identifiers.NgModuleFactory = { name: 'NgModuleFactory', moduleName: CORE };\n    Identifiers.createModuleFactory = {\n        name: 'ɵcmf',\n        moduleName: CORE,\n    };\n    Identifiers.moduleDef = {\n        name: 'ɵmod',\n        moduleName: CORE,\n    };\n    Identifiers.moduleProviderDef = {\n        name: 'ɵmpd',\n        moduleName: CORE,\n    };\n    Identifiers.RegisterModuleFactoryFn = {\n        name: 'ɵregisterModuleFactory',\n        moduleName: CORE,\n    };\n    Identifiers.inject = { name: 'inject', moduleName: CORE };\n    Identifiers.INJECTOR = { name: 'INJECTOR', moduleName: CORE };\n    Identifiers.Injector = { name: 'Injector', moduleName: CORE };\n    Identifiers.defineInjectable = { name: 'defineInjectable', moduleName: CORE };\n    Identifiers.ViewEncapsulation = {\n        name: 'ViewEncapsulation',\n        moduleName: CORE,\n    };\n    Identifiers.ChangeDetectionStrategy = {\n        name: 'ChangeDetectionStrategy',\n        moduleName: CORE,\n    };\n    Identifiers.SecurityContext = {\n        name: 'SecurityContext',\n        moduleName: CORE,\n    };\n    Identifiers.LOCALE_ID = { name: 'LOCALE_ID', moduleName: CORE };\n    Identifiers.TRANSLATIONS_FORMAT = {\n        name: 'TRANSLATIONS_FORMAT',\n        moduleName: CORE,\n    };\n    Identifiers.inlineInterpolate = {\n        name: 'ɵinlineInterpolate',\n        moduleName: CORE,\n    };\n    Identifiers.interpolate = { name: 'ɵinterpolate', moduleName: CORE };\n    Identifiers.EMPTY_ARRAY = { name: 'ɵEMPTY_ARRAY', moduleName: CORE };\n    Identifiers.EMPTY_MAP = { name: 'ɵEMPTY_MAP', moduleName: CORE };\n    Identifiers.Renderer = { name: 'Renderer', moduleName: CORE };\n    Identifiers.viewDef = { name: 'ɵvid', moduleName: CORE };\n    Identifiers.elementDef = { name: 'ɵeld', moduleName: CORE };\n    Identifiers.anchorDef = { name: 'ɵand', moduleName: CORE };\n    Identifiers.textDef = { name: 'ɵted', moduleName: CORE };\n    Identifiers.directiveDef = { name: 'ɵdid', moduleName: CORE };\n    Identifiers.providerDef = { name: 'ɵprd', moduleName: CORE };\n    Identifiers.queryDef = { name: 'ɵqud', moduleName: CORE };\n    Identifiers.pureArrayDef = { name: 'ɵpad', moduleName: CORE };\n    Identifiers.pureObjectDef = { name: 'ɵpod', moduleName: CORE };\n    Identifiers.purePipeDef = { name: 'ɵppd', moduleName: CORE };\n    Identifiers.pipeDef = { name: 'ɵpid', moduleName: CORE };\n    Identifiers.nodeValue = { name: 'ɵnov', moduleName: CORE };\n    Identifiers.ngContentDef = { name: 'ɵncd', moduleName: CORE };\n    Identifiers.unwrapValue = { name: 'ɵunv', moduleName: CORE };\n    Identifiers.createRendererType2 = { name: 'ɵcrt', moduleName: CORE };\n    // type only\n    Identifiers.RendererType2 = {\n        name: 'RendererType2',\n        moduleName: CORE,\n    };\n    // type only\n    Identifiers.ViewDefinition = {\n        name: 'ɵViewDefinition',\n        moduleName: CORE,\n    };\n    Identifiers.createComponentFactory = { name: 'ɵccf', moduleName: CORE };\n    return Identifiers;\n}());\nexport { Identifiers };\nfunction Identifiers_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS;\n    /** @type {?} */\n    Identifiers.ElementRef;\n    /** @type {?} */\n    Identifiers.NgModuleRef;\n    /** @type {?} */\n    Identifiers.ViewContainerRef;\n    /** @type {?} */\n    Identifiers.ChangeDetectorRef;\n    /** @type {?} */\n    Identifiers.QueryList;\n    /** @type {?} */\n    Identifiers.TemplateRef;\n    /** @type {?} */\n    Identifiers.CodegenComponentFactoryResolver;\n    /** @type {?} */\n    Identifiers.ComponentFactoryResolver;\n    /** @type {?} */\n    Identifiers.ComponentFactory;\n    /** @type {?} */\n    Identifiers.ComponentRef;\n    /** @type {?} */\n    Identifiers.NgModuleFactory;\n    /** @type {?} */\n    Identifiers.createModuleFactory;\n    /** @type {?} */\n    Identifiers.moduleDef;\n    /** @type {?} */\n    Identifiers.moduleProviderDef;\n    /** @type {?} */\n    Identifiers.RegisterModuleFactoryFn;\n    /** @type {?} */\n    Identifiers.inject;\n    /** @type {?} */\n    Identifiers.INJECTOR;\n    /** @type {?} */\n    Identifiers.Injector;\n    /** @type {?} */\n    Identifiers.defineInjectable;\n    /** @type {?} */\n    Identifiers.ViewEncapsulation;\n    /** @type {?} */\n    Identifiers.ChangeDetectionStrategy;\n    /** @type {?} */\n    Identifiers.SecurityContext;\n    /** @type {?} */\n    Identifiers.LOCALE_ID;\n    /** @type {?} */\n    Identifiers.TRANSLATIONS_FORMAT;\n    /** @type {?} */\n    Identifiers.inlineInterpolate;\n    /** @type {?} */\n    Identifiers.interpolate;\n    /** @type {?} */\n    Identifiers.EMPTY_ARRAY;\n    /** @type {?} */\n    Identifiers.EMPTY_MAP;\n    /** @type {?} */\n    Identifiers.Renderer;\n    /** @type {?} */\n    Identifiers.viewDef;\n    /** @type {?} */\n    Identifiers.elementDef;\n    /** @type {?} */\n    Identifiers.anchorDef;\n    /** @type {?} */\n    Identifiers.textDef;\n    /** @type {?} */\n    Identifiers.directiveDef;\n    /** @type {?} */\n    Identifiers.providerDef;\n    /** @type {?} */\n    Identifiers.queryDef;\n    /** @type {?} */\n    Identifiers.pureArrayDef;\n    /** @type {?} */\n    Identifiers.pureObjectDef;\n    /** @type {?} */\n    Identifiers.purePipeDef;\n    /** @type {?} */\n    Identifiers.pipeDef;\n    /** @type {?} */\n    Identifiers.nodeValue;\n    /** @type {?} */\n    Identifiers.ngContentDef;\n    /** @type {?} */\n    Identifiers.unwrapValue;\n    /** @type {?} */\n    Identifiers.createRendererType2;\n    /** @type {?} */\n    Identifiers.RendererType2;\n    /** @type {?} */\n    Identifiers.ViewDefinition;\n    /** @type {?} */\n    Identifiers.createComponentFactory;\n}\n/**\n * @param {?} reference\n * @return {?}\n */\nexport function createTokenForReference(reference) {\n    return { identifier: { reference: reference } };\n}\n/**\n * @param {?} reflector\n * @param {?} reference\n * @return {?}\n */\nexport function createTokenForExternalReference(reflector, reference) {\n    return createTokenForReference(reflector.resolveExternalReference(reference));\n}\n//# sourceMappingURL=identifiers.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\n/** @enum {number} */\nvar TypeModifier = {\n    Const: 0,\n};\nexport { TypeModifier };\nTypeModifier[TypeModifier.Const] = \"Const\";\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nType = /** @class */ (function () {\n    function Type(modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        this.modifiers = modifiers;\n        if (!modifiers) {\n            this.modifiers = [];\n        }\n    }\n    /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    Type.prototype.hasModifier = /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    function (modifier) { return /** @type {?} */ ((this.modifiers)).indexOf(modifier) !== -1; };\n    return Type;\n}());\n/**\n * @abstract\n */\nexport { Type };\nfunction Type_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Type.prototype.modifiers;\n    /**\n     * @abstract\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Type.prototype.visitType = function (visitor, context) { };\n}\n/** @enum {number} */\nvar BuiltinTypeName = {\n    Dynamic: 0,\n    Bool: 1,\n    String: 2,\n    Int: 3,\n    Number: 4,\n    Function: 5,\n    Inferred: 6,\n};\nexport { BuiltinTypeName };\nBuiltinTypeName[BuiltinTypeName.Dynamic] = \"Dynamic\";\nBuiltinTypeName[BuiltinTypeName.Bool] = \"Bool\";\nBuiltinTypeName[BuiltinTypeName.String] = \"String\";\nBuiltinTypeName[BuiltinTypeName.Int] = \"Int\";\nBuiltinTypeName[BuiltinTypeName.Number] = \"Number\";\nBuiltinTypeName[BuiltinTypeName.Function] = \"Function\";\nBuiltinTypeName[BuiltinTypeName.Inferred] = \"Inferred\";\nvar BuiltinType = /** @class */ (function (_super) {\n    tslib_1.__extends(BuiltinType, _super);\n    function BuiltinType(name, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers) || this;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BuiltinType.prototype.visitType = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitBuiltinType(this, context);\n    };\n    return BuiltinType;\n}(Type));\nexport { BuiltinType };\nfunction BuiltinType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BuiltinType.prototype.name;\n}\nvar ExpressionType = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpressionType, _super);\n    function ExpressionType(value, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ExpressionType.prototype.visitType = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitExpressionType(this, context);\n    };\n    return ExpressionType;\n}(Type));\nexport { ExpressionType };\nfunction ExpressionType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExpressionType.prototype.value;\n}\nvar ArrayType = /** @class */ (function (_super) {\n    tslib_1.__extends(ArrayType, _super);\n    function ArrayType(of, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers) || this;\n        _this.of = of;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ArrayType.prototype.visitType = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitArrayType(this, context);\n    };\n    return ArrayType;\n}(Type));\nexport { ArrayType };\nfunction ArrayType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ArrayType.prototype.of;\n}\nvar MapType = /** @class */ (function (_super) {\n    tslib_1.__extends(MapType, _super);\n    function MapType(valueType, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers) || this;\n        _this.valueType = valueType || null;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    MapType.prototype.visitType = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) { return visitor.visitMapType(this, context); };\n    return MapType;\n}(Type));\nexport { MapType };\nfunction MapType_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MapType.prototype.valueType;\n}\nexport var /** @type {?} */ DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);\nexport var /** @type {?} */ INFERRED_TYPE = new BuiltinType(BuiltinTypeName.Inferred);\nexport var /** @type {?} */ BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);\nexport var /** @type {?} */ INT_TYPE = new BuiltinType(BuiltinTypeName.Int);\nexport var /** @type {?} */ NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);\nexport var /** @type {?} */ STRING_TYPE = new BuiltinType(BuiltinTypeName.String);\nexport var /** @type {?} */ FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);\n/**\n * @record\n */\nexport function TypeVisitor() { }\nfunction TypeVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TypeVisitor.prototype.visitBuiltinType;\n    /** @type {?} */\n    TypeVisitor.prototype.visitExpressionType;\n    /** @type {?} */\n    TypeVisitor.prototype.visitArrayType;\n    /** @type {?} */\n    TypeVisitor.prototype.visitMapType;\n}\n/** @enum {number} */\nvar BinaryOperator = {\n    Equals: 0,\n    NotEquals: 1,\n    Identical: 2,\n    NotIdentical: 3,\n    Minus: 4,\n    Plus: 5,\n    Divide: 6,\n    Multiply: 7,\n    Modulo: 8,\n    And: 9,\n    Or: 10,\n    BitwiseAnd: 11,\n    Lower: 12,\n    LowerEquals: 13,\n    Bigger: 14,\n    BiggerEquals: 15,\n};\nexport { BinaryOperator };\nBinaryOperator[BinaryOperator.Equals] = \"Equals\";\nBinaryOperator[BinaryOperator.NotEquals] = \"NotEquals\";\nBinaryOperator[BinaryOperator.Identical] = \"Identical\";\nBinaryOperator[BinaryOperator.NotIdentical] = \"NotIdentical\";\nBinaryOperator[BinaryOperator.Minus] = \"Minus\";\nBinaryOperator[BinaryOperator.Plus] = \"Plus\";\nBinaryOperator[BinaryOperator.Divide] = \"Divide\";\nBinaryOperator[BinaryOperator.Multiply] = \"Multiply\";\nBinaryOperator[BinaryOperator.Modulo] = \"Modulo\";\nBinaryOperator[BinaryOperator.And] = \"And\";\nBinaryOperator[BinaryOperator.Or] = \"Or\";\nBinaryOperator[BinaryOperator.BitwiseAnd] = \"BitwiseAnd\";\nBinaryOperator[BinaryOperator.Lower] = \"Lower\";\nBinaryOperator[BinaryOperator.LowerEquals] = \"LowerEquals\";\nBinaryOperator[BinaryOperator.Bigger] = \"Bigger\";\nBinaryOperator[BinaryOperator.BiggerEquals] = \"BiggerEquals\";\n/**\n * @template T\n * @param {?} base\n * @param {?} other\n * @return {?}\n */\nexport function nullSafeIsEquivalent(base, other) {\n    if (base == null || other == null) {\n        return base == other;\n    }\n    return base.isEquivalent(other);\n}\n/**\n * @template T\n * @param {?} base\n * @param {?} other\n * @return {?}\n */\nexport function areAllEquivalent(base, other) {\n    var /** @type {?} */ len = base.length;\n    if (len !== other.length) {\n        return false;\n    }\n    for (var /** @type {?} */ i = 0; i < len; i++) {\n        if (!base[i].isEquivalent(other[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nExpression = /** @class */ (function () {\n    function Expression(type, sourceSpan) {\n        this.type = type || null;\n        this.sourceSpan = sourceSpan || null;\n    }\n    /**\n     * @param {?} name\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.prop = /**\n     * @param {?} name\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (name, sourceSpan) {\n        return new ReadPropExpr(this, name, null, sourceSpan);\n    };\n    /**\n     * @param {?} index\n     * @param {?=} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.key = /**\n     * @param {?} index\n     * @param {?=} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (index, type, sourceSpan) {\n        return new ReadKeyExpr(this, index, type, sourceSpan);\n    };\n    /**\n     * @param {?} name\n     * @param {?} params\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.callMethod = /**\n     * @param {?} name\n     * @param {?} params\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (name, params, sourceSpan) {\n        return new InvokeMethodExpr(this, name, params, null, sourceSpan);\n    };\n    /**\n     * @param {?} params\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.callFn = /**\n     * @param {?} params\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (params, sourceSpan) {\n        return new InvokeFunctionExpr(this, params, null, sourceSpan);\n    };\n    /**\n     * @param {?} params\n     * @param {?=} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.instantiate = /**\n     * @param {?} params\n     * @param {?=} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (params, type, sourceSpan) {\n        return new InstantiateExpr(this, params, type, sourceSpan);\n    };\n    /**\n     * @param {?} trueCase\n     * @param {?=} falseCase\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.conditional = /**\n     * @param {?} trueCase\n     * @param {?=} falseCase\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (trueCase, falseCase, sourceSpan) {\n        if (falseCase === void 0) { falseCase = null; }\n        return new ConditionalExpr(this, trueCase, falseCase, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.equals = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.notEquals = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.identical = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.notIdentical = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.minus = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.plus = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.divide = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.multiply = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.modulo = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.and = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.And, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @param {?=} parens\n     * @return {?}\n     */\n    Expression.prototype.bitwiseAnd = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @param {?=} parens\n     * @return {?}\n     */\n    function (rhs, sourceSpan, parens) {\n        if (parens === void 0) { parens = true; }\n        return new BinaryOperatorExpr(BinaryOperator.BitwiseAnd, this, rhs, null, sourceSpan, parens);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.or = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.lower = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.lowerEquals = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.bigger = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.biggerEquals = /**\n     * @param {?} rhs\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (rhs, sourceSpan) {\n        return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs, null, sourceSpan);\n    };\n    /**\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.isBlank = /**\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (sourceSpan) {\n        // Note: We use equals by purpose here to compare to null and undefined in JS.\n        // We use the typed null to allow strictNullChecks to narrow types.\n        return this.equals(TYPED_NULL_EXPR, sourceSpan);\n    };\n    /**\n     * @param {?} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    Expression.prototype.cast = /**\n     * @param {?} type\n     * @param {?=} sourceSpan\n     * @return {?}\n     */\n    function (type, sourceSpan) {\n        return new CastExpr(this, type, sourceSpan);\n    };\n    /**\n     * @return {?}\n     */\n    Expression.prototype.toStmt = /**\n     * @return {?}\n     */\n    function () { return new ExpressionStatement(this, null); };\n    return Expression;\n}());\n/**\n * @abstract\n */\nexport { Expression };\nfunction Expression_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Expression.prototype.type;\n    /** @type {?} */\n    Expression.prototype.sourceSpan;\n    /**\n     * @abstract\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Expression.prototype.visitExpression = function (visitor, context) { };\n    /**\n     * Calculates whether this expression produces the same value as the given expression.\n     * Note: We don't check Types nor ParseSourceSpans nor function arguments.\n     * @abstract\n     * @param {?} e\n     * @return {?}\n     */\n    Expression.prototype.isEquivalent = function (e) { };\n    /**\n     * Return true if the expression is constant.\n     * @abstract\n     * @return {?}\n     */\n    Expression.prototype.isConstant = function () { };\n}\n/** @enum {number} */\nvar BuiltinVar = {\n    This: 0,\n    Super: 1,\n    CatchError: 2,\n    CatchStack: 3,\n};\nexport { BuiltinVar };\nBuiltinVar[BuiltinVar.This] = \"This\";\nBuiltinVar[BuiltinVar.Super] = \"Super\";\nBuiltinVar[BuiltinVar.CatchError] = \"CatchError\";\nBuiltinVar[BuiltinVar.CatchStack] = \"CatchStack\";\nvar ReadVarExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(ReadVarExpr, _super);\n    function ReadVarExpr(name, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        if (typeof name === 'string') {\n            _this.name = name;\n            _this.builtin = null;\n        }\n        else {\n            _this.name = null;\n            _this.builtin = name;\n        }\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ReadVarExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof ReadVarExpr && this.name === e.name && this.builtin === e.builtin;\n    };\n    /**\n     * @return {?}\n     */\n    ReadVarExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ReadVarExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitReadVarExpr(this, context);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ReadVarExpr.prototype.set = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        if (!this.name) {\n            throw new Error(\"Built in variable \" + this.builtin + \" can not be assigned to.\");\n        }\n        return new WriteVarExpr(this.name, value, null, this.sourceSpan);\n    };\n    return ReadVarExpr;\n}(Expression));\nexport { ReadVarExpr };\nfunction ReadVarExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReadVarExpr.prototype.name;\n    /** @type {?} */\n    ReadVarExpr.prototype.builtin;\n}\nvar WriteVarExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(WriteVarExpr, _super);\n    function WriteVarExpr(name, value, type, sourceSpan) {\n        var _this = _super.call(this, type || value.type, sourceSpan) || this;\n        _this.name = name;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    WriteVarExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof WriteVarExpr && this.name === e.name && this.value.isEquivalent(e.value);\n    };\n    /**\n     * @return {?}\n     */\n    WriteVarExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    WriteVarExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitWriteVarExpr(this, context);\n    };\n    /**\n     * @param {?=} type\n     * @param {?=} modifiers\n     * @return {?}\n     */\n    WriteVarExpr.prototype.toDeclStmt = /**\n     * @param {?=} type\n     * @param {?=} modifiers\n     * @return {?}\n     */\n    function (type, modifiers) {\n        return new DeclareVarStmt(this.name, this.value, type, modifiers, this.sourceSpan);\n    };\n    return WriteVarExpr;\n}(Expression));\nexport { WriteVarExpr };\nfunction WriteVarExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    WriteVarExpr.prototype.value;\n    /** @type {?} */\n    WriteVarExpr.prototype.name;\n}\nvar WriteKeyExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(WriteKeyExpr, _super);\n    function WriteKeyExpr(receiver, index, value, type, sourceSpan) {\n        var _this = _super.call(this, type || value.type, sourceSpan) || this;\n        _this.receiver = receiver;\n        _this.index = index;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    WriteKeyExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof WriteKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.index.isEquivalent(e.index) && this.value.isEquivalent(e.value);\n    };\n    /**\n     * @return {?}\n     */\n    WriteKeyExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    WriteKeyExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitWriteKeyExpr(this, context);\n    };\n    return WriteKeyExpr;\n}(Expression));\nexport { WriteKeyExpr };\nfunction WriteKeyExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    WriteKeyExpr.prototype.value;\n    /** @type {?} */\n    WriteKeyExpr.prototype.receiver;\n    /** @type {?} */\n    WriteKeyExpr.prototype.index;\n}\nvar WritePropExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(WritePropExpr, _super);\n    function WritePropExpr(receiver, name, value, type, sourceSpan) {\n        var _this = _super.call(this, type || value.type, sourceSpan) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    WritePropExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof WritePropExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name && this.value.isEquivalent(e.value);\n    };\n    /**\n     * @return {?}\n     */\n    WritePropExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    WritePropExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitWritePropExpr(this, context);\n    };\n    return WritePropExpr;\n}(Expression));\nexport { WritePropExpr };\nfunction WritePropExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    WritePropExpr.prototype.value;\n    /** @type {?} */\n    WritePropExpr.prototype.receiver;\n    /** @type {?} */\n    WritePropExpr.prototype.name;\n}\n/** @enum {number} */\nvar BuiltinMethod = {\n    ConcatArray: 0,\n    SubscribeObservable: 1,\n    Bind: 2,\n};\nexport { BuiltinMethod };\nBuiltinMethod[BuiltinMethod.ConcatArray] = \"ConcatArray\";\nBuiltinMethod[BuiltinMethod.SubscribeObservable] = \"SubscribeObservable\";\nBuiltinMethod[BuiltinMethod.Bind] = \"Bind\";\nvar InvokeMethodExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(InvokeMethodExpr, _super);\n    function InvokeMethodExpr(receiver, method, args, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.receiver = receiver;\n        _this.args = args;\n        if (typeof method === 'string') {\n            _this.name = method;\n            _this.builtin = null;\n        }\n        else {\n            _this.name = null;\n            _this.builtin = /** @type {?} */ (method);\n        }\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    InvokeMethodExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof InvokeMethodExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name && this.builtin === e.builtin && areAllEquivalent(this.args, e.args);\n    };\n    /**\n     * @return {?}\n     */\n    InvokeMethodExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    InvokeMethodExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitInvokeMethodExpr(this, context);\n    };\n    return InvokeMethodExpr;\n}(Expression));\nexport { InvokeMethodExpr };\nfunction InvokeMethodExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InvokeMethodExpr.prototype.name;\n    /** @type {?} */\n    InvokeMethodExpr.prototype.builtin;\n    /** @type {?} */\n    InvokeMethodExpr.prototype.receiver;\n    /** @type {?} */\n    InvokeMethodExpr.prototype.args;\n}\nvar InvokeFunctionExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(InvokeFunctionExpr, _super);\n    function InvokeFunctionExpr(fn, args, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.fn = fn;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    InvokeFunctionExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof InvokeFunctionExpr && this.fn.isEquivalent(e.fn) &&\n            areAllEquivalent(this.args, e.args);\n    };\n    /**\n     * @return {?}\n     */\n    InvokeFunctionExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    InvokeFunctionExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitInvokeFunctionExpr(this, context);\n    };\n    return InvokeFunctionExpr;\n}(Expression));\nexport { InvokeFunctionExpr };\nfunction InvokeFunctionExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InvokeFunctionExpr.prototype.fn;\n    /** @type {?} */\n    InvokeFunctionExpr.prototype.args;\n}\nvar InstantiateExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(InstantiateExpr, _super);\n    function InstantiateExpr(classExpr, args, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.classExpr = classExpr;\n        _this.args = args;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    InstantiateExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof InstantiateExpr && this.classExpr.isEquivalent(e.classExpr) &&\n            areAllEquivalent(this.args, e.args);\n    };\n    /**\n     * @return {?}\n     */\n    InstantiateExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    InstantiateExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitInstantiateExpr(this, context);\n    };\n    return InstantiateExpr;\n}(Expression));\nexport { InstantiateExpr };\nfunction InstantiateExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InstantiateExpr.prototype.classExpr;\n    /** @type {?} */\n    InstantiateExpr.prototype.args;\n}\nvar LiteralExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralExpr, _super);\n    function LiteralExpr(value, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    LiteralExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof LiteralExpr && this.value === e.value;\n    };\n    /**\n     * @return {?}\n     */\n    LiteralExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return true; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    LiteralExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitLiteralExpr(this, context);\n    };\n    return LiteralExpr;\n}(Expression));\nexport { LiteralExpr };\nfunction LiteralExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralExpr.prototype.value;\n}\nvar ExternalExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(ExternalExpr, _super);\n    function ExternalExpr(value, type, typeParams, sourceSpan) {\n        if (typeParams === void 0) { typeParams = null; }\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.value = value;\n        _this.typeParams = typeParams;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ExternalExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof ExternalExpr && this.value.name === e.value.name &&\n            this.value.moduleName === e.value.moduleName && this.value.runtime === e.value.runtime;\n    };\n    /**\n     * @return {?}\n     */\n    ExternalExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ExternalExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitExternalExpr(this, context);\n    };\n    return ExternalExpr;\n}(Expression));\nexport { ExternalExpr };\nfunction ExternalExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExternalExpr.prototype.value;\n    /** @type {?} */\n    ExternalExpr.prototype.typeParams;\n}\nvar ExternalReference = /** @class */ (function () {\n    function ExternalReference(moduleName, name, runtime) {\n        this.moduleName = moduleName;\n        this.name = name;\n        this.runtime = runtime;\n    }\n    return ExternalReference;\n}());\nexport { ExternalReference };\nfunction ExternalReference_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExternalReference.prototype.moduleName;\n    /** @type {?} */\n    ExternalReference.prototype.name;\n    /** @type {?} */\n    ExternalReference.prototype.runtime;\n}\nvar ConditionalExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(ConditionalExpr, _super);\n    function ConditionalExpr(condition, trueCase, falseCase, type, sourceSpan) {\n        if (falseCase === void 0) { falseCase = null; }\n        var _this = _super.call(this, type || trueCase.type, sourceSpan) || this;\n        _this.condition = condition;\n        _this.falseCase = falseCase;\n        _this.trueCase = trueCase;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ConditionalExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof ConditionalExpr && this.condition.isEquivalent(e.condition) &&\n            this.trueCase.isEquivalent(e.trueCase) && nullSafeIsEquivalent(this.falseCase, e.falseCase);\n    };\n    /**\n     * @return {?}\n     */\n    ConditionalExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ConditionalExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitConditionalExpr(this, context);\n    };\n    return ConditionalExpr;\n}(Expression));\nexport { ConditionalExpr };\nfunction ConditionalExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ConditionalExpr.prototype.trueCase;\n    /** @type {?} */\n    ConditionalExpr.prototype.condition;\n    /** @type {?} */\n    ConditionalExpr.prototype.falseCase;\n}\nvar NotExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(NotExpr, _super);\n    function NotExpr(condition, sourceSpan) {\n        var _this = _super.call(this, BOOL_TYPE, sourceSpan) || this;\n        _this.condition = condition;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NotExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof NotExpr && this.condition.isEquivalent(e.condition);\n    };\n    /**\n     * @return {?}\n     */\n    NotExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    NotExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitNotExpr(this, context);\n    };\n    return NotExpr;\n}(Expression));\nexport { NotExpr };\nfunction NotExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NotExpr.prototype.condition;\n}\nvar AssertNotNull = /** @class */ (function (_super) {\n    tslib_1.__extends(AssertNotNull, _super);\n    function AssertNotNull(condition, sourceSpan) {\n        var _this = _super.call(this, condition.type, sourceSpan) || this;\n        _this.condition = condition;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    AssertNotNull.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof AssertNotNull && this.condition.isEquivalent(e.condition);\n    };\n    /**\n     * @return {?}\n     */\n    AssertNotNull.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    AssertNotNull.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitAssertNotNullExpr(this, context);\n    };\n    return AssertNotNull;\n}(Expression));\nexport { AssertNotNull };\nfunction AssertNotNull_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AssertNotNull.prototype.condition;\n}\nvar CastExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(CastExpr, _super);\n    function CastExpr(value, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    CastExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof CastExpr && this.value.isEquivalent(e.value);\n    };\n    /**\n     * @return {?}\n     */\n    CastExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    CastExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitCastExpr(this, context);\n    };\n    return CastExpr;\n}(Expression));\nexport { CastExpr };\nfunction CastExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CastExpr.prototype.value;\n}\nvar FnParam = /** @class */ (function () {\n    function FnParam(name, type) {\n        if (type === void 0) { type = null; }\n        this.name = name;\n        this.type = type;\n    }\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    FnParam.prototype.isEquivalent = /**\n     * @param {?} param\n     * @return {?}\n     */\n    function (param) { return this.name === param.name; };\n    return FnParam;\n}());\nexport { FnParam };\nfunction FnParam_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FnParam.prototype.name;\n    /** @type {?} */\n    FnParam.prototype.type;\n}\nvar FunctionExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(FunctionExpr, _super);\n    function FunctionExpr(params, statements, type, sourceSpan, name) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.params = params;\n        _this.statements = statements;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    FunctionExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof FunctionExpr && areAllEquivalent(this.params, e.params) &&\n            areAllEquivalent(this.statements, e.statements);\n    };\n    /**\n     * @return {?}\n     */\n    FunctionExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    FunctionExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitFunctionExpr(this, context);\n    };\n    /**\n     * @param {?} name\n     * @param {?=} modifiers\n     * @return {?}\n     */\n    FunctionExpr.prototype.toDeclStmt = /**\n     * @param {?} name\n     * @param {?=} modifiers\n     * @return {?}\n     */\n    function (name, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers, this.sourceSpan);\n    };\n    return FunctionExpr;\n}(Expression));\nexport { FunctionExpr };\nfunction FunctionExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FunctionExpr.prototype.params;\n    /** @type {?} */\n    FunctionExpr.prototype.statements;\n    /** @type {?} */\n    FunctionExpr.prototype.name;\n}\nvar BinaryOperatorExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(BinaryOperatorExpr, _super);\n    function BinaryOperatorExpr(operator, lhs, rhs, type, sourceSpan, parens) {\n        if (parens === void 0) { parens = true; }\n        var _this = _super.call(this, type || lhs.type, sourceSpan) || this;\n        _this.operator = operator;\n        _this.rhs = rhs;\n        _this.parens = parens;\n        _this.lhs = lhs;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    BinaryOperatorExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof BinaryOperatorExpr && this.operator === e.operator &&\n            this.lhs.isEquivalent(e.lhs) && this.rhs.isEquivalent(e.rhs);\n    };\n    /**\n     * @return {?}\n     */\n    BinaryOperatorExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    BinaryOperatorExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitBinaryOperatorExpr(this, context);\n    };\n    return BinaryOperatorExpr;\n}(Expression));\nexport { BinaryOperatorExpr };\nfunction BinaryOperatorExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BinaryOperatorExpr.prototype.lhs;\n    /** @type {?} */\n    BinaryOperatorExpr.prototype.operator;\n    /** @type {?} */\n    BinaryOperatorExpr.prototype.rhs;\n    /** @type {?} */\n    BinaryOperatorExpr.prototype.parens;\n}\nvar ReadPropExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(ReadPropExpr, _super);\n    function ReadPropExpr(receiver, name, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.receiver = receiver;\n        _this.name = name;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ReadPropExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof ReadPropExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.name === e.name;\n    };\n    /**\n     * @return {?}\n     */\n    ReadPropExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ReadPropExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitReadPropExpr(this, context);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ReadPropExpr.prototype.set = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        return new WritePropExpr(this.receiver, this.name, value, null, this.sourceSpan);\n    };\n    return ReadPropExpr;\n}(Expression));\nexport { ReadPropExpr };\nfunction ReadPropExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReadPropExpr.prototype.receiver;\n    /** @type {?} */\n    ReadPropExpr.prototype.name;\n}\nvar ReadKeyExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(ReadKeyExpr, _super);\n    function ReadKeyExpr(receiver, index, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.receiver = receiver;\n        _this.index = index;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    ReadKeyExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof ReadKeyExpr && this.receiver.isEquivalent(e.receiver) &&\n            this.index.isEquivalent(e.index);\n    };\n    /**\n     * @return {?}\n     */\n    ReadKeyExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ReadKeyExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitReadKeyExpr(this, context);\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    ReadKeyExpr.prototype.set = /**\n     * @param {?} value\n     * @return {?}\n     */\n    function (value) {\n        return new WriteKeyExpr(this.receiver, this.index, value, null, this.sourceSpan);\n    };\n    return ReadKeyExpr;\n}(Expression));\nexport { ReadKeyExpr };\nfunction ReadKeyExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReadKeyExpr.prototype.receiver;\n    /** @type {?} */\n    ReadKeyExpr.prototype.index;\n}\nvar LiteralArrayExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralArrayExpr, _super);\n    function LiteralArrayExpr(entries, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.entries = entries;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    LiteralArrayExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return this.entries.every(function (e) { return e.isConstant(); }); };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    LiteralArrayExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof LiteralArrayExpr && areAllEquivalent(this.entries, e.entries);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    LiteralArrayExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitLiteralArrayExpr(this, context);\n    };\n    return LiteralArrayExpr;\n}(Expression));\nexport { LiteralArrayExpr };\nfunction LiteralArrayExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralArrayExpr.prototype.entries;\n}\nvar LiteralMapEntry = /** @class */ (function () {\n    function LiteralMapEntry(key, value, quoted) {\n        this.key = key;\n        this.value = value;\n        this.quoted = quoted;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    LiteralMapEntry.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return this.key === e.key && this.value.isEquivalent(e.value);\n    };\n    return LiteralMapEntry;\n}());\nexport { LiteralMapEntry };\nfunction LiteralMapEntry_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralMapEntry.prototype.key;\n    /** @type {?} */\n    LiteralMapEntry.prototype.value;\n    /** @type {?} */\n    LiteralMapEntry.prototype.quoted;\n}\nvar LiteralMapExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(LiteralMapExpr, _super);\n    function LiteralMapExpr(entries, type, sourceSpan) {\n        var _this = _super.call(this, type, sourceSpan) || this;\n        _this.entries = entries;\n        _this.valueType = null;\n        if (type) {\n            _this.valueType = type.valueType;\n        }\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    LiteralMapExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof LiteralMapExpr && areAllEquivalent(this.entries, e.entries);\n    };\n    /**\n     * @return {?}\n     */\n    LiteralMapExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return this.entries.every(function (e) { return e.value.isConstant(); }); };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    LiteralMapExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitLiteralMapExpr(this, context);\n    };\n    return LiteralMapExpr;\n}(Expression));\nexport { LiteralMapExpr };\nfunction LiteralMapExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LiteralMapExpr.prototype.valueType;\n    /** @type {?} */\n    LiteralMapExpr.prototype.entries;\n}\nvar CommaExpr = /** @class */ (function (_super) {\n    tslib_1.__extends(CommaExpr, _super);\n    function CommaExpr(parts, sourceSpan) {\n        var _this = _super.call(this, parts[parts.length - 1].type, sourceSpan) || this;\n        _this.parts = parts;\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    CommaExpr.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof CommaExpr && areAllEquivalent(this.parts, e.parts);\n    };\n    /**\n     * @return {?}\n     */\n    CommaExpr.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    CommaExpr.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitCommaExpr(this, context);\n    };\n    return CommaExpr;\n}(Expression));\nexport { CommaExpr };\nfunction CommaExpr_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CommaExpr.prototype.parts;\n}\n/**\n * @record\n */\nexport function ExpressionVisitor() { }\nfunction ExpressionVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitReadVarExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitWriteVarExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitWriteKeyExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitWritePropExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitInvokeMethodExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitInvokeFunctionExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitInstantiateExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitLiteralExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitExternalExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitConditionalExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitNotExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitAssertNotNullExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitCastExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitFunctionExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitBinaryOperatorExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitReadPropExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitReadKeyExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitLiteralArrayExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitLiteralMapExpr;\n    /** @type {?} */\n    ExpressionVisitor.prototype.visitCommaExpr;\n}\nexport var /** @type {?} */ THIS_EXPR = new ReadVarExpr(BuiltinVar.This, null, null);\nexport var /** @type {?} */ SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super, null, null);\nexport var /** @type {?} */ CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError, null, null);\nexport var /** @type {?} */ CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack, null, null);\nexport var /** @type {?} */ NULL_EXPR = new LiteralExpr(null, null, null);\nexport var /** @type {?} */ TYPED_NULL_EXPR = new LiteralExpr(null, INFERRED_TYPE, null);\n/** @enum {number} */\nvar StmtModifier = {\n    Final: 0,\n    Private: 1,\n    Exported: 2,\n    Static: 3,\n};\nexport { StmtModifier };\nStmtModifier[StmtModifier.Final] = \"Final\";\nStmtModifier[StmtModifier.Private] = \"Private\";\nStmtModifier[StmtModifier.Exported] = \"Exported\";\nStmtModifier[StmtModifier.Static] = \"Static\";\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nStatement = /** @class */ (function () {\n    function Statement(modifiers, sourceSpan) {\n        this.modifiers = modifiers || [];\n        this.sourceSpan = sourceSpan || null;\n    }\n    /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    Statement.prototype.hasModifier = /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    function (modifier) { return /** @type {?} */ ((this.modifiers)).indexOf(modifier) !== -1; };\n    return Statement;\n}());\n/**\n * @abstract\n */\nexport { Statement };\nfunction Statement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Statement.prototype.modifiers;\n    /** @type {?} */\n    Statement.prototype.sourceSpan;\n    /**\n     * Calculates whether this statement produces the same value as the given statement.\n     * Note: We don't check Types nor ParseSourceSpans nor function arguments.\n     * @abstract\n     * @param {?} stmt\n     * @return {?}\n     */\n    Statement.prototype.isEquivalent = function (stmt) { };\n    /**\n     * @abstract\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    Statement.prototype.visitStatement = function (visitor, context) { };\n}\nvar DeclareVarStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(DeclareVarStmt, _super);\n    function DeclareVarStmt(name, value, type, modifiers, sourceSpan) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers, sourceSpan) || this;\n        _this.name = name;\n        _this.value = value;\n        _this.type = type || (value && value.type) || null;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    DeclareVarStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof DeclareVarStmt && this.name === stmt.name &&\n            (this.value ? !!stmt.value && this.value.isEquivalent(stmt.value) : !stmt.value);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    DeclareVarStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitDeclareVarStmt(this, context);\n    };\n    return DeclareVarStmt;\n}(Statement));\nexport { DeclareVarStmt };\nfunction DeclareVarStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DeclareVarStmt.prototype.type;\n    /** @type {?} */\n    DeclareVarStmt.prototype.name;\n    /** @type {?} */\n    DeclareVarStmt.prototype.value;\n}\nvar DeclareFunctionStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(DeclareFunctionStmt, _super);\n    function DeclareFunctionStmt(name, params, statements, type, modifiers, sourceSpan) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers, sourceSpan) || this;\n        _this.name = name;\n        _this.params = params;\n        _this.statements = statements;\n        _this.type = type || null;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    DeclareFunctionStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof DeclareFunctionStmt && areAllEquivalent(this.params, stmt.params) &&\n            areAllEquivalent(this.statements, stmt.statements);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    DeclareFunctionStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitDeclareFunctionStmt(this, context);\n    };\n    return DeclareFunctionStmt;\n}(Statement));\nexport { DeclareFunctionStmt };\nfunction DeclareFunctionStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DeclareFunctionStmt.prototype.type;\n    /** @type {?} */\n    DeclareFunctionStmt.prototype.name;\n    /** @type {?} */\n    DeclareFunctionStmt.prototype.params;\n    /** @type {?} */\n    DeclareFunctionStmt.prototype.statements;\n}\nvar ExpressionStatement = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpressionStatement, _super);\n    function ExpressionStatement(expr, sourceSpan) {\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.expr = expr;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    ExpressionStatement.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof ExpressionStatement && this.expr.isEquivalent(stmt.expr);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ExpressionStatement.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitExpressionStmt(this, context);\n    };\n    return ExpressionStatement;\n}(Statement));\nexport { ExpressionStatement };\nfunction ExpressionStatement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExpressionStatement.prototype.expr;\n}\nvar ReturnStatement = /** @class */ (function (_super) {\n    tslib_1.__extends(ReturnStatement, _super);\n    function ReturnStatement(value, sourceSpan) {\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.value = value;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    ReturnStatement.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof ReturnStatement && this.value.isEquivalent(stmt.value);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ReturnStatement.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitReturnStmt(this, context);\n    };\n    return ReturnStatement;\n}(Statement));\nexport { ReturnStatement };\nfunction ReturnStatement_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReturnStatement.prototype.value;\n}\nvar AbstractClassPart = /** @class */ (function () {\n    function AbstractClassPart(type, modifiers) {\n        this.modifiers = modifiers;\n        if (!modifiers) {\n            this.modifiers = [];\n        }\n        this.type = type || null;\n    }\n    /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    AbstractClassPart.prototype.hasModifier = /**\n     * @param {?} modifier\n     * @return {?}\n     */\n    function (modifier) { return /** @type {?} */ ((this.modifiers)).indexOf(modifier) !== -1; };\n    return AbstractClassPart;\n}());\nexport { AbstractClassPart };\nfunction AbstractClassPart_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AbstractClassPart.prototype.type;\n    /** @type {?} */\n    AbstractClassPart.prototype.modifiers;\n}\nvar ClassField = /** @class */ (function (_super) {\n    tslib_1.__extends(ClassField, _super);\n    function ClassField(name, type, modifiers, initializer) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, type, modifiers) || this;\n        _this.name = name;\n        _this.initializer = initializer;\n        return _this;\n    }\n    /**\n     * @param {?} f\n     * @return {?}\n     */\n    ClassField.prototype.isEquivalent = /**\n     * @param {?} f\n     * @return {?}\n     */\n    function (f) { return this.name === f.name; };\n    return ClassField;\n}(AbstractClassPart));\nexport { ClassField };\nfunction ClassField_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ClassField.prototype.name;\n    /** @type {?} */\n    ClassField.prototype.initializer;\n}\nvar ClassMethod = /** @class */ (function (_super) {\n    tslib_1.__extends(ClassMethod, _super);\n    function ClassMethod(name, params, body, type, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, type, modifiers) || this;\n        _this.name = name;\n        _this.params = params;\n        _this.body = body;\n        return _this;\n    }\n    /**\n     * @param {?} m\n     * @return {?}\n     */\n    ClassMethod.prototype.isEquivalent = /**\n     * @param {?} m\n     * @return {?}\n     */\n    function (m) {\n        return this.name === m.name && areAllEquivalent(this.body, m.body);\n    };\n    return ClassMethod;\n}(AbstractClassPart));\nexport { ClassMethod };\nfunction ClassMethod_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ClassMethod.prototype.name;\n    /** @type {?} */\n    ClassMethod.prototype.params;\n    /** @type {?} */\n    ClassMethod.prototype.body;\n}\nvar ClassGetter = /** @class */ (function (_super) {\n    tslib_1.__extends(ClassGetter, _super);\n    function ClassGetter(name, body, type, modifiers) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, type, modifiers) || this;\n        _this.name = name;\n        _this.body = body;\n        return _this;\n    }\n    /**\n     * @param {?} m\n     * @return {?}\n     */\n    ClassGetter.prototype.isEquivalent = /**\n     * @param {?} m\n     * @return {?}\n     */\n    function (m) {\n        return this.name === m.name && areAllEquivalent(this.body, m.body);\n    };\n    return ClassGetter;\n}(AbstractClassPart));\nexport { ClassGetter };\nfunction ClassGetter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ClassGetter.prototype.name;\n    /** @type {?} */\n    ClassGetter.prototype.body;\n}\nvar ClassStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(ClassStmt, _super);\n    function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers, sourceSpan) {\n        if (modifiers === void 0) { modifiers = null; }\n        var _this = _super.call(this, modifiers, sourceSpan) || this;\n        _this.name = name;\n        _this.parent = parent;\n        _this.fields = fields;\n        _this.getters = getters;\n        _this.constructorMethod = constructorMethod;\n        _this.methods = methods;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    ClassStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof ClassStmt && this.name === stmt.name &&\n            nullSafeIsEquivalent(this.parent, stmt.parent) &&\n            areAllEquivalent(this.fields, stmt.fields) &&\n            areAllEquivalent(this.getters, stmt.getters) &&\n            this.constructorMethod.isEquivalent(stmt.constructorMethod) &&\n            areAllEquivalent(this.methods, stmt.methods);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ClassStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitDeclareClassStmt(this, context);\n    };\n    return ClassStmt;\n}(Statement));\nexport { ClassStmt };\nfunction ClassStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ClassStmt.prototype.name;\n    /** @type {?} */\n    ClassStmt.prototype.parent;\n    /** @type {?} */\n    ClassStmt.prototype.fields;\n    /** @type {?} */\n    ClassStmt.prototype.getters;\n    /** @type {?} */\n    ClassStmt.prototype.constructorMethod;\n    /** @type {?} */\n    ClassStmt.prototype.methods;\n}\nvar IfStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(IfStmt, _super);\n    function IfStmt(condition, trueCase, falseCase, sourceSpan) {\n        if (falseCase === void 0) { falseCase = []; }\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.condition = condition;\n        _this.trueCase = trueCase;\n        _this.falseCase = falseCase;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    IfStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof IfStmt && this.condition.isEquivalent(stmt.condition) &&\n            areAllEquivalent(this.trueCase, stmt.trueCase) &&\n            areAllEquivalent(this.falseCase, stmt.falseCase);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    IfStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitIfStmt(this, context);\n    };\n    return IfStmt;\n}(Statement));\nexport { IfStmt };\nfunction IfStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IfStmt.prototype.condition;\n    /** @type {?} */\n    IfStmt.prototype.trueCase;\n    /** @type {?} */\n    IfStmt.prototype.falseCase;\n}\nvar CommentStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(CommentStmt, _super);\n    function CommentStmt(comment, multiline, sourceSpan) {\n        if (multiline === void 0) { multiline = false; }\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.comment = comment;\n        _this.multiline = multiline;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    CommentStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) { return stmt instanceof CommentStmt; };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    CommentStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitCommentStmt(this, context);\n    };\n    return CommentStmt;\n}(Statement));\nexport { CommentStmt };\nfunction CommentStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CommentStmt.prototype.comment;\n    /** @type {?} */\n    CommentStmt.prototype.multiline;\n}\nvar JSDocCommentStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(JSDocCommentStmt, _super);\n    function JSDocCommentStmt(tags, sourceSpan) {\n        if (tags === void 0) { tags = []; }\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.tags = tags;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    JSDocCommentStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof JSDocCommentStmt && this.toString() === stmt.toString();\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    JSDocCommentStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitJSDocCommentStmt(this, context);\n    };\n    /**\n     * @return {?}\n     */\n    JSDocCommentStmt.prototype.toString = /**\n     * @return {?}\n     */\n    function () { return serializeTags(this.tags); };\n    return JSDocCommentStmt;\n}(Statement));\nexport { JSDocCommentStmt };\nfunction JSDocCommentStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    JSDocCommentStmt.prototype.tags;\n}\nvar TryCatchStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(TryCatchStmt, _super);\n    function TryCatchStmt(bodyStmts, catchStmts, sourceSpan) {\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.bodyStmts = bodyStmts;\n        _this.catchStmts = catchStmts;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    TryCatchStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof TryCatchStmt && areAllEquivalent(this.bodyStmts, stmt.bodyStmts) &&\n            areAllEquivalent(this.catchStmts, stmt.catchStmts);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    TryCatchStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitTryCatchStmt(this, context);\n    };\n    return TryCatchStmt;\n}(Statement));\nexport { TryCatchStmt };\nfunction TryCatchStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TryCatchStmt.prototype.bodyStmts;\n    /** @type {?} */\n    TryCatchStmt.prototype.catchStmts;\n}\nvar ThrowStmt = /** @class */ (function (_super) {\n    tslib_1.__extends(ThrowStmt, _super);\n    function ThrowStmt(error, sourceSpan) {\n        var _this = _super.call(this, null, sourceSpan) || this;\n        _this.error = error;\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    ThrowStmt.prototype.isEquivalent = /**\n     * @param {?} stmt\n     * @return {?}\n     */\n    function (stmt) {\n        return stmt instanceof TryCatchStmt && this.error.isEquivalent(stmt.error);\n    };\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    ThrowStmt.prototype.visitStatement = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        return visitor.visitThrowStmt(this, context);\n    };\n    return ThrowStmt;\n}(Statement));\nexport { ThrowStmt };\nfunction ThrowStmt_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ThrowStmt.prototype.error;\n}\n/**\n * @record\n */\nexport function StatementVisitor() { }\nfunction StatementVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StatementVisitor.prototype.visitDeclareVarStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitDeclareFunctionStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitExpressionStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitReturnStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitDeclareClassStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitIfStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitTryCatchStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitThrowStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitCommentStmt;\n    /** @type {?} */\n    StatementVisitor.prototype.visitJSDocCommentStmt;\n}\nvar AstTransformer = /** @class */ (function () {\n    function AstTransformer() {\n    }\n    /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.transformExpr = /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    function (expr, context) { return expr; };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.transformStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) { return stmt; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return this.transformExpr(ast, context); };\n    /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitWriteVarExpr = /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    function (expr, context) {\n        return this.transformExpr(new WriteVarExpr(expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    };\n    /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitWriteKeyExpr = /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    function (expr, context) {\n        return this.transformExpr(new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    };\n    /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitWritePropExpr = /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    function (expr, context) {\n        return this.transformExpr(new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context), expr.type, expr.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitInvokeMethodExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ method = ast.builtin || ast.name;\n        return this.transformExpr(new InvokeMethodExpr(ast.receiver.visitExpression(this, context), /** @type {?} */ ((method)), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitInvokeFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitInstantiateExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return this.transformExpr(ast, context); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitConditionalExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), /** @type {?} */ ((ast.falseCase)).visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitNotExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new NotExpr(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitAssertNotNullExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new AssertNotNull(ast.condition.visitExpression(this, context), ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitCastExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new CastExpr(ast.value.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new FunctionExpr(ast.params, this.visitAllStatements(ast.statements, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitBinaryOperatorExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitReadPropExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitReadKeyExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context), ast.type, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitLiteralMapExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ entries = ast.entries.map(function (entry) {\n            return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted);\n        });\n        var /** @type {?} */ mapType = new MapType(ast.valueType, null);\n        return this.transformExpr(new LiteralMapExpr(entries, mapType, ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitCommaExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.transformExpr(new CommaExpr(this.visitAllExpressions(ast.parts, context), ast.sourceSpan), context);\n    };\n    /**\n     * @param {?} exprs\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitAllExpressions = /**\n     * @param {?} exprs\n     * @param {?} context\n     * @return {?}\n     */\n    function (exprs, context) {\n        var _this = this;\n        return exprs.map(function (expr) { return expr.visitExpression(_this, context); });\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        var /** @type {?} */ value = stmt.value && stmt.value.visitExpression(this, context);\n        return this.transformStmt(new DeclareVarStmt(stmt.name, value, stmt.type, stmt.modifiers, stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new DeclareFunctionStmt(stmt.name, stmt.params, this.visitAllStatements(stmt.statements, context), stmt.type, stmt.modifiers, stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitExpressionStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new ExpressionStatement(stmt.expr.visitExpression(this, context), stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitReturnStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new ReturnStatement(stmt.value.visitExpression(this, context), stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        var _this = this;\n        var /** @type {?} */ parent = /** @type {?} */ ((stmt.parent)).visitExpression(this, context);\n        var /** @type {?} */ getters = stmt.getters.map(function (getter) {\n            return new ClassGetter(getter.name, _this.visitAllStatements(getter.body, context), getter.type, getter.modifiers);\n        });\n        var /** @type {?} */ ctorMethod = stmt.constructorMethod &&\n            new ClassMethod(stmt.constructorMethod.name, stmt.constructorMethod.params, this.visitAllStatements(stmt.constructorMethod.body, context), stmt.constructorMethod.type, stmt.constructorMethod.modifiers);\n        var /** @type {?} */ methods = stmt.methods.map(function (method) {\n            return new ClassMethod(method.name, method.params, _this.visitAllStatements(method.body, context), method.type, method.modifiers);\n        });\n        return this.transformStmt(new ClassStmt(stmt.name, parent, stmt.fields, getters, ctorMethod, methods, stmt.modifiers, stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitIfStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context), stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitTryCatchStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context), stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitThrowStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(new ThrowStmt(stmt.error.visitExpression(this, context), stmt.sourceSpan), context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(stmt, context);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitJSDocCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        return this.transformStmt(stmt, context);\n    };\n    /**\n     * @param {?} stmts\n     * @param {?} context\n     * @return {?}\n     */\n    AstTransformer.prototype.visitAllStatements = /**\n     * @param {?} stmts\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmts, context) {\n        var _this = this;\n        return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });\n    };\n    return AstTransformer;\n}());\nexport { AstTransformer };\nvar RecursiveAstVisitor = /** @class */ (function () {\n    function RecursiveAstVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitType = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { return ast; };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitExpression = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        if (ast.type) {\n            ast.type.visitType(this, context);\n        }\n        return ast;\n    };\n    /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitBuiltinType = /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    function (type, context) { return this.visitType(type, context); };\n    /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitExpressionType = /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    function (type, context) {\n        type.value.visitExpression(this, context);\n        return this.visitType(type, context);\n    };\n    /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitArrayType = /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    function (type, context) { return this.visitType(type, context); };\n    /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitMapType = /**\n     * @param {?} type\n     * @param {?} context\n     * @return {?}\n     */\n    function (type, context) { return this.visitType(type, context); };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitWriteVarExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitWriteKeyExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.index.visitExpression(this, context);\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitWritePropExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitInvokeMethodExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitInvokeFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.fn.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitInstantiateExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.classExpr.visitExpression(this, context);\n        this.visitAllExpressions(ast.args, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        if (ast.typeParams) {\n            ast.typeParams.forEach(function (type) { return type.visitType(_this, context); });\n        }\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitConditionalExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.condition.visitExpression(this, context);\n        ast.trueCase.visitExpression(this, context); /** @type {?} */\n        ((ast.falseCase)).visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitNotExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.condition.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitAssertNotNullExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.condition.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitCastExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.value.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.visitAllStatements(ast.statements, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitBinaryOperatorExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.lhs.visitExpression(this, context);\n        ast.rhs.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitReadPropExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitReadKeyExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        ast.receiver.visitExpression(this, context);\n        ast.index.visitExpression(this, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.visitAllExpressions(ast.entries, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitLiteralMapExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        ast.entries.forEach(function (entry) { return entry.value.visitExpression(_this, context); });\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitCommaExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.visitAllExpressions(ast.parts, context);\n        return this.visitExpression(ast, context);\n    };\n    /**\n     * @param {?} exprs\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitAllExpressions = /**\n     * @param {?} exprs\n     * @param {?} context\n     * @return {?}\n     */\n    function (exprs, context) {\n        var _this = this;\n        exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        if (stmt.value) {\n            stmt.value.visitExpression(this, context);\n        }\n        if (stmt.type) {\n            stmt.type.visitType(this, context);\n        }\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        this.visitAllStatements(stmt.statements, context);\n        if (stmt.type) {\n            stmt.type.visitType(this, context);\n        }\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitExpressionStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        stmt.expr.visitExpression(this, context);\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitReturnStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        stmt.value.visitExpression(this, context);\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        var _this = this;\n        /** @type {?} */ ((stmt.parent)).visitExpression(this, context);\n        stmt.getters.forEach(function (getter) { return _this.visitAllStatements(getter.body, context); });\n        if (stmt.constructorMethod) {\n            this.visitAllStatements(stmt.constructorMethod.body, context);\n        }\n        stmt.methods.forEach(function (method) { return _this.visitAllStatements(method.body, context); });\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitIfStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        stmt.condition.visitExpression(this, context);\n        this.visitAllStatements(stmt.trueCase, context);\n        this.visitAllStatements(stmt.falseCase, context);\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitTryCatchStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        this.visitAllStatements(stmt.bodyStmts, context);\n        this.visitAllStatements(stmt.catchStmts, context);\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitThrowStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        stmt.error.visitExpression(this, context);\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) { return stmt; };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitJSDocCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) { return stmt; };\n    /**\n     * @param {?} stmts\n     * @param {?} context\n     * @return {?}\n     */\n    RecursiveAstVisitor.prototype.visitAllStatements = /**\n     * @param {?} stmts\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmts, context) {\n        var _this = this;\n        stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });\n    };\n    return RecursiveAstVisitor;\n}());\nexport { RecursiveAstVisitor };\n/**\n * @param {?} stmts\n * @return {?}\n */\nexport function findReadVarNames(stmts) {\n    var /** @type {?} */ visitor = new _ReadVarVisitor();\n    visitor.visitAllStatements(stmts, null);\n    return visitor.varNames;\n}\nvar _ReadVarVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(_ReadVarVisitor, _super);\n    function _ReadVarVisitor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.varNames = new Set();\n        return _this;\n    }\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    _ReadVarVisitor.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        // Don't descend into nested functions\n        return stmt;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    _ReadVarVisitor.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        // Don't descend into nested classes\n        return stmt;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _ReadVarVisitor.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        if (ast.name) {\n            this.varNames.add(ast.name);\n        }\n        return null;\n    };\n    return _ReadVarVisitor;\n}(RecursiveAstVisitor));\nfunction _ReadVarVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ReadVarVisitor.prototype.varNames;\n}\n/**\n * @param {?} stmts\n * @return {?}\n */\nexport function collectExternalReferences(stmts) {\n    var /** @type {?} */ visitor = new _FindExternalReferencesVisitor();\n    visitor.visitAllStatements(stmts, null);\n    return visitor.externalReferences;\n}\nvar _FindExternalReferencesVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(_FindExternalReferencesVisitor, _super);\n    function _FindExternalReferencesVisitor() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.externalReferences = [];\n        return _this;\n    }\n    /**\n     * @param {?} e\n     * @param {?} context\n     * @return {?}\n     */\n    _FindExternalReferencesVisitor.prototype.visitExternalExpr = /**\n     * @param {?} e\n     * @param {?} context\n     * @return {?}\n     */\n    function (e, context) {\n        this.externalReferences.push(e.value);\n        return _super.prototype.visitExternalExpr.call(this, e, context);\n    };\n    return _FindExternalReferencesVisitor;\n}(RecursiveAstVisitor));\nfunction _FindExternalReferencesVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _FindExternalReferencesVisitor.prototype.externalReferences;\n}\n/**\n * @param {?} stmt\n * @param {?} sourceSpan\n * @return {?}\n */\nexport function applySourceSpanToStatementIfNeeded(stmt, sourceSpan) {\n    if (!sourceSpan) {\n        return stmt;\n    }\n    var /** @type {?} */ transformer = new _ApplySourceSpanTransformer(sourceSpan);\n    return stmt.visitStatement(transformer, null);\n}\n/**\n * @param {?} expr\n * @param {?} sourceSpan\n * @return {?}\n */\nexport function applySourceSpanToExpressionIfNeeded(expr, sourceSpan) {\n    if (!sourceSpan) {\n        return expr;\n    }\n    var /** @type {?} */ transformer = new _ApplySourceSpanTransformer(sourceSpan);\n    return expr.visitExpression(transformer, null);\n}\nvar _ApplySourceSpanTransformer = /** @class */ (function (_super) {\n    tslib_1.__extends(_ApplySourceSpanTransformer, _super);\n    function _ApplySourceSpanTransformer(sourceSpan) {\n        var _this = _super.call(this) || this;\n        _this.sourceSpan = sourceSpan;\n        return _this;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    _ApplySourceSpanTransformer.prototype._clone = /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function (obj) {\n        var /** @type {?} */ clone = Object.create(obj.constructor.prototype);\n        for (var /** @type {?} */ prop in obj) {\n            clone[prop] = obj[prop];\n        }\n        return clone;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    _ApplySourceSpanTransformer.prototype.transformExpr = /**\n     * @param {?} expr\n     * @param {?} context\n     * @return {?}\n     */\n    function (expr, context) {\n        if (!expr.sourceSpan) {\n            expr = this._clone(expr);\n            expr.sourceSpan = this.sourceSpan;\n        }\n        return expr;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    _ApplySourceSpanTransformer.prototype.transformStmt = /**\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    function (stmt, context) {\n        if (!stmt.sourceSpan) {\n            stmt = this._clone(stmt);\n            stmt.sourceSpan = this.sourceSpan;\n        }\n        return stmt;\n    };\n    return _ApplySourceSpanTransformer;\n}(AstTransformer));\nfunction _ApplySourceSpanTransformer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ApplySourceSpanTransformer.prototype.sourceSpan;\n}\n/**\n * @param {?} name\n * @param {?=} type\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function variable(name, type, sourceSpan) {\n    return new ReadVarExpr(name, type, sourceSpan);\n}\n/**\n * @param {?} id\n * @param {?=} typeParams\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function importExpr(id, typeParams, sourceSpan) {\n    if (typeParams === void 0) { typeParams = null; }\n    return new ExternalExpr(id, null, typeParams, sourceSpan);\n}\n/**\n * @param {?} id\n * @param {?=} typeParams\n * @param {?=} typeModifiers\n * @return {?}\n */\nexport function importType(id, typeParams, typeModifiers) {\n    if (typeParams === void 0) { typeParams = null; }\n    if (typeModifiers === void 0) { typeModifiers = null; }\n    return id != null ? expressionType(importExpr(id, typeParams, null), typeModifiers) : null;\n}\n/**\n * @param {?} expr\n * @param {?=} typeModifiers\n * @return {?}\n */\nexport function expressionType(expr, typeModifiers) {\n    if (typeModifiers === void 0) { typeModifiers = null; }\n    return new ExpressionType(expr, typeModifiers);\n}\n/**\n * @param {?} values\n * @param {?=} type\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function literalArr(values, type, sourceSpan) {\n    return new LiteralArrayExpr(values, type, sourceSpan);\n}\n/**\n * @param {?} values\n * @param {?=} type\n * @return {?}\n */\nexport function literalMap(values, type) {\n    if (type === void 0) { type = null; }\n    return new LiteralMapExpr(values.map(function (e) { return new LiteralMapEntry(e.key, e.value, e.quoted); }), type, null);\n}\n/**\n * @param {?} expr\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function not(expr, sourceSpan) {\n    return new NotExpr(expr, sourceSpan);\n}\n/**\n * @param {?} expr\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function assertNotNull(expr, sourceSpan) {\n    return new AssertNotNull(expr, sourceSpan);\n}\n/**\n * @param {?} params\n * @param {?} body\n * @param {?=} type\n * @param {?=} sourceSpan\n * @param {?=} name\n * @return {?}\n */\nexport function fn(params, body, type, sourceSpan, name) {\n    return new FunctionExpr(params, body, type, sourceSpan, name);\n}\n/**\n * @param {?} condition\n * @param {?} thenClause\n * @param {?=} elseClause\n * @return {?}\n */\nexport function ifStmt(condition, thenClause, elseClause) {\n    return new IfStmt(condition, thenClause, elseClause);\n}\n/**\n * @param {?} value\n * @param {?=} type\n * @param {?=} sourceSpan\n * @return {?}\n */\nexport function literal(value, type, sourceSpan) {\n    return new LiteralExpr(value, type, sourceSpan);\n}\n/**\n * @param {?} exp\n * @return {?}\n */\nexport function isNull(exp) {\n    return exp instanceof LiteralExpr && exp.value === null;\n}\n/** @enum {string} */\nvar JSDocTagName = {\n    Desc: 'desc',\n    Id: 'id',\n    Meaning: 'meaning',\n};\nexport { JSDocTagName };\n/**\n * @param {?} tag\n * @return {?}\n */\nfunction tagToString(tag) {\n    var /** @type {?} */ out = '';\n    if (tag.tagName) {\n        out += \" @\" + tag.tagName;\n    }\n    if (tag.text) {\n        if (tag.text.match(/\\/\\*|\\*\\//)) {\n            throw new Error('JSDoc text cannot contain \"/*\" and \"*/\"');\n        }\n        out += ' ' + tag.text.replace(/@/g, '\\\\@');\n    }\n    return out;\n}\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction serializeTags(tags) {\n    if (tags.length === 0)\n        return '';\n    var /** @type {?} */ out = '*\\n';\n    for (var _i = 0, tags_1 = tags; _i < tags_1.length; _i++) {\n        var tag = tags_1[_i];\n        out += ' *';\n        // If the tagToString is multi-line, insert \" * \" prefixes on subsequent lines.\n        out += tagToString(tag).replace(/\\n/g, '\\n * ');\n        out += '\\n';\n    }\n    out += ' ';\n    return out;\n}\n//# sourceMappingURL=output_ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { visitValue } from '../util';\nimport * as o from './output_ast';\nexport var /** @type {?} */ QUOTED_KEYS = '$quoted$';\n/**\n * @param {?} ctx\n * @param {?} value\n * @param {?=} type\n * @return {?}\n */\nexport function convertValueToOutputAst(ctx, value, type) {\n    if (type === void 0) { type = null; }\n    return visitValue(value, new _ValueOutputAstTransformer(ctx), type);\n}\nvar _ValueOutputAstTransformer = /** @class */ (function () {\n    function _ValueOutputAstTransformer(ctx) {\n        this.ctx = ctx;\n    }\n    /**\n     * @param {?} arr\n     * @param {?} type\n     * @return {?}\n     */\n    _ValueOutputAstTransformer.prototype.visitArray = /**\n     * @param {?} arr\n     * @param {?} type\n     * @return {?}\n     */\n    function (arr, type) {\n        var _this = this;\n        return o.literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);\n    };\n    /**\n     * @param {?} map\n     * @param {?} type\n     * @return {?}\n     */\n    _ValueOutputAstTransformer.prototype.visitStringMap = /**\n     * @param {?} map\n     * @param {?} type\n     * @return {?}\n     */\n    function (map, type) {\n        var _this = this;\n        var /** @type {?} */ entries = [];\n        var /** @type {?} */ quotedSet = new Set(map && map[QUOTED_KEYS]);\n        Object.keys(map).forEach(function (key) {\n            entries.push(new o.LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));\n        });\n        return new o.LiteralMapExpr(entries, type);\n    };\n    /**\n     * @param {?} value\n     * @param {?} type\n     * @return {?}\n     */\n    _ValueOutputAstTransformer.prototype.visitPrimitive = /**\n     * @param {?} value\n     * @param {?} type\n     * @return {?}\n     */\n    function (value, type) { return o.literal(value, type); };\n    /**\n     * @param {?} value\n     * @param {?} type\n     * @return {?}\n     */\n    _ValueOutputAstTransformer.prototype.visitOther = /**\n     * @param {?} value\n     * @param {?} type\n     * @return {?}\n     */\n    function (value, type) {\n        if (value instanceof o.Expression) {\n            return value;\n        }\n        else {\n            return this.ctx.importExpr(value);\n        }\n    };\n    return _ValueOutputAstTransformer;\n}());\nfunction _ValueOutputAstTransformer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ValueOutputAstTransformer.prototype.ctx;\n}\n//# sourceMappingURL=value_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { identifierName } from './compile_metadata';\nimport { Identifiers } from './identifiers';\nimport * as o from './output/output_ast';\nimport { convertValueToOutputAst } from './output/value_util';\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nfunction mapEntry(key, value) {\n    return { key: key, value: value, quoted: false };\n}\nvar InjectableCompiler = /** @class */ (function () {\n    function InjectableCompiler(reflector, alwaysGenerateDef) {\n        this.reflector = reflector;\n        this.alwaysGenerateDef = alwaysGenerateDef;\n        this.tokenInjector = reflector.resolveExternalReference(Identifiers.Injector);\n    }\n    /**\n     * @param {?} deps\n     * @param {?} ctx\n     * @return {?}\n     */\n    InjectableCompiler.prototype.depsArray = /**\n     * @param {?} deps\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (deps, ctx) {\n        var _this = this;\n        return deps.map(function (dep) {\n            var /** @type {?} */ token = dep;\n            var /** @type {?} */ args = [token];\n            var /** @type {?} */ flags = 0 /* Default */;\n            if (Array.isArray(dep)) {\n                for (var /** @type {?} */ i = 0; i < dep.length; i++) {\n                    var /** @type {?} */ v = dep[i];\n                    if (v) {\n                        if (v.ngMetadataName === 'Optional') {\n                            flags |= 8 /* Optional */;\n                        }\n                        else if (v.ngMetadataName === 'SkipSelf') {\n                            flags |= 4 /* SkipSelf */;\n                        }\n                        else if (v.ngMetadataName === 'Self') {\n                            flags |= 2 /* Self */;\n                        }\n                        else if (v.ngMetadataName === 'Inject') {\n                            token = v.token;\n                        }\n                        else {\n                            token = v;\n                        }\n                    }\n                }\n            }\n            var /** @type {?} */ tokenExpr;\n            if (typeof token === 'string') {\n                tokenExpr = o.literal(token);\n            }\n            else if (token === _this.tokenInjector) {\n                tokenExpr = o.importExpr(Identifiers.INJECTOR);\n            }\n            else {\n                tokenExpr = ctx.importExpr(token);\n            }\n            if (flags !== 0 /* Default */) {\n                args = [tokenExpr, o.literal(flags)];\n            }\n            else {\n                args = [tokenExpr];\n            }\n            return o.importExpr(Identifiers.inject).callFn(args);\n        });\n    };\n    /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    InjectableCompiler.prototype.factoryFor = /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (injectable, ctx) {\n        var /** @type {?} */ retValue;\n        if (injectable.useExisting) {\n            retValue = o.importExpr(Identifiers.inject).callFn([ctx.importExpr(injectable.useExisting)]);\n        }\n        else if (injectable.useFactory) {\n            var /** @type {?} */ deps = injectable.deps || [];\n            if (deps.length > 0) {\n                retValue = ctx.importExpr(injectable.useFactory).callFn(this.depsArray(deps, ctx));\n            }\n            else {\n                return ctx.importExpr(injectable.useFactory);\n            }\n        }\n        else if (injectable.useValue) {\n            retValue = convertValueToOutputAst(ctx, injectable.useValue);\n        }\n        else {\n            var /** @type {?} */ clazz = injectable.useClass || injectable.symbol;\n            var /** @type {?} */ depArgs = this.depsArray(this.reflector.parameters(clazz), ctx);\n            retValue = new o.InstantiateExpr(ctx.importExpr(clazz), depArgs);\n        }\n        return o.fn([], [new o.ReturnStatement(retValue)], undefined, undefined, injectable.symbol.name + '_Factory');\n    };\n    /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    InjectableCompiler.prototype.injectableDef = /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (injectable, ctx) {\n        var /** @type {?} */ providedIn = o.NULL_EXPR;\n        if (injectable.providedIn !== undefined) {\n            if (injectable.providedIn === null) {\n                providedIn = o.NULL_EXPR;\n            }\n            else if (typeof injectable.providedIn === 'string') {\n                providedIn = o.literal(injectable.providedIn);\n            }\n            else {\n                providedIn = ctx.importExpr(injectable.providedIn);\n            }\n        }\n        var /** @type {?} */ def = [\n            mapEntry('factory', this.factoryFor(injectable, ctx)),\n            mapEntry('token', ctx.importExpr(injectable.type.reference)),\n            mapEntry('providedIn', providedIn),\n        ];\n        return o.importExpr(Identifiers.defineInjectable).callFn([o.literalMap(def)]);\n    };\n    /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    InjectableCompiler.prototype.compile = /**\n     * @param {?} injectable\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (injectable, ctx) {\n        if (this.alwaysGenerateDef || injectable.providedIn !== undefined) {\n            var /** @type {?} */ className = /** @type {?} */ ((identifierName(injectable.type)));\n            var /** @type {?} */ clazz = new o.ClassStmt(className, null, [\n                new o.ClassField('ngInjectableDef', o.INFERRED_TYPE, [o.StmtModifier.Static], this.injectableDef(injectable, ctx)),\n            ], [], new o.ClassMethod(null, [], []), []);\n            ctx.statements.push(clazz);\n        }\n    };\n    return InjectableCompiler;\n}());\nexport { InjectableCompiler };\nfunction InjectableCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    InjectableCompiler.prototype.tokenInjector;\n    /** @type {?} */\n    InjectableCompiler.prototype.reflector;\n    /** @type {?} */\n    InjectableCompiler.prototype.alwaysGenerateDef;\n}\n//# sourceMappingURL=injectable_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\nvar /** @type {?} */ GENERATED_FILE = /\\.ngfactory\\.|\\.ngsummary\\./;\nvar /** @type {?} */ JIT_SUMMARY_FILE = /\\.ngsummary\\./;\nvar /** @type {?} */ JIT_SUMMARY_NAME = /NgSummary$/;\n/**\n * @param {?} filePath\n * @param {?=} forceSourceFile\n * @return {?}\n */\nexport function ngfactoryFilePath(filePath, forceSourceFile) {\n    if (forceSourceFile === void 0) { forceSourceFile = false; }\n    var /** @type {?} */ urlWithSuffix = splitTypescriptSuffix(filePath, forceSourceFile);\n    return urlWithSuffix[0] + \".ngfactory\" + normalizeGenFileSuffix(urlWithSuffix[1]);\n}\n/**\n * @param {?} filePath\n * @return {?}\n */\nexport function stripGeneratedFileSuffix(filePath) {\n    return filePath.replace(GENERATED_FILE, '.');\n}\n/**\n * @param {?} filePath\n * @return {?}\n */\nexport function isGeneratedFile(filePath) {\n    return GENERATED_FILE.test(filePath);\n}\n/**\n * @param {?} path\n * @param {?=} forceSourceFile\n * @return {?}\n */\nexport function splitTypescriptSuffix(path, forceSourceFile) {\n    if (forceSourceFile === void 0) { forceSourceFile = false; }\n    if (path.endsWith('.d.ts')) {\n        return [path.slice(0, -5), forceSourceFile ? '.ts' : '.d.ts'];\n    }\n    var /** @type {?} */ lastDot = path.lastIndexOf('.');\n    if (lastDot !== -1) {\n        return [path.substring(0, lastDot), path.substring(lastDot)];\n    }\n    return [path, ''];\n}\n/**\n * @param {?} srcFileSuffix\n * @return {?}\n */\nexport function normalizeGenFileSuffix(srcFileSuffix) {\n    return srcFileSuffix === '.tsx' ? '.ts' : srcFileSuffix;\n}\n/**\n * @param {?} fileName\n * @return {?}\n */\nexport function summaryFileName(fileName) {\n    var /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\n    return fileNameWithoutSuffix + \".ngsummary.json\";\n}\n/**\n * @param {?} fileName\n * @param {?=} forceSourceFile\n * @return {?}\n */\nexport function summaryForJitFileName(fileName, forceSourceFile) {\n    if (forceSourceFile === void 0) { forceSourceFile = false; }\n    var /** @type {?} */ urlWithSuffix = splitTypescriptSuffix(stripGeneratedFileSuffix(fileName), forceSourceFile);\n    return urlWithSuffix[0] + \".ngsummary\" + urlWithSuffix[1];\n}\n/**\n * @param {?} filePath\n * @return {?}\n */\nexport function stripSummaryForJitFileSuffix(filePath) {\n    return filePath.replace(JIT_SUMMARY_FILE, '.');\n}\n/**\n * @param {?} symbolName\n * @return {?}\n */\nexport function summaryForJitName(symbolName) {\n    return symbolName + \"NgSummary\";\n}\n/**\n * @param {?} symbolName\n * @return {?}\n */\nexport function stripSummaryForJitNameSuffix(symbolName) {\n    return symbolName.replace(JIT_SUMMARY_NAME, '');\n}\nvar /** @type {?} */ LOWERED_SYMBOL = /\\u0275\\d+/;\n/**\n * @param {?} name\n * @return {?}\n */\nexport function isLoweredSymbol(name) {\n    return LOWERED_SYMBOL.test(name);\n}\n/**\n * @param {?} id\n * @return {?}\n */\nexport function createLoweredSymbol(id) {\n    return \"\\u0275\" + id;\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @enum {number} */\nvar LifecycleHooks = {\n    OnInit: 0,\n    OnDestroy: 1,\n    DoCheck: 2,\n    OnChanges: 3,\n    AfterContentInit: 4,\n    AfterContentChecked: 5,\n    AfterViewInit: 6,\n    AfterViewChecked: 7,\n};\nexport { LifecycleHooks };\nLifecycleHooks[LifecycleHooks.OnInit] = \"OnInit\";\nLifecycleHooks[LifecycleHooks.OnDestroy] = \"OnDestroy\";\nLifecycleHooks[LifecycleHooks.DoCheck] = \"DoCheck\";\nLifecycleHooks[LifecycleHooks.OnChanges] = \"OnChanges\";\nLifecycleHooks[LifecycleHooks.AfterContentInit] = \"AfterContentInit\";\nLifecycleHooks[LifecycleHooks.AfterContentChecked] = \"AfterContentChecked\";\nLifecycleHooks[LifecycleHooks.AfterViewInit] = \"AfterViewInit\";\nLifecycleHooks[LifecycleHooks.AfterViewChecked] = \"AfterViewChecked\";\nexport var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = [\n    LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,\n    LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,\n    LifecycleHooks.AfterViewChecked\n];\n/**\n * @param {?} reflector\n * @param {?} hook\n * @param {?} token\n * @return {?}\n */\nexport function hasLifecycleHook(reflector, hook, token) {\n    return reflector.hasLifecycleHook(token, getHookName(hook));\n}\n/**\n * @param {?} reflector\n * @param {?} token\n * @return {?}\n */\nexport function getAllLifecycleHooks(reflector, token) {\n    return LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(reflector, hook, token); });\n}\n/**\n * @param {?} hook\n * @return {?}\n */\nfunction getHookName(hook) {\n    switch (hook) {\n        case LifecycleHooks.OnInit:\n            return 'ngOnInit';\n        case LifecycleHooks.OnDestroy:\n            return 'ngOnDestroy';\n        case LifecycleHooks.DoCheck:\n            return 'ngDoCheck';\n        case LifecycleHooks.OnChanges:\n            return 'ngOnChanges';\n        case LifecycleHooks.AfterContentInit:\n            return 'ngAfterContentInit';\n        case LifecycleHooks.AfterContentChecked:\n            return 'ngAfterContentChecked';\n        case LifecycleHooks.AfterViewInit:\n            return 'ngAfterViewInit';\n        case LifecycleHooks.AfterViewChecked:\n            return 'ngAfterViewChecked';\n    }\n}\n//# sourceMappingURL=lifecycle_reflector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { StaticSymbol } from './aot/static_symbol';\nimport { ngfactoryFilePath } from './aot/util';\nimport { assertArrayOfStrings, assertInterpolationSymbols } from './assertions';\nimport * as cpl from './compile_metadata';\nimport { ChangeDetectionStrategy, Type, ViewEncapsulation, createAttribute, createComponent, createHost, createInject, createInjectable, createInjectionToken, createNgModule, createOptional, createSelf, createSkipSelf } from './core';\nimport { findLast } from './directive_resolver';\nimport { Identifiers } from './identifiers';\nimport { getAllLifecycleHooks } from './lifecycle_reflector';\nimport { CssSelector } from './selector';\nimport { SyncAsync, ValueTransformer, isPromise, noUndefined, resolveForwardRef, stringify, syntaxError, visitValue } from './util';\nexport var /** @type {?} */ ERROR_COMPONENT_TYPE = 'ngComponentType';\nvar CompileMetadataResolver = /** @class */ (function () {\n    function CompileMetadataResolver(_config, _htmlParser, _ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _console, _staticSymbolCache, _reflector, _errorCollector) {\n        this._config = _config;\n        this._htmlParser = _htmlParser;\n        this._ngModuleResolver = _ngModuleResolver;\n        this._directiveResolver = _directiveResolver;\n        this._pipeResolver = _pipeResolver;\n        this._summaryResolver = _summaryResolver;\n        this._schemaRegistry = _schemaRegistry;\n        this._directiveNormalizer = _directiveNormalizer;\n        this._console = _console;\n        this._staticSymbolCache = _staticSymbolCache;\n        this._reflector = _reflector;\n        this._errorCollector = _errorCollector;\n        this._nonNormalizedDirectiveCache = new Map();\n        this._directiveCache = new Map();\n        this._summaryCache = new Map();\n        this._pipeCache = new Map();\n        this._ngModuleCache = new Map();\n        this._ngModuleOfTypes = new Map();\n        this._shallowModuleCache = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getReflector = /**\n     * @return {?}\n     */\n    function () { return this._reflector; };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.clearCacheFor = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ dirMeta = this._directiveCache.get(type);\n        this._directiveCache.delete(type);\n        this._nonNormalizedDirectiveCache.delete(type);\n        this._summaryCache.delete(type);\n        this._pipeCache.delete(type);\n        this._ngModuleOfTypes.delete(type);\n        // Clear all of the NgModule as they contain transitive information!\n        this._ngModuleCache.clear();\n        if (dirMeta) {\n            this._directiveNormalizer.clearCacheFor(dirMeta);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.clearCache = /**\n     * @return {?}\n     */\n    function () {\n        this._directiveCache.clear();\n        this._nonNormalizedDirectiveCache.clear();\n        this._summaryCache.clear();\n        this._pipeCache.clear();\n        this._ngModuleCache.clear();\n        this._ngModuleOfTypes.clear();\n        this._directiveNormalizer.clearCache();\n    };\n    /**\n     * @param {?} baseType\n     * @param {?} name\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._createProxyClass = /**\n     * @param {?} baseType\n     * @param {?} name\n     * @return {?}\n     */\n    function (baseType, name) {\n        var /** @type {?} */ delegate = null;\n        var /** @type {?} */ proxyClass = /** @type {?} */ (function () {\n            if (!delegate) {\n                throw new Error(\"Illegal state: Class \" + name + \" for type \" + stringify(baseType) + \" is not compiled yet!\");\n            }\n            return delegate.apply(this, arguments);\n        });\n        proxyClass.setDelegate = function (d) {\n            delegate = d;\n            (/** @type {?} */ (proxyClass)).prototype = d.prototype;\n        };\n        // Make stringify work correctly\n        (/** @type {?} */ (proxyClass)).overriddenName = name;\n        return proxyClass;\n    };\n    /**\n     * @param {?} dirType\n     * @param {?} name\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getGeneratedClass = /**\n     * @param {?} dirType\n     * @param {?} name\n     * @return {?}\n     */\n    function (dirType, name) {\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), name);\n        }\n        else {\n            return this._createProxyClass(dirType, name);\n        }\n    };\n    /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getComponentViewClass = /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    function (dirType) {\n        return this.getGeneratedClass(dirType, cpl.viewClassName(dirType, 0));\n    };\n    /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getHostComponentViewClass = /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    function (dirType) {\n        return this.getGeneratedClass(dirType, cpl.hostViewClassName(dirType));\n    };\n    /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getHostComponentType = /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    function (dirType) {\n        var /** @type {?} */ name = cpl.identifierName({ reference: dirType }) + \"_Host\";\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(dirType.filePath, name);\n        }\n        else {\n            var /** @type {?} */ HostClass = /** @type {?} */ (function HostClass() { });\n            HostClass.overriddenName = name;\n            return HostClass;\n        }\n    };\n    /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getRendererType = /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    function (dirType) {\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), cpl.rendererTypeName(dirType));\n        }\n        else {\n            // returning an object as proxy,\n            // that we fill later during runtime compilation.\n            return /** @type {?} */ ({});\n        }\n    };\n    /**\n     * @param {?} selector\n     * @param {?} dirType\n     * @param {?} inputs\n     * @param {?} outputs\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getComponentFactory = /**\n     * @param {?} selector\n     * @param {?} dirType\n     * @param {?} inputs\n     * @param {?} outputs\n     * @return {?}\n     */\n    function (selector, dirType, inputs, outputs) {\n        if (dirType instanceof StaticSymbol) {\n            return this._staticSymbolCache.get(ngfactoryFilePath(dirType.filePath), cpl.componentFactoryName(dirType));\n        }\n        else {\n            var /** @type {?} */ hostView = this.getHostComponentViewClass(dirType);\n            // Note: ngContentSelectors will be filled later once the template is\n            // loaded.\n            var /** @type {?} */ createComponentFactory = this._reflector.resolveExternalReference(Identifiers.createComponentFactory);\n            return createComponentFactory(selector, dirType, /** @type {?} */ (hostView), inputs, outputs, []);\n        }\n    };\n    /**\n     * @param {?} factory\n     * @param {?} ngContentSelectors\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.initComponentFactory = /**\n     * @param {?} factory\n     * @param {?} ngContentSelectors\n     * @return {?}\n     */\n    function (factory, ngContentSelectors) {\n        if (!(factory instanceof StaticSymbol)) {\n            (_a = (/** @type {?} */ (factory)).ngContentSelectors).push.apply(_a, ngContentSelectors);\n        }\n        var _a;\n    };\n    /**\n     * @param {?} type\n     * @param {?} kind\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._loadSummary = /**\n     * @param {?} type\n     * @param {?} kind\n     * @return {?}\n     */\n    function (type, kind) {\n        var /** @type {?} */ typeSummary = this._summaryCache.get(type);\n        if (!typeSummary) {\n            var /** @type {?} */ summary = this._summaryResolver.resolveSummary(type);\n            typeSummary = summary ? summary.type : null;\n            this._summaryCache.set(type, typeSummary || null);\n        }\n        return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;\n    };\n    /**\n     * @param {?} compMeta\n     * @param {?=} hostViewType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getHostComponentMetadata = /**\n     * @param {?} compMeta\n     * @param {?=} hostViewType\n     * @return {?}\n     */\n    function (compMeta, hostViewType) {\n        var /** @type {?} */ hostType = this.getHostComponentType(compMeta.type.reference);\n        if (!hostViewType) {\n            hostViewType = this.getHostComponentViewClass(hostType);\n        }\n        // Note: ! is ok here as this method should only be called with normalized directive\n        // metadata, which always fills in the selector.\n        var /** @type {?} */ template = CssSelector.parse(/** @type {?} */ ((compMeta.selector)))[0].getMatchingElementTemplate();\n        var /** @type {?} */ templateUrl = '';\n        var /** @type {?} */ htmlAst = this._htmlParser.parse(template, templateUrl);\n        return cpl.CompileDirectiveMetadata.create({\n            isHost: true,\n            type: { reference: hostType, diDeps: [], lifecycleHooks: [] },\n            template: new cpl.CompileTemplateMetadata({\n                encapsulation: ViewEncapsulation.None,\n                template: template,\n                templateUrl: templateUrl,\n                htmlAst: htmlAst,\n                styles: [],\n                styleUrls: [],\n                ngContentSelectors: [],\n                animations: [],\n                isInline: true,\n                externalStylesheets: [],\n                interpolation: null,\n                preserveWhitespaces: false,\n            }),\n            exportAs: null,\n            changeDetection: ChangeDetectionStrategy.Default,\n            inputs: [],\n            outputs: [],\n            host: {},\n            isComponent: true,\n            selector: '*',\n            providers: [],\n            viewProviders: [],\n            queries: [],\n            guards: {},\n            viewQueries: [],\n            componentViewType: hostViewType,\n            rendererType: /** @type {?} */ ({ id: '__Host__', encapsulation: ViewEncapsulation.None, styles: [], data: {} }),\n            entryComponents: [],\n            componentFactory: null\n        });\n    };\n    /**\n     * @param {?} ngModuleType\n     * @param {?} directiveType\n     * @param {?} isSync\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.loadDirectiveMetadata = /**\n     * @param {?} ngModuleType\n     * @param {?} directiveType\n     * @param {?} isSync\n     * @return {?}\n     */\n    function (ngModuleType, directiveType, isSync) {\n        var _this = this;\n        if (this._directiveCache.has(directiveType)) {\n            return null;\n        }\n        directiveType = resolveForwardRef(directiveType);\n        var _a = /** @type {?} */ ((this.getNonNormalizedDirectiveMetadata(directiveType))), annotation = _a.annotation, metadata = _a.metadata;\n        var /** @type {?} */ createDirectiveMetadata = function (templateMetadata) {\n            var /** @type {?} */ normalizedDirMeta = new cpl.CompileDirectiveMetadata({\n                isHost: false,\n                type: metadata.type,\n                isComponent: metadata.isComponent,\n                selector: metadata.selector,\n                exportAs: metadata.exportAs,\n                changeDetection: metadata.changeDetection,\n                inputs: metadata.inputs,\n                outputs: metadata.outputs,\n                hostListeners: metadata.hostListeners,\n                hostProperties: metadata.hostProperties,\n                hostAttributes: metadata.hostAttributes,\n                providers: metadata.providers,\n                viewProviders: metadata.viewProviders,\n                queries: metadata.queries,\n                guards: metadata.guards,\n                viewQueries: metadata.viewQueries,\n                entryComponents: metadata.entryComponents,\n                componentViewType: metadata.componentViewType,\n                rendererType: metadata.rendererType,\n                componentFactory: metadata.componentFactory,\n                template: templateMetadata\n            });\n            if (templateMetadata) {\n                _this.initComponentFactory(/** @type {?} */ ((metadata.componentFactory)), templateMetadata.ngContentSelectors);\n            }\n            _this._directiveCache.set(directiveType, normalizedDirMeta);\n            _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());\n            return null;\n        };\n        if (metadata.isComponent) {\n            var /** @type {?} */ template = /** @type {?} */ ((metadata.template));\n            var /** @type {?} */ templateMeta = this._directiveNormalizer.normalizeTemplate({\n                ngModuleType: ngModuleType,\n                componentType: directiveType,\n                moduleUrl: this._reflector.componentModuleUrl(directiveType, annotation),\n                encapsulation: template.encapsulation,\n                template: template.template,\n                templateUrl: template.templateUrl,\n                styles: template.styles,\n                styleUrls: template.styleUrls,\n                animations: template.animations,\n                interpolation: template.interpolation,\n                preserveWhitespaces: template.preserveWhitespaces\n            });\n            if (isPromise(templateMeta) && isSync) {\n                this._reportError(componentStillLoadingError(directiveType), directiveType);\n                return null;\n            }\n            return SyncAsync.then(templateMeta, createDirectiveMetadata);\n        }\n        else {\n            // directive\n            createDirectiveMetadata(null);\n            return null;\n        }\n    };\n    /**\n     * @param {?} directiveType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = /**\n     * @param {?} directiveType\n     * @return {?}\n     */\n    function (directiveType) {\n        var _this = this;\n        directiveType = resolveForwardRef(directiveType);\n        if (!directiveType) {\n            return null;\n        }\n        var /** @type {?} */ cacheEntry = this._nonNormalizedDirectiveCache.get(directiveType);\n        if (cacheEntry) {\n            return cacheEntry;\n        }\n        var /** @type {?} */ dirMeta = this._directiveResolver.resolve(directiveType, false);\n        if (!dirMeta) {\n            return null;\n        }\n        var /** @type {?} */ nonNormalizedTemplateMetadata = /** @type {?} */ ((undefined));\n        if (createComponent.isTypeOf(dirMeta)) {\n            // component\n            var /** @type {?} */ compMeta = /** @type {?} */ (dirMeta);\n            assertArrayOfStrings('styles', compMeta.styles);\n            assertArrayOfStrings('styleUrls', compMeta.styleUrls);\n            assertInterpolationSymbols('interpolation', compMeta.interpolation);\n            var /** @type {?} */ animations = compMeta.animations;\n            nonNormalizedTemplateMetadata = new cpl.CompileTemplateMetadata({\n                encapsulation: noUndefined(compMeta.encapsulation),\n                template: noUndefined(compMeta.template),\n                templateUrl: noUndefined(compMeta.templateUrl),\n                htmlAst: null,\n                styles: compMeta.styles || [],\n                styleUrls: compMeta.styleUrls || [],\n                animations: animations || [],\n                interpolation: noUndefined(compMeta.interpolation),\n                isInline: !!compMeta.template,\n                externalStylesheets: [],\n                ngContentSelectors: [],\n                preserveWhitespaces: noUndefined(dirMeta.preserveWhitespaces),\n            });\n        }\n        var /** @type {?} */ changeDetectionStrategy = /** @type {?} */ ((null));\n        var /** @type {?} */ viewProviders = [];\n        var /** @type {?} */ entryComponentMetadata = [];\n        var /** @type {?} */ selector = dirMeta.selector;\n        if (createComponent.isTypeOf(dirMeta)) {\n            // Component\n            var /** @type {?} */ compMeta = /** @type {?} */ (dirMeta);\n            changeDetectionStrategy = /** @type {?} */ ((compMeta.changeDetection));\n            if (compMeta.viewProviders) {\n                viewProviders = this._getProvidersMetadata(compMeta.viewProviders, entryComponentMetadata, \"viewProviders for \\\"\" + stringifyType(directiveType) + \"\\\"\", [], directiveType);\n            }\n            if (compMeta.entryComponents) {\n                entryComponentMetadata = flattenAndDedupeArray(compMeta.entryComponents)\n                    .map(function (type) { return ((_this._getEntryComponentMetadata(type))); })\n                    .concat(entryComponentMetadata);\n            }\n            if (!selector) {\n                selector = this._schemaRegistry.getDefaultComponentElementName();\n            }\n        }\n        else {\n            // Directive\n            if (!selector) {\n                this._reportError(syntaxError(\"Directive \" + stringifyType(directiveType) + \" has no selector, please add it!\"), directiveType);\n                selector = 'error';\n            }\n        }\n        var /** @type {?} */ providers = [];\n        if (dirMeta.providers != null) {\n            providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, \"providers for \\\"\" + stringifyType(directiveType) + \"\\\"\", [], directiveType);\n        }\n        var /** @type {?} */ queries = [];\n        var /** @type {?} */ viewQueries = [];\n        if (dirMeta.queries != null) {\n            queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);\n            viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);\n        }\n        var /** @type {?} */ metadata = cpl.CompileDirectiveMetadata.create({\n            isHost: false,\n            selector: selector,\n            exportAs: noUndefined(dirMeta.exportAs),\n            isComponent: !!nonNormalizedTemplateMetadata,\n            type: this._getTypeMetadata(directiveType),\n            template: nonNormalizedTemplateMetadata,\n            changeDetection: changeDetectionStrategy,\n            inputs: dirMeta.inputs || [],\n            outputs: dirMeta.outputs || [],\n            host: dirMeta.host || {},\n            providers: providers || [],\n            viewProviders: viewProviders || [],\n            queries: queries || [],\n            guards: dirMeta.guards || {},\n            viewQueries: viewQueries || [],\n            entryComponents: entryComponentMetadata,\n            componentViewType: nonNormalizedTemplateMetadata ? this.getComponentViewClass(directiveType) :\n                null,\n            rendererType: nonNormalizedTemplateMetadata ? this.getRendererType(directiveType) : null,\n            componentFactory: null\n        });\n        if (nonNormalizedTemplateMetadata) {\n            metadata.componentFactory =\n                this.getComponentFactory(selector, directiveType, metadata.inputs, metadata.outputs);\n        }\n        cacheEntry = { metadata: metadata, annotation: dirMeta };\n        this._nonNormalizedDirectiveCache.set(directiveType, cacheEntry);\n        return cacheEntry;\n    };\n    /**\n     * Gets the metadata for the given directive.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     */\n    /**\n     * Gets the metadata for the given directive.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     * @param {?} directiveType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getDirectiveMetadata = /**\n     * Gets the metadata for the given directive.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     * @param {?} directiveType\n     * @return {?}\n     */\n    function (directiveType) {\n        var /** @type {?} */ dirMeta = /** @type {?} */ ((this._directiveCache.get(directiveType)));\n        if (!dirMeta) {\n            this._reportError(syntaxError(\"Illegal state: getDirectiveMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Directive \" + stringifyType(directiveType) + \".\"), directiveType);\n        }\n        return dirMeta;\n    };\n    /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getDirectiveSummary = /**\n     * @param {?} dirType\n     * @return {?}\n     */\n    function (dirType) {\n        var /** @type {?} */ dirSummary = /** @type {?} */ (this._loadSummary(dirType, cpl.CompileSummaryKind.Directive));\n        if (!dirSummary) {\n            this._reportError(syntaxError(\"Illegal state: Could not load the summary for directive \" + stringifyType(dirType) + \".\"), dirType);\n        }\n        return dirSummary;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.isDirective = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return !!this._loadSummary(type, cpl.CompileSummaryKind.Directive) ||\n            this._directiveResolver.isDirective(type);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.isPipe = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return !!this._loadSummary(type, cpl.CompileSummaryKind.Pipe) ||\n            this._pipeResolver.isPipe(type);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.isNgModule = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return !!this._loadSummary(type, cpl.CompileSummaryKind.NgModule) ||\n            this._ngModuleResolver.isNgModule(type);\n    };\n    /**\n     * @param {?} moduleType\n     * @param {?=} alreadyCollecting\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getNgModuleSummary = /**\n     * @param {?} moduleType\n     * @param {?=} alreadyCollecting\n     * @return {?}\n     */\n    function (moduleType, alreadyCollecting) {\n        if (alreadyCollecting === void 0) { alreadyCollecting = null; }\n        var /** @type {?} */ moduleSummary = /** @type {?} */ (this._loadSummary(moduleType, cpl.CompileSummaryKind.NgModule));\n        if (!moduleSummary) {\n            var /** @type {?} */ moduleMeta = this.getNgModuleMetadata(moduleType, false, alreadyCollecting);\n            moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;\n            if (moduleSummary) {\n                this._summaryCache.set(moduleType, moduleSummary);\n            }\n        }\n        return moduleSummary;\n    };\n    /**\n     * Loads the declared directives and pipes of an NgModule.\n     */\n    /**\n     * Loads the declared directives and pipes of an NgModule.\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = /**\n     * Loads the declared directives and pipes of an NgModule.\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (moduleType, isSync, throwIfNotFound) {\n        var _this = this;\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);\n        var /** @type {?} */ loading = [];\n        if (ngModule) {\n            ngModule.declaredDirectives.forEach(function (id) {\n                var /** @type {?} */ promise = _this.loadDirectiveMetadata(moduleType, id.reference, isSync);\n                if (promise) {\n                    loading.push(promise);\n                }\n            });\n            ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference); });\n        }\n        return Promise.all(loading);\n    };\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getShallowModuleMetadata = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        var /** @type {?} */ compileMeta = this._shallowModuleCache.get(moduleType);\n        if (compileMeta) {\n            return compileMeta;\n        }\n        var /** @type {?} */ ngModuleMeta = findLast(this._reflector.shallowAnnotations(moduleType), createNgModule.isTypeOf);\n        compileMeta = {\n            type: this._getTypeMetadata(moduleType),\n            rawExports: ngModuleMeta.exports,\n            rawImports: ngModuleMeta.imports,\n            rawProviders: ngModuleMeta.providers,\n        };\n        this._shallowModuleCache.set(moduleType, compileMeta);\n        return compileMeta;\n    };\n    /**\n     * @param {?} moduleType\n     * @param {?=} throwIfNotFound\n     * @param {?=} alreadyCollecting\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getNgModuleMetadata = /**\n     * @param {?} moduleType\n     * @param {?=} throwIfNotFound\n     * @param {?=} alreadyCollecting\n     * @return {?}\n     */\n    function (moduleType, throwIfNotFound, alreadyCollecting) {\n        var _this = this;\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        if (alreadyCollecting === void 0) { alreadyCollecting = null; }\n        moduleType = resolveForwardRef(moduleType);\n        var /** @type {?} */ compileMeta = this._ngModuleCache.get(moduleType);\n        if (compileMeta) {\n            return compileMeta;\n        }\n        var /** @type {?} */ meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);\n        if (!meta) {\n            return null;\n        }\n        var /** @type {?} */ declaredDirectives = [];\n        var /** @type {?} */ exportedNonModuleIdentifiers = [];\n        var /** @type {?} */ declaredPipes = [];\n        var /** @type {?} */ importedModules = [];\n        var /** @type {?} */ exportedModules = [];\n        var /** @type {?} */ providers = [];\n        var /** @type {?} */ entryComponents = [];\n        var /** @type {?} */ bootstrapComponents = [];\n        var /** @type {?} */ schemas = [];\n        if (meta.imports) {\n            flattenAndDedupeArray(meta.imports).forEach(function (importedType) {\n                var /** @type {?} */ importedModuleType = /** @type {?} */ ((undefined));\n                if (isValidType(importedType)) {\n                    importedModuleType = importedType;\n                }\n                else if (importedType && importedType.ngModule) {\n                    var /** @type {?} */ moduleWithProviders = importedType;\n                    importedModuleType = moduleWithProviders.ngModule;\n                    if (moduleWithProviders.providers) {\n                        providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, \"provider for the NgModule '\" + stringifyType(importedModuleType) + \"'\", [], importedType));\n                    }\n                }\n                if (importedModuleType) {\n                    if (_this._checkSelfImport(moduleType, importedModuleType))\n                        return;\n                    if (!alreadyCollecting)\n                        alreadyCollecting = new Set();\n                    if (alreadyCollecting.has(importedModuleType)) {\n                        _this._reportError(syntaxError(_this._getTypeDescriptor(importedModuleType) + \" '\" + stringifyType(importedType) + \"' is imported recursively by the module '\" + stringifyType(moduleType) + \"'.\"), moduleType);\n                        return;\n                    }\n                    alreadyCollecting.add(importedModuleType);\n                    var /** @type {?} */ importedModuleSummary = _this.getNgModuleSummary(importedModuleType, alreadyCollecting);\n                    alreadyCollecting.delete(importedModuleType);\n                    if (!importedModuleSummary) {\n                        _this._reportError(syntaxError(\"Unexpected \" + _this._getTypeDescriptor(importedType) + \" '\" + stringifyType(importedType) + \"' imported by the module '\" + stringifyType(moduleType) + \"'. Please add a @NgModule annotation.\"), moduleType);\n                        return;\n                    }\n                    importedModules.push(importedModuleSummary);\n                }\n                else {\n                    _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(importedType) + \"' imported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                    return;\n                }\n            });\n        }\n        if (meta.exports) {\n            flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {\n                if (!isValidType(exportedType)) {\n                    _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(exportedType) + \"' exported by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                    return;\n                }\n                if (!alreadyCollecting)\n                    alreadyCollecting = new Set();\n                if (alreadyCollecting.has(exportedType)) {\n                    _this._reportError(syntaxError(_this._getTypeDescriptor(exportedType) + \" '\" + stringify(exportedType) + \"' is exported recursively by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                    return;\n                }\n                alreadyCollecting.add(exportedType);\n                var /** @type {?} */ exportedModuleSummary = _this.getNgModuleSummary(exportedType, alreadyCollecting);\n                alreadyCollecting.delete(exportedType);\n                if (exportedModuleSummary) {\n                    exportedModules.push(exportedModuleSummary);\n                }\n                else {\n                    exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));\n                }\n            });\n        }\n        // Note: This will be modified later, so we rely on\n        // getting a new instance every time!\n        var /** @type {?} */ transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);\n        if (meta.declarations) {\n            flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {\n                if (!isValidType(declaredType)) {\n                    _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(declaredType) + \"' declared by the module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                    return;\n                }\n                var /** @type {?} */ declaredIdentifier = _this._getIdentifierMetadata(declaredType);\n                if (_this.isDirective(declaredType)) {\n                    transitiveModule.addDirective(declaredIdentifier);\n                    declaredDirectives.push(declaredIdentifier);\n                    _this._addTypeToModule(declaredType, moduleType);\n                }\n                else if (_this.isPipe(declaredType)) {\n                    transitiveModule.addPipe(declaredIdentifier);\n                    transitiveModule.pipes.push(declaredIdentifier);\n                    declaredPipes.push(declaredIdentifier);\n                    _this._addTypeToModule(declaredType, moduleType);\n                }\n                else {\n                    _this._reportError(syntaxError(\"Unexpected \" + _this._getTypeDescriptor(declaredType) + \" '\" + stringifyType(declaredType) + \"' declared by the module '\" + stringifyType(moduleType) + \"'. Please add a @Pipe/@Directive/@Component annotation.\"), moduleType);\n                    return;\n                }\n            });\n        }\n        var /** @type {?} */ exportedDirectives = [];\n        var /** @type {?} */ exportedPipes = [];\n        exportedNonModuleIdentifiers.forEach(function (exportedId) {\n            if (transitiveModule.directivesSet.has(exportedId.reference)) {\n                exportedDirectives.push(exportedId);\n                transitiveModule.addExportedDirective(exportedId);\n            }\n            else if (transitiveModule.pipesSet.has(exportedId.reference)) {\n                exportedPipes.push(exportedId);\n                transitiveModule.addExportedPipe(exportedId);\n            }\n            else {\n                _this._reportError(syntaxError(\"Can't export \" + _this._getTypeDescriptor(exportedId.reference) + \" \" + stringifyType(exportedId.reference) + \" from \" + stringifyType(moduleType) + \" as it was neither declared nor imported!\"), moduleType);\n                return;\n            }\n        });\n        // The providers of the module have to go last\n        // so that they overwrite any other provider we already added.\n        if (meta.providers) {\n            providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, \"provider for the NgModule '\" + stringifyType(moduleType) + \"'\", [], moduleType));\n        }\n        if (meta.entryComponents) {\n            entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents)\n                .map(function (type) { return ((_this._getEntryComponentMetadata(type))); }));\n        }\n        if (meta.bootstrap) {\n            flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {\n                if (!isValidType(type)) {\n                    _this._reportError(syntaxError(\"Unexpected value '\" + stringifyType(type) + \"' used in the bootstrap property of module '\" + stringifyType(moduleType) + \"'\"), moduleType);\n                    return;\n                }\n                bootstrapComponents.push(_this._getIdentifierMetadata(type));\n            });\n        }\n        entryComponents.push.apply(entryComponents, bootstrapComponents.map(function (type) { return ((_this._getEntryComponentMetadata(type.reference))); }));\n        if (meta.schemas) {\n            schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));\n        }\n        compileMeta = new cpl.CompileNgModuleMetadata({\n            type: this._getTypeMetadata(moduleType),\n            providers: providers,\n            entryComponents: entryComponents,\n            bootstrapComponents: bootstrapComponents,\n            schemas: schemas,\n            declaredDirectives: declaredDirectives,\n            exportedDirectives: exportedDirectives,\n            declaredPipes: declaredPipes,\n            exportedPipes: exportedPipes,\n            importedModules: importedModules,\n            exportedModules: exportedModules,\n            transitiveModule: transitiveModule,\n            id: meta.id || null,\n        });\n        entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id); });\n        providers.forEach(function (provider) { return transitiveModule.addProvider(provider, /** @type {?} */ ((compileMeta)).type); });\n        transitiveModule.addModule(compileMeta.type);\n        this._ngModuleCache.set(moduleType, compileMeta);\n        return compileMeta;\n    };\n    /**\n     * @param {?} moduleType\n     * @param {?} importedModuleType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._checkSelfImport = /**\n     * @param {?} moduleType\n     * @param {?} importedModuleType\n     * @return {?}\n     */\n    function (moduleType, importedModuleType) {\n        if (moduleType === importedModuleType) {\n            this._reportError(syntaxError(\"'\" + stringifyType(moduleType) + \"' module can't import itself\"), moduleType);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getTypeDescriptor = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        if (isValidType(type)) {\n            if (this.isDirective(type)) {\n                return 'directive';\n            }\n            if (this.isPipe(type)) {\n                return 'pipe';\n            }\n            if (this.isNgModule(type)) {\n                return 'module';\n            }\n        }\n        if ((/** @type {?} */ (type)).provide) {\n            return 'provider';\n        }\n        return 'value';\n    };\n    /**\n     * @param {?} type\n     * @param {?} moduleType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._addTypeToModule = /**\n     * @param {?} type\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (type, moduleType) {\n        var /** @type {?} */ oldModule = this._ngModuleOfTypes.get(type);\n        if (oldModule && oldModule !== moduleType) {\n            this._reportError(syntaxError(\"Type \" + stringifyType(type) + \" is part of the declarations of 2 modules: \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \"! \" +\n                (\"Please consider moving \" + stringifyType(type) + \" to a higher module that imports \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \". \") +\n                (\"You can also create a new NgModule that exports and includes \" + stringifyType(type) + \" then import that NgModule in \" + stringifyType(oldModule) + \" and \" + stringifyType(moduleType) + \".\")), moduleType);\n            return;\n        }\n        this._ngModuleOfTypes.set(type, moduleType);\n    };\n    /**\n     * @param {?} importedModules\n     * @param {?} exportedModules\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = /**\n     * @param {?} importedModules\n     * @param {?} exportedModules\n     * @return {?}\n     */\n    function (importedModules, exportedModules) {\n        // collect `providers` / `entryComponents` from all imported and all exported modules\n        var /** @type {?} */ result = new cpl.TransitiveCompileNgModuleMetadata();\n        var /** @type {?} */ modulesByToken = new Map();\n        importedModules.concat(exportedModules).forEach(function (modSummary) {\n            modSummary.modules.forEach(function (mod) { return result.addModule(mod); });\n            modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp); });\n            var /** @type {?} */ addedTokens = new Set();\n            modSummary.providers.forEach(function (entry) {\n                var /** @type {?} */ tokenRef = cpl.tokenReference(entry.provider.token);\n                var /** @type {?} */ prevModules = modulesByToken.get(tokenRef);\n                if (!prevModules) {\n                    prevModules = new Set();\n                    modulesByToken.set(tokenRef, prevModules);\n                }\n                var /** @type {?} */ moduleRef = entry.module.reference;\n                // Note: the providers of one module may still contain multiple providers\n                // per token (e.g. for multi providers), and we need to preserve these.\n                if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {\n                    prevModules.add(moduleRef);\n                    addedTokens.add(tokenRef);\n                    result.addProvider(entry.provider, entry.module);\n                }\n            });\n        });\n        exportedModules.forEach(function (modSummary) {\n            modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id); });\n            modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id); });\n        });\n        importedModules.forEach(function (modSummary) {\n            modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id); });\n            modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id); });\n        });\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getIdentifierMetadata = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        type = resolveForwardRef(type);\n        return { reference: type };\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.isInjectable = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ annotations = this._reflector.tryAnnotations(type);\n        return annotations.some(function (ann) { return createInjectable.isTypeOf(ann); });\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getInjectableSummary = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        return {\n            summaryKind: cpl.CompileSummaryKind.Injectable,\n            type: this._getTypeMetadata(type, null, false)\n        };\n    };\n    /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getInjectableMetadata = /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    function (type, dependencies, throwOnUnknownDeps) {\n        if (dependencies === void 0) { dependencies = null; }\n        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }\n        var /** @type {?} */ typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n        var /** @type {?} */ typeMetadata = typeSummary ?\n            typeSummary.type :\n            this._getTypeMetadata(type, dependencies, throwOnUnknownDeps);\n        var /** @type {?} */ annotations = this._reflector.annotations(type).filter(function (ann) { return createInjectable.isTypeOf(ann); });\n        if (annotations.length === 0) {\n            return null;\n        }\n        var /** @type {?} */ meta = annotations[annotations.length - 1];\n        return {\n            symbol: type,\n            type: typeMetadata,\n            providedIn: meta.providedIn,\n            useValue: meta.useValue,\n            useClass: meta.useClass,\n            useExisting: meta.useExisting,\n            useFactory: meta.useFactory,\n            deps: meta.deps,\n        };\n    };\n    /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getTypeMetadata = /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    function (type, dependencies, throwOnUnknownDeps) {\n        if (dependencies === void 0) { dependencies = null; }\n        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }\n        var /** @type {?} */ identifier = this._getIdentifierMetadata(type);\n        return {\n            reference: identifier.reference,\n            diDeps: this._getDependenciesMetadata(identifier.reference, dependencies, throwOnUnknownDeps),\n            lifecycleHooks: getAllLifecycleHooks(this._reflector, identifier.reference),\n        };\n    };\n    /**\n     * @param {?} factory\n     * @param {?=} dependencies\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getFactoryMetadata = /**\n     * @param {?} factory\n     * @param {?=} dependencies\n     * @return {?}\n     */\n    function (factory, dependencies) {\n        if (dependencies === void 0) { dependencies = null; }\n        factory = resolveForwardRef(factory);\n        return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };\n    };\n    /**\n     * Gets the metadata for the given pipe.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     */\n    /**\n     * Gets the metadata for the given pipe.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     * @param {?} pipeType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getPipeMetadata = /**\n     * Gets the metadata for the given pipe.\n     * This assumes `loadNgModuleDirectiveAndPipeMetadata` has been called first.\n     * @param {?} pipeType\n     * @return {?}\n     */\n    function (pipeType) {\n        var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);\n        if (!pipeMeta) {\n            this._reportError(syntaxError(\"Illegal state: getPipeMetadata can only be called after loadNgModuleDirectiveAndPipeMetadata for a module that declares it. Pipe \" + stringifyType(pipeType) + \".\"), pipeType);\n        }\n        return pipeMeta || null;\n    };\n    /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getPipeSummary = /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    function (pipeType) {\n        var /** @type {?} */ pipeSummary = /** @type {?} */ (this._loadSummary(pipeType, cpl.CompileSummaryKind.Pipe));\n        if (!pipeSummary) {\n            this._reportError(syntaxError(\"Illegal state: Could not load the summary for pipe \" + stringifyType(pipeType) + \".\"), pipeType);\n        }\n        return pipeSummary;\n    };\n    /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getOrLoadPipeMetadata = /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    function (pipeType) {\n        var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);\n        if (!pipeMeta) {\n            pipeMeta = this._loadPipeMetadata(pipeType);\n        }\n        return pipeMeta;\n    };\n    /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._loadPipeMetadata = /**\n     * @param {?} pipeType\n     * @return {?}\n     */\n    function (pipeType) {\n        pipeType = resolveForwardRef(pipeType);\n        var /** @type {?} */ pipeAnnotation = /** @type {?} */ ((this._pipeResolver.resolve(pipeType)));\n        var /** @type {?} */ pipeMeta = new cpl.CompilePipeMetadata({\n            type: this._getTypeMetadata(pipeType),\n            name: pipeAnnotation.name,\n            pure: !!pipeAnnotation.pure\n        });\n        this._pipeCache.set(pipeType, pipeMeta);\n        this._summaryCache.set(pipeType, pipeMeta.toSummary());\n        return pipeMeta;\n    };\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getDependenciesMetadata = /**\n     * @param {?} typeOrFunc\n     * @param {?} dependencies\n     * @param {?=} throwOnUnknownDeps\n     * @return {?}\n     */\n    function (typeOrFunc, dependencies, throwOnUnknownDeps) {\n        var _this = this;\n        if (throwOnUnknownDeps === void 0) { throwOnUnknownDeps = true; }\n        var /** @type {?} */ hasUnknownDeps = false;\n        var /** @type {?} */ params = dependencies || this._reflector.parameters(typeOrFunc) || [];\n        var /** @type {?} */ dependenciesMetadata = params.map(function (param) {\n            var /** @type {?} */ isAttribute = false;\n            var /** @type {?} */ isHost = false;\n            var /** @type {?} */ isSelf = false;\n            var /** @type {?} */ isSkipSelf = false;\n            var /** @type {?} */ isOptional = false;\n            var /** @type {?} */ token = null;\n            if (Array.isArray(param)) {\n                param.forEach(function (paramEntry) {\n                    if (createHost.isTypeOf(paramEntry)) {\n                        isHost = true;\n                    }\n                    else if (createSelf.isTypeOf(paramEntry)) {\n                        isSelf = true;\n                    }\n                    else if (createSkipSelf.isTypeOf(paramEntry)) {\n                        isSkipSelf = true;\n                    }\n                    else if (createOptional.isTypeOf(paramEntry)) {\n                        isOptional = true;\n                    }\n                    else if (createAttribute.isTypeOf(paramEntry)) {\n                        isAttribute = true;\n                        token = paramEntry.attributeName;\n                    }\n                    else if (createInject.isTypeOf(paramEntry)) {\n                        token = paramEntry.token;\n                    }\n                    else if (createInjectionToken.isTypeOf(paramEntry) || paramEntry instanceof StaticSymbol) {\n                        token = paramEntry;\n                    }\n                    else if (isValidType(paramEntry) && token == null) {\n                        token = paramEntry;\n                    }\n                });\n            }\n            else {\n                token = param;\n            }\n            if (token == null) {\n                hasUnknownDeps = true;\n                return /** @type {?} */ ((null));\n            }\n            return {\n                isAttribute: isAttribute,\n                isHost: isHost,\n                isSelf: isSelf,\n                isSkipSelf: isSkipSelf,\n                isOptional: isOptional,\n                token: _this._getTokenMetadata(token)\n            };\n        });\n        if (hasUnknownDeps) {\n            var /** @type {?} */ depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringifyType(dep.token) : '?'; }).join(', ');\n            var /** @type {?} */ message = \"Can't resolve all parameters for \" + stringifyType(typeOrFunc) + \": (\" + depsTokens + \").\";\n            if (throwOnUnknownDeps || this._config.strictInjectionParameters) {\n                this._reportError(syntaxError(message), typeOrFunc);\n            }\n            else {\n                this._console.warn(\"Warning: \" + message + \" This will become an error in Angular v6.x\");\n            }\n        }\n        return dependenciesMetadata;\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getTokenMetadata = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        token = resolveForwardRef(token);\n        var /** @type {?} */ compileToken;\n        if (typeof token === 'string') {\n            compileToken = { value: token };\n        }\n        else {\n            compileToken = { identifier: { reference: token } };\n        }\n        return compileToken;\n    };\n    /**\n     * @param {?} providers\n     * @param {?} targetEntryComponents\n     * @param {?=} debugInfo\n     * @param {?=} compileProviders\n     * @param {?=} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getProvidersMetadata = /**\n     * @param {?} providers\n     * @param {?} targetEntryComponents\n     * @param {?=} debugInfo\n     * @param {?=} compileProviders\n     * @param {?=} type\n     * @return {?}\n     */\n    function (providers, targetEntryComponents, debugInfo, compileProviders, type) {\n        var _this = this;\n        if (compileProviders === void 0) { compileProviders = []; }\n        providers.forEach(function (provider, providerIdx) {\n            if (Array.isArray(provider)) {\n                _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);\n            }\n            else {\n                provider = resolveForwardRef(provider);\n                var /** @type {?} */ providerMeta = /** @type {?} */ ((undefined));\n                if (provider && typeof provider === 'object' && provider.hasOwnProperty('provide')) {\n                    _this._validateProvider(provider);\n                    providerMeta = new cpl.ProviderMeta(provider.provide, provider);\n                }\n                else if (isValidType(provider)) {\n                    providerMeta = new cpl.ProviderMeta(provider, { useClass: provider });\n                }\n                else if (provider === void 0) {\n                    _this._reportError(syntaxError(\"Encountered undefined provider! Usually this means you have a circular dependencies (might be caused by using 'barrel' index.ts files.\"));\n                    return;\n                }\n                else {\n                    var /** @type {?} */ providersInfo = (/** @type {?} */ (providers.reduce(function (soFar, seenProvider, seenProviderIdx) {\n                        if (seenProviderIdx < providerIdx) {\n                            soFar.push(\"\" + stringifyType(seenProvider));\n                        }\n                        else if (seenProviderIdx == providerIdx) {\n                            soFar.push(\"?\" + stringifyType(seenProvider) + \"?\");\n                        }\n                        else if (seenProviderIdx == providerIdx + 1) {\n                            soFar.push('...');\n                        }\n                        return soFar;\n                    }, [])))\n                        .join(', ');\n                    _this._reportError(syntaxError(\"Invalid \" + (debugInfo ? debugInfo : 'provider') + \" - only instances of Provider and Type are allowed, got: [\" + providersInfo + \"]\"), type);\n                    return;\n                }\n                if (providerMeta.token ===\n                    _this._reflector.resolveExternalReference(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {\n                    targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type));\n                }\n                else {\n                    compileProviders.push(_this.getProviderMetadata(providerMeta));\n                }\n            }\n        });\n        return compileProviders;\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._validateProvider = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        if (provider.hasOwnProperty('useClass') && provider.useClass == null) {\n            this._reportError(syntaxError(\"Invalid provider for \" + stringifyType(provider.provide) + \". useClass cannot be \" + provider.useClass + \".\\n           Usually it happens when:\\n           1. There's a circular dependency (might be caused by using index.ts (barrel) files).\\n           2. Class was used before it was declared. Use forwardRef in this case.\"));\n        }\n    };\n    /**\n     * @param {?} provider\n     * @param {?=} type\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getEntryComponentsFromProvider = /**\n     * @param {?} provider\n     * @param {?=} type\n     * @return {?}\n     */\n    function (provider, type) {\n        var _this = this;\n        var /** @type {?} */ components = [];\n        var /** @type {?} */ collectedIdentifiers = [];\n        if (provider.useFactory || provider.useExisting || provider.useClass) {\n            this._reportError(syntaxError(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!\"), type);\n            return [];\n        }\n        if (!provider.multi) {\n            this._reportError(syntaxError(\"The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!\"), type);\n            return [];\n        }\n        extractIdentifiers(provider.useValue, collectedIdentifiers);\n        collectedIdentifiers.forEach(function (identifier) {\n            var /** @type {?} */ entry = _this._getEntryComponentMetadata(identifier.reference, false);\n            if (entry) {\n                components.push(entry);\n            }\n        });\n        return components;\n    };\n    /**\n     * @param {?} dirType\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getEntryComponentMetadata = /**\n     * @param {?} dirType\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (dirType, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ dirMeta = this.getNonNormalizedDirectiveMetadata(dirType);\n        if (dirMeta && dirMeta.metadata.isComponent) {\n            return { componentType: dirType, componentFactory: /** @type {?} */ ((dirMeta.metadata.componentFactory)) };\n        }\n        var /** @type {?} */ dirSummary = /** @type {?} */ (this._loadSummary(dirType, cpl.CompileSummaryKind.Directive));\n        if (dirSummary && dirSummary.isComponent) {\n            return { componentType: dirType, componentFactory: /** @type {?} */ ((dirSummary.componentFactory)) };\n        }\n        if (throwIfNotFound) {\n            throw syntaxError(dirType.name + \" cannot be used as an entry component.\");\n        }\n        return null;\n    };\n    /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getInjectableTypeMetadata = /**\n     * @param {?} type\n     * @param {?=} dependencies\n     * @return {?}\n     */\n    function (type, dependencies) {\n        if (dependencies === void 0) { dependencies = null; }\n        var /** @type {?} */ typeSummary = this._loadSummary(type, cpl.CompileSummaryKind.Injectable);\n        if (typeSummary) {\n            return typeSummary.type;\n        }\n        return this._getTypeMetadata(type, dependencies);\n    };\n    /**\n     * @param {?} provider\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype.getProviderMetadata = /**\n     * @param {?} provider\n     * @return {?}\n     */\n    function (provider) {\n        var /** @type {?} */ compileDeps = /** @type {?} */ ((undefined));\n        var /** @type {?} */ compileTypeMetadata = /** @type {?} */ ((null));\n        var /** @type {?} */ compileFactoryMetadata = /** @type {?} */ ((null));\n        var /** @type {?} */ token = this._getTokenMetadata(provider.token);\n        if (provider.useClass) {\n            compileTypeMetadata =\n                this._getInjectableTypeMetadata(provider.useClass, provider.dependencies);\n            compileDeps = compileTypeMetadata.diDeps;\n            if (provider.token === provider.useClass) {\n                // use the compileTypeMetadata as it contains information about lifecycleHooks...\n                token = { identifier: compileTypeMetadata };\n            }\n        }\n        else if (provider.useFactory) {\n            compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);\n            compileDeps = compileFactoryMetadata.diDeps;\n        }\n        return {\n            token: token,\n            useClass: compileTypeMetadata,\n            useValue: provider.useValue,\n            useFactory: compileFactoryMetadata,\n            useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : undefined,\n            deps: compileDeps,\n            multi: provider.multi\n        };\n    };\n    /**\n     * @param {?} queries\n     * @param {?} isViewQuery\n     * @param {?} directiveType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getQueriesMetadata = /**\n     * @param {?} queries\n     * @param {?} isViewQuery\n     * @param {?} directiveType\n     * @return {?}\n     */\n    function (queries, isViewQuery, directiveType) {\n        var _this = this;\n        var /** @type {?} */ res = [];\n        Object.keys(queries).forEach(function (propertyName) {\n            var /** @type {?} */ query = queries[propertyName];\n            if (query.isViewQuery === isViewQuery) {\n                res.push(_this._getQueryMetadata(query, propertyName, directiveType));\n            }\n        });\n        return res;\n    };\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._queryVarBindings = /**\n     * @param {?} selector\n     * @return {?}\n     */\n    function (selector) { return selector.split(/\\s*,\\s*/); };\n    /**\n     * @param {?} q\n     * @param {?} propertyName\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._getQueryMetadata = /**\n     * @param {?} q\n     * @param {?} propertyName\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (q, propertyName, typeOrFunc) {\n        var _this = this;\n        var /** @type {?} */ selectors;\n        if (typeof q.selector === 'string') {\n            selectors =\n                this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });\n        }\n        else {\n            if (!q.selector) {\n                this._reportError(syntaxError(\"Can't construct a query for the property \\\"\" + propertyName + \"\\\" of \\\"\" + stringifyType(typeOrFunc) + \"\\\" since the query selector wasn't defined.\"), typeOrFunc);\n                selectors = [];\n            }\n            else {\n                selectors = [this._getTokenMetadata(q.selector)];\n            }\n        }\n        return {\n            selectors: selectors,\n            first: q.first,\n            descendants: q.descendants, propertyName: propertyName,\n            read: q.read ? this._getTokenMetadata(q.read) : /** @type {?} */ ((null))\n        };\n    };\n    /**\n     * @param {?} error\n     * @param {?=} type\n     * @param {?=} otherType\n     * @return {?}\n     */\n    CompileMetadataResolver.prototype._reportError = /**\n     * @param {?} error\n     * @param {?=} type\n     * @param {?=} otherType\n     * @return {?}\n     */\n    function (error, type, otherType) {\n        if (this._errorCollector) {\n            this._errorCollector(error, type);\n            if (otherType) {\n                this._errorCollector(error, otherType);\n            }\n        }\n        else {\n            throw error;\n        }\n    };\n    return CompileMetadataResolver;\n}());\nexport { CompileMetadataResolver };\nfunction CompileMetadataResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompileMetadataResolver.prototype._nonNormalizedDirectiveCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._directiveCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._summaryCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._pipeCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._ngModuleCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._ngModuleOfTypes;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._shallowModuleCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._config;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._htmlParser;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._ngModuleResolver;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._directiveResolver;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._pipeResolver;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._summaryResolver;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._schemaRegistry;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._directiveNormalizer;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._console;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._staticSymbolCache;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._reflector;\n    /** @type {?} */\n    CompileMetadataResolver.prototype._errorCollector;\n}\n/**\n * @param {?} tree\n * @param {?=} out\n * @return {?}\n */\nfunction flattenArray(tree, out) {\n    if (out === void 0) { out = []; }\n    if (tree) {\n        for (var /** @type {?} */ i = 0; i < tree.length; i++) {\n            var /** @type {?} */ item = resolveForwardRef(tree[i]);\n            if (Array.isArray(item)) {\n                flattenArray(item, out);\n            }\n            else {\n                out.push(item);\n            }\n        }\n    }\n    return out;\n}\n/**\n * @param {?} array\n * @return {?}\n */\nfunction dedupeArray(array) {\n    if (array) {\n        return Array.from(new Set(array));\n    }\n    return [];\n}\n/**\n * @param {?} tree\n * @return {?}\n */\nfunction flattenAndDedupeArray(tree) {\n    return dedupeArray(flattenArray(tree));\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isValidType(value) {\n    return (value instanceof StaticSymbol) || (value instanceof Type);\n}\n/**\n * @param {?} value\n * @param {?} targetIdentifiers\n * @return {?}\n */\nfunction extractIdentifiers(value, targetIdentifiers) {\n    visitValue(value, new _CompileValueConverter(), targetIdentifiers);\n}\nvar _CompileValueConverter = /** @class */ (function (_super) {\n    tslib_1.__extends(_CompileValueConverter, _super);\n    function _CompileValueConverter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} value\n     * @param {?} targetIdentifiers\n     * @return {?}\n     */\n    _CompileValueConverter.prototype.visitOther = /**\n     * @param {?} value\n     * @param {?} targetIdentifiers\n     * @return {?}\n     */\n    function (value, targetIdentifiers) {\n        targetIdentifiers.push({ reference: value });\n    };\n    return _CompileValueConverter;\n}(ValueTransformer));\n/**\n * @param {?} type\n * @return {?}\n */\nfunction stringifyType(type) {\n    if (type instanceof StaticSymbol) {\n        return type.name + \" in \" + type.filePath;\n    }\n    else {\n        return stringify(type);\n    }\n}\n/**\n * Indicates that a component is still being loaded in a synchronous compile.\n * @param {?} compType\n * @return {?}\n */\nfunction componentStillLoadingError(compType) {\n    var /** @type {?} */ error = Error(\"Can't compile synchronously as \" + stringify(compType) + \" is still being loaded!\");\n    (/** @type {?} */ (error))[ERROR_COMPONENT_TYPE] = compType;\n    return error;\n}\n//# sourceMappingURL=metadata_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { tokenName, tokenReference } from './compile_metadata';\nimport { Identifiers, createTokenForExternalReference } from './identifiers';\nimport { ParseError } from './parse_util';\nimport { ProviderAst, ProviderAstType } from './template_parser/template_ast';\nvar ProviderError = /** @class */ (function (_super) {\n    tslib_1.__extends(ProviderError, _super);\n    function ProviderError(message, span) {\n        return _super.call(this, span, message) || this;\n    }\n    return ProviderError;\n}(ParseError));\nexport { ProviderError };\n/**\n * @record\n */\nexport function QueryWithId() { }\nfunction QueryWithId_tsickle_Closure_declarations() {\n    /** @type {?} */\n    QueryWithId.prototype.meta;\n    /** @type {?} */\n    QueryWithId.prototype.queryId;\n}\nvar ProviderViewContext = /** @class */ (function () {\n    function ProviderViewContext(reflector, component) {\n        var _this = this;\n        this.reflector = reflector;\n        this.component = component;\n        this.errors = [];\n        this.viewQueries = _getViewQueries(component);\n        this.viewProviders = new Map();\n        component.viewProviders.forEach(function (provider) {\n            if (_this.viewProviders.get(tokenReference(provider.token)) == null) {\n                _this.viewProviders.set(tokenReference(provider.token), true);\n            }\n        });\n    }\n    return ProviderViewContext;\n}());\nexport { ProviderViewContext };\nfunction ProviderViewContext_tsickle_Closure_declarations() {\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ProviderViewContext.prototype.viewQueries;\n    /**\n     * \\@internal\n     * @type {?}\n     */\n    ProviderViewContext.prototype.viewProviders;\n    /** @type {?} */\n    ProviderViewContext.prototype.errors;\n    /** @type {?} */\n    ProviderViewContext.prototype.reflector;\n    /** @type {?} */\n    ProviderViewContext.prototype.component;\n}\nvar ProviderElementContext = /** @class */ (function () {\n    function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, isTemplate, contentQueryStartId, _sourceSpan) {\n        var _this = this;\n        this.viewContext = viewContext;\n        this._parent = _parent;\n        this._isViewRoot = _isViewRoot;\n        this._directiveAsts = _directiveAsts;\n        this._sourceSpan = _sourceSpan;\n        this._transformedProviders = new Map();\n        this._seenProviders = new Map();\n        this._queriedTokens = new Map();\n        this.transformedHasViewContainer = false;\n        this._attrs = {};\n        attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });\n        var /** @type {?} */ directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });\n        this._allProviders =\n            _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);\n        this._contentQueries = _getContentQueries(contentQueryStartId, directivesMeta);\n        Array.from(this._allProviders.values()).forEach(function (provider) {\n            _this._addQueryReadsTo(provider.token, provider.token, _this._queriedTokens);\n        });\n        if (isTemplate) {\n            var /** @type {?} */ templateRefId = createTokenForExternalReference(this.viewContext.reflector, Identifiers.TemplateRef);\n            this._addQueryReadsTo(templateRefId, templateRefId, this._queriedTokens);\n        }\n        refs.forEach(function (refAst) {\n            var /** @type {?} */ defaultQueryValue = refAst.value ||\n                createTokenForExternalReference(_this.viewContext.reflector, Identifiers.ElementRef);\n            _this._addQueryReadsTo({ value: refAst.name }, defaultQueryValue, _this._queriedTokens);\n        });\n        if (this._queriedTokens.get(this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef))) {\n            this.transformedHasViewContainer = true;\n        }\n        // create the providers that we know are eager first\n        Array.from(this._allProviders.values()).forEach(function (provider) {\n            var /** @type {?} */ eager = provider.eager || _this._queriedTokens.get(tokenReference(provider.token));\n            if (eager) {\n                _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ProviderElementContext.prototype.afterElement = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // collect lazy providers\n        Array.from(this._allProviders.values()).forEach(function (provider) {\n            _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);\n        });\n    };\n    Object.defineProperty(ProviderElementContext.prototype, \"transformProviders\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            // Note: Maps keep their insertion order.\n            var /** @type {?} */ lazyProviders = [];\n            var /** @type {?} */ eagerProviders = [];\n            this._transformedProviders.forEach(function (provider) {\n                if (provider.eager) {\n                    eagerProviders.push(provider);\n                }\n                else {\n                    lazyProviders.push(provider);\n                }\n            });\n            return lazyProviders.concat(eagerProviders);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ProviderElementContext.prototype, \"transformedDirectiveAsts\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });\n            var /** @type {?} */ sortedDirectives = this._directiveAsts.slice();\n            sortedDirectives.sort(function (dir1, dir2) {\n                return sortedProviderTypes.indexOf(dir1.directive.type) -\n                    sortedProviderTypes.indexOf(dir2.directive.type);\n            });\n            return sortedDirectives;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ProviderElementContext.prototype, \"queryMatches\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            var /** @type {?} */ allMatches = [];\n            this._queriedTokens.forEach(function (matches) { allMatches.push.apply(allMatches, matches); });\n            return allMatches;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} token\n     * @param {?} defaultValue\n     * @param {?} queryReadTokens\n     * @return {?}\n     */\n    ProviderElementContext.prototype._addQueryReadsTo = /**\n     * @param {?} token\n     * @param {?} defaultValue\n     * @param {?} queryReadTokens\n     * @return {?}\n     */\n    function (token, defaultValue, queryReadTokens) {\n        this._getQueriesFor(token).forEach(function (query) {\n            var /** @type {?} */ queryValue = query.meta.read || defaultValue;\n            var /** @type {?} */ tokenRef = tokenReference(queryValue);\n            var /** @type {?} */ queryMatches = queryReadTokens.get(tokenRef);\n            if (!queryMatches) {\n                queryMatches = [];\n                queryReadTokens.set(tokenRef, queryMatches);\n            }\n            queryMatches.push({ queryId: query.queryId, value: queryValue });\n        });\n    };\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    ProviderElementContext.prototype._getQueriesFor = /**\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) {\n        var /** @type {?} */ result = [];\n        var /** @type {?} */ currentEl = this;\n        var /** @type {?} */ distance = 0;\n        var /** @type {?} */ queries;\n        while (currentEl !== null) {\n            queries = currentEl._contentQueries.get(tokenReference(token));\n            if (queries) {\n                result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));\n            }\n            if (currentEl._directiveAsts.length > 0) {\n                distance++;\n            }\n            currentEl = currentEl._parent;\n        }\n        queries = this.viewContext.viewQueries.get(tokenReference(token));\n        if (queries) {\n            result.push.apply(result, queries);\n        }\n        return result;\n    };\n    /**\n     * @param {?} requestingProviderType\n     * @param {?} token\n     * @param {?} eager\n     * @return {?}\n     */\n    ProviderElementContext.prototype._getOrCreateLocalProvider = /**\n     * @param {?} requestingProviderType\n     * @param {?} token\n     * @param {?} eager\n     * @return {?}\n     */\n    function (requestingProviderType, token, eager) {\n        var _this = this;\n        var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\n        if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||\n            requestingProviderType === ProviderAstType.PublicService) &&\n            resolvedProvider.providerType === ProviderAstType.PrivateService) ||\n            ((requestingProviderType === ProviderAstType.PrivateService ||\n                requestingProviderType === ProviderAstType.PublicService) &&\n                resolvedProvider.providerType === ProviderAstType.Builtin)) {\n            return null;\n        }\n        var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n        if (transformedProviderAst) {\n            return transformedProviderAst;\n        }\n        if (this._seenProviders.get(tokenReference(token)) != null) {\n            this.viewContext.errors.push(new ProviderError(\"Cannot instantiate cyclic dependency! \" + tokenName(token), this._sourceSpan));\n            return null;\n        }\n        this._seenProviders.set(tokenReference(token), true);\n        var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {\n            var /** @type {?} */ transformedUseValue = provider.useValue;\n            var /** @type {?} */ transformedUseExisting = /** @type {?} */ ((provider.useExisting));\n            var /** @type {?} */ transformedDeps = /** @type {?} */ ((undefined));\n            if (provider.useExisting != null) {\n                var /** @type {?} */ existingDiDep = /** @type {?} */ ((_this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager)));\n                if (existingDiDep.token != null) {\n                    transformedUseExisting = existingDiDep.token;\n                }\n                else {\n                    transformedUseExisting = /** @type {?} */ ((null));\n                    transformedUseValue = existingDiDep.value;\n                }\n            }\n            else if (provider.useFactory) {\n                var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n                transformedDeps =\n                    deps.map(function (dep) { return ((_this._getDependency(resolvedProvider.providerType, dep, eager))); });\n            }\n            else if (provider.useClass) {\n                var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n                transformedDeps =\n                    deps.map(function (dep) { return ((_this._getDependency(resolvedProvider.providerType, dep, eager))); });\n            }\n            return _transformProvider(provider, {\n                useExisting: transformedUseExisting,\n                useValue: transformedUseValue,\n                deps: transformedDeps\n            });\n        });\n        transformedProviderAst =\n            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\n        this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n        return transformedProviderAst;\n    };\n    /**\n     * @param {?} requestingProviderType\n     * @param {?} dep\n     * @param {?=} eager\n     * @return {?}\n     */\n    ProviderElementContext.prototype._getLocalDependency = /**\n     * @param {?} requestingProviderType\n     * @param {?} dep\n     * @param {?=} eager\n     * @return {?}\n     */\n    function (requestingProviderType, dep, eager) {\n        if (eager === void 0) { eager = false; }\n        if (dep.isAttribute) {\n            var /** @type {?} */ attrValue = this._attrs[/** @type {?} */ ((dep.token)).value];\n            return { isValue: true, value: attrValue == null ? null : attrValue };\n        }\n        if (dep.token != null) {\n            // access builtints\n            if ((requestingProviderType === ProviderAstType.Directive ||\n                requestingProviderType === ProviderAstType.Component)) {\n                if (tokenReference(dep.token) ===\n                    this.viewContext.reflector.resolveExternalReference(Identifiers.Renderer) ||\n                    tokenReference(dep.token) ===\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.ElementRef) ||\n                    tokenReference(dep.token) ===\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.ChangeDetectorRef) ||\n                    tokenReference(dep.token) ===\n                        this.viewContext.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n                    return dep;\n                }\n                if (tokenReference(dep.token) ===\n                    this.viewContext.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\n                    (/** @type {?} */ (this)).transformedHasViewContainer = true;\n                }\n            }\n            // access the injector\n            if (tokenReference(dep.token) ===\n                this.viewContext.reflector.resolveExternalReference(Identifiers.Injector)) {\n                return dep;\n            }\n            // access providers\n            if (this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager) != null) {\n                return dep;\n            }\n        }\n        return null;\n    };\n    /**\n     * @param {?} requestingProviderType\n     * @param {?} dep\n     * @param {?=} eager\n     * @return {?}\n     */\n    ProviderElementContext.prototype._getDependency = /**\n     * @param {?} requestingProviderType\n     * @param {?} dep\n     * @param {?=} eager\n     * @return {?}\n     */\n    function (requestingProviderType, dep, eager) {\n        if (eager === void 0) { eager = false; }\n        var /** @type {?} */ currElement = this;\n        var /** @type {?} */ currEager = eager;\n        var /** @type {?} */ result = null;\n        if (!dep.isSkipSelf) {\n            result = this._getLocalDependency(requestingProviderType, dep, eager);\n        }\n        if (dep.isSelf) {\n            if (!result && dep.isOptional) {\n                result = { isValue: true, value: null };\n            }\n        }\n        else {\n            // check parent elements\n            while (!result && currElement._parent) {\n                var /** @type {?} */ prevElement = currElement;\n                currElement = currElement._parent;\n                if (prevElement._isViewRoot) {\n                    currEager = false;\n                }\n                result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);\n            }\n            // check @Host restriction\n            if (!result) {\n                if (!dep.isHost || this.viewContext.component.isHost ||\n                    this.viewContext.component.type.reference === tokenReference(/** @type {?} */ ((dep.token))) ||\n                    this.viewContext.viewProviders.get(tokenReference(/** @type {?} */ ((dep.token)))) != null) {\n                    result = dep;\n                }\n                else {\n                    result = dep.isOptional ? { isValue: true, value: null } : null;\n                }\n            }\n        }\n        if (!result) {\n            this.viewContext.errors.push(new ProviderError(\"No provider for \" + tokenName((/** @type {?} */ ((dep.token)))), this._sourceSpan));\n        }\n        return result;\n    };\n    return ProviderElementContext;\n}());\nexport { ProviderElementContext };\nfunction ProviderElementContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ProviderElementContext.prototype._contentQueries;\n    /** @type {?} */\n    ProviderElementContext.prototype._transformedProviders;\n    /** @type {?} */\n    ProviderElementContext.prototype._seenProviders;\n    /** @type {?} */\n    ProviderElementContext.prototype._allProviders;\n    /** @type {?} */\n    ProviderElementContext.prototype._attrs;\n    /** @type {?} */\n    ProviderElementContext.prototype._queriedTokens;\n    /** @type {?} */\n    ProviderElementContext.prototype.transformedHasViewContainer;\n    /** @type {?} */\n    ProviderElementContext.prototype.viewContext;\n    /** @type {?} */\n    ProviderElementContext.prototype._parent;\n    /** @type {?} */\n    ProviderElementContext.prototype._isViewRoot;\n    /** @type {?} */\n    ProviderElementContext.prototype._directiveAsts;\n    /** @type {?} */\n    ProviderElementContext.prototype._sourceSpan;\n}\nvar NgModuleProviderAnalyzer = /** @class */ (function () {\n    function NgModuleProviderAnalyzer(reflector, ngModule, extraProviders, sourceSpan) {\n        var _this = this;\n        this.reflector = reflector;\n        this._transformedProviders = new Map();\n        this._seenProviders = new Map();\n        this._errors = [];\n        this._allProviders = new Map();\n        ngModule.transitiveModule.modules.forEach(function (ngModuleType) {\n            var /** @type {?} */ ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };\n            _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders, /* isModule */ /* isModule */ true);\n        });\n        _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) { return entry.provider; }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders, /* isModule */ false);\n    }\n    /**\n     * @return {?}\n     */\n    NgModuleProviderAnalyzer.prototype.parse = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        Array.from(this._allProviders.values()).forEach(function (provider) {\n            _this._getOrCreateLocalProvider(provider.token, provider.eager);\n        });\n        if (this._errors.length > 0) {\n            var /** @type {?} */ errorString = this._errors.join('\\n');\n            throw new Error(\"Provider parse errors:\\n\" + errorString);\n        }\n        // Note: Maps keep their insertion order.\n        var /** @type {?} */ lazyProviders = [];\n        var /** @type {?} */ eagerProviders = [];\n        this._transformedProviders.forEach(function (provider) {\n            if (provider.eager) {\n                eagerProviders.push(provider);\n            }\n            else {\n                lazyProviders.push(provider);\n            }\n        });\n        return lazyProviders.concat(eagerProviders);\n    };\n    /**\n     * @param {?} token\n     * @param {?} eager\n     * @return {?}\n     */\n    NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = /**\n     * @param {?} token\n     * @param {?} eager\n     * @return {?}\n     */\n    function (token, eager) {\n        var _this = this;\n        var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));\n        if (!resolvedProvider) {\n            return null;\n        }\n        var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));\n        if (transformedProviderAst) {\n            return transformedProviderAst;\n        }\n        if (this._seenProviders.get(tokenReference(token)) != null) {\n            this._errors.push(new ProviderError(\"Cannot instantiate cyclic dependency! \" + tokenName(token), resolvedProvider.sourceSpan));\n            return null;\n        }\n        this._seenProviders.set(tokenReference(token), true);\n        var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {\n            var /** @type {?} */ transformedUseValue = provider.useValue;\n            var /** @type {?} */ transformedUseExisting = /** @type {?} */ ((provider.useExisting));\n            var /** @type {?} */ transformedDeps = /** @type {?} */ ((undefined));\n            if (provider.useExisting != null) {\n                var /** @type {?} */ existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);\n                if (existingDiDep.token != null) {\n                    transformedUseExisting = existingDiDep.token;\n                }\n                else {\n                    transformedUseExisting = /** @type {?} */ ((null));\n                    transformedUseValue = existingDiDep.value;\n                }\n            }\n            else if (provider.useFactory) {\n                var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n                transformedDeps =\n                    deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });\n            }\n            else if (provider.useClass) {\n                var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n                transformedDeps =\n                    deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });\n            }\n            return _transformProvider(provider, {\n                useExisting: transformedUseExisting,\n                useValue: transformedUseValue,\n                deps: transformedDeps\n            });\n        });\n        transformedProviderAst =\n            _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });\n        this._transformedProviders.set(tokenReference(token), transformedProviderAst);\n        return transformedProviderAst;\n    };\n    /**\n     * @param {?} dep\n     * @param {?=} eager\n     * @param {?=} requestorSourceSpan\n     * @return {?}\n     */\n    NgModuleProviderAnalyzer.prototype._getDependency = /**\n     * @param {?} dep\n     * @param {?=} eager\n     * @param {?=} requestorSourceSpan\n     * @return {?}\n     */\n    function (dep, eager, requestorSourceSpan) {\n        if (eager === void 0) { eager = false; }\n        var /** @type {?} */ foundLocal = false;\n        if (!dep.isSkipSelf && dep.token != null) {\n            // access the injector\n            if (tokenReference(dep.token) ===\n                this.reflector.resolveExternalReference(Identifiers.Injector) ||\n                tokenReference(dep.token) ===\n                    this.reflector.resolveExternalReference(Identifiers.ComponentFactoryResolver)) {\n                foundLocal = true;\n                // access providers\n            }\n            else if (this._getOrCreateLocalProvider(dep.token, eager) != null) {\n                foundLocal = true;\n            }\n        }\n        return dep;\n    };\n    return NgModuleProviderAnalyzer;\n}());\nexport { NgModuleProviderAnalyzer };\nfunction NgModuleProviderAnalyzer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleProviderAnalyzer.prototype._transformedProviders;\n    /** @type {?} */\n    NgModuleProviderAnalyzer.prototype._seenProviders;\n    /** @type {?} */\n    NgModuleProviderAnalyzer.prototype._allProviders;\n    /** @type {?} */\n    NgModuleProviderAnalyzer.prototype._errors;\n    /** @type {?} */\n    NgModuleProviderAnalyzer.prototype.reflector;\n}\n/**\n * @param {?} provider\n * @param {?} __1\n * @return {?}\n */\nfunction _transformProvider(provider, _a) {\n    var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;\n    return {\n        token: provider.token,\n        useClass: provider.useClass,\n        useExisting: useExisting,\n        useFactory: provider.useFactory,\n        useValue: useValue,\n        deps: deps,\n        multi: provider.multi\n    };\n}\n/**\n * @param {?} provider\n * @param {?} __1\n * @return {?}\n */\nfunction _transformProviderAst(provider, _a) {\n    var eager = _a.eager, providers = _a.providers;\n    return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan, provider.isModule);\n}\n/**\n * @param {?} directives\n * @param {?} sourceSpan\n * @param {?} targetErrors\n * @return {?}\n */\nfunction _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {\n    var /** @type {?} */ providersByToken = new Map();\n    directives.forEach(function (directive) {\n        var /** @type {?} */ dirProvider = { token: { identifier: directive.type }, useClass: directive.type };\n        _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken, /* isModule */ /* isModule */ false);\n    });\n    // Note: directives need to be able to overwrite providers of a component!\n    var /** @type {?} */ directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));\n    directivesWithComponentFirst.forEach(function (directive) {\n        _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken, /* isModule */ /* isModule */ false);\n        _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken, /* isModule */ /* isModule */ false);\n    });\n    return providersByToken;\n}\n/**\n * @param {?} providers\n * @param {?} providerType\n * @param {?} eager\n * @param {?} sourceSpan\n * @param {?} targetErrors\n * @param {?} targetProvidersByToken\n * @param {?} isModule\n * @return {?}\n */\nfunction _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken, isModule) {\n    providers.forEach(function (provider) {\n        var /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));\n        if (resolvedProvider != null && !!resolvedProvider.multiProvider !== !!provider.multi) {\n            targetErrors.push(new ProviderError(\"Mixing multi and non multi provider is not possible for token \" + tokenName(resolvedProvider.token), sourceSpan));\n        }\n        if (!resolvedProvider) {\n            var /** @type {?} */ lifecycleHooks = provider.token.identifier &&\n                (/** @type {?} */ (provider.token.identifier)).lifecycleHooks ?\n                (/** @type {?} */ (provider.token.identifier)).lifecycleHooks :\n                [];\n            var /** @type {?} */ isUseValue = !(provider.useClass || provider.useExisting || provider.useFactory);\n            resolvedProvider = new ProviderAst(provider.token, !!provider.multi, eager || isUseValue, [provider], providerType, lifecycleHooks, sourceSpan, isModule);\n            targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);\n        }\n        else {\n            if (!provider.multi) {\n                resolvedProvider.providers.length = 0;\n            }\n            resolvedProvider.providers.push(provider);\n        }\n    });\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction _getViewQueries(component) {\n    // Note: queries start with id 1 so we can use the number in a Bloom filter!\n    var /** @type {?} */ viewQueryId = 1;\n    var /** @type {?} */ viewQueries = new Map();\n    if (component.viewQueries) {\n        component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, { meta: query, queryId: viewQueryId++ }); });\n    }\n    return viewQueries;\n}\n/**\n * @param {?} contentQueryStartId\n * @param {?} directives\n * @return {?}\n */\nfunction _getContentQueries(contentQueryStartId, directives) {\n    var /** @type {?} */ contentQueryId = contentQueryStartId;\n    var /** @type {?} */ contentQueries = new Map();\n    directives.forEach(function (directive, directiveIndex) {\n        if (directive.queries) {\n            directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, { meta: query, queryId: contentQueryId++ }); });\n        }\n    });\n    return contentQueries;\n}\n/**\n * @param {?} map\n * @param {?} query\n * @return {?}\n */\nfunction _addQueryToTokenMap(map, query) {\n    query.meta.selectors.forEach(function (token) {\n        var /** @type {?} */ entry = map.get(tokenReference(token));\n        if (!entry) {\n            entry = [];\n            map.set(tokenReference(token), entry);\n        }\n        entry.push(query);\n    });\n}\n//# sourceMappingURL=provider_analyzer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Identifiers, createTokenForExternalReference } from '../identifiers';\nimport { LifecycleHooks } from '../lifecycle_reflector';\nimport * as o from '../output/output_ast';\nimport { convertValueToOutputAst } from '../output/value_util';\nimport { ProviderAstType } from '../template_parser/template_ast';\n/**\n * @param {?} ctx\n * @param {?} providerAst\n * @return {?}\n */\nexport function providerDef(ctx, providerAst) {\n    var /** @type {?} */ flags = 0 /* None */;\n    if (!providerAst.eager) {\n        flags |= 4096 /* LazyProvider */;\n    }\n    if (providerAst.providerType === ProviderAstType.PrivateService) {\n        flags |= 8192 /* PrivateProvider */;\n    }\n    if (providerAst.isModule) {\n        flags |= 1073741824 /* TypeModuleProvider */;\n    }\n    providerAst.lifecycleHooks.forEach(function (lifecycleHook) {\n        // for regular providers, we only support ngOnDestroy\n        if (lifecycleHook === LifecycleHooks.OnDestroy ||\n            providerAst.providerType === ProviderAstType.Directive ||\n            providerAst.providerType === ProviderAstType.Component) {\n            flags |= lifecycleHookToNodeFlag(lifecycleHook);\n        }\n    });\n    var _a = providerAst.multiProvider ?\n        multiProviderDef(ctx, flags, providerAst.providers) :\n        singleProviderDef(ctx, flags, providerAst.providerType, providerAst.providers[0]), providerExpr = _a.providerExpr, providerFlags = _a.flags, depsExpr = _a.depsExpr;\n    return {\n        providerExpr: providerExpr,\n        flags: providerFlags, depsExpr: depsExpr,\n        tokenExpr: tokenExpr(ctx, providerAst.token),\n    };\n}\n/**\n * @param {?} ctx\n * @param {?} flags\n * @param {?} providers\n * @return {?}\n */\nfunction multiProviderDef(ctx, flags, providers) {\n    var /** @type {?} */ allDepDefs = [];\n    var /** @type {?} */ allParams = [];\n    var /** @type {?} */ exprs = providers.map(function (provider, providerIndex) {\n        var /** @type {?} */ expr;\n        if (provider.useClass) {\n            var /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useClass.diDeps);\n            expr = ctx.importExpr(provider.useClass.reference).instantiate(depExprs);\n        }\n        else if (provider.useFactory) {\n            var /** @type {?} */ depExprs = convertDeps(providerIndex, provider.deps || provider.useFactory.diDeps);\n            expr = ctx.importExpr(provider.useFactory.reference).callFn(depExprs);\n        }\n        else if (provider.useExisting) {\n            var /** @type {?} */ depExprs = convertDeps(providerIndex, [{ token: provider.useExisting }]);\n            expr = depExprs[0];\n        }\n        else {\n            expr = convertValueToOutputAst(ctx, provider.useValue);\n        }\n        return expr;\n    });\n    var /** @type {?} */ providerExpr = o.fn(allParams, [new o.ReturnStatement(o.literalArr(exprs))], o.INFERRED_TYPE);\n    return {\n        providerExpr: providerExpr,\n        flags: flags | 1024 /* TypeFactoryProvider */,\n        depsExpr: o.literalArr(allDepDefs)\n    };\n    /**\n     * @param {?} providerIndex\n     * @param {?} deps\n     * @return {?}\n     */\n    function convertDeps(providerIndex, deps) {\n        return deps.map(function (dep, depIndex) {\n            var /** @type {?} */ paramName = \"p\" + providerIndex + \"_\" + depIndex;\n            allParams.push(new o.FnParam(paramName, o.DYNAMIC_TYPE));\n            allDepDefs.push(depDef(ctx, dep));\n            return o.variable(paramName);\n        });\n    }\n}\n/**\n * @param {?} ctx\n * @param {?} flags\n * @param {?} providerType\n * @param {?} providerMeta\n * @return {?}\n */\nfunction singleProviderDef(ctx, flags, providerType, providerMeta) {\n    var /** @type {?} */ providerExpr;\n    var /** @type {?} */ deps;\n    if (providerType === ProviderAstType.Directive || providerType === ProviderAstType.Component) {\n        providerExpr = ctx.importExpr(/** @type {?} */ ((providerMeta.useClass)).reference);\n        flags |= 16384 /* TypeDirective */;\n        deps = providerMeta.deps || /** @type {?} */ ((providerMeta.useClass)).diDeps;\n    }\n    else {\n        if (providerMeta.useClass) {\n            providerExpr = ctx.importExpr(providerMeta.useClass.reference);\n            flags |= 512 /* TypeClassProvider */;\n            deps = providerMeta.deps || providerMeta.useClass.diDeps;\n        }\n        else if (providerMeta.useFactory) {\n            providerExpr = ctx.importExpr(providerMeta.useFactory.reference);\n            flags |= 1024 /* TypeFactoryProvider */;\n            deps = providerMeta.deps || providerMeta.useFactory.diDeps;\n        }\n        else if (providerMeta.useExisting) {\n            providerExpr = o.NULL_EXPR;\n            flags |= 2048 /* TypeUseExistingProvider */;\n            deps = [{ token: providerMeta.useExisting }];\n        }\n        else {\n            providerExpr = convertValueToOutputAst(ctx, providerMeta.useValue);\n            flags |= 256 /* TypeValueProvider */;\n            deps = [];\n        }\n    }\n    var /** @type {?} */ depsExpr = o.literalArr(deps.map(function (dep) { return depDef(ctx, dep); }));\n    return { providerExpr: providerExpr, flags: flags, depsExpr: depsExpr };\n}\n/**\n * @param {?} ctx\n * @param {?} tokenMeta\n * @return {?}\n */\nfunction tokenExpr(ctx, tokenMeta) {\n    return tokenMeta.identifier ? ctx.importExpr(tokenMeta.identifier.reference) :\n        o.literal(tokenMeta.value);\n}\n/**\n * @param {?} ctx\n * @param {?} dep\n * @return {?}\n */\nexport function depDef(ctx, dep) {\n    // Note: the following fields have already been normalized out by provider_analyzer:\n    // - isAttribute, isHost\n    var /** @type {?} */ expr = dep.isValue ? convertValueToOutputAst(ctx, dep.value) : tokenExpr(ctx, /** @type {?} */ ((dep.token)));\n    var /** @type {?} */ flags = 0 /* None */;\n    if (dep.isSkipSelf) {\n        flags |= 1 /* SkipSelf */;\n    }\n    if (dep.isOptional) {\n        flags |= 2 /* Optional */;\n    }\n    if (dep.isSelf) {\n        flags |= 4 /* Self */;\n    }\n    if (dep.isValue) {\n        flags |= 8 /* Value */;\n    }\n    return flags === 0 /* None */ ? expr : o.literalArr([o.literal(flags), expr]);\n}\n/**\n * @param {?} lifecycleHook\n * @return {?}\n */\nexport function lifecycleHookToNodeFlag(lifecycleHook) {\n    var /** @type {?} */ nodeFlag = 0 /* None */;\n    switch (lifecycleHook) {\n        case LifecycleHooks.AfterContentChecked:\n            nodeFlag = 2097152 /* AfterContentChecked */;\n            break;\n        case LifecycleHooks.AfterContentInit:\n            nodeFlag = 1048576 /* AfterContentInit */;\n            break;\n        case LifecycleHooks.AfterViewChecked:\n            nodeFlag = 8388608 /* AfterViewChecked */;\n            break;\n        case LifecycleHooks.AfterViewInit:\n            nodeFlag = 4194304 /* AfterViewInit */;\n            break;\n        case LifecycleHooks.DoCheck:\n            nodeFlag = 262144 /* DoCheck */;\n            break;\n        case LifecycleHooks.OnChanges:\n            nodeFlag = 524288 /* OnChanges */;\n            break;\n        case LifecycleHooks.OnDestroy:\n            nodeFlag = 131072 /* OnDestroy */;\n            break;\n        case LifecycleHooks.OnInit:\n            nodeFlag = 65536 /* OnInit */;\n            break;\n    }\n    return nodeFlag;\n}\n/**\n * @param {?} reflector\n * @param {?} ctx\n * @param {?} flags\n * @param {?} entryComponents\n * @return {?}\n */\nexport function componentFactoryResolverProviderDef(reflector, ctx, flags, entryComponents) {\n    var /** @type {?} */ entryComponentFactories = entryComponents.map(function (entryComponent) { return ctx.importExpr(entryComponent.componentFactory); });\n    var /** @type {?} */ token = createTokenForExternalReference(reflector, Identifiers.ComponentFactoryResolver);\n    var /** @type {?} */ classMeta = {\n        diDeps: [\n            { isValue: true, value: o.literalArr(entryComponentFactories) },\n            { token: token, isSkipSelf: true, isOptional: true },\n            { token: createTokenForExternalReference(reflector, Identifiers.NgModuleRef) },\n        ],\n        lifecycleHooks: [],\n        reference: reflector.resolveExternalReference(Identifiers.CodegenComponentFactoryResolver)\n    };\n    var _a = singleProviderDef(ctx, flags, ProviderAstType.PrivateService, {\n        token: token,\n        multi: false,\n        useClass: classMeta,\n    }), providerExpr = _a.providerExpr, providerFlags = _a.flags, depsExpr = _a.depsExpr;\n    return { providerExpr: providerExpr, flags: providerFlags, depsExpr: depsExpr, tokenExpr: tokenExpr(ctx, token) };\n}\n//# sourceMappingURL=provider_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { identifierName } from './compile_metadata';\nimport { Identifiers } from './identifiers';\nimport * as o from './output/output_ast';\nimport { typeSourceSpan } from './parse_util';\nimport { NgModuleProviderAnalyzer } from './provider_analyzer';\nimport { componentFactoryResolverProviderDef, providerDef } from './view_compiler/provider_compiler';\nvar NgModuleCompileResult = /** @class */ (function () {\n    function NgModuleCompileResult(ngModuleFactoryVar) {\n        this.ngModuleFactoryVar = ngModuleFactoryVar;\n    }\n    return NgModuleCompileResult;\n}());\nexport { NgModuleCompileResult };\nfunction NgModuleCompileResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleCompileResult.prototype.ngModuleFactoryVar;\n}\nvar /** @type {?} */ LOG_VAR = o.variable('_l');\nvar NgModuleCompiler = /** @class */ (function () {\n    function NgModuleCompiler(reflector) {\n        this.reflector = reflector;\n    }\n    /**\n     * @param {?} ctx\n     * @param {?} ngModuleMeta\n     * @param {?} extraProviders\n     * @return {?}\n     */\n    NgModuleCompiler.prototype.compile = /**\n     * @param {?} ctx\n     * @param {?} ngModuleMeta\n     * @param {?} extraProviders\n     * @return {?}\n     */\n    function (ctx, ngModuleMeta, extraProviders) {\n        var /** @type {?} */ sourceSpan = typeSourceSpan('NgModule', ngModuleMeta.type);\n        var /** @type {?} */ entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents;\n        var /** @type {?} */ bootstrapComponents = ngModuleMeta.bootstrapComponents;\n        var /** @type {?} */ providerParser = new NgModuleProviderAnalyzer(this.reflector, ngModuleMeta, extraProviders, sourceSpan);\n        var /** @type {?} */ providerDefs = [componentFactoryResolverProviderDef(this.reflector, ctx, 0 /* None */, entryComponentFactories)]\n            .concat(providerParser.parse().map(function (provider) { return providerDef(ctx, provider); }))\n            .map(function (_a) {\n            var providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, flags = _a.flags, tokenExpr = _a.tokenExpr;\n            return o.importExpr(Identifiers.moduleProviderDef).callFn([\n                o.literal(flags), tokenExpr, providerExpr, depsExpr\n            ]);\n        });\n        var /** @type {?} */ ngModuleDef = o.importExpr(Identifiers.moduleDef).callFn([o.literalArr(providerDefs)]);\n        var /** @type {?} */ ngModuleDefFactory = o.fn([new o.FnParam(/** @type {?} */ ((LOG_VAR.name)))], [new o.ReturnStatement(ngModuleDef)], o.INFERRED_TYPE);\n        var /** @type {?} */ ngModuleFactoryVar = identifierName(ngModuleMeta.type) + \"NgFactory\";\n        this._createNgModuleFactory(ctx, ngModuleMeta.type.reference, o.importExpr(Identifiers.createModuleFactory).callFn([\n            ctx.importExpr(ngModuleMeta.type.reference),\n            o.literalArr(bootstrapComponents.map(function (id) { return ctx.importExpr(id.reference); })),\n            ngModuleDefFactory\n        ]));\n        if (ngModuleMeta.id) {\n            var /** @type {?} */ id = typeof ngModuleMeta.id === 'string' ? o.literal(ngModuleMeta.id) :\n                ctx.importExpr(ngModuleMeta.id);\n            var /** @type {?} */ registerFactoryStmt = o.importExpr(Identifiers.RegisterModuleFactoryFn)\n                .callFn([id, o.variable(ngModuleFactoryVar)])\n                .toStmt();\n            ctx.statements.push(registerFactoryStmt);\n        }\n        return new NgModuleCompileResult(ngModuleFactoryVar);\n    };\n    /**\n     * @param {?} ctx\n     * @param {?} ngModuleReference\n     * @return {?}\n     */\n    NgModuleCompiler.prototype.createStub = /**\n     * @param {?} ctx\n     * @param {?} ngModuleReference\n     * @return {?}\n     */\n    function (ctx, ngModuleReference) {\n        this._createNgModuleFactory(ctx, ngModuleReference, o.NULL_EXPR);\n    };\n    /**\n     * @param {?} ctx\n     * @param {?} reference\n     * @param {?} value\n     * @return {?}\n     */\n    NgModuleCompiler.prototype._createNgModuleFactory = /**\n     * @param {?} ctx\n     * @param {?} reference\n     * @param {?} value\n     * @return {?}\n     */\n    function (ctx, reference, value) {\n        var /** @type {?} */ ngModuleFactoryVar = identifierName({ reference: reference }) + \"NgFactory\";\n        var /** @type {?} */ ngModuleFactoryStmt = o.variable(ngModuleFactoryVar)\n            .set(value)\n            .toDeclStmt(o.importType(Identifiers.NgModuleFactory, [/** @type {?} */ ((o.expressionType(ctx.importExpr(reference))))], [o.TypeModifier.Const]), [o.StmtModifier.Final, o.StmtModifier.Exported]);\n        ctx.statements.push(ngModuleFactoryStmt);\n    };\n    return NgModuleCompiler;\n}());\nexport { NgModuleCompiler };\nfunction NgModuleCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleCompiler.prototype.reflector;\n}\n//# sourceMappingURL=ng_module_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { createNgModule } from './core';\nimport { findLast } from './directive_resolver';\nimport { stringify } from './util';\n/**\n * Resolves types to {\\@link NgModule}.\n */\nvar /**\n * Resolves types to {\\@link NgModule}.\n */\nNgModuleResolver = /** @class */ (function () {\n    function NgModuleResolver(_reflector) {\n        this._reflector = _reflector;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    NgModuleResolver.prototype.isNgModule = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) { return this._reflector.annotations(type).some(createNgModule.isTypeOf); };\n    /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    NgModuleResolver.prototype.resolve = /**\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ ngModuleMeta = findLast(this._reflector.annotations(type), createNgModule.isTypeOf);\n        if (ngModuleMeta) {\n            return ngModuleMeta;\n        }\n        else {\n            if (throwIfNotFound) {\n                throw new Error(\"No NgModule metadata found for '\" + stringify(type) + \"'.\");\n            }\n            return null;\n        }\n    };\n    return NgModuleResolver;\n}());\n/**\n * Resolves types to {\\@link NgModule}.\n */\nexport { NgModuleResolver };\nfunction NgModuleResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgModuleResolver.prototype._reflector;\n}\n//# sourceMappingURL=ng_module_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { utf8Encode } from '../util';\n// https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\nvar /** @type {?} */ VERSION = 3;\nvar /** @type {?} */ JS_B64_PREFIX = '# sourceMappingURL=data:application/json;base64,';\nvar SourceMapGenerator = /** @class */ (function () {\n    function SourceMapGenerator(file) {\n        if (file === void 0) { file = null; }\n        this.file = file;\n        this.sourcesContent = new Map();\n        this.lines = [];\n        this.lastCol0 = 0;\n        this.hasMappings = false;\n    }\n    // The content is `null` when the content is expected to be loaded using the URL\n    /**\n     * @param {?} url\n     * @param {?=} content\n     * @return {?}\n     */\n    SourceMapGenerator.prototype.addSource = /**\n     * @param {?} url\n     * @param {?=} content\n     * @return {?}\n     */\n    function (url, content) {\n        if (content === void 0) { content = null; }\n        if (!this.sourcesContent.has(url)) {\n            this.sourcesContent.set(url, content);\n        }\n        return this;\n    };\n    /**\n     * @return {?}\n     */\n    SourceMapGenerator.prototype.addLine = /**\n     * @return {?}\n     */\n    function () {\n        this.lines.push([]);\n        this.lastCol0 = 0;\n        return this;\n    };\n    /**\n     * @param {?} col0\n     * @param {?=} sourceUrl\n     * @param {?=} sourceLine0\n     * @param {?=} sourceCol0\n     * @return {?}\n     */\n    SourceMapGenerator.prototype.addMapping = /**\n     * @param {?} col0\n     * @param {?=} sourceUrl\n     * @param {?=} sourceLine0\n     * @param {?=} sourceCol0\n     * @return {?}\n     */\n    function (col0, sourceUrl, sourceLine0, sourceCol0) {\n        if (!this.currentLine) {\n            throw new Error(\"A line must be added before mappings can be added\");\n        }\n        if (sourceUrl != null && !this.sourcesContent.has(sourceUrl)) {\n            throw new Error(\"Unknown source file \\\"\" + sourceUrl + \"\\\"\");\n        }\n        if (col0 == null) {\n            throw new Error(\"The column in the generated code must be provided\");\n        }\n        if (col0 < this.lastCol0) {\n            throw new Error(\"Mapping should be added in output order\");\n        }\n        if (sourceUrl && (sourceLine0 == null || sourceCol0 == null)) {\n            throw new Error(\"The source location must be provided when a source url is provided\");\n        }\n        this.hasMappings = true;\n        this.lastCol0 = col0;\n        this.currentLine.push({ col0: col0, sourceUrl: sourceUrl, sourceLine0: sourceLine0, sourceCol0: sourceCol0 });\n        return this;\n    };\n    Object.defineProperty(SourceMapGenerator.prototype, \"currentLine\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.lines.slice(-1)[0]; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    SourceMapGenerator.prototype.toJSON = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.hasMappings) {\n            return null;\n        }\n        var /** @type {?} */ sourcesIndex = new Map();\n        var /** @type {?} */ sources = [];\n        var /** @type {?} */ sourcesContent = [];\n        Array.from(this.sourcesContent.keys()).forEach(function (url, i) {\n            sourcesIndex.set(url, i);\n            sources.push(url);\n            sourcesContent.push(_this.sourcesContent.get(url) || null);\n        });\n        var /** @type {?} */ mappings = '';\n        var /** @type {?} */ lastCol0 = 0;\n        var /** @type {?} */ lastSourceIndex = 0;\n        var /** @type {?} */ lastSourceLine0 = 0;\n        var /** @type {?} */ lastSourceCol0 = 0;\n        this.lines.forEach(function (segments) {\n            lastCol0 = 0;\n            mappings += segments\n                .map(function (segment) {\n                // zero-based starting column of the line in the generated code\n                var /** @type {?} */ segAsStr = toBase64VLQ(segment.col0 - lastCol0);\n                lastCol0 = segment.col0;\n                if (segment.sourceUrl != null) {\n                    // zero-based index into the “sources” list\n                    segAsStr +=\n                        toBase64VLQ(/** @type {?} */ ((sourcesIndex.get(segment.sourceUrl))) - lastSourceIndex);\n                    lastSourceIndex = /** @type {?} */ ((sourcesIndex.get(segment.sourceUrl)));\n                    // the zero-based starting line in the original source\n                    segAsStr += toBase64VLQ(/** @type {?} */ ((segment.sourceLine0)) - lastSourceLine0);\n                    lastSourceLine0 = /** @type {?} */ ((segment.sourceLine0));\n                    // the zero-based starting column in the original source\n                    segAsStr += toBase64VLQ(/** @type {?} */ ((segment.sourceCol0)) - lastSourceCol0);\n                    lastSourceCol0 = /** @type {?} */ ((segment.sourceCol0));\n                }\n                return segAsStr;\n            })\n                .join(',');\n            mappings += ';';\n        });\n        mappings = mappings.slice(0, -1);\n        return {\n            'file': this.file || '',\n            'version': VERSION,\n            'sourceRoot': '',\n            'sources': sources,\n            'sourcesContent': sourcesContent,\n            'mappings': mappings,\n        };\n    };\n    /**\n     * @return {?}\n     */\n    SourceMapGenerator.prototype.toJsComment = /**\n     * @return {?}\n     */\n    function () {\n        return this.hasMappings ? '//' + JS_B64_PREFIX + toBase64String(JSON.stringify(this, null, 0)) :\n            '';\n    };\n    return SourceMapGenerator;\n}());\nexport { SourceMapGenerator };\nfunction SourceMapGenerator_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SourceMapGenerator.prototype.sourcesContent;\n    /** @type {?} */\n    SourceMapGenerator.prototype.lines;\n    /** @type {?} */\n    SourceMapGenerator.prototype.lastCol0;\n    /** @type {?} */\n    SourceMapGenerator.prototype.hasMappings;\n    /** @type {?} */\n    SourceMapGenerator.prototype.file;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function toBase64String(value) {\n    var /** @type {?} */ b64 = '';\n    value = utf8Encode(value);\n    for (var /** @type {?} */ i = 0; i < value.length;) {\n        var /** @type {?} */ i1 = value.charCodeAt(i++);\n        var /** @type {?} */ i2 = value.charCodeAt(i++);\n        var /** @type {?} */ i3 = value.charCodeAt(i++);\n        b64 += toBase64Digit(i1 >> 2);\n        b64 += toBase64Digit(((i1 & 3) << 4) | (isNaN(i2) ? 0 : i2 >> 4));\n        b64 += isNaN(i2) ? '=' : toBase64Digit(((i2 & 15) << 2) | (i3 >> 6));\n        b64 += isNaN(i2) || isNaN(i3) ? '=' : toBase64Digit(i3 & 63);\n    }\n    return b64;\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toBase64VLQ(value) {\n    value = value < 0 ? ((-value) << 1) + 1 : value << 1;\n    var /** @type {?} */ out = '';\n    do {\n        var /** @type {?} */ digit = value & 31;\n        value = value >> 5;\n        if (value > 0) {\n            digit = digit | 32;\n        }\n        out += toBase64Digit(digit);\n    } while (value > 0);\n    return out;\n}\nvar /** @type {?} */ B64_DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n/**\n * @param {?} value\n * @return {?}\n */\nfunction toBase64Digit(value) {\n    if (value < 0 || value >= 64) {\n        throw new Error(\"Can only encode value in the range [0, 63]\");\n    }\n    return B64_DIGITS[value];\n}\n//# sourceMappingURL=source_map.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from './output_ast';\nimport { SourceMapGenerator } from './source_map';\nvar /** @type {?} */ _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nvar /** @type {?} */ _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nvar /** @type {?} */ _INDENT_WITH = '  ';\nexport var /** @type {?} */ CATCH_ERROR_VAR = o.variable('error', null, null);\nexport var /** @type {?} */ CATCH_STACK_VAR = o.variable('stack', null, null);\n/**\n * @record\n */\nexport function OutputEmitter() { }\nfunction OutputEmitter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    OutputEmitter.prototype.emitStatements;\n}\nvar _EmittedLine = /** @class */ (function () {\n    function _EmittedLine(indent) {\n        this.indent = indent;\n        this.partsLength = 0;\n        this.parts = [];\n        this.srcSpans = [];\n    }\n    return _EmittedLine;\n}());\nfunction _EmittedLine_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _EmittedLine.prototype.partsLength;\n    /** @type {?} */\n    _EmittedLine.prototype.parts;\n    /** @type {?} */\n    _EmittedLine.prototype.srcSpans;\n    /** @type {?} */\n    _EmittedLine.prototype.indent;\n}\nvar EmitterVisitorContext = /** @class */ (function () {\n    function EmitterVisitorContext(_indent) {\n        this._indent = _indent;\n        this._classes = [];\n        this._preambleLineCount = 0;\n        this._lines = [new _EmittedLine(_indent)];\n    }\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.createRoot = /**\n     * @return {?}\n     */\n    function () { return new EmitterVisitorContext(0); };\n    Object.defineProperty(EmitterVisitorContext.prototype, \"_currentLine\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._lines[this._lines.length - 1]; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?=} from\n     * @param {?=} lastPart\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.println = /**\n     * @param {?=} from\n     * @param {?=} lastPart\n     * @return {?}\n     */\n    function (from, lastPart) {\n        if (lastPart === void 0) { lastPart = ''; }\n        this.print(from || null, lastPart, true);\n    };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.lineIsEmpty = /**\n     * @return {?}\n     */\n    function () { return this._currentLine.parts.length === 0; };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.lineLength = /**\n     * @return {?}\n     */\n    function () {\n        return this._currentLine.indent * _INDENT_WITH.length + this._currentLine.partsLength;\n    };\n    /**\n     * @param {?} from\n     * @param {?} part\n     * @param {?=} newLine\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.print = /**\n     * @param {?} from\n     * @param {?} part\n     * @param {?=} newLine\n     * @return {?}\n     */\n    function (from, part, newLine) {\n        if (newLine === void 0) { newLine = false; }\n        if (part.length > 0) {\n            this._currentLine.parts.push(part);\n            this._currentLine.partsLength += part.length;\n            this._currentLine.srcSpans.push(from && from.sourceSpan || null);\n        }\n        if (newLine) {\n            this._lines.push(new _EmittedLine(this._indent));\n        }\n    };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.removeEmptyLastLine = /**\n     * @return {?}\n     */\n    function () {\n        if (this.lineIsEmpty()) {\n            this._lines.pop();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.incIndent = /**\n     * @return {?}\n     */\n    function () {\n        this._indent++;\n        if (this.lineIsEmpty()) {\n            this._currentLine.indent = this._indent;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.decIndent = /**\n     * @return {?}\n     */\n    function () {\n        this._indent--;\n        if (this.lineIsEmpty()) {\n            this._currentLine.indent = this._indent;\n        }\n    };\n    /**\n     * @param {?} clazz\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.pushClass = /**\n     * @param {?} clazz\n     * @return {?}\n     */\n    function (clazz) { this._classes.push(clazz); };\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.popClass = /**\n     * @return {?}\n     */\n    function () { return /** @type {?} */ ((this._classes.pop())); };\n    Object.defineProperty(EmitterVisitorContext.prototype, \"currentClass\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.toSource = /**\n     * @return {?}\n     */\n    function () {\n        return this.sourceLines\n            .map(function (l) { return l.parts.length > 0 ? _createIndent(l.indent) + l.parts.join('') : ''; })\n            .join('\\n');\n    };\n    /**\n     * @param {?} genFilePath\n     * @param {?=} startsAtLine\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.toSourceMapGenerator = /**\n     * @param {?} genFilePath\n     * @param {?=} startsAtLine\n     * @return {?}\n     */\n    function (genFilePath, startsAtLine) {\n        if (startsAtLine === void 0) { startsAtLine = 0; }\n        var /** @type {?} */ map = new SourceMapGenerator(genFilePath);\n        var /** @type {?} */ firstOffsetMapped = false;\n        var /** @type {?} */ mapFirstOffsetIfNeeded = function () {\n            if (!firstOffsetMapped) {\n                // Add a single space so that tools won't try to load the file from disk.\n                // Note: We are using virtual urls like `ng:///`, so we have to\n                // provide a content here.\n                map.addSource(genFilePath, ' ').addMapping(0, genFilePath, 0, 0);\n                firstOffsetMapped = true;\n            }\n        };\n        for (var /** @type {?} */ i = 0; i < startsAtLine; i++) {\n            map.addLine();\n            mapFirstOffsetIfNeeded();\n        }\n        this.sourceLines.forEach(function (line, lineIdx) {\n            map.addLine();\n            var /** @type {?} */ spans = line.srcSpans;\n            var /** @type {?} */ parts = line.parts;\n            var /** @type {?} */ col0 = line.indent * _INDENT_WITH.length;\n            var /** @type {?} */ spanIdx = 0;\n            // skip leading parts without source spans\n            while (spanIdx < spans.length && !spans[spanIdx]) {\n                col0 += parts[spanIdx].length;\n                spanIdx++;\n            }\n            if (spanIdx < spans.length && lineIdx === 0 && col0 === 0) {\n                firstOffsetMapped = true;\n            }\n            else {\n                mapFirstOffsetIfNeeded();\n            }\n            while (spanIdx < spans.length) {\n                var /** @type {?} */ span = /** @type {?} */ ((spans[spanIdx]));\n                var /** @type {?} */ source = span.start.file;\n                var /** @type {?} */ sourceLine = span.start.line;\n                var /** @type {?} */ sourceCol = span.start.col;\n                map.addSource(source.url, source.content)\n                    .addMapping(col0, source.url, sourceLine, sourceCol);\n                col0 += parts[spanIdx].length;\n                spanIdx++;\n                // assign parts without span or the same span to the previous segment\n                while (spanIdx < spans.length && (span === spans[spanIdx] || !spans[spanIdx])) {\n                    col0 += parts[spanIdx].length;\n                    spanIdx++;\n                }\n            }\n        });\n        return map;\n    };\n    /**\n     * @param {?} count\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.setPreambleLineCount = /**\n     * @param {?} count\n     * @return {?}\n     */\n    function (count) { return this._preambleLineCount = count; };\n    /**\n     * @param {?} line\n     * @param {?} column\n     * @return {?}\n     */\n    EmitterVisitorContext.prototype.spanOf = /**\n     * @param {?} line\n     * @param {?} column\n     * @return {?}\n     */\n    function (line, column) {\n        var /** @type {?} */ emittedLine = this._lines[line - this._preambleLineCount];\n        if (emittedLine) {\n            var /** @type {?} */ columnsLeft = column - _createIndent(emittedLine.indent).length;\n            for (var /** @type {?} */ partIndex = 0; partIndex < emittedLine.parts.length; partIndex++) {\n                var /** @type {?} */ part = emittedLine.parts[partIndex];\n                if (part.length > columnsLeft) {\n                    return emittedLine.srcSpans[partIndex];\n                }\n                columnsLeft -= part.length;\n            }\n        }\n        return null;\n    };\n    Object.defineProperty(EmitterVisitorContext.prototype, \"sourceLines\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            if (this._lines.length && this._lines[this._lines.length - 1].parts.length === 0) {\n                return this._lines.slice(0, -1);\n            }\n            return this._lines;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return EmitterVisitorContext;\n}());\nexport { EmitterVisitorContext };\nfunction EmitterVisitorContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    EmitterVisitorContext.prototype._lines;\n    /** @type {?} */\n    EmitterVisitorContext.prototype._classes;\n    /** @type {?} */\n    EmitterVisitorContext.prototype._preambleLineCount;\n    /** @type {?} */\n    EmitterVisitorContext.prototype._indent;\n}\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nAbstractEmitterVisitor = /** @class */ (function () {\n    function AbstractEmitterVisitor(_escapeDollarInStrings) {\n        this._escapeDollarInStrings = _escapeDollarInStrings;\n    }\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitExpressionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        stmt.expr.visitExpression(this, ctx);\n        ctx.println(stmt, ';');\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitReturnStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"return \");\n        stmt.value.visitExpression(this, ctx);\n        ctx.println(stmt, ';');\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitIfStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"if (\");\n        stmt.condition.visitExpression(this, ctx);\n        ctx.print(stmt, \") {\");\n        var /** @type {?} */ hasElseCase = stmt.falseCase != null && stmt.falseCase.length > 0;\n        if (stmt.trueCase.length <= 1 && !hasElseCase) {\n            ctx.print(stmt, \" \");\n            this.visitAllStatements(stmt.trueCase, ctx);\n            ctx.removeEmptyLastLine();\n            ctx.print(stmt, \" \");\n        }\n        else {\n            ctx.println();\n            ctx.incIndent();\n            this.visitAllStatements(stmt.trueCase, ctx);\n            ctx.decIndent();\n            if (hasElseCase) {\n                ctx.println(stmt, \"} else {\");\n                ctx.incIndent();\n                this.visitAllStatements(stmt.falseCase, ctx);\n                ctx.decIndent();\n            }\n        }\n        ctx.println(stmt, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitThrowStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"throw \");\n        stmt.error.visitExpression(this, ctx);\n        ctx.println(stmt, \";\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.multiline) {\n            ctx.println(stmt, \"/* \" + stmt.comment + \" */\");\n        }\n        else {\n            stmt.comment.split('\\n').forEach(function (line) { ctx.println(stmt, \"// \" + line); });\n        }\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitJSDocCommentStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.println(stmt, \"/*\" + stmt.toString() + \"*/\");\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitWriteVarExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        ctx.print(expr, expr.name + \" = \");\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitWriteKeyExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        expr.receiver.visitExpression(this, ctx);\n        ctx.print(expr, \"[\");\n        expr.index.visitExpression(this, ctx);\n        ctx.print(expr, \"] = \");\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitWritePropExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n        if (!lineWasEmpty) {\n            ctx.print(expr, '(');\n        }\n        expr.receiver.visitExpression(this, ctx);\n        ctx.print(expr, \".\" + expr.name + \" = \");\n        expr.value.visitExpression(this, ctx);\n        if (!lineWasEmpty) {\n            ctx.print(expr, ')');\n        }\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        expr.receiver.visitExpression(this, ctx);\n        var /** @type {?} */ name = expr.name;\n        if (expr.builtin != null) {\n            name = this.getBuiltinMethodName(expr.builtin);\n            if (name == null) {\n                // some builtins just mean to skip the call.\n                return null;\n            }\n        }\n        ctx.print(expr, \".\" + name + \"(\");\n        this.visitAllExpressions(expr.args, ctx, \",\");\n        ctx.print(expr, \")\");\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        expr.fn.visitExpression(this, ctx);\n        ctx.print(expr, \"(\");\n        this.visitAllExpressions(expr.args, ctx, ',');\n        ctx.print(expr, \")\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ varName = /** @type {?} */ ((ast.name));\n        if (ast.builtin != null) {\n            switch (ast.builtin) {\n                case o.BuiltinVar.Super:\n                    varName = 'super';\n                    break;\n                case o.BuiltinVar.This:\n                    varName = 'this';\n                    break;\n                case o.BuiltinVar.CatchError:\n                    varName = /** @type {?} */ ((CATCH_ERROR_VAR.name));\n                    break;\n                case o.BuiltinVar.CatchStack:\n                    varName = /** @type {?} */ ((CATCH_STACK_VAR.name));\n                    break;\n                default:\n                    throw new Error(\"Unknown builtin variable \" + ast.builtin);\n            }\n        }\n        ctx.print(ast, varName);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitInstantiateExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"new \");\n        ast.classExpr.visitExpression(this, ctx);\n        ctx.print(ast, \"(\");\n        this.visitAllExpressions(ast.args, ctx, ',');\n        ctx.print(ast, \")\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ value = ast.value;\n        if (typeof value === 'string') {\n            ctx.print(ast, escapeIdentifier(value, this._escapeDollarInStrings));\n        }\n        else {\n            ctx.print(ast, \"\" + value);\n        }\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitConditionalExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"(\");\n        ast.condition.visitExpression(this, ctx);\n        ctx.print(ast, '? ');\n        ast.trueCase.visitExpression(this, ctx);\n        ctx.print(ast, ': '); /** @type {?} */\n        ((ast.falseCase)).visitExpression(this, ctx);\n        ctx.print(ast, \")\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitNotExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, '!');\n        ast.condition.visitExpression(this, ctx);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitAssertNotNullExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ast.condition.visitExpression(this, ctx);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ opStr;\n        switch (ast.operator) {\n            case o.BinaryOperator.Equals:\n                opStr = '==';\n                break;\n            case o.BinaryOperator.Identical:\n                opStr = '===';\n                break;\n            case o.BinaryOperator.NotEquals:\n                opStr = '!=';\n                break;\n            case o.BinaryOperator.NotIdentical:\n                opStr = '!==';\n                break;\n            case o.BinaryOperator.And:\n                opStr = '&&';\n                break;\n            case o.BinaryOperator.BitwiseAnd:\n                opStr = '&';\n                break;\n            case o.BinaryOperator.Or:\n                opStr = '||';\n                break;\n            case o.BinaryOperator.Plus:\n                opStr = '+';\n                break;\n            case o.BinaryOperator.Minus:\n                opStr = '-';\n                break;\n            case o.BinaryOperator.Divide:\n                opStr = '/';\n                break;\n            case o.BinaryOperator.Multiply:\n                opStr = '*';\n                break;\n            case o.BinaryOperator.Modulo:\n                opStr = '%';\n                break;\n            case o.BinaryOperator.Lower:\n                opStr = '<';\n                break;\n            case o.BinaryOperator.LowerEquals:\n                opStr = '<=';\n                break;\n            case o.BinaryOperator.Bigger:\n                opStr = '>';\n                break;\n            case o.BinaryOperator.BiggerEquals:\n                opStr = '>=';\n                break;\n            default:\n                throw new Error(\"Unknown operator \" + ast.operator);\n        }\n        if (ast.parens)\n            ctx.print(ast, \"(\");\n        ast.lhs.visitExpression(this, ctx);\n        ctx.print(ast, \" \" + opStr + \" \");\n        ast.rhs.visitExpression(this, ctx);\n        if (ast.parens)\n            ctx.print(ast, \")\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitReadPropExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ast.receiver.visitExpression(this, ctx);\n        ctx.print(ast, \".\");\n        ctx.print(ast, ast.name);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitReadKeyExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ast.receiver.visitExpression(this, ctx);\n        ctx.print(ast, \"[\");\n        ast.index.visitExpression(this, ctx);\n        ctx.print(ast, \"]\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"[\");\n        this.visitAllExpressions(ast.entries, ctx, ',');\n        ctx.print(ast, \"]\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitLiteralMapExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var _this = this;\n        ctx.print(ast, \"{\");\n        this.visitAllObjects(function (entry) {\n            ctx.print(ast, escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + \":\");\n            entry.value.visitExpression(_this, ctx);\n        }, ast.entries, ctx, ',');\n        ctx.print(ast, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitCommaExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, '(');\n        this.visitAllExpressions(ast.parts, ctx, ',');\n        ctx.print(ast, ')');\n        return null;\n    };\n    /**\n     * @param {?} expressions\n     * @param {?} ctx\n     * @param {?} separator\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitAllExpressions = /**\n     * @param {?} expressions\n     * @param {?} ctx\n     * @param {?} separator\n     * @return {?}\n     */\n    function (expressions, ctx, separator) {\n        var _this = this;\n        this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator);\n    };\n    /**\n     * @template T\n     * @param {?} handler\n     * @param {?} expressions\n     * @param {?} ctx\n     * @param {?} separator\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitAllObjects = /**\n     * @template T\n     * @param {?} handler\n     * @param {?} expressions\n     * @param {?} ctx\n     * @param {?} separator\n     * @return {?}\n     */\n    function (handler, expressions, ctx, separator) {\n        var /** @type {?} */ incrementedIndent = false;\n        for (var /** @type {?} */ i = 0; i < expressions.length; i++) {\n            if (i > 0) {\n                if (ctx.lineLength() > 80) {\n                    ctx.print(null, separator, true);\n                    if (!incrementedIndent) {\n                        // continuation are marked with double indent.\n                        ctx.incIndent();\n                        ctx.incIndent();\n                        incrementedIndent = true;\n                    }\n                }\n                else {\n                    ctx.print(null, separator, false);\n                }\n            }\n            handler(expressions[i]);\n        }\n        if (incrementedIndent) {\n            // continuation are marked with double indent.\n            ctx.decIndent();\n            ctx.decIndent();\n        }\n    };\n    /**\n     * @param {?} statements\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitAllStatements = /**\n     * @param {?} statements\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (statements, ctx) {\n        var _this = this;\n        statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });\n    };\n    return AbstractEmitterVisitor;\n}());\n/**\n * @abstract\n */\nexport { AbstractEmitterVisitor };\nfunction AbstractEmitterVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AbstractEmitterVisitor.prototype._escapeDollarInStrings;\n    /**\n     * @abstract\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitCastExpr = function (ast, context) { };\n    /**\n     * @abstract\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) { };\n    /**\n     * @abstract\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) { };\n    /**\n     * @abstract\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) { };\n    /**\n     * @abstract\n     * @param {?} method\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.getBuiltinMethodName = function (method) { };\n    /**\n     * @abstract\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) { };\n    /**\n     * @abstract\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) { };\n    /**\n     * @abstract\n     * @param {?} stmt\n     * @param {?} context\n     * @return {?}\n     */\n    AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) { };\n}\n/**\n * @param {?} input\n * @param {?} escapeDollar\n * @param {?=} alwaysQuote\n * @return {?}\n */\nexport function escapeIdentifier(input, escapeDollar, alwaysQuote) {\n    if (alwaysQuote === void 0) { alwaysQuote = true; }\n    if (input == null) {\n        return null;\n    }\n    var /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {\n        var match = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            match[_i] = arguments[_i];\n        }\n        if (match[0] == '$') {\n            return escapeDollar ? '\\\\$' : '$';\n        }\n        else if (match[0] == '\\n') {\n            return '\\\\n';\n        }\n        else if (match[0] == '\\r') {\n            return '\\\\r';\n        }\n        else {\n            return \"\\\\\" + match[0];\n        }\n    });\n    var /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n    return requiresQuotes ? \"'\" + body + \"'\" : body;\n}\n/**\n * @param {?} count\n * @return {?}\n */\nfunction _createIndent(count) {\n    var /** @type {?} */ res = '';\n    for (var /** @type {?} */ i = 0; i < count; i++) {\n        res += _INDENT_WITH;\n    }\n    return res;\n}\n//# sourceMappingURL=abstract_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractEmitterVisitor, CATCH_ERROR_VAR, CATCH_STACK_VAR, EmitterVisitorContext } from './abstract_emitter';\nimport * as o from './output_ast';\nvar /** @type {?} */ _debugFilePath = '/debug/lib';\n/**\n * @param {?} ast\n * @return {?}\n */\nexport function debugOutputAstAsTypeScript(ast) {\n    var /** @type {?} */ converter = new _TsEmitterVisitor();\n    var /** @type {?} */ ctx = EmitterVisitorContext.createRoot();\n    var /** @type {?} */ asts = Array.isArray(ast) ? ast : [ast];\n    asts.forEach(function (ast) {\n        if (ast instanceof o.Statement) {\n            ast.visitStatement(converter, ctx);\n        }\n        else if (ast instanceof o.Expression) {\n            ast.visitExpression(converter, ctx);\n        }\n        else if (ast instanceof o.Type) {\n            ast.visitType(converter, ctx);\n        }\n        else {\n            throw new Error(\"Don't know how to print debug info for \" + ast);\n        }\n    });\n    return ctx.toSource();\n}\nvar TypeScriptEmitter = /** @class */ (function () {\n    function TypeScriptEmitter() {\n    }\n    /**\n     * @param {?} genFilePath\n     * @param {?} stmts\n     * @param {?=} preamble\n     * @param {?=} emitSourceMaps\n     * @param {?=} referenceFilter\n     * @param {?=} importFilter\n     * @return {?}\n     */\n    TypeScriptEmitter.prototype.emitStatementsAndContext = /**\n     * @param {?} genFilePath\n     * @param {?} stmts\n     * @param {?=} preamble\n     * @param {?=} emitSourceMaps\n     * @param {?=} referenceFilter\n     * @param {?=} importFilter\n     * @return {?}\n     */\n    function (genFilePath, stmts, preamble, emitSourceMaps, referenceFilter, importFilter) {\n        if (preamble === void 0) { preamble = ''; }\n        if (emitSourceMaps === void 0) { emitSourceMaps = true; }\n        var /** @type {?} */ converter = new _TsEmitterVisitor(referenceFilter, importFilter);\n        var /** @type {?} */ ctx = EmitterVisitorContext.createRoot();\n        converter.visitAllStatements(stmts, ctx);\n        var /** @type {?} */ preambleLines = preamble ? preamble.split('\\n') : [];\n        converter.reexports.forEach(function (reexports, exportedModuleName) {\n            var /** @type {?} */ reexportsCode = reexports.map(function (reexport) { return reexport.name + \" as \" + reexport.as; }).join(',');\n            preambleLines.push(\"export {\" + reexportsCode + \"} from '\" + exportedModuleName + \"';\");\n        });\n        converter.importsWithPrefixes.forEach(function (prefix, importedModuleName) {\n            // Note: can't write the real word for import as it screws up system.js auto detection...\n            preambleLines.push(\"imp\" +\n                (\"ort * as \" + prefix + \" from '\" + importedModuleName + \"';\"));\n        });\n        var /** @type {?} */ sm = emitSourceMaps ?\n            ctx.toSourceMapGenerator(genFilePath, preambleLines.length).toJsComment() :\n            '';\n        var /** @type {?} */ lines = preambleLines.concat([ctx.toSource(), sm]);\n        if (sm) {\n            // always add a newline at the end, as some tools have bugs without it.\n            lines.push('');\n        }\n        ctx.setPreambleLineCount(preambleLines.length);\n        return { sourceText: lines.join('\\n'), context: ctx };\n    };\n    /**\n     * @param {?} genFilePath\n     * @param {?} stmts\n     * @param {?=} preamble\n     * @return {?}\n     */\n    TypeScriptEmitter.prototype.emitStatements = /**\n     * @param {?} genFilePath\n     * @param {?} stmts\n     * @param {?=} preamble\n     * @return {?}\n     */\n    function (genFilePath, stmts, preamble) {\n        if (preamble === void 0) { preamble = ''; }\n        return this.emitStatementsAndContext(genFilePath, stmts, preamble).sourceText;\n    };\n    return TypeScriptEmitter;\n}());\nexport { TypeScriptEmitter };\nvar _TsEmitterVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(_TsEmitterVisitor, _super);\n    function _TsEmitterVisitor(referenceFilter, importFilter) {\n        var _this = _super.call(this, false) || this;\n        _this.referenceFilter = referenceFilter;\n        _this.importFilter = importFilter;\n        _this.typeExpression = 0;\n        _this.importsWithPrefixes = new Map();\n        _this.reexports = new Map();\n        return _this;\n    }\n    /**\n     * @param {?} t\n     * @param {?} ctx\n     * @param {?=} defaultType\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitType = /**\n     * @param {?} t\n     * @param {?} ctx\n     * @param {?=} defaultType\n     * @return {?}\n     */\n    function (t, ctx, defaultType) {\n        if (defaultType === void 0) { defaultType = 'any'; }\n        if (t) {\n            this.typeExpression++;\n            t.visitType(this, ctx);\n            this.typeExpression--;\n        }\n        else {\n            ctx.print(null, defaultType);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ value = ast.value;\n        if (value == null && ast.type != o.INFERRED_TYPE) {\n            ctx.print(ast, \"(\" + value + \" as any)\");\n            return null;\n        }\n        return _super.prototype.visitLiteralExpr.call(this, ast, ctx);\n    };\n    // Temporary workaround to support strictNullCheck enabled consumers of ngc emit.\n    // In SNC mode, [] have the type never[], so we cast here to any[].\n    // TODO: narrow the cast to a more explicit type, or use a pattern that does not\n    // start with [].concat. see https://github.com/angular/angular/pull/11846\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        if (ast.entries.length === 0) {\n            ctx.print(ast, '(');\n        }\n        var /** @type {?} */ result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);\n        if (ast.entries.length === 0) {\n            ctx.print(ast, ' as any[])');\n        }\n        return result;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        this._visitIdentifier(ast.value, ast.typeParams, ctx);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitAssertNotNullExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ result = _super.prototype.visitAssertNotNullExpr.call(this, ast, ctx);\n        ctx.print(ast, '!');\n        return result;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.hasModifier(o.StmtModifier.Exported) && stmt.value instanceof o.ExternalExpr &&\n            !stmt.type) {\n            // check for a reexport\n            var _a = stmt.value.value, name_1 = _a.name, moduleName = _a.moduleName;\n            if (moduleName) {\n                var /** @type {?} */ reexports = this.reexports.get(moduleName);\n                if (!reexports) {\n                    reexports = [];\n                    this.reexports.set(moduleName, reexports);\n                }\n                reexports.push({ name: /** @type {?} */ ((name_1)), as: stmt.name });\n                return null;\n            }\n        }\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.print(stmt, \"export \");\n        }\n        if (stmt.hasModifier(o.StmtModifier.Final)) {\n            ctx.print(stmt, \"const\");\n        }\n        else {\n            ctx.print(stmt, \"var\");\n        }\n        ctx.print(stmt, \" \" + stmt.name);\n        this._printColonType(stmt.type, ctx);\n        if (stmt.value) {\n            ctx.print(stmt, \" = \");\n            stmt.value.visitExpression(this, ctx);\n        }\n        ctx.println(stmt, \";\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitCastExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"(<\"); /** @type {?} */\n        ((ast.type)).visitType(this, ctx);\n        ctx.print(ast, \">\");\n        ast.value.visitExpression(this, ctx);\n        ctx.print(ast, \")\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitInstantiateExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"new \");\n        this.typeExpression++;\n        ast.classExpr.visitExpression(this, ctx);\n        this.typeExpression--;\n        ctx.print(ast, \"(\");\n        this.visitAllExpressions(ast.args, ctx, ',');\n        ctx.print(ast, \")\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var _this = this;\n        ctx.pushClass(stmt);\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.print(stmt, \"export \");\n        }\n        ctx.print(stmt, \"class \" + stmt.name);\n        if (stmt.parent != null) {\n            ctx.print(stmt, \" extends \");\n            this.typeExpression++;\n            stmt.parent.visitExpression(this, ctx);\n            this.typeExpression--;\n        }\n        ctx.println(stmt, \" {\");\n        ctx.incIndent();\n        stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });\n        if (stmt.constructorMethod != null) {\n            this._visitClassConstructor(stmt, ctx);\n        }\n        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });\n        stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n        ctx.popClass();\n        return null;\n    };\n    /**\n     * @param {?} field\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitClassField = /**\n     * @param {?} field\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (field, ctx) {\n        if (field.hasModifier(o.StmtModifier.Private)) {\n            // comment out as a workaround for #10967\n            ctx.print(null, \"/*private*/ \");\n        }\n        if (field.hasModifier(o.StmtModifier.Static)) {\n            ctx.print(null, 'static ');\n        }\n        ctx.print(null, field.name);\n        this._printColonType(field.type, ctx);\n        if (field.initializer) {\n            ctx.print(null, ' = ');\n            field.initializer.visitExpression(this, ctx);\n        }\n        ctx.println(null, \";\");\n    };\n    /**\n     * @param {?} getter\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitClassGetter = /**\n     * @param {?} getter\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (getter, ctx) {\n        if (getter.hasModifier(o.StmtModifier.Private)) {\n            ctx.print(null, \"private \");\n        }\n        ctx.print(null, \"get \" + getter.name + \"()\");\n        this._printColonType(getter.type, ctx);\n        ctx.println(null, \" {\");\n        ctx.incIndent();\n        this.visitAllStatements(getter.body, ctx);\n        ctx.decIndent();\n        ctx.println(null, \"}\");\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitClassConstructor = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"constructor(\");\n        this._visitParams(stmt.constructorMethod.params, ctx);\n        ctx.println(stmt, \") {\");\n        ctx.incIndent();\n        this.visitAllStatements(stmt.constructorMethod.body, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n    };\n    /**\n     * @param {?} method\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitClassMethod = /**\n     * @param {?} method\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (method, ctx) {\n        if (method.hasModifier(o.StmtModifier.Private)) {\n            ctx.print(null, \"private \");\n        }\n        ctx.print(null, method.name + \"(\");\n        this._visitParams(method.params, ctx);\n        ctx.print(null, \")\");\n        this._printColonType(method.type, ctx, 'void');\n        ctx.println(null, \" {\");\n        ctx.incIndent();\n        this.visitAllStatements(method.body, ctx);\n        ctx.decIndent();\n        ctx.println(null, \"}\");\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        if (ast.name) {\n            ctx.print(ast, 'function ');\n            ctx.print(ast, ast.name);\n        }\n        ctx.print(ast, \"(\");\n        this._visitParams(ast.params, ctx);\n        ctx.print(ast, \")\");\n        this._printColonType(ast.type, ctx, 'void');\n        if (!ast.name) {\n            ctx.print(ast, \" => \");\n        }\n        ctx.println(ast, '{');\n        ctx.incIndent();\n        this.visitAllStatements(ast.statements, ctx);\n        ctx.decIndent();\n        ctx.print(ast, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.print(stmt, \"export \");\n        }\n        ctx.print(stmt, \"function \" + stmt.name + \"(\");\n        this._visitParams(stmt.params, ctx);\n        ctx.print(stmt, \")\");\n        this._printColonType(stmt.type, ctx, 'void');\n        ctx.println(stmt, \" {\");\n        ctx.incIndent();\n        this.visitAllStatements(stmt.statements, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitTryCatchStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.println(stmt, \"try {\");\n        ctx.incIndent();\n        this.visitAllStatements(stmt.bodyStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"} catch (\" + CATCH_ERROR_VAR.name + \") {\");\n        ctx.incIndent();\n        var /** @type {?} */ catchStmts = [/** @type {?} */ (CATCH_STACK_VAR.set(CATCH_ERROR_VAR.prop('stack', null)).toDeclStmt(null, [\n                o.StmtModifier.Final\n            ]))].concat(stmt.catchStmts);\n        this.visitAllStatements(catchStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitBuiltinType = /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (type, ctx) {\n        var /** @type {?} */ typeStr;\n        switch (type.name) {\n            case o.BuiltinTypeName.Bool:\n                typeStr = 'boolean';\n                break;\n            case o.BuiltinTypeName.Dynamic:\n                typeStr = 'any';\n                break;\n            case o.BuiltinTypeName.Function:\n                typeStr = 'Function';\n                break;\n            case o.BuiltinTypeName.Number:\n                typeStr = 'number';\n                break;\n            case o.BuiltinTypeName.Int:\n                typeStr = 'number';\n                break;\n            case o.BuiltinTypeName.String:\n                typeStr = 'string';\n                break;\n            default:\n                throw new Error(\"Unsupported builtin type \" + type.name);\n        }\n        ctx.print(null, typeStr);\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitExpressionType = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ast.value.visitExpression(this, ctx);\n        return null;\n    };\n    /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitArrayType = /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (type, ctx) {\n        this.visitType(type.of, ctx);\n        ctx.print(null, \"[]\");\n        return null;\n    };\n    /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.visitMapType = /**\n     * @param {?} type\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (type, ctx) {\n        ctx.print(null, \"{[key: string]:\");\n        this.visitType(type.valueType, ctx);\n        ctx.print(null, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} method\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype.getBuiltinMethodName = /**\n     * @param {?} method\n     * @return {?}\n     */\n    function (method) {\n        var /** @type {?} */ name;\n        switch (method) {\n            case o.BuiltinMethod.ConcatArray:\n                name = 'concat';\n                break;\n            case o.BuiltinMethod.SubscribeObservable:\n                name = 'subscribe';\n                break;\n            case o.BuiltinMethod.Bind:\n                name = 'bind';\n                break;\n            default:\n                throw new Error(\"Unknown builtin method: \" + method);\n        }\n        return name;\n    };\n    /**\n     * @param {?} params\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitParams = /**\n     * @param {?} params\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (params, ctx) {\n        var _this = this;\n        this.visitAllObjects(function (param) {\n            ctx.print(null, param.name);\n            _this._printColonType(param.type, ctx);\n        }, params, ctx, ',');\n    };\n    /**\n     * @param {?} value\n     * @param {?} typeParams\n     * @param {?} ctx\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._visitIdentifier = /**\n     * @param {?} value\n     * @param {?} typeParams\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (value, typeParams, ctx) {\n        var _this = this;\n        var name = value.name, moduleName = value.moduleName;\n        if (this.referenceFilter && this.referenceFilter(value)) {\n            ctx.print(null, '(null as any)');\n            return;\n        }\n        if (moduleName && (!this.importFilter || !this.importFilter(value))) {\n            var /** @type {?} */ prefix = this.importsWithPrefixes.get(moduleName);\n            if (prefix == null) {\n                prefix = \"i\" + this.importsWithPrefixes.size;\n                this.importsWithPrefixes.set(moduleName, prefix);\n            }\n            ctx.print(null, prefix + \".\");\n        }\n        ctx.print(null, /** @type {?} */ ((name)));\n        if (this.typeExpression > 0) {\n            // If we are in a type expression that refers to a generic type then supply\n            // the required type parameters. If there were not enough type parameters\n            // supplied, supply any as the type. Outside a type expression the reference\n            // should not supply type parameters and be treated as a simple value reference\n            // to the constructor function itself.\n            var /** @type {?} */ suppliedParameters = typeParams || [];\n            if (suppliedParameters.length > 0) {\n                ctx.print(null, \"<\");\n                this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, /** @type {?} */ ((typeParams)), ctx, ',');\n                ctx.print(null, \">\");\n            }\n        }\n    };\n    /**\n     * @param {?} type\n     * @param {?} ctx\n     * @param {?=} defaultType\n     * @return {?}\n     */\n    _TsEmitterVisitor.prototype._printColonType = /**\n     * @param {?} type\n     * @param {?} ctx\n     * @param {?=} defaultType\n     * @return {?}\n     */\n    function (type, ctx, defaultType) {\n        if (type !== o.INFERRED_TYPE) {\n            ctx.print(null, ':');\n            this.visitType(type, ctx, defaultType);\n        }\n    };\n    return _TsEmitterVisitor;\n}(AbstractEmitterVisitor));\nfunction _TsEmitterVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _TsEmitterVisitor.prototype.typeExpression;\n    /** @type {?} */\n    _TsEmitterVisitor.prototype.importsWithPrefixes;\n    /** @type {?} */\n    _TsEmitterVisitor.prototype.reexports;\n    /** @type {?} */\n    _TsEmitterVisitor.prototype.referenceFilter;\n    /** @type {?} */\n    _TsEmitterVisitor.prototype.importFilter;\n}\n//# sourceMappingURL=ts_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { createPipe } from './core';\nimport { findLast } from './directive_resolver';\nimport { resolveForwardRef, stringify } from './util';\n/**\n * Resolve a `Type` for {\\@link Pipe}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {\\@link Compiler}\n */\nvar /**\n * Resolve a `Type` for {\\@link Pipe}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {\\@link Compiler}\n */\nPipeResolver = /** @class */ (function () {\n    function PipeResolver(_reflector) {\n        this._reflector = _reflector;\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    PipeResolver.prototype.isPipe = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n        return typeMetadata && typeMetadata.some(createPipe.isTypeOf);\n    };\n    /**\n     * Return {@link Pipe} for a given `Type`.\n     */\n    /**\n     * Return {\\@link Pipe} for a given `Type`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    PipeResolver.prototype.resolve = /**\n     * Return {\\@link Pipe} for a given `Type`.\n     * @param {?} type\n     * @param {?=} throwIfNotFound\n     * @return {?}\n     */\n    function (type, throwIfNotFound) {\n        if (throwIfNotFound === void 0) { throwIfNotFound = true; }\n        var /** @type {?} */ metas = this._reflector.annotations(resolveForwardRef(type));\n        if (metas) {\n            var /** @type {?} */ annotation = findLast(metas, createPipe.isTypeOf);\n            if (annotation) {\n                return annotation;\n            }\n        }\n        if (throwIfNotFound) {\n            throw new Error(\"No Pipe decorator found on \" + stringify(type));\n        }\n        return null;\n    };\n    return PipeResolver;\n}());\n/**\n * Resolve a `Type` for {\\@link Pipe}.\n *\n * This interface can be overridden by the application developer to create custom behavior.\n *\n * See {\\@link Compiler}\n */\nexport { PipeResolver };\nfunction PipeResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PipeResolver.prototype._reflector;\n}\n//# sourceMappingURL=pipe_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { SecurityContext } from '../core';\n/**\n * Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'.\n */\nexport var /** @type {?} */ SECURITY_SCHEMA = {};\n/**\n * @param {?} ctx\n * @param {?} specs\n * @return {?}\n */\nfunction registerContext(ctx, specs) {\n    for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {\n        var spec = specs_1[_i];\n        SECURITY_SCHEMA[spec.toLowerCase()] = ctx;\n    }\n}\n// Case is insignificant below, all element and attribute names are lower-cased for lookup.\nregisterContext(SecurityContext.HTML, [\n    'iframe|srcdoc',\n    '*|innerHTML',\n    '*|outerHTML',\n]);\nregisterContext(SecurityContext.STYLE, ['*|style']);\n// NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.\nregisterContext(SecurityContext.URL, [\n    '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',\n    'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',\n    'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',\n    'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',\n]);\nregisterContext(SecurityContext.RESOURCE_URL, [\n    'applet|code',\n    'applet|codebase',\n    'base|href',\n    'embed|src',\n    'frame|src',\n    'head|profile',\n    'html|manifest',\n    'iframe|src',\n    'link|href',\n    'media|src',\n    'object|codebase',\n    'object|data',\n    'script|src',\n]);\n//# sourceMappingURL=dom_security_schema.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA, SecurityContext } from '../core';\nimport { isNgContainer, isNgContent } from '../ml_parser/tags';\nimport { dashCaseToCamelCase } from '../util';\nimport { SECURITY_SCHEMA } from './dom_security_schema';\nimport { ElementSchemaRegistry } from './element_schema_registry';\nvar /** @type {?} */ BOOLEAN = 'boolean';\nvar /** @type {?} */ NUMBER = 'number';\nvar /** @type {?} */ STRING = 'string';\nvar /** @type {?} */ OBJECT = 'object';\n/**\n * This array represents the DOM schema. It encodes inheritance, properties, and events.\n *\n * ## Overview\n *\n * Each line represents one kind of element. The `element_inheritance` and properties are joined\n * using `element_inheritance|properties` syntax.\n *\n * ## Element Inheritance\n *\n * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.\n * Here the individual elements are separated by `,` (commas). Every element in the list\n * has identical properties.\n *\n * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is\n * specified then `\"\"` (blank) element is assumed.\n *\n * NOTE: The blank element inherits from root `[Element]` element, the super element of all\n * elements.\n *\n * NOTE an element prefix such as `:svg:` has no special meaning to the schema.\n *\n * ## Properties\n *\n * Each element has a set of properties separated by `,` (commas). Each property can be prefixed\n * by a special character designating its type:\n *\n * - (no prefix): property is a string.\n * - `*`: property represents an event.\n * - `!`: property is a boolean.\n * - `#`: property is a number.\n * - `%`: property is an object.\n *\n * ## Query\n *\n * The class creates an internal squas representation which allows to easily answer the query of\n * if a given property exist on a given element.\n *\n * NOTE: We don't yet support querying for types or events.\n * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,\n *       see dom_element_schema_registry_spec.ts\n */\nvar /** @type {?} */ SCHEMA = [\n    '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop,slot' +\n        ',*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored',\n    '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n    'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,outerText,!spellcheck,%style,#tabIndex,title,!translate',\n    'media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,src,%srcObject,#volume',\n    ':svg:^[HTMLElement]|*abort,*auxclick,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',\n    ':svg:graphics^:svg:|',\n    ':svg:animation^:svg:|*begin,*end,*repeat',\n    ':svg:geometry^:svg:|',\n    ':svg:componentTransferFunction^:svg:|',\n    ':svg:gradient^:svg:|',\n    ':svg:textContent^:svg:graphics|',\n    ':svg:textPositioning^:svg:textContent|',\n    'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',\n    'area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,search,shape,target,username',\n    'audio^media|',\n    'br^[HTMLElement]|clear',\n    'base^[HTMLElement]|href,target',\n    'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',\n    'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',\n    'canvas^[HTMLElement]|#height,#width',\n    'content^[HTMLElement]|select',\n    'dl^[HTMLElement]|!compact',\n    'datalist^[HTMLElement]|',\n    'details^[HTMLElement]|!open',\n    'dialog^[HTMLElement]|!open,returnValue',\n    'dir^[HTMLElement]|!compact',\n    'div^[HTMLElement]|align',\n    'embed^[HTMLElement]|align,height,name,src,type,width',\n    'fieldset^[HTMLElement]|!disabled,name',\n    'font^[HTMLElement]|color,face,size',\n    'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',\n    'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',\n    'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',\n    'hr^[HTMLElement]|align,color,!noShade,size,width',\n    'head^[HTMLElement]|',\n    'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',\n    'html^[HTMLElement]|version',\n    'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',\n    'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',\n    'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',\n    'li^[HTMLElement]|type,#value',\n    'label^[HTMLElement]|htmlFor',\n    'legend^[HTMLElement]|align',\n    'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type',\n    'map^[HTMLElement]|name',\n    'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',\n    'menu^[HTMLElement]|!compact',\n    'meta^[HTMLElement]|content,httpEquiv,name,scheme',\n    'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',\n    'ins,del^[HTMLElement]|cite,dateTime',\n    'ol^[HTMLElement]|!compact,!reversed,#start,type',\n    'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',\n    'optgroup^[HTMLElement]|!disabled,label',\n    'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',\n    'output^[HTMLElement]|defaultValue,%htmlFor,name,value',\n    'p^[HTMLElement]|align',\n    'param^[HTMLElement]|name,type,value,valueType',\n    'picture^[HTMLElement]|',\n    'pre^[HTMLElement]|#width',\n    'progress^[HTMLElement]|#max,#value',\n    'q,blockquote,cite^[HTMLElement]|',\n    'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',\n    'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',\n    'shadow^[HTMLElement]|',\n    'slot^[HTMLElement]|name',\n    'source^[HTMLElement]|media,sizes,src,srcset,type',\n    'span^[HTMLElement]|',\n    'style^[HTMLElement]|!disabled,media,type',\n    'caption^[HTMLElement]|align',\n    'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',\n    'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',\n    'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',\n    'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',\n    'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',\n    'template^[HTMLElement]|',\n    'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',\n    'title^[HTMLElement]|text',\n    'track^[HTMLElement]|!default,kind,label,src,srclang',\n    'ul^[HTMLElement]|!compact,type',\n    'unknown^[HTMLElement]|',\n    'video^media|#height,poster,#width',\n    ':svg:a^:svg:graphics|',\n    ':svg:animate^:svg:animation|',\n    ':svg:animateMotion^:svg:animation|',\n    ':svg:animateTransform^:svg:animation|',\n    ':svg:circle^:svg:geometry|',\n    ':svg:clipPath^:svg:graphics|',\n    ':svg:defs^:svg:graphics|',\n    ':svg:desc^:svg:|',\n    ':svg:discard^:svg:|',\n    ':svg:ellipse^:svg:geometry|',\n    ':svg:feBlend^:svg:|',\n    ':svg:feColorMatrix^:svg:|',\n    ':svg:feComponentTransfer^:svg:|',\n    ':svg:feComposite^:svg:|',\n    ':svg:feConvolveMatrix^:svg:|',\n    ':svg:feDiffuseLighting^:svg:|',\n    ':svg:feDisplacementMap^:svg:|',\n    ':svg:feDistantLight^:svg:|',\n    ':svg:feDropShadow^:svg:|',\n    ':svg:feFlood^:svg:|',\n    ':svg:feFuncA^:svg:componentTransferFunction|',\n    ':svg:feFuncB^:svg:componentTransferFunction|',\n    ':svg:feFuncG^:svg:componentTransferFunction|',\n    ':svg:feFuncR^:svg:componentTransferFunction|',\n    ':svg:feGaussianBlur^:svg:|',\n    ':svg:feImage^:svg:|',\n    ':svg:feMerge^:svg:|',\n    ':svg:feMergeNode^:svg:|',\n    ':svg:feMorphology^:svg:|',\n    ':svg:feOffset^:svg:|',\n    ':svg:fePointLight^:svg:|',\n    ':svg:feSpecularLighting^:svg:|',\n    ':svg:feSpotLight^:svg:|',\n    ':svg:feTile^:svg:|',\n    ':svg:feTurbulence^:svg:|',\n    ':svg:filter^:svg:|',\n    ':svg:foreignObject^:svg:graphics|',\n    ':svg:g^:svg:graphics|',\n    ':svg:image^:svg:graphics|',\n    ':svg:line^:svg:geometry|',\n    ':svg:linearGradient^:svg:gradient|',\n    ':svg:mpath^:svg:|',\n    ':svg:marker^:svg:|',\n    ':svg:mask^:svg:|',\n    ':svg:metadata^:svg:|',\n    ':svg:path^:svg:geometry|',\n    ':svg:pattern^:svg:|',\n    ':svg:polygon^:svg:geometry|',\n    ':svg:polyline^:svg:geometry|',\n    ':svg:radialGradient^:svg:gradient|',\n    ':svg:rect^:svg:geometry|',\n    ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',\n    ':svg:script^:svg:|type',\n    ':svg:set^:svg:animation|',\n    ':svg:stop^:svg:|',\n    ':svg:style^:svg:|!disabled,media,title,type',\n    ':svg:switch^:svg:graphics|',\n    ':svg:symbol^:svg:|',\n    ':svg:tspan^:svg:textPositioning|',\n    ':svg:text^:svg:textPositioning|',\n    ':svg:textPath^:svg:textContent|',\n    ':svg:title^:svg:|',\n    ':svg:use^:svg:graphics|',\n    ':svg:view^:svg:|#zoomAndPan',\n    'data^[HTMLElement]|value',\n    'keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name',\n    'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',\n    'summary^[HTMLElement]|',\n    'time^[HTMLElement]|dateTime',\n    ':svg:cursor^:svg:|',\n];\nvar /** @type {?} */ _ATTR_TO_PROP = {\n    'class': 'className',\n    'for': 'htmlFor',\n    'formaction': 'formAction',\n    'innerHtml': 'innerHTML',\n    'readonly': 'readOnly',\n    'tabindex': 'tabIndex',\n};\nvar DomElementSchemaRegistry = /** @class */ (function (_super) {\n    tslib_1.__extends(DomElementSchemaRegistry, _super);\n    function DomElementSchemaRegistry() {\n        var _this = _super.call(this) || this;\n        _this._schema = {};\n        SCHEMA.forEach(function (encodedType) {\n            var /** @type {?} */ type = {};\n            var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];\n            var /** @type {?} */ properties = strProperties.split(',');\n            var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];\n            typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });\n            var /** @type {?} */ superType = superName && _this._schema[superName.toLowerCase()];\n            if (superType) {\n                Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });\n            }\n            properties.forEach(function (property) {\n                if (property.length > 0) {\n                    switch (property[0]) {\n                        case '*':\n                            // We don't yet support events.\n                            // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events\n                            // will\n                            // almost certainly introduce bad XSS vulnerabilities.\n                            // type[property.substring(1)] = EVENT;\n                            break;\n                        case '!':\n                            type[property.substring(1)] = BOOLEAN;\n                            break;\n                        case '#':\n                            type[property.substring(1)] = NUMBER;\n                            break;\n                        case '%':\n                            type[property.substring(1)] = OBJECT;\n                            break;\n                        default:\n                            type[property] = STRING;\n                    }\n                }\n            });\n        });\n        return _this;\n    }\n    /**\n     * @param {?} tagName\n     * @param {?} propName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.hasProperty = /**\n     * @param {?} tagName\n     * @param {?} propName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    function (tagName, propName, schemaMetas) {\n        if (schemaMetas.some(function (schema) { return schema.name === NO_ERRORS_SCHEMA.name; })) {\n            return true;\n        }\n        if (tagName.indexOf('-') > -1) {\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\n                return false;\n            }\n            if (schemaMetas.some(function (schema) { return schema.name === CUSTOM_ELEMENTS_SCHEMA.name; })) {\n                // Can't tell now as we don't know which properties a custom element will get\n                // once it is instantiated\n                return true;\n            }\n        }\n        var /** @type {?} */ elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];\n        return !!elementProperties[propName];\n    };\n    /**\n     * @param {?} tagName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.hasElement = /**\n     * @param {?} tagName\n     * @param {?} schemaMetas\n     * @return {?}\n     */\n    function (tagName, schemaMetas) {\n        if (schemaMetas.some(function (schema) { return schema.name === NO_ERRORS_SCHEMA.name; })) {\n            return true;\n        }\n        if (tagName.indexOf('-') > -1) {\n            if (isNgContainer(tagName) || isNgContent(tagName)) {\n                return true;\n            }\n            if (schemaMetas.some(function (schema) { return schema.name === CUSTOM_ELEMENTS_SCHEMA.name; })) {\n                // Allow any custom elements\n                return true;\n            }\n        }\n        return !!this._schema[tagName.toLowerCase()];\n    };\n    /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is white list based. All attributes in the schema above are assumed to have the\n     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known\n     * attack vectors are assigned their appropriate context.\n     */\n    /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is white list based. All attributes in the schema above are assumed to have the\n     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known\n     * attack vectors are assigned their appropriate context.\n     * @param {?} tagName\n     * @param {?} propName\n     * @param {?} isAttribute\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.securityContext = /**\n     * securityContext returns the security context for the given property on the given DOM tag.\n     *\n     * Tag and property name are statically known and cannot change at runtime, i.e. it is not\n     * possible to bind a value into a changing attribute or tag name.\n     *\n     * The filtering is white list based. All attributes in the schema above are assumed to have the\n     * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known\n     * attack vectors are assigned their appropriate context.\n     * @param {?} tagName\n     * @param {?} propName\n     * @param {?} isAttribute\n     * @return {?}\n     */\n    function (tagName, propName, isAttribute) {\n        if (isAttribute) {\n            // NB: For security purposes, use the mapped property name, not the attribute name.\n            propName = this.getMappedPropName(propName);\n        }\n        // Make sure comparisons are case insensitive, so that case differences between attribute and\n        // property names do not have a security impact.\n        tagName = tagName.toLowerCase();\n        propName = propName.toLowerCase();\n        var /** @type {?} */ ctx = SECURITY_SCHEMA[tagName + '|' + propName];\n        if (ctx) {\n            return ctx;\n        }\n        ctx = SECURITY_SCHEMA['*|' + propName];\n        return ctx ? ctx : SecurityContext.NONE;\n    };\n    /**\n     * @param {?} propName\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.getMappedPropName = /**\n     * @param {?} propName\n     * @return {?}\n     */\n    function (propName) { return _ATTR_TO_PROP[propName] || propName; };\n    /**\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.getDefaultComponentElementName = /**\n     * @return {?}\n     */\n    function () { return 'ng-component'; };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.validateProperty = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name.toLowerCase().startsWith('on')) {\n            var /** @type {?} */ msg = \"Binding to event property '\" + name + \"' is disallowed for security reasons, \" +\n                (\"please use (\" + name.slice(2) + \")=...\") +\n                (\"\\nIf '\" + name + \"' is a directive input, make sure the directive is imported by the\") +\n                \" current module.\";\n            return { error: true, msg: msg };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.validateAttribute = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name.toLowerCase().startsWith('on')) {\n            var /** @type {?} */ msg = \"Binding to event attribute '\" + name + \"' is disallowed for security reasons, \" +\n                (\"please use (\" + name.slice(2) + \")=...\");\n            return { error: true, msg: msg };\n        }\n        else {\n            return { error: false };\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.allKnownElementNames = /**\n     * @return {?}\n     */\n    function () { return Object.keys(this._schema); };\n    /**\n     * @param {?} propName\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = /**\n     * @param {?} propName\n     * @return {?}\n     */\n    function (propName) {\n        return dashCaseToCamelCase(propName);\n    };\n    /**\n     * @param {?} camelCaseProp\n     * @param {?} userProvidedProp\n     * @param {?} val\n     * @return {?}\n     */\n    DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = /**\n     * @param {?} camelCaseProp\n     * @param {?} userProvidedProp\n     * @param {?} val\n     * @return {?}\n     */\n    function (camelCaseProp, userProvidedProp, val) {\n        var /** @type {?} */ unit = '';\n        var /** @type {?} */ strVal = val.toString().trim();\n        var /** @type {?} */ errorMsg = /** @type {?} */ ((null));\n        if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {\n            if (typeof val === 'number') {\n                unit = 'px';\n            }\n            else {\n                var /** @type {?} */ valAndSuffixMatch = val.match(/^[+-]?[\\d\\.]+([a-z]*)$/);\n                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {\n                    errorMsg = \"Please provide a CSS unit value for \" + userProvidedProp + \":\" + val;\n                }\n            }\n        }\n        return { error: errorMsg, value: strVal + unit };\n    };\n    return DomElementSchemaRegistry;\n}(ElementSchemaRegistry));\nexport { DomElementSchemaRegistry };\nfunction DomElementSchemaRegistry_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DomElementSchemaRegistry.prototype._schema;\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction _isPixelDimensionStyle(prop) {\n    switch (prop) {\n        case 'width':\n        case 'height':\n        case 'minWidth':\n        case 'minHeight':\n        case 'maxWidth':\n        case 'maxHeight':\n        case 'left':\n        case 'top':\n        case 'bottom':\n        case 'right':\n        case 'fontSize':\n        case 'outlineWidth':\n        case 'outlineOffset':\n        case 'paddingTop':\n        case 'paddingLeft':\n        case 'paddingBottom':\n        case 'paddingRight':\n        case 'marginTop':\n        case 'marginLeft':\n        case 'marginBottom':\n        case 'marginRight':\n        case 'borderRadius':\n        case 'borderWidth':\n        case 'borderTopWidth':\n        case 'borderLeftWidth':\n        case 'borderRightWidth':\n        case 'borderBottomWidth':\n        case 'textIndent':\n            return true;\n        default:\n            return false;\n    }\n}\n//# sourceMappingURL=dom_element_schema_registry.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n *\n * Please make sure to keep to edits in sync with the source file.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n  this feature.\n\n  By default, rules are prefixed with the host element tag name\n  as a descendant selector. This ensures styling does not leak out of the 'top'\n  of the element's ShadowDOM. For example,\n\n  div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n  x-foo div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n  selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\nvar /**\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n *\n * Please make sure to keep to edits in sync with the source file.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n  this feature.\n\n  By default, rules are prefixed with the host element tag name\n  as a descendant selector. This ensures styling does not leak out of the 'top'\n  of the element's ShadowDOM. For example,\n\n  div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n  x-foo div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n  selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\nShadowCss = /** @class */ (function () {\n    function ShadowCss() {\n        this.strictStyling = true;\n    }\n    /*\n    * Shim some cssText with the given selector. Returns cssText that can\n    * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).\n    *\n    * When strictStyling is true:\n    * - selector is the attribute added to all elements inside the host,\n    * - hostSelector is the attribute added to the host itself.\n    */\n    /**\n     * @param {?} cssText\n     * @param {?} selector\n     * @param {?=} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype.shimCssText = /**\n     * @param {?} cssText\n     * @param {?} selector\n     * @param {?=} hostSelector\n     * @return {?}\n     */\n    function (cssText, selector, hostSelector) {\n        if (hostSelector === void 0) { hostSelector = ''; }\n        var /** @type {?} */ commentsWithHash = extractCommentsWithHash(cssText);\n        cssText = stripComments(cssText);\n        cssText = this._insertDirectives(cssText);\n        var /** @type {?} */ scopedCssText = this._scopeCssText(cssText, selector, hostSelector);\n        return [scopedCssText].concat(commentsWithHash).join('\\n');\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._insertDirectives = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        cssText = this._insertPolyfillDirectivesInCssText(cssText);\n        return this._insertPolyfillRulesInCssText(cssText);\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._insertPolyfillDirectivesInCssText = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        return cssText.replace(_cssContentNextSelectorRe, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            return m[2] + '{';\n        });\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._insertPolyfillRulesInCssText = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        return cssText.replace(_cssContentRuleRe, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            var /** @type {?} */ rule = m[0].replace(m[1], '').replace(m[2], '');\n            return m[4] + rule;\n        });\n    };\n    /**\n     * @param {?} cssText\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._scopeCssText = /**\n     * @param {?} cssText\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    function (cssText, scopeSelector, hostSelector) {\n        var /** @type {?} */ unscopedRules = this._extractUnscopedRulesFromCssText(cssText);\n        // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively\n        cssText = this._insertPolyfillHostInCssText(cssText);\n        cssText = this._convertColonHost(cssText);\n        cssText = this._convertColonHostContext(cssText);\n        cssText = this._convertShadowDOMSelectors(cssText);\n        if (scopeSelector) {\n            cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);\n        }\n        cssText = cssText + '\\n' + unscopedRules;\n        return cssText.trim();\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._extractUnscopedRulesFromCssText = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        // Difference with webcomponents.js: does not handle comments\n        var /** @type {?} */ r = '';\n        var /** @type {?} */ m;\n        _cssContentUnscopedRuleRe.lastIndex = 0;\n        while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {\n            var /** @type {?} */ rule = m[0].replace(m[2], '').replace(m[1], m[4]);\n            r += rule + '\\n\\n';\n        }\n        return r;\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._convertColonHost = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._convertColonHostContext = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);\n    };\n    /**\n     * @param {?} cssText\n     * @param {?} regExp\n     * @param {?} partReplacer\n     * @return {?}\n     */\n    ShadowCss.prototype._convertColonRule = /**\n     * @param {?} cssText\n     * @param {?} regExp\n     * @param {?} partReplacer\n     * @return {?}\n     */\n    function (cssText, regExp, partReplacer) {\n        // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n        return cssText.replace(regExp, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i] = arguments[_i];\n            }\n            if (m[2]) {\n                var /** @type {?} */ parts = m[2].split(',');\n                var /** @type {?} */ r = [];\n                for (var /** @type {?} */ i = 0; i < parts.length; i++) {\n                    var /** @type {?} */ p = parts[i].trim();\n                    if (!p)\n                        break;\n                    r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n                }\n                return r.join(',');\n            }\n            else {\n                return _polyfillHostNoCombinator + m[3];\n            }\n        });\n    };\n    /**\n     * @param {?} host\n     * @param {?} part\n     * @param {?} suffix\n     * @return {?}\n     */\n    ShadowCss.prototype._colonHostContextPartReplacer = /**\n     * @param {?} host\n     * @param {?} part\n     * @param {?} suffix\n     * @return {?}\n     */\n    function (host, part, suffix) {\n        if (part.indexOf(_polyfillHost) > -1) {\n            return this._colonHostPartReplacer(host, part, suffix);\n        }\n        else {\n            return host + part + suffix + ', ' + part + ' ' + host + suffix;\n        }\n    };\n    /**\n     * @param {?} host\n     * @param {?} part\n     * @param {?} suffix\n     * @return {?}\n     */\n    ShadowCss.prototype._colonHostPartReplacer = /**\n     * @param {?} host\n     * @param {?} part\n     * @param {?} suffix\n     * @return {?}\n     */\n    function (host, part, suffix) {\n        return host + part.replace(_polyfillHost, '') + suffix;\n    };\n    /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    ShadowCss.prototype._convertShadowDOMSelectors = /**\n     * @param {?} cssText\n     * @return {?}\n     */\n    function (cssText) {\n        return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n    };\n    /**\n     * @param {?} cssText\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._scopeSelectors = /**\n     * @param {?} cssText\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    function (cssText, scopeSelector, hostSelector) {\n        var _this = this;\n        return processRules(cssText, function (rule) {\n            var /** @type {?} */ selector = rule.selector;\n            var /** @type {?} */ content = rule.content;\n            if (rule.selector[0] != '@') {\n                selector =\n                    _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);\n            }\n            return new CssRule(selector, content);\n        });\n    };\n    /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @param {?} strict\n     * @return {?}\n     */\n    ShadowCss.prototype._scopeSelector = /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @param {?} strict\n     * @return {?}\n     */\n    function (selector, scopeSelector, hostSelector, strict) {\n        var _this = this;\n        return selector.split(',')\n            .map(function (part) { return part.trim().split(_shadowDeepSelectors); })\n            .map(function (deepParts) {\n            var shallowPart = deepParts[0], otherParts = deepParts.slice(1);\n            var /** @type {?} */ applyScope = function (shallowPart) {\n                if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {\n                    return strict ?\n                        _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :\n                        _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);\n                }\n                else {\n                    return shallowPart;\n                }\n            };\n            return [applyScope(shallowPart)].concat(otherParts).join(' ');\n        })\n            .join(', ');\n    };\n    /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._selectorNeedsScoping = /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @return {?}\n     */\n    function (selector, scopeSelector) {\n        var /** @type {?} */ re = this._makeScopeMatcher(scopeSelector);\n        return !re.test(selector);\n    };\n    /**\n     * @param {?} scopeSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._makeScopeMatcher = /**\n     * @param {?} scopeSelector\n     * @return {?}\n     */\n    function (scopeSelector) {\n        var /** @type {?} */ lre = /\\[/g;\n        var /** @type {?} */ rre = /\\]/g;\n        scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n        return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n    };\n    /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._applySelectorScope = /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    function (selector, scopeSelector, hostSelector) {\n        // Difference from webcomponents.js: scopeSelector could not be an array\n        return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);\n    };\n    /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._applySimpleSelectorScope = /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    function (selector, scopeSelector, hostSelector) {\n        // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n        _polyfillHostRe.lastIndex = 0;\n        if (_polyfillHostRe.test(selector)) {\n            var /** @type {?} */ replaceBy_1 = this.strictStyling ? \"[\" + hostSelector + \"]\" : scopeSelector;\n            return selector\n                .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {\n                return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                    return before + replaceBy_1 + colon + after;\n                });\n            })\n                .replace(_polyfillHostRe, replaceBy_1 + ' ');\n        }\n        return scopeSelector + ' ' + selector;\n    };\n    /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    ShadowCss.prototype._applyStrictSelectorScope = /**\n     * @param {?} selector\n     * @param {?} scopeSelector\n     * @param {?} hostSelector\n     * @return {?}\n     */\n    function (selector, scopeSelector, hostSelector) {\n        var _this = this;\n        var /** @type {?} */ isRe = /\\[is=([^\\]]*)\\]/g;\n        scopeSelector = scopeSelector.replace(isRe, function (_) {\n            var parts = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                parts[_i - 1] = arguments[_i];\n            }\n            return parts[0];\n        });\n        var /** @type {?} */ attrName = '[' + scopeSelector + ']';\n        var /** @type {?} */ _scopeSelectorPart = function (p) {\n            var /** @type {?} */ scopedP = p.trim();\n            if (!scopedP) {\n                return '';\n            }\n            if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n                scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);\n            }\n            else {\n                // remove :host since it should be unnecessary\n                var /** @type {?} */ t = p.replace(_polyfillHostRe, '');\n                if (t.length > 0) {\n                    var /** @type {?} */ matches = t.match(/([^:]*)(:*)(.*)/);\n                    if (matches) {\n                        scopedP = matches[1] + attrName + matches[2] + matches[3];\n                    }\n                }\n            }\n            return scopedP;\n        };\n        var /** @type {?} */ safeContent = new SafeSelector(selector);\n        selector = safeContent.content();\n        var /** @type {?} */ scopedSelector = '';\n        var /** @type {?} */ startIndex = 0;\n        var /** @type {?} */ res;\n        var /** @type {?} */ sep = /( |>|\\+|~(?!=))\\s*/g;\n        // If a selector appears before :host it should not be shimmed as it\n        // matches on ancestor elements and not on elements in the host's shadow\n        // `:host-context(div)` is transformed to\n        // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n        // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n        // Historically `component-tag:host` was matching the component so we also want to preserve\n        // this behavior to avoid breaking legacy apps (it should not match).\n        // The behavior should be:\n        // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n        // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n        //   `:host-context(tag)`)\n        var /** @type {?} */ hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n        // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n        var /** @type {?} */ shouldScope = !hasHost;\n        while ((res = sep.exec(selector)) !== null) {\n            var /** @type {?} */ separator = res[1];\n            var /** @type {?} */ part_1 = selector.slice(startIndex, res.index).trim();\n            shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n            var /** @type {?} */ scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n            scopedSelector += scopedPart + \" \" + separator + \" \";\n            startIndex = sep.lastIndex;\n        }\n        var /** @type {?} */ part = selector.substring(startIndex);\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n        // replace the placeholders with their original values\n        return safeContent.restore(scopedSelector);\n    };\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    ShadowCss.prototype._insertPolyfillHostInCssText = /**\n     * @param {?} selector\n     * @return {?}\n     */\n    function (selector) {\n        return selector.replace(_colonHostContextRe, _polyfillHostContext)\n            .replace(_colonHostRe, _polyfillHost);\n    };\n    return ShadowCss;\n}());\n/**\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n *\n * Please make sure to keep to edits in sync with the source file.\n *\n * Source:\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n *\n * The original file level comment is reproduced below\n */\n/*\n  This is a limited shim for ShadowDOM css styling.\n  https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles\n\n  The intention here is to support only the styling features which can be\n  relatively simply implemented. The goal is to allow users to avoid the\n  most obvious pitfalls and do so without compromising performance significantly.\n  For ShadowDOM styling that's not covered here, a set of best practices\n  can be provided that should allow users to accomplish more complex styling.\n\n  The following is a list of specific ShadowDOM styling features and a brief\n  discussion of the approach used to shim.\n\n  Shimmed features:\n\n  * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host\n  element using the :host rule. To shim this feature, the :host styles are\n  reformatted and prefixed with a given scope name and promoted to a\n  document level stylesheet.\n  For example, given a scope name of .foo, a rule like this:\n\n    :host {\n        background: red;\n      }\n    }\n\n  becomes:\n\n    .foo {\n      background: red;\n    }\n\n  * encapsulation: Styles defined within ShadowDOM, apply only to\n  dom inside the ShadowDOM. Polymer uses one of two techniques to implement\n  this feature.\n\n  By default, rules are prefixed with the host element tag name\n  as a descendant selector. This ensures styling does not leak out of the 'top'\n  of the element's ShadowDOM. For example,\n\n  div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n  x-foo div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n\n  Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then\n  selectors are scoped by adding an attribute selector suffix to each\n  simple selector that contains the host element tag name. Each element\n  in the element's ShadowDOM template is also given the scope attribute.\n  Thus, these rules match only elements that have the scope attribute.\n  For example, given a scope name of x-foo, a rule like this:\n\n    div {\n      font-weight: bold;\n    }\n\n  becomes:\n\n    div[x-foo] {\n      font-weight: bold;\n    }\n\n  Note that elements that are dynamically added to a scope must have the scope\n  selector added to them manually.\n\n  * upper/lower bound encapsulation: Styles which are defined outside a\n  shadowRoot should not cross the ShadowDOM boundary and should not apply\n  inside a shadowRoot.\n\n  This styling behavior is not emulated. Some possible ways to do this that\n  were rejected due to complexity and/or performance concerns include: (1) reset\n  every possible property for every possible selector for a given scope name;\n  (2) re-implement css in javascript.\n\n  As an alternative, users should make sure to use selectors\n  specific to the scope in which they are working.\n\n  * ::distributed: This behavior is not emulated. It's often not necessary\n  to style the contents of a specific insertion point and instead, descendants\n  of the host element can be styled selectively. Users can also create an\n  extra node around an insertion point and style that node's contents\n  via descendent selectors. For example, with a shadowRoot like this:\n\n    <style>\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <content></content>\n\n  could become:\n\n    <style>\n      / *@polyfill .content-container div * /\n      ::content(div) {\n        background: red;\n      }\n    </style>\n    <div class=\"content-container\">\n      <content></content>\n    </div>\n\n  Note the use of @polyfill in the comment above a ShadowDOM specific style\n  declaration. This is a directive to the styling shim to use the selector\n  in comments in lieu of the next selector when running under polyfill.\n*/\nexport { ShadowCss };\nfunction ShadowCss_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ShadowCss.prototype.strictStyling;\n}\nvar SafeSelector = /** @class */ (function () {\n    function SafeSelector(selector) {\n        var _this = this;\n        this.placeholders = [];\n        this.index = 0;\n        // Replaces attribute selectors with placeholders.\n        // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n        selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n            var /** @type {?} */ replaceBy = \"__ph-\" + _this.index + \"__\";\n            _this.placeholders.push(keep);\n            _this.index++;\n            return replaceBy;\n        });\n        // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n        // WS and \"+\" would otherwise be interpreted as selector separators.\n        this._content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n            var /** @type {?} */ replaceBy = \"__ph-\" + _this.index + \"__\";\n            _this.placeholders.push(exp);\n            _this.index++;\n            return pseudo + replaceBy;\n        });\n    }\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    SafeSelector.prototype.restore = /**\n     * @param {?} content\n     * @return {?}\n     */\n    function (content) {\n        var _this = this;\n        return content.replace(/__ph-(\\d+)__/g, function (ph, index) { return _this.placeholders[+index]; });\n    };\n    /**\n     * @return {?}\n     */\n    SafeSelector.prototype.content = /**\n     * @return {?}\n     */\n    function () { return this._content; };\n    return SafeSelector;\n}());\nfunction SafeSelector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SafeSelector.prototype.placeholders;\n    /** @type {?} */\n    SafeSelector.prototype.index;\n    /** @type {?} */\n    SafeSelector.prototype._content;\n}\nvar /** @type {?} */ _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\\s]*?(['\"])(.*?)\\1[;\\s]*}([^{]*?){/gim;\nvar /** @type {?} */ _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nvar /** @type {?} */ _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\\s]*(['\"])(.*?)\\3)[;\\s]*[^}]*}/gim;\nvar /** @type {?} */ _polyfillHost = '-shadowcsshost';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar /** @type {?} */ _polyfillHostContext = '-shadowcsscontext';\nvar /** @type {?} */ _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nvar /** @type {?} */ _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar /** @type {?} */ _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar /** @type {?} */ _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar /** @type {?} */ _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar /** @type {?} */ _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g,\n    /\\/shadow-deep\\//g,\n    /\\/shadow\\//g,\n];\n// The deep combinator is deprecated in the CSS spec\n// Support for `>>>`, `deep`, `::ng-deep` is then also deprecated and will be removed in the future.\n// see https://github.com/angular/angular/pull/17677\nvar /** @type {?} */ _shadowDeepSelectors = /(?:>>>)|(?:\\/deep\\/)|(?:::ng-deep)/g;\nvar /** @type {?} */ _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nvar /** @type {?} */ _polyfillHostRe = /-shadowcsshost/gim;\nvar /** @type {?} */ _colonHostRe = /:host/gim;\nvar /** @type {?} */ _colonHostContextRe = /:host-context/gim;\nvar /** @type {?} */ _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stripComments(input) {\n    return input.replace(_commentRe, '');\n}\nvar /** @type {?} */ _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\n/**\n * @param {?} input\n * @return {?}\n */\nfunction extractCommentsWithHash(input) {\n    return input.match(_commentWithHashRe) || [];\n}\nvar /** @type {?} */ _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar /** @type {?} */ _curlyRe = /([{}])/g;\nvar /** @type {?} */ OPEN_CURLY = '{';\nvar /** @type {?} */ CLOSE_CURLY = '}';\nvar /** @type {?} */ BLOCK_PLACEHOLDER = '%BLOCK%';\nvar CssRule = /** @class */ (function () {\n    function CssRule(selector, content) {\n        this.selector = selector;\n        this.content = content;\n    }\n    return CssRule;\n}());\nexport { CssRule };\nfunction CssRule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CssRule.prototype.selector;\n    /** @type {?} */\n    CssRule.prototype.content;\n}\n/**\n * @param {?} input\n * @param {?} ruleCallback\n * @return {?}\n */\nexport function processRules(input, ruleCallback) {\n    var /** @type {?} */ inputWithEscapedBlocks = escapeBlocks(input);\n    var /** @type {?} */ nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var /** @type {?} */ selector = m[2];\n        var /** @type {?} */ content = '';\n        var /** @type {?} */ suffix = m[4];\n        var /** @type {?} */ contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        var /** @type {?} */ rule = ruleCallback(new CssRule(selector, content));\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    });\n}\nvar StringWithEscapedBlocks = /** @class */ (function () {\n    function StringWithEscapedBlocks(escapedString, blocks) {\n        this.escapedString = escapedString;\n        this.blocks = blocks;\n    }\n    return StringWithEscapedBlocks;\n}());\nfunction StringWithEscapedBlocks_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StringWithEscapedBlocks.prototype.escapedString;\n    /** @type {?} */\n    StringWithEscapedBlocks.prototype.blocks;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction escapeBlocks(input) {\n    var /** @type {?} */ inputParts = input.split(_curlyRe);\n    var /** @type {?} */ resultParts = [];\n    var /** @type {?} */ escapedBlocks = [];\n    var /** @type {?} */ bracketCount = 0;\n    var /** @type {?} */ currentBlockParts = [];\n    for (var /** @type {?} */ partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        var /** @type {?} */ part = inputParts[partIndex];\n        if (part == CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part == OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);\n}\n//# sourceMappingURL=shadow_css.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompileStylesheetMetadata, identifierModuleUrl, identifierName } from './compile_metadata';\nimport { ViewEncapsulation } from './core';\nimport * as o from './output/output_ast';\nimport { ShadowCss } from './shadow_css';\nvar /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';\nvar /** @type {?} */ HOST_ATTR = \"_nghost-\" + COMPONENT_VARIABLE;\nvar /** @type {?} */ CONTENT_ATTR = \"_ngcontent-\" + COMPONENT_VARIABLE;\nvar StylesCompileDependency = /** @class */ (function () {\n    function StylesCompileDependency(name, moduleUrl, setValue) {\n        this.name = name;\n        this.moduleUrl = moduleUrl;\n        this.setValue = setValue;\n    }\n    return StylesCompileDependency;\n}());\nexport { StylesCompileDependency };\nfunction StylesCompileDependency_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StylesCompileDependency.prototype.name;\n    /** @type {?} */\n    StylesCompileDependency.prototype.moduleUrl;\n    /** @type {?} */\n    StylesCompileDependency.prototype.setValue;\n}\nvar CompiledStylesheet = /** @class */ (function () {\n    function CompiledStylesheet(outputCtx, stylesVar, dependencies, isShimmed, meta) {\n        this.outputCtx = outputCtx;\n        this.stylesVar = stylesVar;\n        this.dependencies = dependencies;\n        this.isShimmed = isShimmed;\n        this.meta = meta;\n    }\n    return CompiledStylesheet;\n}());\nexport { CompiledStylesheet };\nfunction CompiledStylesheet_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompiledStylesheet.prototype.outputCtx;\n    /** @type {?} */\n    CompiledStylesheet.prototype.stylesVar;\n    /** @type {?} */\n    CompiledStylesheet.prototype.dependencies;\n    /** @type {?} */\n    CompiledStylesheet.prototype.isShimmed;\n    /** @type {?} */\n    CompiledStylesheet.prototype.meta;\n}\nvar StyleCompiler = /** @class */ (function () {\n    function StyleCompiler(_urlResolver) {\n        this._urlResolver = _urlResolver;\n        this._shadowCss = new ShadowCss();\n    }\n    /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @return {?}\n     */\n    StyleCompiler.prototype.compileComponent = /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @return {?}\n     */\n    function (outputCtx, comp) {\n        var /** @type {?} */ template = /** @type {?} */ ((comp.template));\n        return this._compileStyles(outputCtx, comp, new CompileStylesheetMetadata({\n            styles: template.styles,\n            styleUrls: template.styleUrls,\n            moduleUrl: identifierModuleUrl(comp.type)\n        }), this.needsStyleShim(comp), true);\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @param {?} stylesheet\n     * @param {?=} shim\n     * @return {?}\n     */\n    StyleCompiler.prototype.compileStyles = /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @param {?} stylesheet\n     * @param {?=} shim\n     * @return {?}\n     */\n    function (outputCtx, comp, stylesheet, shim) {\n        if (shim === void 0) { shim = this.needsStyleShim(comp); }\n        return this._compileStyles(outputCtx, comp, stylesheet, shim, false);\n    };\n    /**\n     * @param {?} comp\n     * @return {?}\n     */\n    StyleCompiler.prototype.needsStyleShim = /**\n     * @param {?} comp\n     * @return {?}\n     */\n    function (comp) {\n        return /** @type {?} */ ((comp.template)).encapsulation === ViewEncapsulation.Emulated;\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @param {?} stylesheet\n     * @param {?} shim\n     * @param {?} isComponentStylesheet\n     * @return {?}\n     */\n    StyleCompiler.prototype._compileStyles = /**\n     * @param {?} outputCtx\n     * @param {?} comp\n     * @param {?} stylesheet\n     * @param {?} shim\n     * @param {?} isComponentStylesheet\n     * @return {?}\n     */\n    function (outputCtx, comp, stylesheet, shim, isComponentStylesheet) {\n        var _this = this;\n        var /** @type {?} */ styleExpressions = stylesheet.styles.map(function (plainStyle) { return o.literal(_this._shimIfNeeded(plainStyle, shim)); });\n        var /** @type {?} */ dependencies = [];\n        stylesheet.styleUrls.forEach(function (styleUrl) {\n            var /** @type {?} */ exprIndex = styleExpressions.length;\n            // Note: This placeholder will be filled later.\n            styleExpressions.push(/** @type {?} */ ((null)));\n            dependencies.push(new StylesCompileDependency(getStylesVarName(null), styleUrl, function (value) { return styleExpressions[exprIndex] = outputCtx.importExpr(value); }));\n        });\n        // styles variable contains plain strings and arrays of other styles arrays (recursive),\n        // so we set its type to dynamic.\n        var /** @type {?} */ stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);\n        var /** @type {?} */ stmt = o.variable(stylesVar)\n            .set(o.literalArr(styleExpressions, new o.ArrayType(o.DYNAMIC_TYPE, [o.TypeModifier.Const])))\n            .toDeclStmt(null, isComponentStylesheet ? [o.StmtModifier.Final] : [\n            o.StmtModifier.Final, o.StmtModifier.Exported\n        ]);\n        outputCtx.statements.push(stmt);\n        return new CompiledStylesheet(outputCtx, stylesVar, dependencies, shim, stylesheet);\n    };\n    /**\n     * @param {?} style\n     * @param {?} shim\n     * @return {?}\n     */\n    StyleCompiler.prototype._shimIfNeeded = /**\n     * @param {?} style\n     * @param {?} shim\n     * @return {?}\n     */\n    function (style, shim) {\n        return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;\n    };\n    return StyleCompiler;\n}());\nexport { StyleCompiler };\nfunction StyleCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StyleCompiler.prototype._shadowCss;\n    /** @type {?} */\n    StyleCompiler.prototype._urlResolver;\n}\n/**\n * @param {?} component\n * @return {?}\n */\nfunction getStylesVarName(component) {\n    var /** @type {?} */ result = \"styles\";\n    if (component) {\n        result += \"_\" + identifierName(component.type);\n    }\n    return result;\n}\n//# sourceMappingURL=style_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as html from './ast';\nimport { ParseTreeResult } from './parser';\nimport { NGSP_UNICODE } from './tags';\nexport var /** @type {?} */ PRESERVE_WS_ATTR_NAME = 'ngPreserveWhitespaces';\nvar /** @type {?} */ SKIP_WS_TRIM_TAGS = new Set(['pre', 'template', 'textarea', 'script', 'style']);\n// Equivalent to \\s with \\u00a0 (non-breaking space) excluded.\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\nvar /** @type {?} */ WS_CHARS = ' \\f\\n\\r\\t\\v\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff';\nvar /** @type {?} */ NO_WS_REGEXP = new RegExp(\"[^\" + WS_CHARS + \"]\");\nvar /** @type {?} */ WS_REPLACE_REGEXP = new RegExp(\"[\" + WS_CHARS + \"]{2,}\", 'g');\n/**\n * @param {?} attrs\n * @return {?}\n */\nfunction hasPreserveWhitespacesAttr(attrs) {\n    return attrs.some(function (attr) { return attr.name === PRESERVE_WS_ATTR_NAME; });\n}\n/**\n * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:\n * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32\n * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character\n * and later on replaced by a space. We are re-implementing the same idea here.\n * @param {?} value\n * @return {?}\n */\nexport function replaceNgsp(value) {\n    // lexer is replacing the &ngsp; pseudo-entity with NGSP_UNICODE\n    return value.replace(new RegExp(NGSP_UNICODE, 'g'), ' ');\n}\n/**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nvar /**\n * This visitor can walk HTML parse tree and remove / trim text nodes using the following rules:\n * - consider spaces, tabs and new lines as whitespace characters;\n * - drop text nodes consisting of whitespace characters only;\n * - for all other text nodes replace consecutive whitespace characters with one space;\n * - convert &ngsp; pseudo-entity to a single space;\n *\n * Removal and trimming of whitespaces have positive performance impact (less code to generate\n * while compiling templates, faster view creation). At the same time it can be \"destructive\"\n * in some cases (whitespaces can influence layout). Because of the potential of breaking layout\n * this visitor is not activated by default in Angular 5 and people need to explicitly opt-in for\n * whitespace removal. The default option for whitespace removal will be revisited in Angular 6\n * and might be changed to \"on\" by default.\n */\nWhitespaceVisitor = /** @class */ (function () {\n    function WhitespaceVisitor() {\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    function (element, context) {\n        if (SKIP_WS_TRIM_TAGS.has(element.name) || hasPreserveWhitespacesAttr(element.attrs)) {\n            // don't descent into elements where we need to preserve whitespaces\n            // but still visit all attributes to eliminate one used as a market to preserve WS\n            return new html.Element(element.name, html.visitAll(this, element.attrs), element.children, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n        }\n        return new html.Element(element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) {\n        return attribute.name !== PRESERVE_WS_ATTR_NAME ? attribute : null;\n    };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) {\n        var /** @type {?} */ isNotBlank = text.value.match(NO_WS_REGEXP);\n        if (isNotBlank) {\n            return new html.Text(replaceNgsp(text.value).replace(WS_REPLACE_REGEXP, ' '), text.sourceSpan);\n        }\n        return null;\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { return comment; };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { return expansion; };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    WhitespaceVisitor.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { return expansionCase; };\n    return WhitespaceVisitor;\n}());\n/**\n * @param {?} htmlAstWithErrors\n * @return {?}\n */\nexport function removeWhitespaces(htmlAstWithErrors) {\n    return new ParseTreeResult(html.visitAll(new WhitespaceVisitor(), htmlAstWithErrors.rootNodes), htmlAstWithErrors.errors);\n}\n//# sourceMappingURL=html_whitespaces.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ParseError } from '../parse_util';\nimport * as html from './ast';\n// http://cldr.unicode.org/index/cldr-spec/plural-rules\nvar /** @type {?} */ PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];\n/**\n * Expands special forms into elements.\n *\n * For example,\n *\n * ```\n * { messages.length, plural,\n *   =0 {zero}\n *   =1 {one}\n *   other {more than one}\n * }\n * ```\n *\n * will be expanded into\n *\n * ```\n * <ng-container [ngPlural]=\"messages.length\">\n *   <ng-template ngPluralCase=\"=0\">zero</ng-template>\n *   <ng-template ngPluralCase=\"=1\">one</ng-template>\n *   <ng-template ngPluralCase=\"other\">more than one</ng-template>\n * </ng-container>\n * ```\n * @param {?} nodes\n * @return {?}\n */\nexport function expandNodes(nodes) {\n    var /** @type {?} */ expander = new _Expander();\n    return new ExpansionResult(html.visitAll(expander, nodes), expander.isExpanded, expander.errors);\n}\nvar ExpansionResult = /** @class */ (function () {\n    function ExpansionResult(nodes, expanded, errors) {\n        this.nodes = nodes;\n        this.expanded = expanded;\n        this.errors = errors;\n    }\n    return ExpansionResult;\n}());\nexport { ExpansionResult };\nfunction ExpansionResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ExpansionResult.prototype.nodes;\n    /** @type {?} */\n    ExpansionResult.prototype.expanded;\n    /** @type {?} */\n    ExpansionResult.prototype.errors;\n}\nvar ExpansionError = /** @class */ (function (_super) {\n    tslib_1.__extends(ExpansionError, _super);\n    function ExpansionError(span, errorMsg) {\n        return _super.call(this, span, errorMsg) || this;\n    }\n    return ExpansionError;\n}(ParseError));\nexport { ExpansionError };\n/**\n * Expand expansion forms (plural, select) to directives\n *\n * \\@internal\n */\nvar /**\n * Expand expansion forms (plural, select) to directives\n *\n * \\@internal\n */\n_Expander = /** @class */ (function () {\n    function _Expander() {\n        this.isExpanded = false;\n        this.errors = [];\n    }\n    /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} context\n     * @return {?}\n     */\n    function (element, context) {\n        return new html.Element(element.name, element.attrs, html.visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) { return attribute; };\n    /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} context\n     * @return {?}\n     */\n    function (text, context) { return text; };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { return comment; };\n    /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitExpansion = /**\n     * @param {?} icu\n     * @param {?} context\n     * @return {?}\n     */\n    function (icu, context) {\n        this.isExpanded = true;\n        return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :\n            _expandDefaultForm(icu, this.errors);\n    };\n    /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    _Expander.prototype.visitExpansionCase = /**\n     * @param {?} icuCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (icuCase, context) {\n        throw new Error('Should not be reached');\n    };\n    return _Expander;\n}());\nfunction _Expander_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _Expander.prototype.isExpanded;\n    /** @type {?} */\n    _Expander.prototype.errors;\n}\n/**\n * @param {?} ast\n * @param {?} errors\n * @return {?}\n */\nfunction _expandPluralForm(ast, errors) {\n    var /** @type {?} */ children = ast.cases.map(function (c) {\n        if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\\d+$/)) {\n            errors.push(new ExpansionError(c.valueSourceSpan, \"Plural cases should be \\\"=<number>\\\" or one of \" + PLURAL_CASES.join(\", \")));\n        }\n        var /** @type {?} */ expansionResult = expandNodes(c.expression);\n        errors.push.apply(errors, expansionResult.errors);\n        return new html.Element(\"ng-template\", [new html.Attribute('ngPluralCase', \"\" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    });\n    var /** @type {?} */ switchAttr = new html.Attribute('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);\n    return new html.Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n/**\n * @param {?} ast\n * @param {?} errors\n * @return {?}\n */\nfunction _expandDefaultForm(ast, errors) {\n    var /** @type {?} */ children = ast.cases.map(function (c) {\n        var /** @type {?} */ expansionResult = expandNodes(c.expression);\n        errors.push.apply(errors, expansionResult.errors);\n        if (c.value === 'other') {\n            // other is the default case when no values match\n            return new html.Element(\"ng-template\", [new html.Attribute('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n        }\n        return new html.Element(\"ng-template\", [new html.Attribute('ngSwitchCase', \"\" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);\n    });\n    var /** @type {?} */ switchAttr = new html.Attribute('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);\n    return new html.Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);\n}\n//# sourceMappingURL=icu_ast_expander.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { SecurityContext } from '../core';\nimport { EmptyExpr, RecursiveAstVisitor } from '../expression_parser/ast';\nimport { BoundElementProperty, ParsedEvent, ParsedProperty, ParsedPropertyType, ParsedVariable } from '../expression_parser/ast';\nimport { mergeNsAndName } from '../ml_parser/tags';\nimport { ParseError, ParseErrorLevel, ParseSourceSpan } from '../parse_util';\nimport { CssSelector } from '../selector';\nimport { splitAtColon, splitAtPeriod } from '../util';\nvar /** @type {?} */ PROPERTY_PARTS_SEPARATOR = '.';\nvar /** @type {?} */ ATTRIBUTE_PREFIX = 'attr';\nvar /** @type {?} */ CLASS_PREFIX = 'class';\nvar /** @type {?} */ STYLE_PREFIX = 'style';\nvar /** @type {?} */ ANIMATE_PROP_PREFIX = 'animate-';\n/**\n * Parses bindings in templates and in the directive host area.\n */\nvar /**\n * Parses bindings in templates and in the directive host area.\n */\nBindingParser = /** @class */ (function () {\n    function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {\n        this._exprParser = _exprParser;\n        this._interpolationConfig = _interpolationConfig;\n        this._schemaRegistry = _schemaRegistry;\n        this._targetErrors = _targetErrors;\n        this.pipesByName = null;\n        this._usedPipes = new Map();\n        // When the `pipes` parameter is `null`, do not check for used pipes\n        // This is used in IVY when we might not know the available pipes at compile time\n        if (pipes) {\n            var /** @type {?} */ pipesByName_1 = new Map();\n            pipes.forEach(function (pipe) { return pipesByName_1.set(pipe.name, pipe); });\n            this.pipesByName = pipesByName_1;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    BindingParser.prototype.getUsedPipes = /**\n     * @return {?}\n     */\n    function () { return Array.from(this._usedPipes.values()); };\n    /**\n     * @param {?} dirMeta\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype.createBoundHostProperties = /**\n     * @param {?} dirMeta\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (dirMeta, sourceSpan) {\n        var _this = this;\n        if (dirMeta.hostProperties) {\n            var /** @type {?} */ boundProps_1 = [];\n            Object.keys(dirMeta.hostProperties).forEach(function (propName) {\n                var /** @type {?} */ expression = dirMeta.hostProperties[propName];\n                if (typeof expression === 'string') {\n                    _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);\n                }\n                else {\n                    _this._reportError(\"Value of the host property binding \\\"\" + propName + \"\\\" needs to be a string representing an expression but got \\\"\" + expression + \"\\\" (\" + typeof expression + \")\", sourceSpan);\n                }\n            });\n            return boundProps_1;\n        }\n        return null;\n    };\n    /**\n     * @param {?} dirMeta\n     * @param {?} elementSelector\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype.createDirectiveHostPropertyAsts = /**\n     * @param {?} dirMeta\n     * @param {?} elementSelector\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (dirMeta, elementSelector, sourceSpan) {\n        var _this = this;\n        var /** @type {?} */ boundProps = this.createBoundHostProperties(dirMeta, sourceSpan);\n        return boundProps &&\n            boundProps.map(function (prop) { return _this.createBoundElementProperty(elementSelector, prop); });\n    };\n    /**\n     * @param {?} dirMeta\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype.createDirectiveHostEventAsts = /**\n     * @param {?} dirMeta\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (dirMeta, sourceSpan) {\n        var _this = this;\n        if (dirMeta.hostListeners) {\n            var /** @type {?} */ targetEvents_1 = [];\n            Object.keys(dirMeta.hostListeners).forEach(function (propName) {\n                var /** @type {?} */ expression = dirMeta.hostListeners[propName];\n                if (typeof expression === 'string') {\n                    _this.parseEvent(propName, expression, sourceSpan, [], targetEvents_1);\n                }\n                else {\n                    _this._reportError(\"Value of the host listener \\\"\" + propName + \"\\\" needs to be a string representing an expression but got \\\"\" + expression + \"\\\" (\" + typeof expression + \")\", sourceSpan);\n                }\n            });\n            return targetEvents_1;\n        }\n        return null;\n    };\n    /**\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype.parseInterpolation = /**\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (value, sourceSpan) {\n        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n        try {\n            var /** @type {?} */ ast = /** @type {?} */ ((this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig)));\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            this._checkPipes(ast, sourceSpan);\n            return ast;\n        }\n        catch (/** @type {?} */ e) {\n            this._reportError(\"\" + e, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n        }\n    };\n    // Parse an inline template binding. ie `<tag *tplKey=\"<tplValue>\">`\n    /**\n     * @param {?} tplKey\n     * @param {?} tplValue\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @param {?} targetVars\n     * @return {?}\n     */\n    BindingParser.prototype.parseInlineTemplateBinding = /**\n     * @param {?} tplKey\n     * @param {?} tplValue\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @param {?} targetVars\n     * @return {?}\n     */\n    function (tplKey, tplValue, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {\n        var /** @type {?} */ bindings = this._parseTemplateBindings(tplKey, tplValue, sourceSpan);\n        for (var /** @type {?} */ i = 0; i < bindings.length; i++) {\n            var /** @type {?} */ binding = bindings[i];\n            if (binding.keyIsVar) {\n                targetVars.push(new ParsedVariable(binding.key, binding.name, sourceSpan));\n            }\n            else if (binding.expression) {\n                this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);\n            }\n            else {\n                targetMatchableAttrs.push([binding.key, '']);\n                this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);\n            }\n        }\n    };\n    /**\n     * @param {?} tplKey\n     * @param {?} tplValue\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype._parseTemplateBindings = /**\n     * @param {?} tplKey\n     * @param {?} tplValue\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (tplKey, tplValue, sourceSpan) {\n        var _this = this;\n        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n        try {\n            var /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(tplKey, tplValue, sourceInfo);\n            this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);\n            bindingsResult.templateBindings.forEach(function (binding) {\n                if (binding.expression) {\n                    _this._checkPipes(binding.expression, sourceSpan);\n                }\n            });\n            bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });\n            return bindingsResult.templateBindings;\n        }\n        catch (/** @type {?} */ e) {\n            this._reportError(\"\" + e, sourceSpan);\n            return [];\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    BindingParser.prototype.parseLiteralAttr = /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {\n        if (isAnimationLabel(name)) {\n            name = name.substring(1);\n            if (value) {\n                this._reportError(\"Assigning animation triggers via @prop=\\\"exp\\\" attributes with an expression is invalid.\" +\n                    \" Use property bindings (e.g. [@prop]=\\\"exp\\\") or use an attribute without a value (e.g. @prop) instead.\", sourceSpan, ParseErrorLevel.ERROR);\n            }\n            this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);\n        }\n        else {\n            targetProps.push(new ParsedProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), ParsedPropertyType.LITERAL_ATTR, sourceSpan));\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} isHost\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    BindingParser.prototype.parsePropertyBinding = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} isHost\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {\n        var /** @type {?} */ isAnimationProp = false;\n        if (name.startsWith(ANIMATE_PROP_PREFIX)) {\n            isAnimationProp = true;\n            name = name.substring(ANIMATE_PROP_PREFIX.length);\n        }\n        else if (isAnimationLabel(name)) {\n            isAnimationProp = true;\n            name = name.substring(1);\n        }\n        if (isAnimationProp) {\n            this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);\n        }\n        else {\n            this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    BindingParser.prototype.parsePropertyInterpolation = /**\n     * @param {?} name\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {\n        var /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);\n        if (expr) {\n            this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * @param {?} name\n     * @param {?} ast\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    BindingParser.prototype._parsePropertyAst = /**\n     * @param {?} name\n     * @param {?} ast\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {\n        targetMatchableAttrs.push([name, /** @type {?} */ ((ast.source))]);\n        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.DEFAULT, sourceSpan));\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    BindingParser.prototype._parseAnimation = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {\n        // This will occur when a @trigger is not paired with an expression.\n        // For animations it is valid to not have an expression since */void\n        // states will be applied by angular when the element is attached/detached\n        var /** @type {?} */ ast = this._parseBinding(expression || 'undefined', false, sourceSpan);\n        targetMatchableAttrs.push([name, /** @type {?} */ ((ast.source))]);\n        targetProps.push(new ParsedProperty(name, ast, ParsedPropertyType.ANIMATION, sourceSpan));\n    };\n    /**\n     * @param {?} value\n     * @param {?} isHostBinding\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype._parseBinding = /**\n     * @param {?} value\n     * @param {?} isHostBinding\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (value, isHostBinding, sourceSpan) {\n        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n        try {\n            var /** @type {?} */ ast = isHostBinding ?\n                this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :\n                this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);\n            if (ast)\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            this._checkPipes(ast, sourceSpan);\n            return ast;\n        }\n        catch (/** @type {?} */ e) {\n            this._reportError(\"\" + e, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n        }\n    };\n    /**\n     * @param {?} elementSelector\n     * @param {?} boundProp\n     * @return {?}\n     */\n    BindingParser.prototype.createBoundElementProperty = /**\n     * @param {?} elementSelector\n     * @param {?} boundProp\n     * @return {?}\n     */\n    function (elementSelector, boundProp) {\n        if (boundProp.isAnimation) {\n            return new BoundElementProperty(boundProp.name, 4 /* Animation */, SecurityContext.NONE, boundProp.expression, null, boundProp.sourceSpan);\n        }\n        var /** @type {?} */ unit = null;\n        var /** @type {?} */ bindingType = /** @type {?} */ ((undefined));\n        var /** @type {?} */ boundPropertyName = null;\n        var /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);\n        var /** @type {?} */ securityContexts = /** @type {?} */ ((undefined));\n        // Check check for special cases (prefix style, attr, class)\n        if (parts.length > 1) {\n            if (parts[0] == ATTRIBUTE_PREFIX) {\n                boundPropertyName = parts[1];\n                this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);\n                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);\n                var /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');\n                if (nsSeparatorIdx > -1) {\n                    var /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);\n                    var /** @type {?} */ name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);\n                    boundPropertyName = mergeNsAndName(ns, name_1);\n                }\n                bindingType = 1 /* Attribute */;\n            }\n            else if (parts[0] == CLASS_PREFIX) {\n                boundPropertyName = parts[1];\n                bindingType = 2 /* Class */;\n                securityContexts = [SecurityContext.NONE];\n            }\n            else if (parts[0] == STYLE_PREFIX) {\n                unit = parts.length > 2 ? parts[2] : null;\n                boundPropertyName = parts[1];\n                bindingType = 3 /* Style */;\n                securityContexts = [SecurityContext.STYLE];\n            }\n        }\n        // If not a special case, use the full property name\n        if (boundPropertyName === null) {\n            boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);\n            securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);\n            bindingType = 0 /* Property */;\n            this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);\n        }\n        return new BoundElementProperty(boundPropertyName, bindingType, securityContexts[0], boundProp.expression, unit, boundProp.sourceSpan);\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    BindingParser.prototype.parseEvent = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n        if (isAnimationLabel(name)) {\n            name = name.substr(1);\n            this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);\n        }\n        else {\n            this._parseRegularEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    BindingParser.prototype._parseAnimationEvent = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetEvents) {\n        var /** @type {?} */ matches = splitAtPeriod(name, [name, '']);\n        var /** @type {?} */ eventName = matches[0];\n        var /** @type {?} */ phase = matches[1].toLowerCase();\n        if (phase) {\n            switch (phase) {\n                case 'start':\n                case 'done':\n                    var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\n                    targetEvents.push(new ParsedEvent(eventName, phase, 1 /* Animation */, ast, sourceSpan));\n                    break;\n                default:\n                    this._reportError(\"The provided animation output phase value \\\"\" + phase + \"\\\" for \\\"@\" + eventName + \"\\\" is not supported (use start or done)\", sourceSpan);\n                    break;\n            }\n        }\n        else {\n            this._reportError(\"The animation trigger output event (@\" + eventName + \") is missing its phase value name (start or done are currently supported)\", sourceSpan);\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    BindingParser.prototype._parseRegularEvent = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n        // long format: 'target: eventName'\n        var _a = splitAtColon(name, [/** @type {?} */ ((null)), name]), target = _a[0], eventName = _a[1];\n        var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);\n        targetMatchableAttrs.push([/** @type {?} */ ((name)), /** @type {?} */ ((ast.source))]);\n        targetEvents.push(new ParsedEvent(eventName, target, 0 /* Regular */, ast, sourceSpan));\n        // Don't detect directives for event names for now,\n        // so don't add the event name to the matchableAttrs\n    };\n    /**\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype._parseAction = /**\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (value, sourceSpan) {\n        var /** @type {?} */ sourceInfo = sourceSpan.start.toString();\n        try {\n            var /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);\n            if (ast) {\n                this._reportExpressionParserErrors(ast.errors, sourceSpan);\n            }\n            if (!ast || ast.ast instanceof EmptyExpr) {\n                this._reportError(\"Empty expressions are not allowed\", sourceSpan);\n                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n            }\n            this._checkPipes(ast, sourceSpan);\n            return ast;\n        }\n        catch (/** @type {?} */ e) {\n            this._reportError(\"\" + e, sourceSpan);\n            return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);\n        }\n    };\n    /**\n     * @param {?} message\n     * @param {?} sourceSpan\n     * @param {?=} level\n     * @return {?}\n     */\n    BindingParser.prototype._reportError = /**\n     * @param {?} message\n     * @param {?} sourceSpan\n     * @param {?=} level\n     * @return {?}\n     */\n    function (message, sourceSpan, level) {\n        if (level === void 0) { level = ParseErrorLevel.ERROR; }\n        this._targetErrors.push(new ParseError(sourceSpan, message, level));\n    };\n    /**\n     * @param {?} errors\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype._reportExpressionParserErrors = /**\n     * @param {?} errors\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (errors, sourceSpan) {\n        for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {\n            var error = errors_1[_i];\n            this._reportError(error.message, sourceSpan);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    BindingParser.prototype._checkPipes = /**\n     * @param {?} ast\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (ast, sourceSpan) {\n        var _this = this;\n        if (ast && this.pipesByName) {\n            var /** @type {?} */ collector = new PipeCollector();\n            ast.visit(collector);\n            collector.pipes.forEach(function (ast, pipeName) {\n                var /** @type {?} */ pipeMeta = /** @type {?} */ ((_this.pipesByName)).get(pipeName);\n                if (!pipeMeta) {\n                    _this._reportError(\"The pipe '\" + pipeName + \"' could not be found\", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));\n                }\n                else {\n                    _this._usedPipes.set(pipeName, pipeMeta);\n                }\n            });\n        }\n    };\n    /**\n     * @param {?} propName the name of the property / attribute\n     * @param {?} sourceSpan\n     * @param {?} isAttr true when binding to an attribute\n     * @return {?}\n     */\n    BindingParser.prototype._validatePropertyOrAttributeName = /**\n     * @param {?} propName the name of the property / attribute\n     * @param {?} sourceSpan\n     * @param {?} isAttr true when binding to an attribute\n     * @return {?}\n     */\n    function (propName, sourceSpan, isAttr) {\n        var /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :\n            this._schemaRegistry.validateProperty(propName);\n        if (report.error) {\n            this._reportError(/** @type {?} */ ((report.msg)), sourceSpan, ParseErrorLevel.ERROR);\n        }\n    };\n    return BindingParser;\n}());\n/**\n * Parses bindings in templates and in the directive host area.\n */\nexport { BindingParser };\nfunction BindingParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingParser.prototype.pipesByName;\n    /** @type {?} */\n    BindingParser.prototype._usedPipes;\n    /** @type {?} */\n    BindingParser.prototype._exprParser;\n    /** @type {?} */\n    BindingParser.prototype._interpolationConfig;\n    /** @type {?} */\n    BindingParser.prototype._schemaRegistry;\n    /** @type {?} */\n    BindingParser.prototype._targetErrors;\n}\nvar PipeCollector = /** @class */ (function (_super) {\n    tslib_1.__extends(PipeCollector, _super);\n    function PipeCollector() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.pipes = new Map();\n        return _this;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    PipeCollector.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.pipes.set(ast.name, ast);\n        ast.exp.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    };\n    return PipeCollector;\n}(RecursiveAstVisitor));\nexport { PipeCollector };\nfunction PipeCollector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PipeCollector.prototype.pipes;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction isAnimationLabel(name) {\n    return name[0] == '@';\n}\n/**\n * @param {?} registry\n * @param {?} selector\n * @param {?} propName\n * @param {?} isAttribute\n * @return {?}\n */\nexport function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {\n    var /** @type {?} */ ctxs = [];\n    CssSelector.parse(selector).forEach(function (selector) {\n        var /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();\n        var /** @type {?} */ notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector(); })\n            .map(function (selector) { return selector.element; }));\n        var /** @type {?} */ possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName); });\n        ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute); }));\n    });\n    return ctxs.length === 0 ? [SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();\n}\n//# sourceMappingURL=binding_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { identifierName } from '../compile_metadata';\nimport { ASTWithSource, EmptyExpr } from '../expression_parser/ast';\nimport { Identifiers, createTokenForExternalReference, createTokenForReference } from '../identifiers';\nimport * as html from '../ml_parser/ast';\nimport { ParseTreeResult } from '../ml_parser/html_parser';\nimport { removeWhitespaces, replaceNgsp } from '../ml_parser/html_whitespaces';\nimport { expandNodes } from '../ml_parser/icu_ast_expander';\nimport { InterpolationConfig } from '../ml_parser/interpolation_config';\nimport { isNgTemplate, splitNsName } from '../ml_parser/tags';\nimport { ParseError, ParseErrorLevel, ParseSourceSpan } from '../parse_util';\nimport { ProviderElementContext, ProviderViewContext } from '../provider_analyzer';\nimport { CssSelector, SelectorMatcher } from '../selector';\nimport { isStyleUrlResolvable } from '../style_url_resolver';\nimport { syntaxError } from '../util';\nimport { BindingParser } from './binding_parser';\nimport * as t from './template_ast';\nimport { PreparsedElementType, preparseElement } from './template_preparser';\nvar /** @type {?} */ BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\n// Group 1 = \"bind-\"\nvar /** @type {?} */ KW_BIND_IDX = 1;\n// Group 2 = \"let-\"\nvar /** @type {?} */ KW_LET_IDX = 2;\n// Group 3 = \"ref-/#\"\nvar /** @type {?} */ KW_REF_IDX = 3;\n// Group 4 = \"on-\"\nvar /** @type {?} */ KW_ON_IDX = 4;\n// Group 5 = \"bindon-\"\nvar /** @type {?} */ KW_BINDON_IDX = 5;\n// Group 6 = \"@\"\nvar /** @type {?} */ KW_AT_IDX = 6;\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\nvar /** @type {?} */ IDENT_KW_IDX = 7;\n// Group 8 = identifier inside [()]\nvar /** @type {?} */ IDENT_BANANA_BOX_IDX = 8;\n// Group 9 = identifier inside []\nvar /** @type {?} */ IDENT_PROPERTY_IDX = 9;\n// Group 10 = identifier inside ()\nvar /** @type {?} */ IDENT_EVENT_IDX = 10;\nvar /** @type {?} */ TEMPLATE_ATTR_PREFIX = '*';\nvar /** @type {?} */ CLASS_ATTR = 'class';\nvar /** @type {?} */ TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];\nvar /** @type {?} */ warningCounts = {};\n/**\n * @param {?} warnings\n * @return {?}\n */\nfunction warnOnlyOnce(warnings) {\n    return function (error) {\n        if (warnings.indexOf(error.msg) !== -1) {\n            warningCounts[error.msg] = (warningCounts[error.msg] || 0) + 1;\n            return warningCounts[error.msg] <= 1;\n        }\n        return true;\n    };\n}\nvar TemplateParseError = /** @class */ (function (_super) {\n    tslib_1.__extends(TemplateParseError, _super);\n    function TemplateParseError(message, span, level) {\n        return _super.call(this, span, message, level) || this;\n    }\n    return TemplateParseError;\n}(ParseError));\nexport { TemplateParseError };\nvar TemplateParseResult = /** @class */ (function () {\n    function TemplateParseResult(templateAst, usedPipes, errors) {\n        this.templateAst = templateAst;\n        this.usedPipes = usedPipes;\n        this.errors = errors;\n    }\n    return TemplateParseResult;\n}());\nexport { TemplateParseResult };\nfunction TemplateParseResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateParseResult.prototype.templateAst;\n    /** @type {?} */\n    TemplateParseResult.prototype.usedPipes;\n    /** @type {?} */\n    TemplateParseResult.prototype.errors;\n}\nvar TemplateParser = /** @class */ (function () {\n    function TemplateParser(_config, _reflector, _exprParser, _schemaRegistry, _htmlParser, _console, transforms) {\n        this._config = _config;\n        this._reflector = _reflector;\n        this._exprParser = _exprParser;\n        this._schemaRegistry = _schemaRegistry;\n        this._htmlParser = _htmlParser;\n        this._console = _console;\n        this.transforms = transforms;\n    }\n    Object.defineProperty(TemplateParser.prototype, \"expressionParser\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this._exprParser; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} component\n     * @param {?} template\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @param {?} templateUrl\n     * @param {?} preserveWhitespaces\n     * @return {?}\n     */\n    TemplateParser.prototype.parse = /**\n     * @param {?} component\n     * @param {?} template\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @param {?} templateUrl\n     * @param {?} preserveWhitespaces\n     * @return {?}\n     */\n    function (component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {\n        var /** @type {?} */ result = this.tryParse(component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces);\n        var /** @type {?} */ warnings = /** @type {?} */ ((result.errors)).filter(function (error) { return error.level === ParseErrorLevel.WARNING; });\n        var /** @type {?} */ errors = /** @type {?} */ ((result.errors)).filter(function (error) { return error.level === ParseErrorLevel.ERROR; });\n        if (warnings.length > 0) {\n            this._console.warn(\"Template parse warnings:\\n\" + warnings.join('\\n'));\n        }\n        if (errors.length > 0) {\n            var /** @type {?} */ errorString = errors.join('\\n');\n            throw syntaxError(\"Template parse errors:\\n\" + errorString, errors);\n        }\n        return { template: /** @type {?} */ ((result.templateAst)), pipes: /** @type {?} */ ((result.usedPipes)) };\n    };\n    /**\n     * @param {?} component\n     * @param {?} template\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @param {?} templateUrl\n     * @param {?} preserveWhitespaces\n     * @return {?}\n     */\n    TemplateParser.prototype.tryParse = /**\n     * @param {?} component\n     * @param {?} template\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @param {?} templateUrl\n     * @param {?} preserveWhitespaces\n     * @return {?}\n     */\n    function (component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces) {\n        var /** @type {?} */ htmlParseResult = typeof template === 'string' ? /** @type {?} */ ((this._htmlParser)).parse(template, templateUrl, true, this.getInterpolationConfig(component)) :\n            template;\n        if (!preserveWhitespaces) {\n            htmlParseResult = removeWhitespaces(htmlParseResult);\n        }\n        return this.tryParseHtml(this.expandHtml(htmlParseResult), component, directives, pipes, schemas);\n    };\n    /**\n     * @param {?} htmlAstWithErrors\n     * @param {?} component\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @return {?}\n     */\n    TemplateParser.prototype.tryParseHtml = /**\n     * @param {?} htmlAstWithErrors\n     * @param {?} component\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} schemas\n     * @return {?}\n     */\n    function (htmlAstWithErrors, component, directives, pipes, schemas) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ errors = htmlAstWithErrors.errors;\n        var /** @type {?} */ usedPipes = [];\n        if (htmlAstWithErrors.rootNodes.length > 0) {\n            var /** @type {?} */ uniqDirectives = removeSummaryDuplicates(directives);\n            var /** @type {?} */ uniqPipes = removeSummaryDuplicates(pipes);\n            var /** @type {?} */ providerViewContext = new ProviderViewContext(this._reflector, component);\n            var /** @type {?} */ interpolationConfig = /** @type {?} */ ((undefined));\n            if (component.template && component.template.interpolation) {\n                interpolationConfig = {\n                    start: component.template.interpolation[0],\n                    end: component.template.interpolation[1]\n                };\n            }\n            var /** @type {?} */ bindingParser = new BindingParser(this._exprParser, /** @type {?} */ ((interpolationConfig)), this._schemaRegistry, uniqPipes, errors);\n            var /** @type {?} */ parseVisitor = new TemplateParseVisitor(this._reflector, this._config, providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);\n            result = html.visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);\n            errors.push.apply(errors, providerViewContext.errors);\n            usedPipes.push.apply(usedPipes, bindingParser.getUsedPipes());\n        }\n        else {\n            result = [];\n        }\n        this._assertNoReferenceDuplicationOnTemplate(result, errors);\n        if (errors.length > 0) {\n            return new TemplateParseResult(result, usedPipes, errors);\n        }\n        if (this.transforms) {\n            this.transforms.forEach(function (transform) { result = t.templateVisitAll(transform, result); });\n        }\n        return new TemplateParseResult(result, usedPipes, errors);\n    };\n    /**\n     * @param {?} htmlAstWithErrors\n     * @param {?=} forced\n     * @return {?}\n     */\n    TemplateParser.prototype.expandHtml = /**\n     * @param {?} htmlAstWithErrors\n     * @param {?=} forced\n     * @return {?}\n     */\n    function (htmlAstWithErrors, forced) {\n        if (forced === void 0) { forced = false; }\n        var /** @type {?} */ errors = htmlAstWithErrors.errors;\n        if (errors.length == 0 || forced) {\n            // Transform ICU messages to angular directives\n            var /** @type {?} */ expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);\n            errors.push.apply(errors, expandedHtmlAst.errors);\n            htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);\n        }\n        return htmlAstWithErrors;\n    };\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    TemplateParser.prototype.getInterpolationConfig = /**\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        if (component.template) {\n            return InterpolationConfig.fromArray(component.template.interpolation);\n        }\n        return undefined;\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @param {?} result\n     * @param {?} errors\n     * @return {?}\n     */\n    TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = /**\n     * \\@internal\n     * @param {?} result\n     * @param {?} errors\n     * @return {?}\n     */\n    function (result, errors) {\n        var /** @type {?} */ existingReferences = [];\n        result.filter(function (element) { return !!(/** @type {?} */ (element)).references; })\n            .forEach(function (element) {\n            return (/** @type {?} */ (element)).references.forEach(function (reference) {\n                var /** @type {?} */ name = reference.name;\n                if (existingReferences.indexOf(name) < 0) {\n                    existingReferences.push(name);\n                }\n                else {\n                    var /** @type {?} */ error = new TemplateParseError(\"Reference \\\"#\" + name + \"\\\" is defined several times\", reference.sourceSpan, ParseErrorLevel.ERROR);\n                    errors.push(error);\n                }\n            });\n        });\n    };\n    return TemplateParser;\n}());\nexport { TemplateParser };\nfunction TemplateParser_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateParser.prototype._config;\n    /** @type {?} */\n    TemplateParser.prototype._reflector;\n    /** @type {?} */\n    TemplateParser.prototype._exprParser;\n    /** @type {?} */\n    TemplateParser.prototype._schemaRegistry;\n    /** @type {?} */\n    TemplateParser.prototype._htmlParser;\n    /** @type {?} */\n    TemplateParser.prototype._console;\n    /** @type {?} */\n    TemplateParser.prototype.transforms;\n}\nvar TemplateParseVisitor = /** @class */ (function () {\n    function TemplateParseVisitor(reflector, config, providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {\n        var _this = this;\n        this.reflector = reflector;\n        this.config = config;\n        this.providerViewContext = providerViewContext;\n        this._bindingParser = _bindingParser;\n        this._schemaRegistry = _schemaRegistry;\n        this._schemas = _schemas;\n        this._targetErrors = _targetErrors;\n        this.selectorMatcher = new SelectorMatcher();\n        this.directivesIndex = new Map();\n        this.ngContentCount = 0;\n        // Note: queries start with id 1 so we can use the number in a Bloom filter!\n        this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;\n        directives.forEach(function (directive, index) {\n            var /** @type {?} */ selector = CssSelector.parse(/** @type {?} */ ((directive.selector)));\n            _this.selectorMatcher.addSelectables(selector, directive);\n            _this.directivesIndex.set(directive, index);\n        });\n    }\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { return null; };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { return null; };\n    /**\n     * @param {?} text\n     * @param {?} parent\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} parent\n     * @return {?}\n     */\n    function (text, parent) {\n        var /** @type {?} */ ngContentIndex = /** @type {?} */ ((parent.findNgContentIndex(TEXT_CSS_SELECTOR)));\n        var /** @type {?} */ valueNoNgsp = replaceNgsp(text.value);\n        var /** @type {?} */ expr = this._bindingParser.parseInterpolation(valueNoNgsp, /** @type {?} */ ((text.sourceSpan)));\n        return expr ? new t.BoundTextAst(expr, ngContentIndex, /** @type {?} */ ((text.sourceSpan))) :\n            new t.TextAst(valueNoNgsp, ngContentIndex, /** @type {?} */ ((text.sourceSpan)));\n    };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) {\n        return new t.AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { return null; };\n    /**\n     * @param {?} element\n     * @param {?} parent\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype.visitElement = /**\n     * @param {?} element\n     * @param {?} parent\n     * @return {?}\n     */\n    function (element, parent) {\n        var _this = this;\n        var /** @type {?} */ queryStartIndex = this.contentQueryStartId;\n        var /** @type {?} */ elName = element.name;\n        var /** @type {?} */ preparsedElement = preparseElement(element);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE) {\n            // Skipping <script> for security reasons\n            // Skipping <style> as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n            isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n            // Skipping stylesheets with either relative urls or package scheme as we already processed\n            // them in the StyleCompiler\n            return null;\n        }\n        var /** @type {?} */ matchableAttrs = [];\n        var /** @type {?} */ elementOrDirectiveProps = [];\n        var /** @type {?} */ elementOrDirectiveRefs = [];\n        var /** @type {?} */ elementVars = [];\n        var /** @type {?} */ events = [];\n        var /** @type {?} */ templateElementOrDirectiveProps = [];\n        var /** @type {?} */ templateMatchableAttrs = [];\n        var /** @type {?} */ templateElementVars = [];\n        var /** @type {?} */ hasInlineTemplates = false;\n        var /** @type {?} */ attrs = [];\n        var /** @type {?} */ isTemplateElement = isNgTemplate(element.name);\n        element.attrs.forEach(function (attr) {\n            var /** @type {?} */ parsedVariables = [];\n            var /** @type {?} */ hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);\n            elementVars.push.apply(elementVars, parsedVariables.map(function (v) { return t.VariableAst.fromParsedVariable(v); }));\n            var /** @type {?} */ templateValue;\n            var /** @type {?} */ templateKey;\n            var /** @type {?} */ normalizedName = _this._normalizeAttributeName(attr.name);\n            if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n                templateValue = attr.value;\n                templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);\n            }\n            var /** @type {?} */ hasTemplateBinding = templateValue != null;\n            if (hasTemplateBinding) {\n                if (hasInlineTemplates) {\n                    _this._reportError(\"Can't have multiple template bindings on one element. Use only one attribute prefixed with *\", attr.sourceSpan);\n                }\n                hasInlineTemplates = true;\n                var /** @type {?} */ parsedVariables_1 = [];\n                _this._bindingParser.parseInlineTemplateBinding(/** @type {?} */ ((templateKey)), /** @type {?} */ ((templateValue)), attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, parsedVariables_1);\n                templateElementVars.push.apply(templateElementVars, parsedVariables_1.map(function (v) { return t.VariableAst.fromParsedVariable(v); }));\n            }\n            if (!hasBinding && !hasTemplateBinding) {\n                // don't include the bindings as attributes as well in the AST\n                attrs.push(_this.visitAttribute(attr, null));\n                matchableAttrs.push([attr.name, attr.value]);\n            }\n        });\n        var /** @type {?} */ elementCssSelector = createElementCssSelector(elName, matchableAttrs);\n        var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;\n        var /** @type {?} */ references = [];\n        var /** @type {?} */ boundDirectivePropNames = new Set();\n        var /** @type {?} */ directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, /** @type {?} */ ((element.sourceSpan)), references, boundDirectivePropNames);\n        var /** @type {?} */ elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, boundDirectivePropNames);\n        var /** @type {?} */ isViewRoot = parent.isTemplateElement || hasInlineTemplates;\n        var /** @type {?} */ providerContext = new ProviderElementContext(this.providerViewContext, /** @type {?} */ ((parent.providerContext)), isViewRoot, directiveAsts, attrs, references, isTemplateElement, queryStartIndex, /** @type {?} */ ((element.sourceSpan)));\n        var /** @type {?} */ children = html.visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? /** @type {?} */ ((parent.providerContext)) : providerContext));\n        providerContext.afterElement();\n        // Override the actual selector when the `ngProjectAs` attribute is provided\n        var /** @type {?} */ projectionSelector = preparsedElement.projectAs != '' ?\n            CssSelector.parse(preparsedElement.projectAs)[0] :\n            elementCssSelector;\n        var /** @type {?} */ ngContentIndex = /** @type {?} */ ((parent.findNgContentIndex(projectionSelector)));\n        var /** @type {?} */ parsedElement;\n        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n            // `<ng-content>` element\n            if (element.children && !element.children.every(_isEmptyTextNode)) {\n                this._reportError(\"<ng-content> element cannot have content.\", /** @type {?} */ ((element.sourceSpan)));\n            }\n            parsedElement = new t.NgContentAst(this.ngContentCount++, hasInlineTemplates ? /** @type {?} */ ((null)) : ngContentIndex, /** @type {?} */ ((element.sourceSpan)));\n        }\n        else if (isTemplateElement) {\n            // `<ng-template>` element\n            this._assertAllEventsPublishedByDirectives(directiveAsts, events);\n            this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, /** @type {?} */ ((element.sourceSpan)));\n            parsedElement = new t.EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? /** @type {?} */ ((null)) : ngContentIndex, /** @type {?} */ ((element.sourceSpan)));\n        }\n        else {\n            // element other than `<ng-content>` and `<ng-template>`\n            this._assertElementExists(matchElement, element);\n            this._assertOnlyOneComponent(directiveAsts, /** @type {?} */ ((element.sourceSpan)));\n            var /** @type {?} */ ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);\n            parsedElement = new t.ElementAst(elName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, providerContext.queryMatches, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan || null);\n        }\n        if (hasInlineTemplates) {\n            // The element as a *-attribute\n            var /** @type {?} */ templateQueryStartIndex = this.contentQueryStartId;\n            var /** @type {?} */ templateSelector = createElementCssSelector('ng-template', templateMatchableAttrs);\n            var directives = this._parseDirectives(this.selectorMatcher, templateSelector).directives;\n            var /** @type {?} */ templateBoundDirectivePropNames = new Set();\n            var /** @type {?} */ templateDirectiveAsts = this._createDirectiveAsts(true, elName, directives, templateElementOrDirectiveProps, [], /** @type {?} */ ((element.sourceSpan)), [], templateBoundDirectivePropNames);\n            var /** @type {?} */ templateElementProps = this._createElementPropertyAsts(elName, templateElementOrDirectiveProps, templateBoundDirectivePropNames);\n            this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, /** @type {?} */ ((element.sourceSpan)));\n            var /** @type {?} */ templateProviderContext = new ProviderElementContext(this.providerViewContext, /** @type {?} */ ((parent.providerContext)), parent.isTemplateElement, templateDirectiveAsts, [], [], true, templateQueryStartIndex, /** @type {?} */ ((element.sourceSpan)));\n            templateProviderContext.afterElement();\n            parsedElement = new t.EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches, [parsedElement], ngContentIndex, /** @type {?} */ ((element.sourceSpan)));\n        }\n        return parsedElement;\n    };\n    /**\n     * @param {?} isTemplateElement\n     * @param {?} attr\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @param {?} targetEvents\n     * @param {?} targetRefs\n     * @param {?} targetVars\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._parseAttr = /**\n     * @param {?} isTemplateElement\n     * @param {?} attr\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetProps\n     * @param {?} targetEvents\n     * @param {?} targetRefs\n     * @param {?} targetVars\n     * @return {?}\n     */\n    function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {\n        var /** @type {?} */ name = this._normalizeAttributeName(attr.name);\n        var /** @type {?} */ value = attr.value;\n        var /** @type {?} */ srcSpan = attr.sourceSpan;\n        var /** @type {?} */ boundEvents = [];\n        var /** @type {?} */ bindParts = name.match(BIND_NAME_REGEXP);\n        var /** @type {?} */ hasBinding = false;\n        if (bindParts !== null) {\n            hasBinding = true;\n            if (bindParts[KW_BIND_IDX] != null) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n            }\n            else if (bindParts[KW_LET_IDX]) {\n                if (isTemplateElement) {\n                    var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];\n                    this._parseVariable(identifier, value, srcSpan, targetVars);\n                }\n                else {\n                    this._reportError(\"\\\"let-\\\" is only supported on ng-template elements.\", srcSpan);\n                }\n            }\n            else if (bindParts[KW_REF_IDX]) {\n                var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];\n                this._parseReference(identifier, value, srcSpan, targetRefs);\n            }\n            else if (bindParts[KW_ON_IDX]) {\n                this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, boundEvents);\n            }\n            else if (bindParts[KW_BINDON_IDX]) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n                this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, boundEvents);\n            }\n            else if (bindParts[KW_AT_IDX]) {\n                this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\n            }\n            else if (bindParts[IDENT_BANANA_BOX_IDX]) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n                this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, boundEvents);\n            }\n            else if (bindParts[IDENT_PROPERTY_IDX]) {\n                this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n            }\n            else if (bindParts[IDENT_EVENT_IDX]) {\n                this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, boundEvents);\n            }\n        }\n        else {\n            hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);\n        }\n        if (!hasBinding) {\n            this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\n        }\n        targetEvents.push.apply(targetEvents, boundEvents.map(function (e) { return t.BoundEventAst.fromParsedEvent(e); }));\n        return hasBinding;\n    };\n    /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._normalizeAttributeName = /**\n     * @param {?} attrName\n     * @return {?}\n     */\n    function (attrName) {\n        return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetVars\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._parseVariable = /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetVars\n     * @return {?}\n     */\n    function (identifier, value, sourceSpan, targetVars) {\n        if (identifier.indexOf('-') > -1) {\n            this._reportError(\"\\\"-\\\" is not allowed in variable names\", sourceSpan);\n        }\n        targetVars.push(new t.VariableAst(identifier, value, sourceSpan));\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetRefs\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._parseReference = /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} targetRefs\n     * @return {?}\n     */\n    function (identifier, value, sourceSpan, targetRefs) {\n        if (identifier.indexOf('-') > -1) {\n            this._reportError(\"\\\"-\\\" is not allowed in reference names\", sourceSpan);\n        }\n        targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._parseAssignmentEvent = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} targetEvents\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {\n        this._bindingParser.parseEvent(name + \"Change\", expression + \"=$event\", sourceSpan, targetMatchableAttrs, targetEvents);\n    };\n    /**\n     * @param {?} selectorMatcher\n     * @param {?} elementCssSelector\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._parseDirectives = /**\n     * @param {?} selectorMatcher\n     * @param {?} elementCssSelector\n     * @return {?}\n     */\n    function (selectorMatcher, elementCssSelector) {\n        var _this = this;\n        // Need to sort the directives so that we get consistent results throughout,\n        // as selectorMatcher uses Maps inside.\n        // Also deduplicate directives as they might match more than one time!\n        var /** @type {?} */ directives = new Array(this.directivesIndex.size);\n        // Whether any directive selector matches on the element name\n        var /** @type {?} */ matchElement = false;\n        selectorMatcher.match(elementCssSelector, function (selector, directive) {\n            directives[/** @type {?} */ ((_this.directivesIndex.get(directive)))] = directive;\n            matchElement = matchElement || selector.hasElementSelector();\n        });\n        return {\n            directives: directives.filter(function (dir) { return !!dir; }),\n            matchElement: matchElement,\n        };\n    };\n    /**\n     * @param {?} isTemplateElement\n     * @param {?} elementName\n     * @param {?} directives\n     * @param {?} props\n     * @param {?} elementOrDirectiveRefs\n     * @param {?} elementSourceSpan\n     * @param {?} targetReferences\n     * @param {?} targetBoundDirectivePropNames\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._createDirectiveAsts = /**\n     * @param {?} isTemplateElement\n     * @param {?} elementName\n     * @param {?} directives\n     * @param {?} props\n     * @param {?} elementOrDirectiveRefs\n     * @param {?} elementSourceSpan\n     * @param {?} targetReferences\n     * @param {?} targetBoundDirectivePropNames\n     * @return {?}\n     */\n    function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences, targetBoundDirectivePropNames) {\n        var _this = this;\n        var /** @type {?} */ matchedReferences = new Set();\n        var /** @type {?} */ component = /** @type {?} */ ((null));\n        var /** @type {?} */ directiveAsts = directives.map(function (directive) {\n            var /** @type {?} */ sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, \"Directive \" + identifierName(directive.type));\n            if (directive.isComponent) {\n                component = directive;\n            }\n            var /** @type {?} */ directiveProperties = [];\n            var /** @type {?} */ boundProperties = /** @type {?} */ ((_this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan)));\n            var /** @type {?} */ hostProperties = boundProperties.map(function (prop) { return t.BoundElementPropertyAst.fromBoundProperty(prop); });\n            // Note: We need to check the host properties here as well,\n            // as we don't know the element name in the DirectiveWrapperCompiler yet.\n            hostProperties = _this._checkPropertiesInSchema(elementName, hostProperties);\n            var /** @type {?} */ parsedEvents = /** @type {?} */ ((_this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan)));\n            _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);\n            elementOrDirectiveRefs.forEach(function (elOrDirRef) {\n                if ((elOrDirRef.value.length === 0 && directive.isComponent) ||\n                    (elOrDirRef.isReferenceToDirective(directive))) {\n                    targetReferences.push(new t.ReferenceAst(elOrDirRef.name, createTokenForReference(directive.type.reference), elOrDirRef.value, elOrDirRef.sourceSpan));\n                    matchedReferences.add(elOrDirRef.name);\n                }\n            });\n            var /** @type {?} */ hostEvents = parsedEvents.map(function (e) { return t.BoundEventAst.fromParsedEvent(e); });\n            var /** @type {?} */ contentQueryStartId = _this.contentQueryStartId;\n            _this.contentQueryStartId += directive.queries.length;\n            return new t.DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId, sourceSpan);\n        });\n        elementOrDirectiveRefs.forEach(function (elOrDirRef) {\n            if (elOrDirRef.value.length > 0) {\n                if (!matchedReferences.has(elOrDirRef.name)) {\n                    _this._reportError(\"There is no directive with \\\"exportAs\\\" set to \\\"\" + elOrDirRef.value + \"\\\"\", elOrDirRef.sourceSpan);\n                }\n            }\n            else if (!component) {\n                var /** @type {?} */ refToken = /** @type {?} */ ((null));\n                if (isTemplateElement) {\n                    refToken = createTokenForExternalReference(_this.reflector, Identifiers.TemplateRef);\n                }\n                targetReferences.push(new t.ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.value, elOrDirRef.sourceSpan));\n            }\n        });\n        return directiveAsts;\n    };\n    /**\n     * @param {?} directiveProperties\n     * @param {?} boundProps\n     * @param {?} targetBoundDirectiveProps\n     * @param {?} targetBoundDirectivePropNames\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._createDirectivePropertyAsts = /**\n     * @param {?} directiveProperties\n     * @param {?} boundProps\n     * @param {?} targetBoundDirectiveProps\n     * @param {?} targetBoundDirectivePropNames\n     * @return {?}\n     */\n    function (directiveProperties, boundProps, targetBoundDirectiveProps, targetBoundDirectivePropNames) {\n        if (directiveProperties) {\n            var /** @type {?} */ boundPropsByName_1 = new Map();\n            boundProps.forEach(function (boundProp) {\n                var /** @type {?} */ prevValue = boundPropsByName_1.get(boundProp.name);\n                if (!prevValue || prevValue.isLiteral) {\n                    // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\n                    // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\n                    boundPropsByName_1.set(boundProp.name, boundProp);\n                }\n            });\n            Object.keys(directiveProperties).forEach(function (dirProp) {\n                var /** @type {?} */ elProp = directiveProperties[dirProp];\n                var /** @type {?} */ boundProp = boundPropsByName_1.get(elProp);\n                // Bindings are optional, so this binding only needs to be set up if an expression is given.\n                if (boundProp) {\n                    targetBoundDirectivePropNames.add(boundProp.name);\n                    if (!isEmptyExpression(boundProp.expression)) {\n                        targetBoundDirectiveProps.push(new t.BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * @param {?} elementName\n     * @param {?} props\n     * @param {?} boundDirectivePropNames\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._createElementPropertyAsts = /**\n     * @param {?} elementName\n     * @param {?} props\n     * @param {?} boundDirectivePropNames\n     * @return {?}\n     */\n    function (elementName, props, boundDirectivePropNames) {\n        var _this = this;\n        var /** @type {?} */ boundElementProps = [];\n        props.forEach(function (prop) {\n            if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {\n                var /** @type {?} */ boundProp = _this._bindingParser.createBoundElementProperty(elementName, prop);\n                boundElementProps.push(t.BoundElementPropertyAst.fromBoundProperty(boundProp));\n            }\n        });\n        return this._checkPropertiesInSchema(elementName, boundElementProps);\n    };\n    /**\n     * @param {?} directives\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._findComponentDirectives = /**\n     * @param {?} directives\n     * @return {?}\n     */\n    function (directives) {\n        return directives.filter(function (directive) { return directive.directive.isComponent; });\n    };\n    /**\n     * @param {?} directives\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._findComponentDirectiveNames = /**\n     * @param {?} directives\n     * @return {?}\n     */\n    function (directives) {\n        return this._findComponentDirectives(directives)\n            .map(function (directive) { return ((identifierName(directive.directive.type))); });\n    };\n    /**\n     * @param {?} directives\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._assertOnlyOneComponent = /**\n     * @param {?} directives\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (directives, sourceSpan) {\n        var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);\n        if (componentTypeNames.length > 1) {\n            this._reportError(\"More than one component matched on this element.\\n\" +\n                \"Make sure that only one component's selector can match a given element.\\n\" +\n                (\"Conflicting components: \" + componentTypeNames.join(',')), sourceSpan);\n        }\n    };\n    /**\n     * Make sure that non-angular tags conform to the schemas.\n     *\n     * Note: An element is considered an angular tag when at least one directive selector matches the\n     * tag name.\n     *\n     * @param {?} matchElement Whether any directive has matched on the tag name\n     * @param {?} element the html element\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._assertElementExists = /**\n     * Make sure that non-angular tags conform to the schemas.\n     *\n     * Note: An element is considered an angular tag when at least one directive selector matches the\n     * tag name.\n     *\n     * @param {?} matchElement Whether any directive has matched on the tag name\n     * @param {?} element the html element\n     * @return {?}\n     */\n    function (matchElement, element) {\n        var /** @type {?} */ elName = element.name.replace(/^:xhtml:/, '');\n        if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {\n            var /** @type {?} */ errorMsg = \"'\" + elName + \"' is not a known element:\\n\";\n            errorMsg +=\n                \"1. If '\" + elName + \"' is an Angular component, then verify that it is part of this module.\\n\";\n            if (elName.indexOf('-') > -1) {\n                errorMsg +=\n                    \"2. If '\" + elName + \"' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.\";\n            }\n            else {\n                errorMsg +=\n                    \"2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.\";\n            }\n            this._reportError(errorMsg, /** @type {?} */ ((element.sourceSpan)));\n        }\n    };\n    /**\n     * @param {?} directives\n     * @param {?} elementProps\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = /**\n     * @param {?} directives\n     * @param {?} elementProps\n     * @param {?} sourceSpan\n     * @return {?}\n     */\n    function (directives, elementProps, sourceSpan) {\n        var _this = this;\n        var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);\n        if (componentTypeNames.length > 0) {\n            this._reportError(\"Components on an embedded template: \" + componentTypeNames.join(','), sourceSpan);\n        }\n        elementProps.forEach(function (prop) {\n            _this._reportError(\"Property binding \" + prop.name + \" not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \\\"@NgModule.declarations\\\".\", sourceSpan);\n        });\n    };\n    /**\n     * @param {?} directives\n     * @param {?} events\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = /**\n     * @param {?} directives\n     * @param {?} events\n     * @return {?}\n     */\n    function (directives, events) {\n        var _this = this;\n        var /** @type {?} */ allDirectiveEvents = new Set();\n        directives.forEach(function (directive) {\n            Object.keys(directive.directive.outputs).forEach(function (k) {\n                var /** @type {?} */ eventName = directive.directive.outputs[k];\n                allDirectiveEvents.add(eventName);\n            });\n        });\n        events.forEach(function (event) {\n            if (event.target != null || !allDirectiveEvents.has(event.name)) {\n                _this._reportError(\"Event binding \" + event.fullName + \" not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \\\"@NgModule.declarations\\\".\", event.sourceSpan);\n            }\n        });\n    };\n    /**\n     * @param {?} elementName\n     * @param {?} boundProps\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._checkPropertiesInSchema = /**\n     * @param {?} elementName\n     * @param {?} boundProps\n     * @return {?}\n     */\n    function (elementName, boundProps) {\n        var _this = this;\n        // Note: We can't filter out empty expressions before this method,\n        // as we still want to validate them!\n        return boundProps.filter(function (boundProp) {\n            if (boundProp.type === t.PropertyBindingType.Property &&\n                !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {\n                var /** @type {?} */ errorMsg = \"Can't bind to '\" + boundProp.name + \"' since it isn't a known property of '\" + elementName + \"'.\";\n                if (elementName.startsWith('ng-')) {\n                    errorMsg +=\n                        \"\\n1. If '\" + boundProp.name + \"' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.\" +\n                            \"\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.\";\n                }\n                else if (elementName.indexOf('-') > -1) {\n                    errorMsg +=\n                        \"\\n1. If '\" + elementName + \"' is an Angular component and it has '\" + boundProp.name + \"' input, then verify that it is part of this module.\" +\n                            (\"\\n2. If '\" + elementName + \"' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.\") +\n                            \"\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.\";\n                }\n                _this._reportError(errorMsg, boundProp.sourceSpan);\n            }\n            return !isEmptyExpression(boundProp.value);\n        });\n    };\n    /**\n     * @param {?} message\n     * @param {?} sourceSpan\n     * @param {?=} level\n     * @return {?}\n     */\n    TemplateParseVisitor.prototype._reportError = /**\n     * @param {?} message\n     * @param {?} sourceSpan\n     * @param {?=} level\n     * @return {?}\n     */\n    function (message, sourceSpan, level) {\n        if (level === void 0) { level = ParseErrorLevel.ERROR; }\n        this._targetErrors.push(new ParseError(sourceSpan, message, level));\n    };\n    return TemplateParseVisitor;\n}());\nfunction TemplateParseVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateParseVisitor.prototype.selectorMatcher;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.directivesIndex;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.ngContentCount;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.contentQueryStartId;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.reflector;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.config;\n    /** @type {?} */\n    TemplateParseVisitor.prototype.providerViewContext;\n    /** @type {?} */\n    TemplateParseVisitor.prototype._bindingParser;\n    /** @type {?} */\n    TemplateParseVisitor.prototype._schemaRegistry;\n    /** @type {?} */\n    TemplateParseVisitor.prototype._schemas;\n    /** @type {?} */\n    TemplateParseVisitor.prototype._targetErrors;\n}\nvar NonBindableVisitor = /** @class */ (function () {\n    function NonBindableVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @param {?} parent\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} parent\n     * @return {?}\n     */\n    function (ast, parent) {\n        var /** @type {?} */ preparsedElement = preparseElement(ast);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE ||\n            preparsedElement.type === PreparsedElementType.STYLESHEET) {\n            // Skipping <script> for security reasons\n            // Skipping <style> and stylesheets as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        var /** @type {?} */ attrNameAndValues = ast.attrs.map(function (attr) { return [attr.name, attr.value]; });\n        var /** @type {?} */ selector = createElementCssSelector(ast.name, attrNameAndValues);\n        var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(selector);\n        var /** @type {?} */ children = html.visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);\n        return new t.ElementAst(ast.name, html.visitAll(this, ast.attrs), [], [], [], [], [], false, [], children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);\n    };\n    /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @param {?} context\n     * @return {?}\n     */\n    function (comment, context) { return null; };\n    /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @param {?} context\n     * @return {?}\n     */\n    function (attribute, context) {\n        return new t.AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n    };\n    /**\n     * @param {?} text\n     * @param {?} parent\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @param {?} parent\n     * @return {?}\n     */\n    function (text, parent) {\n        var /** @type {?} */ ngContentIndex = /** @type {?} */ ((parent.findNgContentIndex(TEXT_CSS_SELECTOR)));\n        return new t.TextAst(text.value, ngContentIndex, /** @type {?} */ ((text.sourceSpan)));\n    };\n    /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansion, context) { return expansion; };\n    /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @param {?} context\n     * @return {?}\n     */\n    function (expansionCase, context) { return expansionCase; };\n    return NonBindableVisitor;\n}());\n/**\n * A reference to an element or directive in a template. E.g., the reference in this template:\n *\n * <div #myMenu=\"coolMenu\">\n *\n * would be {name: 'myMenu', value: 'coolMenu', sourceSpan: ...}\n */\nvar /**\n * A reference to an element or directive in a template. E.g., the reference in this template:\n *\n * <div #myMenu=\"coolMenu\">\n *\n * would be {name: 'myMenu', value: 'coolMenu', sourceSpan: ...}\n */\nElementOrDirectiveRef = /** @class */ (function () {\n    function ElementOrDirectiveRef(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /** Gets whether this is a reference to the given directive. */\n    /**\n     * Gets whether this is a reference to the given directive.\n     * @param {?} directive\n     * @return {?}\n     */\n    ElementOrDirectiveRef.prototype.isReferenceToDirective = /**\n     * Gets whether this is a reference to the given directive.\n     * @param {?} directive\n     * @return {?}\n     */\n    function (directive) {\n        return splitExportAs(directive.exportAs).indexOf(this.value) !== -1;\n    };\n    return ElementOrDirectiveRef;\n}());\nfunction ElementOrDirectiveRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementOrDirectiveRef.prototype.name;\n    /** @type {?} */\n    ElementOrDirectiveRef.prototype.value;\n    /** @type {?} */\n    ElementOrDirectiveRef.prototype.sourceSpan;\n}\n/**\n * Splits a raw, potentially comma-delimited `exportAs` value into an array of names.\n * @param {?} exportAs\n * @return {?}\n */\nfunction splitExportAs(exportAs) {\n    return exportAs ? exportAs.split(',').map(function (e) { return e.trim(); }) : [];\n}\n/**\n * @param {?} classAttrValue\n * @return {?}\n */\nexport function splitClasses(classAttrValue) {\n    return classAttrValue.trim().split(/\\s+/g);\n}\nvar ElementContext = /** @class */ (function () {\n    function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {\n        this.isTemplateElement = isTemplateElement;\n        this._ngContentIndexMatcher = _ngContentIndexMatcher;\n        this._wildcardNgContentIndex = _wildcardNgContentIndex;\n        this.providerContext = providerContext;\n    }\n    /**\n     * @param {?} isTemplateElement\n     * @param {?} directives\n     * @param {?} providerContext\n     * @return {?}\n     */\n    ElementContext.create = /**\n     * @param {?} isTemplateElement\n     * @param {?} directives\n     * @param {?} providerContext\n     * @return {?}\n     */\n    function (isTemplateElement, directives, providerContext) {\n        var /** @type {?} */ matcher = new SelectorMatcher();\n        var /** @type {?} */ wildcardNgContentIndex = /** @type {?} */ ((null));\n        var /** @type {?} */ component = directives.find(function (directive) { return directive.directive.isComponent; });\n        if (component) {\n            var /** @type {?} */ ngContentSelectors = /** @type {?} */ ((component.directive.template)).ngContentSelectors;\n            for (var /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {\n                var /** @type {?} */ selector = ngContentSelectors[i];\n                if (selector === '*') {\n                    wildcardNgContentIndex = i;\n                }\n                else {\n                    matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);\n                }\n            }\n        }\n        return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);\n    };\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    ElementContext.prototype.findNgContentIndex = /**\n     * @param {?} selector\n     * @return {?}\n     */\n    function (selector) {\n        var /** @type {?} */ ngContentIndices = [];\n        this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });\n        ngContentIndices.sort();\n        if (this._wildcardNgContentIndex != null) {\n            ngContentIndices.push(this._wildcardNgContentIndex);\n        }\n        return ngContentIndices.length > 0 ? ngContentIndices[0] : null;\n    };\n    return ElementContext;\n}());\nfunction ElementContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ElementContext.prototype.isTemplateElement;\n    /** @type {?} */\n    ElementContext.prototype._ngContentIndexMatcher;\n    /** @type {?} */\n    ElementContext.prototype._wildcardNgContentIndex;\n    /** @type {?} */\n    ElementContext.prototype.providerContext;\n}\n/**\n * @param {?} elementName\n * @param {?} attributes\n * @return {?}\n */\nexport function createElementCssSelector(elementName, attributes) {\n    var /** @type {?} */ cssSelector = new CssSelector();\n    var /** @type {?} */ elNameNoNs = splitNsName(elementName)[1];\n    cssSelector.setElement(elNameNoNs);\n    for (var /** @type {?} */ i = 0; i < attributes.length; i++) {\n        var /** @type {?} */ attrName = attributes[i][0];\n        var /** @type {?} */ attrNameNoNs = splitNsName(attrName)[1];\n        var /** @type {?} */ attrValue = attributes[i][1];\n        cssSelector.addAttribute(attrNameNoNs, attrValue);\n        if (attrName.toLowerCase() == CLASS_ATTR) {\n            var /** @type {?} */ classes = splitClasses(attrValue);\n            classes.forEach(function (className) { return cssSelector.addClassName(className); });\n        }\n    }\n    return cssSelector;\n}\nvar /** @type {?} */ EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);\nvar /** @type {?} */ NON_BINDABLE_VISITOR = new NonBindableVisitor();\n/**\n * @param {?} node\n * @return {?}\n */\nfunction _isEmptyTextNode(node) {\n    return node instanceof html.Text && node.value.trim().length == 0;\n}\n/**\n * @template T\n * @param {?} items\n * @return {?}\n */\nexport function removeSummaryDuplicates(items) {\n    var /** @type {?} */ map = new Map();\n    items.forEach(function (item) {\n        if (!map.get(item.type.reference)) {\n            map.set(item.type.reference, item);\n        }\n    });\n    return Array.from(map.values());\n}\n/**\n * @param {?} ast\n * @return {?}\n */\nfunction isEmptyExpression(ast) {\n    if (ast instanceof ASTWithSource) {\n        ast = ast.ast;\n    }\n    return ast instanceof EmptyExpr;\n}\n//# sourceMappingURL=template_parser.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as cdAst from '../expression_parser/ast';\nimport { Identifiers } from '../identifiers';\nimport * as o from '../output/output_ast';\nvar EventHandlerVars = /** @class */ (function () {\n    function EventHandlerVars() {\n    }\n    EventHandlerVars.event = o.variable('$event');\n    return EventHandlerVars;\n}());\nexport { EventHandlerVars };\nfunction EventHandlerVars_tsickle_Closure_declarations() {\n    /** @type {?} */\n    EventHandlerVars.event;\n}\n/**\n * @record\n */\nexport function LocalResolver() { }\nfunction LocalResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LocalResolver.prototype.getLocal;\n}\nvar ConvertActionBindingResult = /** @class */ (function () {\n    function ConvertActionBindingResult(stmts, allowDefault) {\n        this.stmts = stmts;\n        this.allowDefault = allowDefault;\n        /**\n             * This is bit of a hack. It converts statements which render2 expects to statements which are\n             * expected by render3.\n             *\n             * Example: `<div click=\"doSomething($event)\">` will generate:\n             *\n             * Render3:\n             * ```\n             * const pd_b:any = ((<any>ctx.doSomething($event)) !== false);\n             * return pd_b;\n             * ```\n             *\n             * but render2 expects:\n             * ```\n             * return ctx.doSomething($event);\n             * ```\n             */\n        // TODO(misko): remove this hack once we no longer support ViewEngine.\n        this.render3Stmts = stmts.map(function (statement) {\n            if (statement instanceof o.DeclareVarStmt && statement.name == allowDefault.name &&\n                statement.value instanceof o.BinaryOperatorExpr) {\n                var /** @type {?} */ lhs = /** @type {?} */ (statement.value.lhs);\n                return new o.ReturnStatement(lhs.value);\n            }\n            return statement;\n        });\n    }\n    return ConvertActionBindingResult;\n}());\nexport { ConvertActionBindingResult };\nfunction ConvertActionBindingResult_tsickle_Closure_declarations() {\n    /**\n     * Store statements which are render3 compatible.\n     * @type {?}\n     */\n    ConvertActionBindingResult.prototype.render3Stmts;\n    /**\n     * Render2 compatible statements,\n     * @type {?}\n     */\n    ConvertActionBindingResult.prototype.stmts;\n    /**\n     * Variable name used with render2 compatible statements.\n     * @type {?}\n     */\n    ConvertActionBindingResult.prototype.allowDefault;\n}\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression is\n * used in an action binding (e.g. an event handler).\n * @param {?} localResolver\n * @param {?} implicitReceiver\n * @param {?} action\n * @param {?} bindingId\n * @param {?=} interpolationFunction\n * @return {?}\n */\nexport function convertActionBinding(localResolver, implicitReceiver, action, bindingId, interpolationFunction) {\n    if (!localResolver) {\n        localResolver = new DefaultLocalResolver();\n    }\n    var /** @type {?} */ actionWithoutBuiltins = convertPropertyBindingBuiltins({\n        createLiteralArrayConverter: function (argCount) {\n            // Note: no caching for literal arrays in actions.\n            return function (args) { return o.literalArr(args); };\n        },\n        createLiteralMapConverter: function (keys) {\n            // Note: no caching for literal maps in actions.\n            return function (values) {\n                var /** @type {?} */ entries = keys.map(function (k, i) {\n                    return ({\n                        key: k.key,\n                        value: values[i],\n                        quoted: k.quoted,\n                    });\n                });\n                return o.literalMap(entries);\n            };\n        },\n        createPipeConverter: function (name) {\n            throw new Error(\"Illegal State: Actions are not allowed to contain pipes. Pipe: \" + name);\n        }\n    }, action);\n    var /** @type {?} */ visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction);\n    var /** @type {?} */ actionStmts = [];\n    flattenStatements(actionWithoutBuiltins.visit(visitor, _Mode.Statement), actionStmts);\n    prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);\n    var /** @type {?} */ lastIndex = actionStmts.length - 1;\n    var /** @type {?} */ preventDefaultVar = /** @type {?} */ ((null));\n    if (lastIndex >= 0) {\n        var /** @type {?} */ lastStatement = actionStmts[lastIndex];\n        var /** @type {?} */ returnExpr = convertStmtIntoExpression(lastStatement);\n        if (returnExpr) {\n            // Note: We need to cast the result of the method call to dynamic,\n            // as it might be a void method!\n            preventDefaultVar = createPreventDefaultVar(bindingId);\n            actionStmts[lastIndex] =\n                preventDefaultVar.set(returnExpr.cast(o.DYNAMIC_TYPE).notIdentical(o.literal(false)))\n                    .toDeclStmt(null, [o.StmtModifier.Final]);\n        }\n    }\n    return new ConvertActionBindingResult(actionStmts, preventDefaultVar);\n}\n/**\n * @record\n */\nexport function BuiltinConverter() { }\nfunction BuiltinConverter_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (args: o.Expression[]): o.Expression;\n    */\n}\n/**\n * @record\n */\nexport function BuiltinConverterFactory() { }\nfunction BuiltinConverterFactory_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BuiltinConverterFactory.prototype.createLiteralArrayConverter;\n    /** @type {?} */\n    BuiltinConverterFactory.prototype.createLiteralMapConverter;\n    /** @type {?} */\n    BuiltinConverterFactory.prototype.createPipeConverter;\n}\n/**\n * @param {?} converterFactory\n * @param {?} ast\n * @return {?}\n */\nexport function convertPropertyBindingBuiltins(converterFactory, ast) {\n    return convertBuiltins(converterFactory, ast);\n}\nvar ConvertPropertyBindingResult = /** @class */ (function () {\n    function ConvertPropertyBindingResult(stmts, currValExpr) {\n        this.stmts = stmts;\n        this.currValExpr = currValExpr;\n    }\n    return ConvertPropertyBindingResult;\n}());\nexport { ConvertPropertyBindingResult };\nfunction ConvertPropertyBindingResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ConvertPropertyBindingResult.prototype.stmts;\n    /** @type {?} */\n    ConvertPropertyBindingResult.prototype.currValExpr;\n}\n/** @enum {number} */\nvar BindingForm = {\n    // The general form of binding expression, supports all expressions.\n    General: 0,\n    // Try to generate a simple binding (no temporaries or statements)\n    // otherwise generate a general binding\n    TrySimple: 1,\n};\nexport { BindingForm };\nBindingForm[BindingForm.General] = \"General\";\nBindingForm[BindingForm.TrySimple] = \"TrySimple\";\n/**\n * Converts the given expression AST into an executable output AST, assuming the expression\n * is used in property binding. The expression has to be preprocessed via\n * `convertPropertyBindingBuiltins`.\n * @param {?} localResolver\n * @param {?} implicitReceiver\n * @param {?} expressionWithoutBuiltins\n * @param {?} bindingId\n * @param {?} form\n * @param {?=} interpolationFunction\n * @return {?}\n */\nexport function convertPropertyBinding(localResolver, implicitReceiver, expressionWithoutBuiltins, bindingId, form, interpolationFunction) {\n    if (!localResolver) {\n        localResolver = new DefaultLocalResolver();\n    }\n    var /** @type {?} */ currValExpr = createCurrValueExpr(bindingId);\n    var /** @type {?} */ stmts = [];\n    var /** @type {?} */ visitor = new _AstToIrVisitor(localResolver, implicitReceiver, bindingId, interpolationFunction);\n    var /** @type {?} */ outputExpr = expressionWithoutBuiltins.visit(visitor, _Mode.Expression);\n    if (visitor.temporaryCount) {\n        for (var /** @type {?} */ i = 0; i < visitor.temporaryCount; i++) {\n            stmts.push(temporaryDeclaration(bindingId, i));\n        }\n    }\n    else if (form == BindingForm.TrySimple) {\n        return new ConvertPropertyBindingResult([], outputExpr);\n    }\n    stmts.push(currValExpr.set(outputExpr).toDeclStmt(o.DYNAMIC_TYPE, [o.StmtModifier.Final]));\n    return new ConvertPropertyBindingResult(stmts, currValExpr);\n}\n/**\n * @param {?} converterFactory\n * @param {?} ast\n * @return {?}\n */\nfunction convertBuiltins(converterFactory, ast) {\n    var /** @type {?} */ visitor = new _BuiltinAstConverter(converterFactory);\n    return ast.visit(visitor);\n}\n/**\n * @param {?} bindingId\n * @param {?} temporaryNumber\n * @return {?}\n */\nfunction temporaryName(bindingId, temporaryNumber) {\n    return \"tmp_\" + bindingId + \"_\" + temporaryNumber;\n}\n/**\n * @param {?} bindingId\n * @param {?} temporaryNumber\n * @return {?}\n */\nexport function temporaryDeclaration(bindingId, temporaryNumber) {\n    return new o.DeclareVarStmt(temporaryName(bindingId, temporaryNumber), o.NULL_EXPR);\n}\n/**\n * @param {?} temporaryCount\n * @param {?} bindingId\n * @param {?} statements\n * @return {?}\n */\nfunction prependTemporaryDecls(temporaryCount, bindingId, statements) {\n    for (var /** @type {?} */ i = temporaryCount - 1; i >= 0; i--) {\n        statements.unshift(temporaryDeclaration(bindingId, i));\n    }\n}\n/** @enum {number} */\nvar _Mode = {\n    Statement: 0,\n    Expression: 1,\n};\n_Mode[_Mode.Statement] = \"Statement\";\n_Mode[_Mode.Expression] = \"Expression\";\n/**\n * @param {?} mode\n * @param {?} ast\n * @return {?}\n */\nfunction ensureStatementMode(mode, ast) {\n    if (mode !== _Mode.Statement) {\n        throw new Error(\"Expected a statement, but saw \" + ast);\n    }\n}\n/**\n * @param {?} mode\n * @param {?} ast\n * @return {?}\n */\nfunction ensureExpressionMode(mode, ast) {\n    if (mode !== _Mode.Expression) {\n        throw new Error(\"Expected an expression, but saw \" + ast);\n    }\n}\n/**\n * @param {?} mode\n * @param {?} expr\n * @return {?}\n */\nfunction convertToStatementIfNeeded(mode, expr) {\n    if (mode === _Mode.Statement) {\n        return expr.toStmt();\n    }\n    else {\n        return expr;\n    }\n}\nvar _BuiltinAstConverter = /** @class */ (function (_super) {\n    tslib_1.__extends(_BuiltinAstConverter, _super);\n    function _BuiltinAstConverter(_converterFactory) {\n        var _this = _super.call(this) || this;\n        _this._converterFactory = _converterFactory;\n        return _this;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _BuiltinAstConverter.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ args = [ast.exp].concat(ast.args).map(function (ast) { return ast.visit(_this, context); });\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createPipeConverter(ast.name, args.length));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _BuiltinAstConverter.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ args = ast.expressions.map(function (ast) { return ast.visit(_this, context); });\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralArrayConverter(ast.expressions.length));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    _BuiltinAstConverter.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ args = ast.values.map(function (ast) { return ast.visit(_this, context); });\n        return new BuiltinFunctionCall(ast.span, args, this._converterFactory.createLiteralMapConverter(ast.keys));\n    };\n    return _BuiltinAstConverter;\n}(cdAst.AstTransformer));\nfunction _BuiltinAstConverter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _BuiltinAstConverter.prototype._converterFactory;\n}\nvar _AstToIrVisitor = /** @class */ (function () {\n    function _AstToIrVisitor(_localResolver, _implicitReceiver, bindingId, interpolationFunction) {\n        this._localResolver = _localResolver;\n        this._implicitReceiver = _implicitReceiver;\n        this.bindingId = bindingId;\n        this.interpolationFunction = interpolationFunction;\n        this._nodeMap = new Map();\n        this._resultMap = new Map();\n        this._currentTemporary = 0;\n        this.temporaryCount = 0;\n    }\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitBinary = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ op;\n        switch (ast.operation) {\n            case '+':\n                op = o.BinaryOperator.Plus;\n                break;\n            case '-':\n                op = o.BinaryOperator.Minus;\n                break;\n            case '*':\n                op = o.BinaryOperator.Multiply;\n                break;\n            case '/':\n                op = o.BinaryOperator.Divide;\n                break;\n            case '%':\n                op = o.BinaryOperator.Modulo;\n                break;\n            case '&&':\n                op = o.BinaryOperator.And;\n                break;\n            case '||':\n                op = o.BinaryOperator.Or;\n                break;\n            case '==':\n                op = o.BinaryOperator.Equals;\n                break;\n            case '!=':\n                op = o.BinaryOperator.NotEquals;\n                break;\n            case '===':\n                op = o.BinaryOperator.Identical;\n                break;\n            case '!==':\n                op = o.BinaryOperator.NotIdentical;\n                break;\n            case '<':\n                op = o.BinaryOperator.Lower;\n                break;\n            case '>':\n                op = o.BinaryOperator.Bigger;\n                break;\n            case '<=':\n                op = o.BinaryOperator.LowerEquals;\n                break;\n            case '>=':\n                op = o.BinaryOperator.BiggerEquals;\n                break;\n            default:\n                throw new Error(\"Unsupported operation \" + ast.operation);\n        }\n        return convertToStatementIfNeeded(mode, new o.BinaryOperatorExpr(op, this._visit(ast.left, _Mode.Expression), this._visit(ast.right, _Mode.Expression)));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitChain = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        ensureStatementMode(mode, ast);\n        return this.visitAll(ast.expressions, mode);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitConditional = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ value = this._visit(ast.condition, _Mode.Expression);\n        return convertToStatementIfNeeded(mode, value.conditional(this._visit(ast.trueExp, _Mode.Expression), this._visit(ast.falseExp, _Mode.Expression)));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitPipe = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        throw new Error(\"Illegal state: Pipes should have been converted into functions. Pipe: \" + ast.name);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitFunctionCall = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ convertedArgs = this.visitAll(ast.args, _Mode.Expression);\n        var /** @type {?} */ fnResult;\n        if (ast instanceof BuiltinFunctionCall) {\n            fnResult = ast.converter(convertedArgs);\n        }\n        else {\n            fnResult = this._visit(/** @type {?} */ ((ast.target)), _Mode.Expression).callFn(convertedArgs);\n        }\n        return convertToStatementIfNeeded(mode, fnResult);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitImplicitReceiver = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        ensureExpressionMode(mode, ast);\n        return this._implicitReceiver;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitInterpolation = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        ensureExpressionMode(mode, ast);\n        var /** @type {?} */ args = [o.literal(ast.expressions.length)];\n        for (var /** @type {?} */ i = 0; i < ast.strings.length - 1; i++) {\n            args.push(o.literal(ast.strings[i]));\n            args.push(this._visit(ast.expressions[i], _Mode.Expression));\n        }\n        args.push(o.literal(ast.strings[ast.strings.length - 1]));\n        if (this.interpolationFunction) {\n            return this.interpolationFunction(args);\n        }\n        return ast.expressions.length <= 9 ?\n            o.importExpr(Identifiers.inlineInterpolate).callFn(args) :\n            o.importExpr(Identifiers.interpolate).callFn([args[0], o.literalArr(args.slice(1))]);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitKeyedRead = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            return convertToStatementIfNeeded(mode, this._visit(ast.obj, _Mode.Expression).key(this._visit(ast.key, _Mode.Expression)));\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitKeyedWrite = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ obj = this._visit(ast.obj, _Mode.Expression);\n        var /** @type {?} */ key = this._visit(ast.key, _Mode.Expression);\n        var /** @type {?} */ value = this._visit(ast.value, _Mode.Expression);\n        return convertToStatementIfNeeded(mode, obj.key(key).set(value));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitLiteralArray = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        throw new Error(\"Illegal State: literal arrays should have been converted into functions\");\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitLiteralMap = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        throw new Error(\"Illegal State: literal maps should have been converted into functions\");\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitLiteralPrimitive = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        // For literal values of null, undefined, true, or false allow type interference\n        // to infer the type.\n        var /** @type {?} */ type = ast.value === null || ast.value === undefined || ast.value === true || ast.value === true ?\n            o.INFERRED_TYPE :\n            undefined;\n        return convertToStatementIfNeeded(mode, o.literal(ast.value, type));\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype._getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this._localResolver.getLocal(name); };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitMethodCall = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        if (ast.receiver instanceof cdAst.ImplicitReceiver && ast.name == '$any') {\n            var /** @type {?} */ args = /** @type {?} */ (this.visitAll(ast.args, _Mode.Expression));\n            if (args.length != 1) {\n                throw new Error(\"Invalid call to $any, expected 1 argument but received \" + (args.length || 'none'));\n            }\n            return (/** @type {?} */ (args[0])).cast(o.DYNAMIC_TYPE);\n        }\n        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);\n            var /** @type {?} */ result = null;\n            var /** @type {?} */ receiver = this._visit(ast.receiver, _Mode.Expression);\n            if (receiver === this._implicitReceiver) {\n                var /** @type {?} */ varExpr = this._getLocal(ast.name);\n                if (varExpr) {\n                    result = varExpr.callFn(args);\n                }\n            }\n            if (result == null) {\n                result = receiver.callMethod(ast.name, args);\n            }\n            return convertToStatementIfNeeded(mode, result);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitPrefixNot = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        return convertToStatementIfNeeded(mode, o.not(this._visit(ast.expression, _Mode.Expression)));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitNonNullAssert = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        return convertToStatementIfNeeded(mode, o.assertNotNull(this._visit(ast.expression, _Mode.Expression)));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitPropertyRead = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);\n        if (leftMostSafe) {\n            return this.convertSafeAccess(ast, leftMostSafe, mode);\n        }\n        else {\n            var /** @type {?} */ result = null;\n            var /** @type {?} */ receiver = this._visit(ast.receiver, _Mode.Expression);\n            if (receiver === this._implicitReceiver) {\n                result = this._getLocal(ast.name);\n            }\n            if (result == null) {\n                result = receiver.prop(ast.name);\n            }\n            return convertToStatementIfNeeded(mode, result);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitPropertyWrite = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ receiver = this._visit(ast.receiver, _Mode.Expression);\n        if (receiver === this._implicitReceiver) {\n            var /** @type {?} */ varExpr = this._getLocal(ast.name);\n            if (varExpr) {\n                throw new Error('Cannot assign to a reference or variable!');\n            }\n        }\n        return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this._visit(ast.value, _Mode.Expression)));\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitSafePropertyRead = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitSafeMethodCall = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);\n    };\n    /**\n     * @param {?} asts\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitAll = /**\n     * @param {?} asts\n     * @param {?} mode\n     * @return {?}\n     */\n    function (asts, mode) {\n        var _this = this;\n        return asts.map(function (ast) { return _this._visit(ast, mode); });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.visitQuote = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        throw new Error(\"Quotes are not supported for evaluation!\\n        Statement: \" + ast.uninterpretedExpression + \" located at \" + ast.location);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype._visit = /**\n     * @param {?} ast\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, mode) {\n        var /** @type {?} */ result = this._resultMap.get(ast);\n        if (result)\n            return result;\n        return (this._nodeMap.get(ast) || ast).visit(this, mode);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} leftMostSafe\n     * @param {?} mode\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.convertSafeAccess = /**\n     * @param {?} ast\n     * @param {?} leftMostSafe\n     * @param {?} mode\n     * @return {?}\n     */\n    function (ast, leftMostSafe, mode) {\n        // If the expression contains a safe access node on the left it needs to be converted to\n        // an expression that guards the access to the member by checking the receiver for blank. As\n        // execution proceeds from left to right, the left most part of the expression must be guarded\n        // first but, because member access is left associative, the right side of the expression is at\n        // the top of the AST. The desired result requires lifting a copy of the the left part of the\n        // expression up to test it for blank before generating the unguarded version.\n        // Consider, for example the following expression: a?.b.c?.d.e\n        // This results in the ast:\n        //         .\n        //        / \\\n        //       ?.   e\n        //      /  \\\n        //     .    d\n        //    / \\\n        //   ?.  c\n        //  /  \\\n        // a    b\n        // The following tree should be generated:\n        //\n        //        /---- ? ----\\\n        //       /      |      \\\n        //     a   /--- ? ---\\  null\n        //        /     |     \\\n        //       .      .     null\n        //      / \\    / \\\n        //     .  c   .   e\n        //    / \\    / \\\n        //   a   b  ,   d\n        //         / \\\n        //        .   c\n        //       / \\\n        //      a   b\n        //\n        // Notice that the first guard condition is the left hand of the left most safe access node\n        // which comes in as leftMostSafe to this routine.\n        var /** @type {?} */ guardedExpression = this._visit(leftMostSafe.receiver, _Mode.Expression);\n        var /** @type {?} */ temporary = /** @type {?} */ ((undefined));\n        if (this.needsTemporary(leftMostSafe.receiver)) {\n            // If the expression has method calls or pipes then we need to save the result into a\n            // temporary variable to avoid calling stateful or impure code more than once.\n            temporary = this.allocateTemporary();\n            // Preserve the result in the temporary variable\n            guardedExpression = temporary.set(guardedExpression);\n            // Ensure all further references to the guarded expression refer to the temporary instead.\n            this._resultMap.set(leftMostSafe.receiver, temporary);\n        }\n        var /** @type {?} */ condition = guardedExpression.isBlank();\n        // Convert the ast to an unguarded access to the receiver's member. The map will substitute\n        // leftMostNode with its unguarded version in the call to `this.visit()`.\n        if (leftMostSafe instanceof cdAst.SafeMethodCall) {\n            this._nodeMap.set(leftMostSafe, new cdAst.MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));\n        }\n        else {\n            this._nodeMap.set(leftMostSafe, new cdAst.PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));\n        }\n        // Recursively convert the node now without the guarded member access.\n        var /** @type {?} */ access = this._visit(ast, _Mode.Expression);\n        // Remove the mapping. This is not strictly required as the converter only traverses each node\n        // once but is safer if the conversion is changed to traverse the nodes more than once.\n        this._nodeMap.delete(leftMostSafe);\n        // If we allocated a temporary, release it.\n        if (temporary) {\n            this.releaseTemporary(temporary);\n        }\n        // Produce the conditional\n        return convertToStatementIfNeeded(mode, condition.conditional(o.literal(null), access));\n    };\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.leftMostSafeNode = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var _this = this;\n        var /** @type {?} */ visit = function (visitor, ast) {\n            return (_this._nodeMap.get(ast) || ast).visit(visitor);\n        };\n        return ast.visit({\n            visitBinary: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitChain: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitConditional: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitFunctionCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitImplicitReceiver: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitInterpolation: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitKeyedRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.obj); },\n            visitKeyedWrite: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitLiteralArray: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitLiteralMap: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitLiteralPrimitive: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitMethodCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.receiver); },\n            visitPipe: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitPrefixNot: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitNonNullAssert: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitPropertyRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.receiver); },\n            visitPropertyWrite: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitQuote: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return null; },\n            visitSafeMethodCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.receiver) || ast; },\n            visitSafePropertyRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) {\n                return visit(this, ast.receiver) || ast;\n            }\n        });\n    };\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.needsTemporary = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var _this = this;\n        var /** @type {?} */ visit = function (visitor, ast) {\n            return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);\n        };\n        var /** @type {?} */ visitSome = function (visitor, ast) {\n            return ast.some(function (ast) { return visit(visitor, ast); });\n        };\n        return ast.visit({\n            visitBinary: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.left) || visit(this, ast.right); },\n            visitChain: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitConditional: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) {\n                return visit(this, ast.condition) || visit(this, ast.trueExp) ||\n                    visit(this, ast.falseExp);\n            },\n            visitFunctionCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitImplicitReceiver: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitInterpolation: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visitSome(this, ast.expressions); },\n            visitKeyedRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitKeyedWrite: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitLiteralArray: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitLiteralMap: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitLiteralPrimitive: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitMethodCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitPipe: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitPrefixNot: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.expression); },\n            visitNonNullAssert: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return visit(this, ast.expression); },\n            visitPropertyRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitPropertyWrite: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitQuote: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; },\n            visitSafeMethodCall: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return true; },\n            visitSafePropertyRead: /**\n             * @param {?} ast\n             * @return {?}\n             */\n            function (ast) { return false; }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.allocateTemporary = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ tempNumber = this._currentTemporary++;\n        this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);\n        return new o.ReadVarExpr(temporaryName(this.bindingId, tempNumber));\n    };\n    /**\n     * @param {?} temporary\n     * @return {?}\n     */\n    _AstToIrVisitor.prototype.releaseTemporary = /**\n     * @param {?} temporary\n     * @return {?}\n     */\n    function (temporary) {\n        this._currentTemporary--;\n        if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {\n            throw new Error(\"Temporary \" + temporary.name + \" released out of order\");\n        }\n    };\n    return _AstToIrVisitor;\n}());\nfunction _AstToIrVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _AstToIrVisitor.prototype._nodeMap;\n    /** @type {?} */\n    _AstToIrVisitor.prototype._resultMap;\n    /** @type {?} */\n    _AstToIrVisitor.prototype._currentTemporary;\n    /** @type {?} */\n    _AstToIrVisitor.prototype.temporaryCount;\n    /** @type {?} */\n    _AstToIrVisitor.prototype._localResolver;\n    /** @type {?} */\n    _AstToIrVisitor.prototype._implicitReceiver;\n    /** @type {?} */\n    _AstToIrVisitor.prototype.bindingId;\n    /** @type {?} */\n    _AstToIrVisitor.prototype.interpolationFunction;\n}\n/**\n * @param {?} arg\n * @param {?} output\n * @return {?}\n */\nfunction flattenStatements(arg, output) {\n    if (Array.isArray(arg)) {\n        (/** @type {?} */ (arg)).forEach(function (entry) { return flattenStatements(entry, output); });\n    }\n    else {\n        output.push(arg);\n    }\n}\nvar DefaultLocalResolver = /** @class */ (function () {\n    function DefaultLocalResolver() {\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    DefaultLocalResolver.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name === EventHandlerVars.event.name) {\n            return EventHandlerVars.event;\n        }\n        return null;\n    };\n    return DefaultLocalResolver;\n}());\n/**\n * @param {?} bindingId\n * @return {?}\n */\nfunction createCurrValueExpr(bindingId) {\n    return o.variable(\"currVal_\" + bindingId); // fix syntax highlighting: `\n}\n/**\n * @param {?} bindingId\n * @return {?}\n */\nfunction createPreventDefaultVar(bindingId) {\n    return o.variable(\"pd_\" + bindingId);\n}\n/**\n * @param {?} stmt\n * @return {?}\n */\nfunction convertStmtIntoExpression(stmt) {\n    if (stmt instanceof o.ExpressionStatement) {\n        return stmt.expr;\n    }\n    else if (stmt instanceof o.ReturnStatement) {\n        return stmt.value;\n    }\n    return null;\n}\nvar BuiltinFunctionCall = /** @class */ (function (_super) {\n    tslib_1.__extends(BuiltinFunctionCall, _super);\n    function BuiltinFunctionCall(span, args, converter) {\n        var _this = _super.call(this, span, null, args) || this;\n        _this.args = args;\n        _this.converter = converter;\n        return _this;\n    }\n    return BuiltinFunctionCall;\n}(cdAst.FunctionCall));\nexport { BuiltinFunctionCall };\nfunction BuiltinFunctionCall_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BuiltinFunctionCall.prototype.args;\n    /** @type {?} */\n    BuiltinFunctionCall.prototype.converter;\n}\n//# sourceMappingURL=expression_converter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticSymbol } from '../aot/static_symbol';\nimport { BindingForm, EventHandlerVars, convertActionBinding, convertPropertyBinding, convertPropertyBindingBuiltins } from '../compiler_util/expression_converter';\nimport * as o from '../output/output_ast';\nimport { templateVisitAll } from '../template_parser/template_ast';\n/**\n * Generates code that is used to type check templates.\n */\nvar /**\n * Generates code that is used to type check templates.\n */\nTypeCheckCompiler = /** @class */ (function () {\n    function TypeCheckCompiler(options, reflector) {\n        this.options = options;\n        this.reflector = reflector;\n    }\n    /**\n     * Important notes:\n     * - This must not produce new `import` statements, but only refer to types outside\n     *   of the file via the variables provided via externalReferenceVars.\n     *   This allows Typescript to reuse the old program's structure as no imports have changed.\n     * - This must not produce any exports, as this would pollute the .d.ts file\n     *   and also violate the point above.\n     */\n    /**\n     * Important notes:\n     * - This must not produce new `import` statements, but only refer to types outside\n     *   of the file via the variables provided via externalReferenceVars.\n     *   This allows Typescript to reuse the old program's structure as no imports have changed.\n     * - This must not produce any exports, as this would pollute the .d.ts file\n     *   and also violate the point above.\n     * @param {?} componentId\n     * @param {?} component\n     * @param {?} template\n     * @param {?} usedPipes\n     * @param {?} externalReferenceVars\n     * @param {?} ctx\n     * @return {?}\n     */\n    TypeCheckCompiler.prototype.compileComponent = /**\n     * Important notes:\n     * - This must not produce new `import` statements, but only refer to types outside\n     *   of the file via the variables provided via externalReferenceVars.\n     *   This allows Typescript to reuse the old program's structure as no imports have changed.\n     * - This must not produce any exports, as this would pollute the .d.ts file\n     *   and also violate the point above.\n     * @param {?} componentId\n     * @param {?} component\n     * @param {?} template\n     * @param {?} usedPipes\n     * @param {?} externalReferenceVars\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (componentId, component, template, usedPipes, externalReferenceVars, ctx) {\n        var _this = this;\n        var /** @type {?} */ pipes = new Map();\n        usedPipes.forEach(function (p) { return pipes.set(p.name, p.type.reference); });\n        var /** @type {?} */ embeddedViewCount = 0;\n        var /** @type {?} */ viewBuilderFactory = function (parent, guards) {\n            var /** @type {?} */ embeddedViewIndex = embeddedViewCount++;\n            return new ViewBuilder(_this.options, _this.reflector, externalReferenceVars, parent, component.type.reference, component.isHost, embeddedViewIndex, pipes, guards, ctx, viewBuilderFactory);\n        };\n        var /** @type {?} */ visitor = viewBuilderFactory(null, []);\n        visitor.visitAll([], template);\n        return visitor.build(componentId);\n    };\n    return TypeCheckCompiler;\n}());\n/**\n * Generates code that is used to type check templates.\n */\nexport { TypeCheckCompiler };\nfunction TypeCheckCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TypeCheckCompiler.prototype.options;\n    /** @type {?} */\n    TypeCheckCompiler.prototype.reflector;\n}\n/**\n * @record\n */\nfunction GuardExpression() { }\nfunction GuardExpression_tsickle_Closure_declarations() {\n    /** @type {?} */\n    GuardExpression.prototype.guard;\n    /** @type {?} */\n    GuardExpression.prototype.useIf;\n    /** @type {?} */\n    GuardExpression.prototype.expression;\n}\n/**\n * @record\n */\nfunction ViewBuilderFactory() { }\nfunction ViewBuilderFactory_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (parent: ViewBuilder, guards: GuardExpression[]): ViewBuilder;\n    */\n}\n/**\n * @record\n */\nfunction Expression() { }\nfunction Expression_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Expression.prototype.context;\n    /** @type {?} */\n    Expression.prototype.sourceSpan;\n    /** @type {?} */\n    Expression.prototype.value;\n}\nvar /** @type {?} */ DYNAMIC_VAR_NAME = '_any';\nvar TypeCheckLocalResolver = /** @class */ (function () {\n    function TypeCheckLocalResolver() {\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    TypeCheckLocalResolver.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name === EventHandlerVars.event.name) {\n            // References to the event should not be type-checked.\n            // TODO(chuckj): determine a better type for the event.\n            return o.variable(DYNAMIC_VAR_NAME);\n        }\n        return null;\n    };\n    return TypeCheckLocalResolver;\n}());\nvar /** @type {?} */ defaultResolver = new TypeCheckLocalResolver();\nvar ViewBuilder = /** @class */ (function () {\n    function ViewBuilder(options, reflector, externalReferenceVars, parent, component, isHostComponent, embeddedViewIndex, pipes, guards, ctx, viewBuilderFactory) {\n        this.options = options;\n        this.reflector = reflector;\n        this.externalReferenceVars = externalReferenceVars;\n        this.parent = parent;\n        this.component = component;\n        this.isHostComponent = isHostComponent;\n        this.embeddedViewIndex = embeddedViewIndex;\n        this.pipes = pipes;\n        this.guards = guards;\n        this.ctx = ctx;\n        this.viewBuilderFactory = viewBuilderFactory;\n        this.refOutputVars = new Map();\n        this.variables = [];\n        this.children = [];\n        this.updates = [];\n        this.actions = [];\n    }\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    ViewBuilder.prototype.getOutputVar = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ varName;\n        if (type === this.component && this.isHostComponent) {\n            varName = DYNAMIC_VAR_NAME;\n        }\n        else if (type instanceof StaticSymbol) {\n            varName = this.externalReferenceVars.get(type);\n        }\n        else {\n            varName = DYNAMIC_VAR_NAME;\n        }\n        if (!varName) {\n            throw new Error(\"Illegal State: referring to a type without a variable \" + JSON.stringify(type));\n        }\n        return varName;\n    };\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    ViewBuilder.prototype.getTypeGuardExpressions = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var /** @type {?} */ result = this.guards.slice();\n        for (var _i = 0, _a = ast.directives; _i < _a.length; _i++) {\n            var directive = _a[_i];\n            for (var _b = 0, _c = directive.inputs; _b < _c.length; _b++) {\n                var input = _c[_b];\n                var /** @type {?} */ guard = directive.directive.guards[input.directiveName];\n                if (guard) {\n                    var /** @type {?} */ useIf = guard === 'UseIf';\n                    result.push({\n                        guard: guard,\n                        useIf: useIf,\n                        expression: /** @type {?} */ ({ context: this.component, value: input.value })\n                    });\n                }\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} variables\n     * @param {?} astNodes\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitAll = /**\n     * @param {?} variables\n     * @param {?} astNodes\n     * @return {?}\n     */\n    function (variables, astNodes) {\n        this.variables = variables;\n        templateVisitAll(this, astNodes);\n    };\n    /**\n     * @param {?} componentId\n     * @param {?=} targetStatements\n     * @return {?}\n     */\n    ViewBuilder.prototype.build = /**\n     * @param {?} componentId\n     * @param {?=} targetStatements\n     * @return {?}\n     */\n    function (componentId, targetStatements) {\n        var _this = this;\n        if (targetStatements === void 0) { targetStatements = []; }\n        this.children.forEach(function (child) { return child.build(componentId, targetStatements); });\n        var /** @type {?} */ viewStmts = [o.variable(DYNAMIC_VAR_NAME).set(o.NULL_EXPR).toDeclStmt(o.DYNAMIC_TYPE)];\n        var /** @type {?} */ bindingCount = 0;\n        this.updates.forEach(function (expression) {\n            var _a = _this.preprocessUpdateExpression(expression), sourceSpan = _a.sourceSpan, context = _a.context, value = _a.value;\n            var /** @type {?} */ bindingId = \"\" + bindingCount++;\n            var /** @type {?} */ nameResolver = context === _this.component ? _this : defaultResolver;\n            var _b = convertPropertyBinding(nameResolver, o.variable(_this.getOutputVar(context)), value, bindingId, BindingForm.General), stmts = _b.stmts, currValExpr = _b.currValExpr;\n            stmts.push(new o.ExpressionStatement(currValExpr));\n            viewStmts.push.apply(viewStmts, stmts.map(function (stmt) { return o.applySourceSpanToStatementIfNeeded(stmt, sourceSpan); }));\n        });\n        this.actions.forEach(function (_a) {\n            var sourceSpan = _a.sourceSpan, context = _a.context, value = _a.value;\n            var /** @type {?} */ bindingId = \"\" + bindingCount++;\n            var /** @type {?} */ nameResolver = context === _this.component ? _this : defaultResolver;\n            var stmts = convertActionBinding(nameResolver, o.variable(_this.getOutputVar(context)), value, bindingId).stmts;\n            viewStmts.push.apply(viewStmts, stmts.map(function (stmt) { return o.applySourceSpanToStatementIfNeeded(stmt, sourceSpan); }));\n        });\n        if (this.guards.length) {\n            var /** @type {?} */ guardExpression = undefined;\n            for (var _i = 0, _a = this.guards; _i < _a.length; _i++) {\n                var guard = _a[_i];\n                var _b = this.preprocessUpdateExpression(guard.expression), context = _b.context, value = _b.value;\n                var /** @type {?} */ bindingId = \"\" + bindingCount++;\n                var /** @type {?} */ nameResolver = context === this.component ? this : defaultResolver;\n                // We only support support simple expressions and ignore others as they\n                // are unlikely to affect type narrowing.\n                var _c = convertPropertyBinding(nameResolver, o.variable(this.getOutputVar(context)), value, bindingId, BindingForm.TrySimple), stmts = _c.stmts, currValExpr = _c.currValExpr;\n                if (stmts.length == 0) {\n                    var /** @type {?} */ guardClause = guard.useIf ? currValExpr : this.ctx.importExpr(guard.guard).callFn([currValExpr]);\n                    guardExpression = guardExpression ? guardExpression.and(guardClause) : guardClause;\n                }\n            }\n            if (guardExpression) {\n                viewStmts = [new o.IfStmt(guardExpression, viewStmts)];\n            }\n        }\n        var /** @type {?} */ viewName = \"_View_\" + componentId + \"_\" + this.embeddedViewIndex;\n        var /** @type {?} */ viewFactory = new o.DeclareFunctionStmt(viewName, [], viewStmts);\n        targetStatements.push(viewFactory);\n        return targetStatements;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitBoundText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ astWithSource = /** @type {?} */ (ast.value);\n        var /** @type {?} */ inter = /** @type {?} */ (astWithSource.ast);\n        inter.expressions.forEach(function (expr) {\n            return _this.updates.push({ context: _this.component, value: expr, sourceSpan: ast.sourceSpan });\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitEmbeddedTemplate = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        this.visitElementOrTemplate(ast);\n        // Note: The old view compiler used to use an `any` type\n        // for the context in any embedded view.\n        // We keep this behaivor behind a flag for now.\n        if (this.options.fullTemplateTypeCheck) {\n            // Find any applicable type guards. For example, NgIf has a type guard on ngIf\n            // (see NgIf.ngIfTypeGuard) that can be used to indicate that a template is only\n            // stamped out if ngIf is truthy so any bindings in the template can assume that,\n            // if a nullable type is used for ngIf, that expression is not null or undefined.\n            var /** @type {?} */ guards = this.getTypeGuardExpressions(ast);\n            var /** @type {?} */ childVisitor = this.viewBuilderFactory(this, guards);\n            this.children.push(childVisitor);\n            childVisitor.visitAll(ast.variables, ast.children);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        this.visitElementOrTemplate(ast);\n        var /** @type {?} */ inputDefs = [];\n        var /** @type {?} */ updateRendererExpressions = [];\n        var /** @type {?} */ outputDefs = [];\n        ast.inputs.forEach(function (inputAst) {\n            _this.updates.push({ context: _this.component, value: inputAst.value, sourceSpan: inputAst.sourceSpan });\n        });\n        templateVisitAll(this, ast.children);\n    };\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitElementOrTemplate = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var _this = this;\n        ast.directives.forEach(function (dirAst) { _this.visitDirective(dirAst); });\n        ast.references.forEach(function (ref) {\n            var /** @type {?} */ outputVarType = /** @type {?} */ ((null));\n            // Note: The old view compiler used to use an `any` type\n            // for directives exposed via `exportAs`.\n            // We keep this behaivor behind a flag for now.\n            if (ref.value && ref.value.identifier && _this.options.fullTemplateTypeCheck) {\n                outputVarType = ref.value.identifier.reference;\n            }\n            else {\n                outputVarType = o.BuiltinTypeName.Dynamic;\n            }\n            _this.refOutputVars.set(ref.name, outputVarType);\n        });\n        ast.outputs.forEach(function (outputAst) {\n            _this.actions.push({ context: _this.component, value: outputAst.handler, sourceSpan: outputAst.sourceSpan });\n        });\n    };\n    /**\n     * @param {?} dirAst\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitDirective = /**\n     * @param {?} dirAst\n     * @return {?}\n     */\n    function (dirAst) {\n        var _this = this;\n        var /** @type {?} */ dirType = dirAst.directive.type.reference;\n        dirAst.inputs.forEach(function (input) {\n            return _this.updates.push({ context: _this.component, value: input.value, sourceSpan: input.sourceSpan });\n        });\n        // Note: The old view compiler used to use an `any` type\n        // for expressions in host properties / events.\n        // We keep this behaivor behind a flag for now.\n        if (this.options.fullTemplateTypeCheck) {\n            dirAst.hostProperties.forEach(function (inputAst) {\n                return _this.updates.push({ context: dirType, value: inputAst.value, sourceSpan: inputAst.sourceSpan });\n            });\n            dirAst.hostEvents.forEach(function (hostEventAst) {\n                return _this.actions.push({\n                    context: dirType,\n                    value: hostEventAst.handler,\n                    sourceSpan: hostEventAst.sourceSpan\n                });\n            });\n        }\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ViewBuilder.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name == EventHandlerVars.event.name) {\n            return o.variable(this.getOutputVar(o.BuiltinTypeName.Dynamic));\n        }\n        for (var /** @type {?} */ currBuilder = this; currBuilder; currBuilder = currBuilder.parent) {\n            var /** @type {?} */ outputVarType = void 0;\n            // check references\n            outputVarType = currBuilder.refOutputVars.get(name);\n            if (outputVarType == null) {\n                // check variables\n                var /** @type {?} */ varAst = currBuilder.variables.find(function (varAst) { return varAst.name === name; });\n                if (varAst) {\n                    outputVarType = o.BuiltinTypeName.Dynamic;\n                }\n            }\n            if (outputVarType != null) {\n                return o.variable(this.getOutputVar(outputVarType));\n            }\n        }\n        return null;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ViewBuilder.prototype.pipeOutputVar = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ pipe = this.pipes.get(name);\n        if (!pipe) {\n            throw new Error(\"Illegal State: Could not find pipe \" + name + \" in template of \" + this.component);\n        }\n        return this.getOutputVar(pipe);\n    };\n    /**\n     * @param {?} expression\n     * @return {?}\n     */\n    ViewBuilder.prototype.preprocessUpdateExpression = /**\n     * @param {?} expression\n     * @return {?}\n     */\n    function (expression) {\n        var _this = this;\n        return {\n            sourceSpan: expression.sourceSpan,\n            context: expression.context,\n            value: convertPropertyBindingBuiltins({\n                createLiteralArrayConverter: function (argCount) {\n                    return function (args) {\n                        var /** @type {?} */ arr = o.literalArr(args);\n                        // Note: The old view compiler used to use an `any` type\n                        // for arrays.\n                        return _this.options.fullTemplateTypeCheck ? arr : arr.cast(o.DYNAMIC_TYPE);\n                    };\n                },\n                createLiteralMapConverter: function (keys) {\n                    return function (values) {\n                        var /** @type {?} */ entries = keys.map(function (k, i) {\n                            return ({\n                                key: k.key,\n                                value: values[i],\n                                quoted: k.quoted,\n                            });\n                        });\n                        var /** @type {?} */ map = o.literalMap(entries);\n                        // Note: The old view compiler used to use an `any` type\n                        // for maps.\n                        return _this.options.fullTemplateTypeCheck ? map : map.cast(o.DYNAMIC_TYPE);\n                    };\n                },\n                createPipeConverter: function (name, argCount) {\n                    return function (args) {\n                        // Note: The old view compiler used to use an `any` type\n                        // for pipes.\n                        var /** @type {?} */ pipeExpr = _this.options.fullTemplateTypeCheck ?\n                            o.variable(_this.pipeOutputVar(name)) :\n                            o.variable(_this.getOutputVar(o.BuiltinTypeName.Dynamic));\n                        return pipeExpr.callMethod('transform', args);\n                    };\n                },\n            }, expression.value)\n        };\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitNgContent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitDirectiveProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitReference = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitVariable = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitEvent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitElementProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitAttr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    return ViewBuilder;\n}());\nfunction ViewBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewBuilder.prototype.refOutputVars;\n    /** @type {?} */\n    ViewBuilder.prototype.variables;\n    /** @type {?} */\n    ViewBuilder.prototype.children;\n    /** @type {?} */\n    ViewBuilder.prototype.updates;\n    /** @type {?} */\n    ViewBuilder.prototype.actions;\n    /** @type {?} */\n    ViewBuilder.prototype.options;\n    /** @type {?} */\n    ViewBuilder.prototype.reflector;\n    /** @type {?} */\n    ViewBuilder.prototype.externalReferenceVars;\n    /** @type {?} */\n    ViewBuilder.prototype.parent;\n    /** @type {?} */\n    ViewBuilder.prototype.component;\n    /** @type {?} */\n    ViewBuilder.prototype.isHostComponent;\n    /** @type {?} */\n    ViewBuilder.prototype.embeddedViewIndex;\n    /** @type {?} */\n    ViewBuilder.prototype.pipes;\n    /** @type {?} */\n    ViewBuilder.prototype.guards;\n    /** @type {?} */\n    ViewBuilder.prototype.ctx;\n    /** @type {?} */\n    ViewBuilder.prototype.viewBuilderFactory;\n}\n//# sourceMappingURL=type_check_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { rendererTypeName, tokenReference, viewClassName } from '../compile_metadata';\nimport { BindingForm, EventHandlerVars, convertActionBinding, convertPropertyBinding, convertPropertyBindingBuiltins } from '../compiler_util/expression_converter';\nimport { ChangeDetectionStrategy } from '../core';\nimport { Identifiers } from '../identifiers';\nimport { LifecycleHooks } from '../lifecycle_reflector';\nimport { isNgContainer } from '../ml_parser/tags';\nimport * as o from '../output/output_ast';\nimport { convertValueToOutputAst } from '../output/value_util';\nimport { ElementAst, EmbeddedTemplateAst, NgContentAst, PropertyBindingType, templateVisitAll } from '../template_parser/template_ast';\nimport { componentFactoryResolverProviderDef, depDef, lifecycleHookToNodeFlag, providerDef } from './provider_compiler';\nvar /** @type {?} */ CLASS_ATTR = 'class';\nvar /** @type {?} */ STYLE_ATTR = 'style';\nvar /** @type {?} */ IMPLICIT_TEMPLATE_VAR = '\\$implicit';\nvar ViewCompileResult = /** @class */ (function () {\n    function ViewCompileResult(viewClassVar, rendererTypeVar) {\n        this.viewClassVar = viewClassVar;\n        this.rendererTypeVar = rendererTypeVar;\n    }\n    return ViewCompileResult;\n}());\nexport { ViewCompileResult };\nfunction ViewCompileResult_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewCompileResult.prototype.viewClassVar;\n    /** @type {?} */\n    ViewCompileResult.prototype.rendererTypeVar;\n}\nvar ViewCompiler = /** @class */ (function () {\n    function ViewCompiler(_reflector) {\n        this._reflector = _reflector;\n    }\n    /**\n     * @param {?} outputCtx\n     * @param {?} component\n     * @param {?} template\n     * @param {?} styles\n     * @param {?} usedPipes\n     * @return {?}\n     */\n    ViewCompiler.prototype.compileComponent = /**\n     * @param {?} outputCtx\n     * @param {?} component\n     * @param {?} template\n     * @param {?} styles\n     * @param {?} usedPipes\n     * @return {?}\n     */\n    function (outputCtx, component, template, styles, usedPipes) {\n        var _this = this;\n        var /** @type {?} */ embeddedViewCount = 0;\n        var /** @type {?} */ staticQueryIds = findStaticQueryIds(template);\n        var /** @type {?} */ renderComponentVarName = /** @type {?} */ ((undefined));\n        if (!component.isHost) {\n            var /** @type {?} */ template_1 = /** @type {?} */ ((component.template));\n            var /** @type {?} */ customRenderData = [];\n            if (template_1.animations && template_1.animations.length) {\n                customRenderData.push(new o.LiteralMapEntry('animation', convertValueToOutputAst(outputCtx, template_1.animations), true));\n            }\n            var /** @type {?} */ renderComponentVar = o.variable(rendererTypeName(component.type.reference));\n            renderComponentVarName = /** @type {?} */ ((renderComponentVar.name));\n            outputCtx.statements.push(renderComponentVar\n                .set(o.importExpr(Identifiers.createRendererType2).callFn([new o.LiteralMapExpr([\n                    new o.LiteralMapEntry('encapsulation', o.literal(template_1.encapsulation), false),\n                    new o.LiteralMapEntry('styles', styles, false),\n                    new o.LiteralMapEntry('data', new o.LiteralMapExpr(customRenderData), false)\n                ])]))\n                .toDeclStmt(o.importType(Identifiers.RendererType2), [o.StmtModifier.Final, o.StmtModifier.Exported]));\n        }\n        var /** @type {?} */ viewBuilderFactory = function (parent) {\n            var /** @type {?} */ embeddedViewIndex = embeddedViewCount++;\n            return new ViewBuilder(_this._reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory);\n        };\n        var /** @type {?} */ visitor = viewBuilderFactory(null);\n        visitor.visitAll([], template);\n        (_a = outputCtx.statements).push.apply(_a, visitor.build());\n        return new ViewCompileResult(visitor.viewName, renderComponentVarName);\n        var _a;\n    };\n    return ViewCompiler;\n}());\nexport { ViewCompiler };\nfunction ViewCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewCompiler.prototype._reflector;\n}\n/**\n * @record\n */\nfunction ViewBuilderFactory() { }\nfunction ViewBuilderFactory_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (parent: ViewBuilder): ViewBuilder;\n    */\n}\n/**\n * @record\n */\nfunction UpdateExpression() { }\nfunction UpdateExpression_tsickle_Closure_declarations() {\n    /** @type {?} */\n    UpdateExpression.prototype.context;\n    /** @type {?} */\n    UpdateExpression.prototype.nodeIndex;\n    /** @type {?} */\n    UpdateExpression.prototype.bindingIndex;\n    /** @type {?} */\n    UpdateExpression.prototype.sourceSpan;\n    /** @type {?} */\n    UpdateExpression.prototype.value;\n}\nvar /** @type {?} */ LOG_VAR = o.variable('_l');\nvar /** @type {?} */ VIEW_VAR = o.variable('_v');\nvar /** @type {?} */ CHECK_VAR = o.variable('_ck');\nvar /** @type {?} */ COMP_VAR = o.variable('_co');\nvar /** @type {?} */ EVENT_NAME_VAR = o.variable('en');\nvar /** @type {?} */ ALLOW_DEFAULT_VAR = o.variable(\"ad\");\nvar ViewBuilder = /** @class */ (function () {\n    function ViewBuilder(reflector, outputCtx, parent, component, embeddedViewIndex, usedPipes, staticQueryIds, viewBuilderFactory) {\n        this.reflector = reflector;\n        this.outputCtx = outputCtx;\n        this.parent = parent;\n        this.component = component;\n        this.embeddedViewIndex = embeddedViewIndex;\n        this.usedPipes = usedPipes;\n        this.staticQueryIds = staticQueryIds;\n        this.viewBuilderFactory = viewBuilderFactory;\n        this.nodes = [];\n        this.purePipeNodeIndices = Object.create(null);\n        this.refNodeIndices = Object.create(null);\n        this.variables = [];\n        this.children = [];\n        // TODO(tbosch): The old view compiler used to use an `any` type\n        // for the context in any embedded view. We keep this behaivor for now\n        // to be able to introduce the new view compiler without too many errors.\n        this.compType = this.embeddedViewIndex > 0 ?\n            o.DYNAMIC_TYPE : /** @type {?} */\n            ((o.expressionType(outputCtx.importExpr(this.component.type.reference))));\n        this.viewName = viewClassName(this.component.type.reference, this.embeddedViewIndex);\n    }\n    /**\n     * @param {?} variables\n     * @param {?} astNodes\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitAll = /**\n     * @param {?} variables\n     * @param {?} astNodes\n     * @return {?}\n     */\n    function (variables, astNodes) {\n        var _this = this;\n        this.variables = variables;\n        // create the pipes for the pure pipes immediately, so that we know their indices.\n        if (!this.parent) {\n            this.usedPipes.forEach(function (pipe) {\n                if (pipe.pure) {\n                    _this.purePipeNodeIndices[pipe.name] = _this._createPipe(null, pipe);\n                }\n            });\n        }\n        if (!this.parent) {\n            var /** @type {?} */ queryIds_1 = staticViewQueryIds(this.staticQueryIds);\n            this.component.viewQueries.forEach(function (query, queryIndex) {\n                // Note: queries start with id 1 so we can use the number in a Bloom filter!\n                var /** @type {?} */ queryId = queryIndex + 1;\n                var /** @type {?} */ bindingType = query.first ? 0 /* First */ : 1 /* All */;\n                var /** @type {?} */ flags = 134217728 /* TypeViewQuery */ | calcStaticDynamicQueryFlags(queryIds_1, queryId, query.first);\n                _this.nodes.push(function () {\n                    return ({\n                        sourceSpan: null,\n                        nodeFlags: flags,\n                        nodeDef: o.importExpr(Identifiers.queryDef).callFn([\n                            o.literal(flags), o.literal(queryId),\n                            new o.LiteralMapExpr([new o.LiteralMapEntry(query.propertyName, o.literal(bindingType), false)])\n                        ])\n                    });\n                });\n            });\n        }\n        templateVisitAll(this, astNodes);\n        if (this.parent && (astNodes.length === 0 || needsAdditionalRootNode(astNodes))) {\n            // if the view is an embedded view, then we need to add an additional root node in some cases\n            this.nodes.push(function () {\n                return ({\n                    sourceSpan: null,\n                    nodeFlags: 1 /* TypeElement */,\n                    nodeDef: o.importExpr(Identifiers.anchorDef).callFn([\n                        o.literal(0 /* None */), o.NULL_EXPR, o.NULL_EXPR, o.literal(0)\n                    ])\n                });\n            });\n        }\n    };\n    /**\n     * @param {?=} targetStatements\n     * @return {?}\n     */\n    ViewBuilder.prototype.build = /**\n     * @param {?=} targetStatements\n     * @return {?}\n     */\n    function (targetStatements) {\n        if (targetStatements === void 0) { targetStatements = []; }\n        this.children.forEach(function (child) { return child.build(targetStatements); });\n        var _a = this._createNodeExpressions(), updateRendererStmts = _a.updateRendererStmts, updateDirectivesStmts = _a.updateDirectivesStmts, nodeDefExprs = _a.nodeDefExprs;\n        var /** @type {?} */ updateRendererFn = this._createUpdateFn(updateRendererStmts);\n        var /** @type {?} */ updateDirectivesFn = this._createUpdateFn(updateDirectivesStmts);\n        var /** @type {?} */ viewFlags = 0 /* None */;\n        if (!this.parent && this.component.changeDetection === ChangeDetectionStrategy.OnPush) {\n            viewFlags |= 2 /* OnPush */;\n        }\n        var /** @type {?} */ viewFactory = new o.DeclareFunctionStmt(this.viewName, [new o.FnParam(/** @type {?} */ ((LOG_VAR.name)))], [new o.ReturnStatement(o.importExpr(Identifiers.viewDef).callFn([\n                o.literal(viewFlags),\n                o.literalArr(nodeDefExprs),\n                updateDirectivesFn,\n                updateRendererFn,\n            ]))], o.importType(Identifiers.ViewDefinition), this.embeddedViewIndex === 0 ? [o.StmtModifier.Exported] : []);\n        targetStatements.push(viewFactory);\n        return targetStatements;\n    };\n    /**\n     * @param {?} updateStmts\n     * @return {?}\n     */\n    ViewBuilder.prototype._createUpdateFn = /**\n     * @param {?} updateStmts\n     * @return {?}\n     */\n    function (updateStmts) {\n        var /** @type {?} */ updateFn;\n        if (updateStmts.length > 0) {\n            var /** @type {?} */ preStmts = [];\n            if (!this.component.isHost && o.findReadVarNames(updateStmts).has(/** @type {?} */ ((COMP_VAR.name)))) {\n                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n            }\n            updateFn = o.fn([\n                new o.FnParam(/** @type {?} */ ((CHECK_VAR.name)), o.INFERRED_TYPE),\n                new o.FnParam(/** @type {?} */ ((VIEW_VAR.name)), o.INFERRED_TYPE)\n            ], preStmts.concat(updateStmts), o.INFERRED_TYPE);\n        }\n        else {\n            updateFn = o.NULL_EXPR;\n        }\n        return updateFn;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitNgContent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        // ngContentDef(ngContentIndex: number, index: number): NodeDef;\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: ast.sourceSpan,\n                nodeFlags: 8 /* TypeNgContent */,\n                nodeDef: o.importExpr(Identifiers.ngContentDef).callFn([\n                    o.literal(ast.ngContentIndex), o.literal(ast.index)\n                ])\n            });\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        // Static text nodes have no check function\n        var /** @type {?} */ checkIndex = -1;\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: ast.sourceSpan,\n                nodeFlags: 2 /* TypeText */,\n                nodeDef: o.importExpr(Identifiers.textDef).callFn([\n                    o.literal(checkIndex),\n                    o.literal(ast.ngContentIndex),\n                    o.literalArr([o.literal(ast.value)]),\n                ])\n            });\n        });\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitBoundText = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array\n        this.nodes.push(/** @type {?} */ ((null)));\n        var /** @type {?} */ astWithSource = /** @type {?} */ (ast.value);\n        var /** @type {?} */ inter = /** @type {?} */ (astWithSource.ast);\n        var /** @type {?} */ updateRendererExpressions = inter.expressions.map(function (expr, bindingIndex) {\n            return _this._preprocessUpdateExpression({ nodeIndex: nodeIndex, bindingIndex: bindingIndex, sourceSpan: ast.sourceSpan, context: COMP_VAR, value: expr });\n        });\n        // Check index is the same as the node index during compilation\n        // They might only differ at runtime\n        var /** @type {?} */ checkIndex = nodeIndex;\n        this.nodes[nodeIndex] = function () {\n            return ({\n                sourceSpan: ast.sourceSpan,\n                nodeFlags: 2 /* TypeText */,\n                nodeDef: o.importExpr(Identifiers.textDef).callFn([\n                    o.literal(checkIndex),\n                    o.literal(ast.ngContentIndex),\n                    o.literalArr(inter.strings.map(function (s) { return o.literal(s); })),\n                ]),\n                updateRenderer: updateRendererExpressions\n            });\n        };\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitEmbeddedTemplate = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array\n        this.nodes.push(/** @type {?} */ ((null)));\n        var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, queryMatchesExpr = _a.queryMatchesExpr, hostEvents = _a.hostEvents;\n        var /** @type {?} */ childVisitor = this.viewBuilderFactory(this);\n        this.children.push(childVisitor);\n        childVisitor.visitAll(ast.variables, ast.children);\n        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\n        // anchorDef(\n        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], ngContentIndex: number,\n        //   childCount: number, handleEventFn?: ElementHandleEventFn, templateFactory?:\n        //   ViewDefinitionFactory): NodeDef;\n        this.nodes[nodeIndex] = function () {\n            return ({\n                sourceSpan: ast.sourceSpan,\n                nodeFlags: 1 /* TypeElement */ | flags,\n                nodeDef: o.importExpr(Identifiers.anchorDef).callFn([\n                    o.literal(flags),\n                    queryMatchesExpr,\n                    o.literal(ast.ngContentIndex),\n                    o.literal(childCount),\n                    _this._createElementHandleEventFn(nodeIndex, hostEvents),\n                    o.variable(childVisitor.viewName),\n                ])\n            });\n        };\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitElement = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array so we can add children\n        this.nodes.push(/** @type {?} */ ((null)));\n        // Using a null element name creates an anchor.\n        var /** @type {?} */ elName = isNgContainer(ast.name) ? null : ast.name;\n        var _a = this._visitElementOrTemplate(nodeIndex, ast), flags = _a.flags, usedEvents = _a.usedEvents, queryMatchesExpr = _a.queryMatchesExpr, dirHostBindings = _a.hostBindings, hostEvents = _a.hostEvents;\n        var /** @type {?} */ inputDefs = [];\n        var /** @type {?} */ updateRendererExpressions = [];\n        var /** @type {?} */ outputDefs = [];\n        if (elName) {\n            var /** @type {?} */ hostBindings = ast.inputs\n                .map(function (inputAst) {\n                return ({\n                    context: /** @type {?} */ (COMP_VAR),\n                    inputAst: inputAst,\n                    dirAst: /** @type {?} */ (null),\n                });\n            })\n                .concat(dirHostBindings);\n            if (hostBindings.length) {\n                updateRendererExpressions =\n                    hostBindings.map(function (hostBinding, bindingIndex) {\n                        return _this._preprocessUpdateExpression({\n                            context: hostBinding.context,\n                            nodeIndex: nodeIndex,\n                            bindingIndex: bindingIndex,\n                            sourceSpan: hostBinding.inputAst.sourceSpan,\n                            value: hostBinding.inputAst.value\n                        });\n                    });\n                inputDefs = hostBindings.map(function (hostBinding) { return elementBindingDef(hostBinding.inputAst, hostBinding.dirAst); });\n            }\n            outputDefs = usedEvents.map(function (_a) {\n                var target = _a[0], eventName = _a[1];\n                return o.literalArr([o.literal(target), o.literal(eventName)]);\n            });\n        }\n        templateVisitAll(this, ast.children);\n        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\n        var /** @type {?} */ compAst = ast.directives.find(function (dirAst) { return dirAst.directive.isComponent; });\n        var /** @type {?} */ compRendererType = /** @type {?} */ (o.NULL_EXPR);\n        var /** @type {?} */ compView = /** @type {?} */ (o.NULL_EXPR);\n        if (compAst) {\n            compView = this.outputCtx.importExpr(compAst.directive.componentViewType);\n            compRendererType = this.outputCtx.importExpr(compAst.directive.rendererType);\n        }\n        // Check index is the same as the node index during compilation\n        // They might only differ at runtime\n        var /** @type {?} */ checkIndex = nodeIndex;\n        this.nodes[nodeIndex] = function () {\n            return ({\n                sourceSpan: ast.sourceSpan,\n                nodeFlags: 1 /* TypeElement */ | flags,\n                nodeDef: o.importExpr(Identifiers.elementDef).callFn([\n                    o.literal(checkIndex),\n                    o.literal(flags),\n                    queryMatchesExpr,\n                    o.literal(ast.ngContentIndex),\n                    o.literal(childCount),\n                    o.literal(elName),\n                    elName ? fixedAttrsDef(ast) : o.NULL_EXPR,\n                    inputDefs.length ? o.literalArr(inputDefs) : o.NULL_EXPR,\n                    outputDefs.length ? o.literalArr(outputDefs) : o.NULL_EXPR,\n                    _this._createElementHandleEventFn(nodeIndex, hostEvents),\n                    compView,\n                    compRendererType,\n                ]),\n                updateRenderer: updateRendererExpressions\n            });\n        };\n    };\n    /**\n     * @param {?} nodeIndex\n     * @param {?} ast\n     * @return {?}\n     */\n    ViewBuilder.prototype._visitElementOrTemplate = /**\n     * @param {?} nodeIndex\n     * @param {?} ast\n     * @return {?}\n     */\n    function (nodeIndex, ast) {\n        var _this = this;\n        var /** @type {?} */ flags = 0 /* None */;\n        if (ast.hasViewContainer) {\n            flags |= 16777216 /* EmbeddedViews */;\n        }\n        var /** @type {?} */ usedEvents = new Map();\n        ast.outputs.forEach(function (event) {\n            var _a = elementEventNameAndTarget(event, null), name = _a.name, target = _a.target;\n            usedEvents.set(elementEventFullName(target, name), [target, name]);\n        });\n        ast.directives.forEach(function (dirAst) {\n            dirAst.hostEvents.forEach(function (event) {\n                var _a = elementEventNameAndTarget(event, dirAst), name = _a.name, target = _a.target;\n                usedEvents.set(elementEventFullName(target, name), [target, name]);\n            });\n        });\n        var /** @type {?} */ hostBindings = [];\n        var /** @type {?} */ hostEvents = [];\n        this._visitComponentFactoryResolverProvider(ast.directives);\n        ast.providers.forEach(function (providerAst, providerIndex) {\n            var /** @type {?} */ dirAst = /** @type {?} */ ((undefined));\n            var /** @type {?} */ dirIndex = /** @type {?} */ ((undefined));\n            ast.directives.forEach(function (localDirAst, i) {\n                if (localDirAst.directive.type.reference === tokenReference(providerAst.token)) {\n                    dirAst = localDirAst;\n                    dirIndex = i;\n                }\n            });\n            if (dirAst) {\n                var _a = _this._visitDirective(providerAst, dirAst, dirIndex, nodeIndex, ast.references, ast.queryMatches, usedEvents, /** @type {?} */ ((_this.staticQueryIds.get(/** @type {?} */ (ast))))), dirHostBindings = _a.hostBindings, dirHostEvents = _a.hostEvents;\n                hostBindings.push.apply(hostBindings, dirHostBindings);\n                hostEvents.push.apply(hostEvents, dirHostEvents);\n            }\n            else {\n                _this._visitProvider(providerAst, ast.queryMatches);\n            }\n        });\n        var /** @type {?} */ queryMatchExprs = [];\n        ast.queryMatches.forEach(function (match) {\n            var /** @type {?} */ valueType = /** @type {?} */ ((undefined));\n            if (tokenReference(match.value) ===\n                _this.reflector.resolveExternalReference(Identifiers.ElementRef)) {\n                valueType = 0 /* ElementRef */;\n            }\n            else if (tokenReference(match.value) ===\n                _this.reflector.resolveExternalReference(Identifiers.ViewContainerRef)) {\n                valueType = 3 /* ViewContainerRef */;\n            }\n            else if (tokenReference(match.value) ===\n                _this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n                valueType = 2 /* TemplateRef */;\n            }\n            if (valueType != null) {\n                queryMatchExprs.push(o.literalArr([o.literal(match.queryId), o.literal(valueType)]));\n            }\n        });\n        ast.references.forEach(function (ref) {\n            var /** @type {?} */ valueType = /** @type {?} */ ((undefined));\n            if (!ref.value) {\n                valueType = 1 /* RenderElement */;\n            }\n            else if (tokenReference(ref.value) ===\n                _this.reflector.resolveExternalReference(Identifiers.TemplateRef)) {\n                valueType = 2 /* TemplateRef */;\n            }\n            if (valueType != null) {\n                _this.refNodeIndices[ref.name] = nodeIndex;\n                queryMatchExprs.push(o.literalArr([o.literal(ref.name), o.literal(valueType)]));\n            }\n        });\n        ast.outputs.forEach(function (outputAst) {\n            hostEvents.push({ context: COMP_VAR, eventAst: outputAst, dirAst: /** @type {?} */ ((null)) });\n        });\n        return {\n            flags: flags,\n            usedEvents: Array.from(usedEvents.values()),\n            queryMatchesExpr: queryMatchExprs.length ? o.literalArr(queryMatchExprs) : o.NULL_EXPR,\n            hostBindings: hostBindings,\n            hostEvents: hostEvents\n        };\n    };\n    /**\n     * @param {?} providerAst\n     * @param {?} dirAst\n     * @param {?} directiveIndex\n     * @param {?} elementNodeIndex\n     * @param {?} refs\n     * @param {?} queryMatches\n     * @param {?} usedEvents\n     * @param {?} queryIds\n     * @return {?}\n     */\n    ViewBuilder.prototype._visitDirective = /**\n     * @param {?} providerAst\n     * @param {?} dirAst\n     * @param {?} directiveIndex\n     * @param {?} elementNodeIndex\n     * @param {?} refs\n     * @param {?} queryMatches\n     * @param {?} usedEvents\n     * @param {?} queryIds\n     * @return {?}\n     */\n    function (providerAst, dirAst, directiveIndex, elementNodeIndex, refs, queryMatches, usedEvents, queryIds) {\n        var _this = this;\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        // reserve the space in the nodeDefs array so we can add children\n        this.nodes.push(/** @type {?} */ ((null)));\n        dirAst.directive.queries.forEach(function (query, queryIndex) {\n            var /** @type {?} */ queryId = dirAst.contentQueryStartId + queryIndex;\n            var /** @type {?} */ flags = 67108864 /* TypeContentQuery */ | calcStaticDynamicQueryFlags(queryIds, queryId, query.first);\n            var /** @type {?} */ bindingType = query.first ? 0 /* First */ : 1 /* All */;\n            _this.nodes.push(function () {\n                return ({\n                    sourceSpan: dirAst.sourceSpan,\n                    nodeFlags: flags,\n                    nodeDef: o.importExpr(Identifiers.queryDef).callFn([\n                        o.literal(flags), o.literal(queryId),\n                        new o.LiteralMapExpr([new o.LiteralMapEntry(query.propertyName, o.literal(bindingType), false)])\n                    ]),\n                });\n            });\n        });\n        // Note: the operation below might also create new nodeDefs,\n        // but we don't want them to be a child of a directive,\n        // as they might be a provider/pipe on their own.\n        // I.e. we only allow queries as children of directives nodes.\n        var /** @type {?} */ childCount = this.nodes.length - nodeIndex - 1;\n        var _a = this._visitProviderOrDirective(providerAst, queryMatches), flags = _a.flags, queryMatchExprs = _a.queryMatchExprs, providerExpr = _a.providerExpr, depsExpr = _a.depsExpr;\n        refs.forEach(function (ref) {\n            if (ref.value && tokenReference(ref.value) === tokenReference(providerAst.token)) {\n                _this.refNodeIndices[ref.name] = nodeIndex;\n                queryMatchExprs.push(o.literalArr([o.literal(ref.name), o.literal(4 /* Provider */)]));\n            }\n        });\n        if (dirAst.directive.isComponent) {\n            flags |= 32768 /* Component */;\n        }\n        var /** @type {?} */ inputDefs = dirAst.inputs.map(function (inputAst, inputIndex) {\n            var /** @type {?} */ mapValue = o.literalArr([o.literal(inputIndex), o.literal(inputAst.directiveName)]);\n            // Note: it's important to not quote the key so that we can capture renames by minifiers!\n            return new o.LiteralMapEntry(inputAst.directiveName, mapValue, false);\n        });\n        var /** @type {?} */ outputDefs = [];\n        var /** @type {?} */ dirMeta = dirAst.directive;\n        Object.keys(dirMeta.outputs).forEach(function (propName) {\n            var /** @type {?} */ eventName = dirMeta.outputs[propName];\n            if (usedEvents.has(eventName)) {\n                // Note: it's important to not quote the key so that we can capture renames by minifiers!\n                outputDefs.push(new o.LiteralMapEntry(propName, o.literal(eventName), false));\n            }\n        });\n        var /** @type {?} */ updateDirectiveExpressions = [];\n        if (dirAst.inputs.length || (flags & (262144 /* DoCheck */ | 65536 /* OnInit */)) > 0) {\n            updateDirectiveExpressions =\n                dirAst.inputs.map(function (input, bindingIndex) {\n                    return _this._preprocessUpdateExpression({\n                        nodeIndex: nodeIndex,\n                        bindingIndex: bindingIndex,\n                        sourceSpan: input.sourceSpan,\n                        context: COMP_VAR,\n                        value: input.value\n                    });\n                });\n        }\n        var /** @type {?} */ dirContextExpr = o.importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, o.literal(nodeIndex)]);\n        var /** @type {?} */ hostBindings = dirAst.hostProperties.map(function (inputAst) {\n            return ({\n                context: dirContextExpr,\n                dirAst: dirAst,\n                inputAst: inputAst,\n            });\n        });\n        var /** @type {?} */ hostEvents = dirAst.hostEvents.map(function (hostEventAst) {\n            return ({\n                context: dirContextExpr,\n                eventAst: hostEventAst, dirAst: dirAst,\n            });\n        });\n        // Check index is the same as the node index during compilation\n        // They might only differ at runtime\n        var /** @type {?} */ checkIndex = nodeIndex;\n        this.nodes[nodeIndex] = function () {\n            return ({\n                sourceSpan: dirAst.sourceSpan,\n                nodeFlags: 16384 /* TypeDirective */ | flags,\n                nodeDef: o.importExpr(Identifiers.directiveDef).callFn([\n                    o.literal(checkIndex),\n                    o.literal(flags),\n                    queryMatchExprs.length ? o.literalArr(queryMatchExprs) : o.NULL_EXPR,\n                    o.literal(childCount),\n                    providerExpr,\n                    depsExpr,\n                    inputDefs.length ? new o.LiteralMapExpr(inputDefs) : o.NULL_EXPR,\n                    outputDefs.length ? new o.LiteralMapExpr(outputDefs) : o.NULL_EXPR,\n                ]),\n                updateDirectives: updateDirectiveExpressions,\n                directive: dirAst.directive.type,\n            });\n        };\n        return { hostBindings: hostBindings, hostEvents: hostEvents };\n    };\n    /**\n     * @param {?} providerAst\n     * @param {?} queryMatches\n     * @return {?}\n     */\n    ViewBuilder.prototype._visitProvider = /**\n     * @param {?} providerAst\n     * @param {?} queryMatches\n     * @return {?}\n     */\n    function (providerAst, queryMatches) {\n        this._addProviderNode(this._visitProviderOrDirective(providerAst, queryMatches));\n    };\n    /**\n     * @param {?} directives\n     * @return {?}\n     */\n    ViewBuilder.prototype._visitComponentFactoryResolverProvider = /**\n     * @param {?} directives\n     * @return {?}\n     */\n    function (directives) {\n        var /** @type {?} */ componentDirMeta = directives.find(function (dirAst) { return dirAst.directive.isComponent; });\n        if (componentDirMeta && componentDirMeta.directive.entryComponents.length) {\n            var _a = componentFactoryResolverProviderDef(this.reflector, this.outputCtx, 8192 /* PrivateProvider */, componentDirMeta.directive.entryComponents), providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, flags = _a.flags, tokenExpr = _a.tokenExpr;\n            this._addProviderNode({\n                providerExpr: providerExpr,\n                depsExpr: depsExpr,\n                flags: flags,\n                tokenExpr: tokenExpr,\n                queryMatchExprs: [],\n                sourceSpan: componentDirMeta.sourceSpan\n            });\n        }\n    };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    ViewBuilder.prototype._addProviderNode = /**\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        // providerDef(\n        //   flags: NodeFlags, matchedQueries: [string, QueryValueType][], token:any,\n        //   value: any, deps: ([DepFlags, any] | any)[]): NodeDef;\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: data.sourceSpan,\n                nodeFlags: data.flags,\n                nodeDef: o.importExpr(Identifiers.providerDef).callFn([\n                    o.literal(data.flags),\n                    data.queryMatchExprs.length ? o.literalArr(data.queryMatchExprs) : o.NULL_EXPR,\n                    data.tokenExpr, data.providerExpr, data.depsExpr\n                ])\n            });\n        });\n    };\n    /**\n     * @param {?} providerAst\n     * @param {?} queryMatches\n     * @return {?}\n     */\n    ViewBuilder.prototype._visitProviderOrDirective = /**\n     * @param {?} providerAst\n     * @param {?} queryMatches\n     * @return {?}\n     */\n    function (providerAst, queryMatches) {\n        var /** @type {?} */ flags = 0 /* None */;\n        var /** @type {?} */ queryMatchExprs = [];\n        queryMatches.forEach(function (match) {\n            if (tokenReference(match.value) === tokenReference(providerAst.token)) {\n                queryMatchExprs.push(o.literalArr([o.literal(match.queryId), o.literal(4 /* Provider */)]));\n            }\n        });\n        var _a = providerDef(this.outputCtx, providerAst), providerExpr = _a.providerExpr, depsExpr = _a.depsExpr, providerFlags = _a.flags, tokenExpr = _a.tokenExpr;\n        return {\n            flags: flags | providerFlags,\n            queryMatchExprs: queryMatchExprs,\n            providerExpr: providerExpr,\n            depsExpr: depsExpr,\n            tokenExpr: tokenExpr,\n            sourceSpan: providerAst.sourceSpan\n        };\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    ViewBuilder.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if (name == EventHandlerVars.event.name) {\n            return EventHandlerVars.event;\n        }\n        var /** @type {?} */ currViewExpr = VIEW_VAR;\n        for (var /** @type {?} */ currBuilder = this; currBuilder; currBuilder = currBuilder.parent,\n            currViewExpr = currViewExpr.prop('parent').cast(o.DYNAMIC_TYPE)) {\n            // check references\n            var /** @type {?} */ refNodeIndex = currBuilder.refNodeIndices[name];\n            if (refNodeIndex != null) {\n                return o.importExpr(Identifiers.nodeValue).callFn([currViewExpr, o.literal(refNodeIndex)]);\n            }\n            // check variables\n            var /** @type {?} */ varAst = currBuilder.variables.find(function (varAst) { return varAst.name === name; });\n            if (varAst) {\n                var /** @type {?} */ varValue = varAst.value || IMPLICIT_TEMPLATE_VAR;\n                return currViewExpr.prop('context').prop(varValue);\n            }\n        }\n        return null;\n    };\n    /**\n     * @param {?} sourceSpan\n     * @param {?} argCount\n     * @return {?}\n     */\n    ViewBuilder.prototype._createLiteralArrayConverter = /**\n     * @param {?} sourceSpan\n     * @param {?} argCount\n     * @return {?}\n     */\n    function (sourceSpan, argCount) {\n        if (argCount === 0) {\n            var /** @type {?} */ valueExpr_1 = o.importExpr(Identifiers.EMPTY_ARRAY);\n            return function () { return valueExpr_1; };\n        }\n        var /** @type {?} */ checkIndex = this.nodes.length;\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: sourceSpan,\n                nodeFlags: 32 /* TypePureArray */,\n                nodeDef: o.importExpr(Identifiers.pureArrayDef).callFn([\n                    o.literal(checkIndex),\n                    o.literal(argCount),\n                ])\n            });\n        });\n        return function (args) { return callCheckStmt(checkIndex, args); };\n    };\n    /**\n     * @param {?} sourceSpan\n     * @param {?} keys\n     * @return {?}\n     */\n    ViewBuilder.prototype._createLiteralMapConverter = /**\n     * @param {?} sourceSpan\n     * @param {?} keys\n     * @return {?}\n     */\n    function (sourceSpan, keys) {\n        if (keys.length === 0) {\n            var /** @type {?} */ valueExpr_2 = o.importExpr(Identifiers.EMPTY_MAP);\n            return function () { return valueExpr_2; };\n        }\n        var /** @type {?} */ map = o.literalMap(keys.map(function (e, i) { return (tslib_1.__assign({}, e, { value: o.literal(i) })); }));\n        var /** @type {?} */ checkIndex = this.nodes.length;\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: sourceSpan,\n                nodeFlags: 64 /* TypePureObject */,\n                nodeDef: o.importExpr(Identifiers.pureObjectDef).callFn([\n                    o.literal(checkIndex),\n                    map,\n                ])\n            });\n        });\n        return function (args) { return callCheckStmt(checkIndex, args); };\n    };\n    /**\n     * @param {?} expression\n     * @param {?} name\n     * @param {?} argCount\n     * @return {?}\n     */\n    ViewBuilder.prototype._createPipeConverter = /**\n     * @param {?} expression\n     * @param {?} name\n     * @param {?} argCount\n     * @return {?}\n     */\n    function (expression, name, argCount) {\n        var /** @type {?} */ pipe = /** @type {?} */ ((this.usedPipes.find(function (pipeSummary) { return pipeSummary.name === name; })));\n        if (pipe.pure) {\n            var /** @type {?} */ checkIndex_1 = this.nodes.length;\n            this.nodes.push(function () {\n                return ({\n                    sourceSpan: expression.sourceSpan,\n                    nodeFlags: 128 /* TypePurePipe */,\n                    nodeDef: o.importExpr(Identifiers.purePipeDef).callFn([\n                        o.literal(checkIndex_1),\n                        o.literal(argCount),\n                    ])\n                });\n            });\n            // find underlying pipe in the component view\n            var /** @type {?} */ compViewExpr = VIEW_VAR;\n            var /** @type {?} */ compBuilder = this;\n            while (compBuilder.parent) {\n                compBuilder = compBuilder.parent;\n                compViewExpr = compViewExpr.prop('parent').cast(o.DYNAMIC_TYPE);\n            }\n            var /** @type {?} */ pipeNodeIndex = compBuilder.purePipeNodeIndices[name];\n            var /** @type {?} */ pipeValueExpr_1 = o.importExpr(Identifiers.nodeValue).callFn([compViewExpr, o.literal(pipeNodeIndex)]);\n            return function (args) {\n                return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, callCheckStmt(checkIndex_1, [pipeValueExpr_1].concat(args)));\n            };\n        }\n        else {\n            var /** @type {?} */ nodeIndex = this._createPipe(expression.sourceSpan, pipe);\n            var /** @type {?} */ nodeValueExpr_1 = o.importExpr(Identifiers.nodeValue).callFn([VIEW_VAR, o.literal(nodeIndex)]);\n            return function (args) {\n                return callUnwrapValue(expression.nodeIndex, expression.bindingIndex, nodeValueExpr_1.callMethod('transform', args));\n            };\n        }\n    };\n    /**\n     * @param {?} sourceSpan\n     * @param {?} pipe\n     * @return {?}\n     */\n    ViewBuilder.prototype._createPipe = /**\n     * @param {?} sourceSpan\n     * @param {?} pipe\n     * @return {?}\n     */\n    function (sourceSpan, pipe) {\n        var _this = this;\n        var /** @type {?} */ nodeIndex = this.nodes.length;\n        var /** @type {?} */ flags = 0 /* None */;\n        pipe.type.lifecycleHooks.forEach(function (lifecycleHook) {\n            // for pipes, we only support ngOnDestroy\n            if (lifecycleHook === LifecycleHooks.OnDestroy) {\n                flags |= lifecycleHookToNodeFlag(lifecycleHook);\n            }\n        });\n        var /** @type {?} */ depExprs = pipe.type.diDeps.map(function (diDep) { return depDef(_this.outputCtx, diDep); });\n        // function pipeDef(\n        //   flags: NodeFlags, ctor: any, deps: ([DepFlags, any] | any)[]): NodeDef\n        this.nodes.push(function () {\n            return ({\n                sourceSpan: sourceSpan,\n                nodeFlags: 16 /* TypePipe */,\n                nodeDef: o.importExpr(Identifiers.pipeDef).callFn([\n                    o.literal(flags), _this.outputCtx.importExpr(pipe.type.reference), o.literalArr(depExprs)\n                ])\n            });\n        });\n        return nodeIndex;\n    };\n    /**\n     * For the AST in `UpdateExpression.value`:\n     * - create nodes for pipes, literal arrays and, literal maps,\n     * - update the AST to replace pipes, literal arrays and, literal maps with calls to check fn.\n     *\n     * WARNING: This might create new nodeDefs (for pipes and literal arrays and literal maps)!\n     * @param {?} expression\n     * @return {?}\n     */\n    ViewBuilder.prototype._preprocessUpdateExpression = /**\n     * For the AST in `UpdateExpression.value`:\n     * - create nodes for pipes, literal arrays and, literal maps,\n     * - update the AST to replace pipes, literal arrays and, literal maps with calls to check fn.\n     *\n     * WARNING: This might create new nodeDefs (for pipes and literal arrays and literal maps)!\n     * @param {?} expression\n     * @return {?}\n     */\n    function (expression) {\n        var _this = this;\n        return {\n            nodeIndex: expression.nodeIndex,\n            bindingIndex: expression.bindingIndex,\n            sourceSpan: expression.sourceSpan,\n            context: expression.context,\n            value: convertPropertyBindingBuiltins({\n                createLiteralArrayConverter: function (argCount) {\n                    return _this._createLiteralArrayConverter(expression.sourceSpan, argCount);\n                },\n                createLiteralMapConverter: function (keys) {\n                    return _this._createLiteralMapConverter(expression.sourceSpan, keys);\n                },\n                createPipeConverter: function (name, argCount) {\n                    return _this._createPipeConverter(expression, name, argCount);\n                }\n            }, expression.value)\n        };\n    };\n    /**\n     * @return {?}\n     */\n    ViewBuilder.prototype._createNodeExpressions = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ self = this;\n        var /** @type {?} */ updateBindingCount = 0;\n        var /** @type {?} */ updateRendererStmts = [];\n        var /** @type {?} */ updateDirectivesStmts = [];\n        var /** @type {?} */ nodeDefExprs = this.nodes.map(function (factory, nodeIndex) {\n            var _a = factory(), nodeDef = _a.nodeDef, nodeFlags = _a.nodeFlags, updateDirectives = _a.updateDirectives, updateRenderer = _a.updateRenderer, sourceSpan = _a.sourceSpan;\n            if (updateRenderer) {\n                updateRendererStmts.push.apply(updateRendererStmts, createUpdateStatements(nodeIndex, sourceSpan, updateRenderer, false));\n            }\n            if (updateDirectives) {\n                updateDirectivesStmts.push.apply(updateDirectivesStmts, createUpdateStatements(nodeIndex, sourceSpan, updateDirectives, (nodeFlags & (262144 /* DoCheck */ | 65536 /* OnInit */)) > 0));\n            }\n            // We use a comma expression to call the log function before\n            // the nodeDef function, but still use the result of the nodeDef function\n            // as the value.\n            // Note: We only add the logger to elements / text nodes,\n            // so we don't generate too much code.\n            var /** @type {?} */ logWithNodeDef = nodeFlags & 3 /* CatRenderNode */ ?\n                new o.CommaExpr([LOG_VAR.callFn([]).callFn([]), nodeDef]) :\n                nodeDef;\n            return o.applySourceSpanToExpressionIfNeeded(logWithNodeDef, sourceSpan);\n        });\n        return { updateRendererStmts: updateRendererStmts, updateDirectivesStmts: updateDirectivesStmts, nodeDefExprs: nodeDefExprs };\n        /**\n         * @param {?} nodeIndex\n         * @param {?} sourceSpan\n         * @param {?} expressions\n         * @param {?} allowEmptyExprs\n         * @return {?}\n         */\n        function createUpdateStatements(nodeIndex, sourceSpan, expressions, allowEmptyExprs) {\n            var /** @type {?} */ updateStmts = [];\n            var /** @type {?} */ exprs = expressions.map(function (_a) {\n                var sourceSpan = _a.sourceSpan, context = _a.context, value = _a.value;\n                var /** @type {?} */ bindingId = \"\" + updateBindingCount++;\n                var /** @type {?} */ nameResolver = context === COMP_VAR ? self : null;\n                var _b = convertPropertyBinding(nameResolver, context, value, bindingId, BindingForm.General), stmts = _b.stmts, currValExpr = _b.currValExpr;\n                updateStmts.push.apply(updateStmts, stmts.map(function (stmt) { return o.applySourceSpanToStatementIfNeeded(stmt, sourceSpan); }));\n                return o.applySourceSpanToExpressionIfNeeded(currValExpr, sourceSpan);\n            });\n            if (expressions.length || allowEmptyExprs) {\n                updateStmts.push(o.applySourceSpanToStatementIfNeeded(callCheckStmt(nodeIndex, exprs).toStmt(), sourceSpan));\n            }\n            return updateStmts;\n        }\n    };\n    /**\n     * @param {?} nodeIndex\n     * @param {?} handlers\n     * @return {?}\n     */\n    ViewBuilder.prototype._createElementHandleEventFn = /**\n     * @param {?} nodeIndex\n     * @param {?} handlers\n     * @return {?}\n     */\n    function (nodeIndex, handlers) {\n        var _this = this;\n        var /** @type {?} */ handleEventStmts = [];\n        var /** @type {?} */ handleEventBindingCount = 0;\n        handlers.forEach(function (_a) {\n            var context = _a.context, eventAst = _a.eventAst, dirAst = _a.dirAst;\n            var /** @type {?} */ bindingId = \"\" + handleEventBindingCount++;\n            var /** @type {?} */ nameResolver = context === COMP_VAR ? _this : null;\n            var _b = convertActionBinding(nameResolver, context, eventAst.handler, bindingId), stmts = _b.stmts, allowDefault = _b.allowDefault;\n            var /** @type {?} */ trueStmts = stmts;\n            if (allowDefault) {\n                trueStmts.push(ALLOW_DEFAULT_VAR.set(allowDefault.and(ALLOW_DEFAULT_VAR)).toStmt());\n            }\n            var _c = elementEventNameAndTarget(eventAst, dirAst), eventTarget = _c.target, eventName = _c.name;\n            var /** @type {?} */ fullEventName = elementEventFullName(eventTarget, eventName);\n            handleEventStmts.push(o.applySourceSpanToStatementIfNeeded(new o.IfStmt(o.literal(fullEventName).identical(EVENT_NAME_VAR), trueStmts), eventAst.sourceSpan));\n        });\n        var /** @type {?} */ handleEventFn;\n        if (handleEventStmts.length > 0) {\n            var /** @type {?} */ preStmts = [ALLOW_DEFAULT_VAR.set(o.literal(true)).toDeclStmt(o.BOOL_TYPE)];\n            if (!this.component.isHost && o.findReadVarNames(handleEventStmts).has(/** @type {?} */ ((COMP_VAR.name)))) {\n                preStmts.push(COMP_VAR.set(VIEW_VAR.prop('component')).toDeclStmt(this.compType));\n            }\n            handleEventFn = o.fn([\n                new o.FnParam(/** @type {?} */ ((VIEW_VAR.name)), o.INFERRED_TYPE),\n                new o.FnParam(/** @type {?} */ ((EVENT_NAME_VAR.name)), o.INFERRED_TYPE),\n                new o.FnParam(/** @type {?} */ ((EventHandlerVars.event.name)), o.INFERRED_TYPE)\n            ], preStmts.concat(handleEventStmts, [new o.ReturnStatement(ALLOW_DEFAULT_VAR)]), o.INFERRED_TYPE);\n        }\n        else {\n            handleEventFn = o.NULL_EXPR;\n        }\n        return handleEventFn;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitDirective = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitDirectiveProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitReference = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitVariable = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitEvent = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitElementProperty = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    ViewBuilder.prototype.visitAttr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) { };\n    return ViewBuilder;\n}());\nfunction ViewBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ViewBuilder.prototype.compType;\n    /** @type {?} */\n    ViewBuilder.prototype.nodes;\n    /** @type {?} */\n    ViewBuilder.prototype.purePipeNodeIndices;\n    /** @type {?} */\n    ViewBuilder.prototype.refNodeIndices;\n    /** @type {?} */\n    ViewBuilder.prototype.variables;\n    /** @type {?} */\n    ViewBuilder.prototype.children;\n    /** @type {?} */\n    ViewBuilder.prototype.viewName;\n    /** @type {?} */\n    ViewBuilder.prototype.reflector;\n    /** @type {?} */\n    ViewBuilder.prototype.outputCtx;\n    /** @type {?} */\n    ViewBuilder.prototype.parent;\n    /** @type {?} */\n    ViewBuilder.prototype.component;\n    /** @type {?} */\n    ViewBuilder.prototype.embeddedViewIndex;\n    /** @type {?} */\n    ViewBuilder.prototype.usedPipes;\n    /** @type {?} */\n    ViewBuilder.prototype.staticQueryIds;\n    /** @type {?} */\n    ViewBuilder.prototype.viewBuilderFactory;\n}\n/**\n * @param {?} astNodes\n * @return {?}\n */\nfunction needsAdditionalRootNode(astNodes) {\n    var /** @type {?} */ lastAstNode = astNodes[astNodes.length - 1];\n    if (lastAstNode instanceof EmbeddedTemplateAst) {\n        return lastAstNode.hasViewContainer;\n    }\n    if (lastAstNode instanceof ElementAst) {\n        if (isNgContainer(lastAstNode.name) && lastAstNode.children.length) {\n            return needsAdditionalRootNode(lastAstNode.children);\n        }\n        return lastAstNode.hasViewContainer;\n    }\n    return lastAstNode instanceof NgContentAst;\n}\n/**\n * @param {?} inputAst\n * @param {?} dirAst\n * @return {?}\n */\nfunction elementBindingDef(inputAst, dirAst) {\n    switch (inputAst.type) {\n        case PropertyBindingType.Attribute:\n            return o.literalArr([\n                o.literal(1 /* TypeElementAttribute */), o.literal(inputAst.name),\n                o.literal(inputAst.securityContext)\n            ]);\n        case PropertyBindingType.Property:\n            return o.literalArr([\n                o.literal(8 /* TypeProperty */), o.literal(inputAst.name),\n                o.literal(inputAst.securityContext)\n            ]);\n        case PropertyBindingType.Animation:\n            var /** @type {?} */ bindingType = 8 /* TypeProperty */ |\n                (dirAst && dirAst.directive.isComponent ? 32 /* SyntheticHostProperty */ :\n                    16 /* SyntheticProperty */);\n            return o.literalArr([\n                o.literal(bindingType), o.literal('@' + inputAst.name), o.literal(inputAst.securityContext)\n            ]);\n        case PropertyBindingType.Class:\n            return o.literalArr([o.literal(2 /* TypeElementClass */), o.literal(inputAst.name), o.NULL_EXPR]);\n        case PropertyBindingType.Style:\n            return o.literalArr([\n                o.literal(4 /* TypeElementStyle */), o.literal(inputAst.name), o.literal(inputAst.unit)\n            ]);\n    }\n}\n/**\n * @param {?} elementAst\n * @return {?}\n */\nfunction fixedAttrsDef(elementAst) {\n    var /** @type {?} */ mapResult = Object.create(null);\n    elementAst.attrs.forEach(function (attrAst) { mapResult[attrAst.name] = attrAst.value; });\n    elementAst.directives.forEach(function (dirAst) {\n        Object.keys(dirAst.directive.hostAttributes).forEach(function (name) {\n            var /** @type {?} */ value = dirAst.directive.hostAttributes[name];\n            var /** @type {?} */ prevValue = mapResult[name];\n            mapResult[name] = prevValue != null ? mergeAttributeValue(name, prevValue, value) : value;\n        });\n    });\n    // Note: We need to sort to get a defined output order\n    // for tests and for caching generated artifacts...\n    return o.literalArr(Object.keys(mapResult).sort().map(function (attrName) { return o.literalArr([o.literal(attrName), o.literal(mapResult[attrName])]); }));\n}\n/**\n * @param {?} attrName\n * @param {?} attrValue1\n * @param {?} attrValue2\n * @return {?}\n */\nfunction mergeAttributeValue(attrName, attrValue1, attrValue2) {\n    if (attrName == CLASS_ATTR || attrName == STYLE_ATTR) {\n        return attrValue1 + \" \" + attrValue2;\n    }\n    else {\n        return attrValue2;\n    }\n}\n/**\n * @param {?} nodeIndex\n * @param {?} exprs\n * @return {?}\n */\nfunction callCheckStmt(nodeIndex, exprs) {\n    if (exprs.length > 10) {\n        return CHECK_VAR.callFn([VIEW_VAR, o.literal(nodeIndex), o.literal(1 /* Dynamic */), o.literalArr(exprs)]);\n    }\n    else {\n        return CHECK_VAR.callFn([VIEW_VAR, o.literal(nodeIndex), o.literal(0 /* Inline */)].concat(exprs));\n    }\n}\n/**\n * @param {?} nodeIndex\n * @param {?} bindingIdx\n * @param {?} expr\n * @return {?}\n */\nfunction callUnwrapValue(nodeIndex, bindingIdx, expr) {\n    return o.importExpr(Identifiers.unwrapValue).callFn([\n        VIEW_VAR, o.literal(nodeIndex), o.literal(bindingIdx), expr\n    ]);\n}\n/**\n * @record\n */\nfunction StaticAndDynamicQueryIds() { }\nfunction StaticAndDynamicQueryIds_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticAndDynamicQueryIds.prototype.staticQueryIds;\n    /** @type {?} */\n    StaticAndDynamicQueryIds.prototype.dynamicQueryIds;\n}\n/**\n * @param {?} nodes\n * @param {?=} result\n * @return {?}\n */\nfunction findStaticQueryIds(nodes, result) {\n    if (result === void 0) { result = new Map(); }\n    nodes.forEach(function (node) {\n        var /** @type {?} */ staticQueryIds = new Set();\n        var /** @type {?} */ dynamicQueryIds = new Set();\n        var /** @type {?} */ queryMatches = /** @type {?} */ ((undefined));\n        if (node instanceof ElementAst) {\n            findStaticQueryIds(node.children, result);\n            node.children.forEach(function (child) {\n                var /** @type {?} */ childData = /** @type {?} */ ((result.get(child)));\n                childData.staticQueryIds.forEach(function (queryId) { return staticQueryIds.add(queryId); });\n                childData.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n            });\n            queryMatches = node.queryMatches;\n        }\n        else if (node instanceof EmbeddedTemplateAst) {\n            findStaticQueryIds(node.children, result);\n            node.children.forEach(function (child) {\n                var /** @type {?} */ childData = /** @type {?} */ ((result.get(child)));\n                childData.staticQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n                childData.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n            });\n            queryMatches = node.queryMatches;\n        }\n        if (queryMatches) {\n            queryMatches.forEach(function (match) { return staticQueryIds.add(match.queryId); });\n        }\n        dynamicQueryIds.forEach(function (queryId) { return staticQueryIds.delete(queryId); });\n        result.set(node, { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds });\n    });\n    return result;\n}\n/**\n * @param {?} nodeStaticQueryIds\n * @return {?}\n */\nfunction staticViewQueryIds(nodeStaticQueryIds) {\n    var /** @type {?} */ staticQueryIds = new Set();\n    var /** @type {?} */ dynamicQueryIds = new Set();\n    Array.from(nodeStaticQueryIds.values()).forEach(function (entry) {\n        entry.staticQueryIds.forEach(function (queryId) { return staticQueryIds.add(queryId); });\n        entry.dynamicQueryIds.forEach(function (queryId) { return dynamicQueryIds.add(queryId); });\n    });\n    dynamicQueryIds.forEach(function (queryId) { return staticQueryIds.delete(queryId); });\n    return { staticQueryIds: staticQueryIds, dynamicQueryIds: dynamicQueryIds };\n}\n/**\n * @param {?} eventAst\n * @param {?} dirAst\n * @return {?}\n */\nfunction elementEventNameAndTarget(eventAst, dirAst) {\n    if (eventAst.isAnimation) {\n        return {\n            name: \"@\" + eventAst.name + \".\" + eventAst.phase,\n            target: dirAst && dirAst.directive.isComponent ? 'component' : null\n        };\n    }\n    else {\n        return eventAst;\n    }\n}\n/**\n * @param {?} queryIds\n * @param {?} queryId\n * @param {?} isFirst\n * @return {?}\n */\nfunction calcStaticDynamicQueryFlags(queryIds, queryId, isFirst) {\n    var /** @type {?} */ flags = 0 /* None */;\n    // Note: We only make queries static that query for a single item.\n    // This is because of backwards compatibility with the old view compiler...\n    if (isFirst && (queryIds.staticQueryIds.has(queryId) || !queryIds.dynamicQueryIds.has(queryId))) {\n        flags |= 268435456 /* StaticQuery */;\n    }\n    else {\n        flags |= 536870912 /* DynamicQuery */;\n    }\n    return flags;\n}\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\nexport function elementEventFullName(target, name) {\n    return target ? target + \":\" + name : name;\n}\n//# sourceMappingURL=view_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport * as o from './output/output_ast';\nimport { error } from './util';\nvar /** @type {?} */ CONSTANT_PREFIX = '_c';\n// Closure variables holding messages must be named `MSG_[A-Z0-9]+`\nvar /** @type {?} */ TRANSLATION_PREFIX = 'MSG_';\n/** @enum {number} */\nvar DefinitionKind = { Injector: 0, Directive: 1, Component: 2, Pipe: 3, };\nexport { DefinitionKind };\n/**\n * Closure uses `goog.getMsg(message)` to lookup translations\n */\nvar /** @type {?} */ GOOG_GET_MSG = 'goog.getMsg';\n/**\n * Context to use when producing a key.\n *\n * This ensures we see the constant not the reference variable when producing\n * a key.\n */\nvar /** @type {?} */ KEY_CONTEXT = {};\n/**\n * A node that is a place-holder that allows the node to be replaced when the actual\n * node is known.\n *\n * This allows the constant pool to change an expression from a direct reference to\n * a constant to a shared constant. It returns a fix-up node that is later allowed to\n * change the referenced expression.\n */\nvar /**\n * A node that is a place-holder that allows the node to be replaced when the actual\n * node is known.\n *\n * This allows the constant pool to change an expression from a direct reference to\n * a constant to a shared constant. It returns a fix-up node that is later allowed to\n * change the referenced expression.\n */\nFixupExpression = /** @class */ (function (_super) {\n    tslib_1.__extends(FixupExpression, _super);\n    function FixupExpression(resolved) {\n        var _this = _super.call(this, resolved.type) || this;\n        _this.resolved = resolved;\n        _this.original = resolved;\n        return _this;\n    }\n    /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    FixupExpression.prototype.visitExpression = /**\n     * @param {?} visitor\n     * @param {?} context\n     * @return {?}\n     */\n    function (visitor, context) {\n        if (context === KEY_CONTEXT) {\n            // When producing a key we want to traverse the constant not the\n            // variable used to refer to it.\n            return this.original.visitExpression(visitor, context);\n        }\n        else {\n            return this.resolved.visitExpression(visitor, context);\n        }\n    };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    FixupExpression.prototype.isEquivalent = /**\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        return e instanceof FixupExpression && this.resolved.isEquivalent(e.resolved);\n    };\n    /**\n     * @return {?}\n     */\n    FixupExpression.prototype.isConstant = /**\n     * @return {?}\n     */\n    function () { return true; };\n    /**\n     * @param {?} expression\n     * @return {?}\n     */\n    FixupExpression.prototype.fixup = /**\n     * @param {?} expression\n     * @return {?}\n     */\n    function (expression) {\n        this.resolved = expression;\n        this.shared = true;\n    };\n    return FixupExpression;\n}(o.Expression));\nfunction FixupExpression_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FixupExpression.prototype.original;\n    /** @type {?} */\n    FixupExpression.prototype.shared;\n    /** @type {?} */\n    FixupExpression.prototype.resolved;\n}\n/**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nvar /**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nConstantPool = /** @class */ (function () {\n    function ConstantPool() {\n        this.statements = [];\n        this.translations = new Map();\n        this.literals = new Map();\n        this.literalFactories = new Map();\n        this.injectorDefinitions = new Map();\n        this.directiveDefinitions = new Map();\n        this.componentDefinitions = new Map();\n        this.pipeDefinitions = new Map();\n        this.nextNameIndex = 0;\n    }\n    /**\n     * @param {?} literal\n     * @param {?=} forceShared\n     * @return {?}\n     */\n    ConstantPool.prototype.getConstLiteral = /**\n     * @param {?} literal\n     * @param {?=} forceShared\n     * @return {?}\n     */\n    function (literal, forceShared) {\n        if (literal instanceof o.LiteralExpr || literal instanceof FixupExpression) {\n            // Do no put simple literals into the constant pool or try to produce a constant for a\n            // reference to a constant.\n            return literal;\n        }\n        var /** @type {?} */ key = this.keyOf(literal);\n        var /** @type {?} */ fixup = this.literals.get(key);\n        var /** @type {?} */ newValue = false;\n        if (!fixup) {\n            fixup = new FixupExpression(literal);\n            this.literals.set(key, fixup);\n            newValue = true;\n        }\n        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {\n            // Replace the expression with a variable\n            var /** @type {?} */ name_1 = this.freshName();\n            this.statements.push(o.variable(name_1).set(literal).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n            fixup.fixup(o.variable(name_1));\n        }\n        return fixup;\n    };\n    // Generates closure specific code for translation.\n    //\n    // ```\n    // /**\n    //  * @desc description?\n    //  * @meaning meaning?\n    //  */\n    // const MSG_XYZ = goog.getMsg('message');\n    // ```\n    /**\n     * @param {?} message\n     * @param {?} meta\n     * @return {?}\n     */\n    ConstantPool.prototype.getTranslation = /**\n     * @param {?} message\n     * @param {?} meta\n     * @return {?}\n     */\n    function (message, meta) {\n        // The identity of an i18n message depends on the message and its meaning\n        var /** @type {?} */ key = meta.meaning ? message + \"\\0\\0\" + meta.meaning : message;\n        var /** @type {?} */ exp = this.translations.get(key);\n        if (exp) {\n            return exp;\n        }\n        var /** @type {?} */ docStmt = i18nMetaToDocStmt(meta);\n        if (docStmt) {\n            this.statements.push(docStmt);\n        }\n        // Call closure to get the translation\n        var /** @type {?} */ variable = o.variable(this.freshTranslationName());\n        var /** @type {?} */ fnCall = o.variable(GOOG_GET_MSG).callFn([o.literal(message)]);\n        var /** @type {?} */ msgStmt = variable.set(fnCall).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]);\n        this.statements.push(msgStmt);\n        this.translations.set(key, variable);\n        return variable;\n    };\n    /**\n     * @param {?} type\n     * @param {?} kind\n     * @param {?} ctx\n     * @param {?=} forceShared\n     * @return {?}\n     */\n    ConstantPool.prototype.getDefinition = /**\n     * @param {?} type\n     * @param {?} kind\n     * @param {?} ctx\n     * @param {?=} forceShared\n     * @return {?}\n     */\n    function (type, kind, ctx, forceShared) {\n        if (forceShared === void 0) { forceShared = false; }\n        var /** @type {?} */ definitions = this.definitionsOf(kind);\n        var /** @type {?} */ fixup = definitions.get(type);\n        var /** @type {?} */ newValue = false;\n        if (!fixup) {\n            var /** @type {?} */ property = this.propertyNameOf(kind);\n            fixup = new FixupExpression(ctx.importExpr(type).prop(property));\n            definitions.set(type, fixup);\n            newValue = true;\n        }\n        if ((!newValue && !fixup.shared) || (newValue && forceShared)) {\n            var /** @type {?} */ name_2 = this.freshName();\n            this.statements.push(o.variable(name_2).set(fixup.resolved).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n            fixup.fixup(o.variable(name_2));\n        }\n        return fixup;\n    };\n    /**\n     * @param {?} literal\n     * @return {?}\n     */\n    ConstantPool.prototype.getLiteralFactory = /**\n     * @param {?} literal\n     * @return {?}\n     */\n    function (literal) {\n        // Create a pure function that builds an array of a mix of constant  and variable expressions\n        if (literal instanceof o.LiteralArrayExpr) {\n            var /** @type {?} */ argumentsForKey = literal.entries.map(function (e) { return e.isConstant() ? e : o.literal(null); });\n            var /** @type {?} */ key = this.keyOf(o.literalArr(argumentsForKey));\n            return this._getLiteralFactory(key, literal.entries, function (entries) { return o.literalArr(entries); });\n        }\n        else {\n            var /** @type {?} */ expressionForKey = o.literalMap(literal.entries.map(function (e) {\n                return ({\n                    key: e.key,\n                    value: e.value.isConstant() ? e.value : o.literal(null),\n                    quoted: e.quoted\n                });\n            }));\n            var /** @type {?} */ key = this.keyOf(expressionForKey);\n            return this._getLiteralFactory(key, literal.entries.map(function (e) { return e.value; }), function (entries) {\n                return o.literalMap(entries.map(function (value, index) {\n                    return ({\n                        key: literal.entries[index].key,\n                        value: value,\n                        quoted: literal.entries[index].quoted\n                    });\n                }));\n            });\n        }\n    };\n    /**\n     * @param {?} key\n     * @param {?} values\n     * @param {?} resultMap\n     * @return {?}\n     */\n    ConstantPool.prototype._getLiteralFactory = /**\n     * @param {?} key\n     * @param {?} values\n     * @param {?} resultMap\n     * @return {?}\n     */\n    function (key, values, resultMap) {\n        var _this = this;\n        var /** @type {?} */ literalFactory = this.literalFactories.get(key);\n        var /** @type {?} */ literalFactoryArguments = values.filter((function (e) { return !e.isConstant(); }));\n        if (!literalFactory) {\n            var /** @type {?} */ resultExpressions = values.map(function (e, index) { return e.isConstant() ? _this.getConstLiteral(e, true) : o.variable(\"a\" + index); });\n            var /** @type {?} */ parameters = resultExpressions.filter(isVariable).map(function (e) { return new o.FnParam(/** @type {?} */ ((e.name)), o.DYNAMIC_TYPE); });\n            var /** @type {?} */ pureFunctionDeclaration = o.fn(parameters, [new o.ReturnStatement(resultMap(resultExpressions))], o.INFERRED_TYPE);\n            var /** @type {?} */ name_3 = this.freshName();\n            this.statements.push(o.variable(name_3).set(pureFunctionDeclaration).toDeclStmt(o.INFERRED_TYPE, [\n                o.StmtModifier.Final\n            ]));\n            literalFactory = o.variable(name_3);\n            this.literalFactories.set(key, literalFactory);\n        }\n        return { literalFactory: literalFactory, literalFactoryArguments: literalFactoryArguments };\n    };\n    /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     */\n    /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     * @param {?} prefix\n     * @return {?}\n     */\n    ConstantPool.prototype.uniqueName = /**\n     * Produce a unique name.\n     *\n     * The name might be unique among different prefixes if any of the prefixes end in\n     * a digit so the prefix should be a constant string (not based on user input) and\n     * must not end in a digit.\n     * @param {?} prefix\n     * @return {?}\n     */\n    function (prefix) { return \"\" + prefix + this.nextNameIndex++; };\n    /**\n     * @param {?} kind\n     * @return {?}\n     */\n    ConstantPool.prototype.definitionsOf = /**\n     * @param {?} kind\n     * @return {?}\n     */\n    function (kind) {\n        switch (kind) {\n            case 2 /* Component */:\n                return this.componentDefinitions;\n            case 1 /* Directive */:\n                return this.directiveDefinitions;\n            case 0 /* Injector */:\n                return this.injectorDefinitions;\n            case 3 /* Pipe */:\n                return this.pipeDefinitions;\n        }\n        error(\"Unknown definition kind \" + kind);\n        return this.componentDefinitions;\n    };\n    /**\n     * @param {?} kind\n     * @return {?}\n     */\n    ConstantPool.prototype.propertyNameOf = /**\n     * @param {?} kind\n     * @return {?}\n     */\n    function (kind) {\n        switch (kind) {\n            case 2 /* Component */:\n                return 'ngComponentDef';\n            case 1 /* Directive */:\n                return 'ngDirectiveDef';\n            case 0 /* Injector */:\n                return 'ngInjectorDef';\n            case 3 /* Pipe */:\n                return 'ngPipeDef';\n        }\n        error(\"Unknown definition kind \" + kind);\n        return '<unknown>';\n    };\n    /**\n     * @return {?}\n     */\n    ConstantPool.prototype.freshName = /**\n     * @return {?}\n     */\n    function () { return this.uniqueName(CONSTANT_PREFIX); };\n    /**\n     * @return {?}\n     */\n    ConstantPool.prototype.freshTranslationName = /**\n     * @return {?}\n     */\n    function () {\n        return this.uniqueName(TRANSLATION_PREFIX).toUpperCase();\n    };\n    /**\n     * @param {?} expression\n     * @return {?}\n     */\n    ConstantPool.prototype.keyOf = /**\n     * @param {?} expression\n     * @return {?}\n     */\n    function (expression) {\n        return expression.visitExpression(new KeyVisitor(), KEY_CONTEXT);\n    };\n    return ConstantPool;\n}());\n/**\n * A constant pool allows a code emitter to share constant in an output context.\n *\n * The constant pool also supports sharing access to ivy definitions references.\n */\nexport { ConstantPool };\nfunction ConstantPool_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ConstantPool.prototype.statements;\n    /** @type {?} */\n    ConstantPool.prototype.translations;\n    /** @type {?} */\n    ConstantPool.prototype.literals;\n    /** @type {?} */\n    ConstantPool.prototype.literalFactories;\n    /** @type {?} */\n    ConstantPool.prototype.injectorDefinitions;\n    /** @type {?} */\n    ConstantPool.prototype.directiveDefinitions;\n    /** @type {?} */\n    ConstantPool.prototype.componentDefinitions;\n    /** @type {?} */\n    ConstantPool.prototype.pipeDefinitions;\n    /** @type {?} */\n    ConstantPool.prototype.nextNameIndex;\n}\n/**\n * Visitor used to determine if 2 expressions are equivalent and can be shared in the\n * `ConstantPool`.\n *\n * When the id (string) generated by the visitor is equal, expressions are considered equivalent.\n */\nvar /**\n * Visitor used to determine if 2 expressions are equivalent and can be shared in the\n * `ConstantPool`.\n *\n * When the id (string) generated by the visitor is equal, expressions are considered equivalent.\n */\nKeyVisitor = /** @class */ (function () {\n    function KeyVisitor() {\n        this.visitReadVarExpr = invalid;\n        this.visitWriteVarExpr = invalid;\n        this.visitWriteKeyExpr = invalid;\n        this.visitWritePropExpr = invalid;\n        this.visitInvokeMethodExpr = invalid;\n        this.visitInvokeFunctionExpr = invalid;\n        this.visitInstantiateExpr = invalid;\n        this.visitConditionalExpr = invalid;\n        this.visitNotExpr = invalid;\n        this.visitAssertNotNullExpr = invalid;\n        this.visitCastExpr = invalid;\n        this.visitFunctionExpr = invalid;\n        this.visitBinaryOperatorExpr = invalid;\n        this.visitReadPropExpr = invalid;\n        this.visitReadKeyExpr = invalid;\n        this.visitCommaExpr = invalid;\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    KeyVisitor.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        return \"\" + (typeof ast.value === 'string' ? '\"' + ast.value + '\"' : ast.value);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    KeyVisitor.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        return \"[\" + ast.entries.map(function (entry) { return entry.visitExpression(_this, context); }).join(',') + \"]\";\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    KeyVisitor.prototype.visitLiteralMapExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var _this = this;\n        var /** @type {?} */ mapKey = function (entry) {\n            var /** @type {?} */ quote = entry.quoted ? '\"' : '';\n            return \"\" + quote + entry.key + quote;\n        };\n        var /** @type {?} */ mapEntry = function (entry) {\n            return mapKey(entry) + \":\" + entry.value.visitExpression(_this, context);\n        };\n        return \"{\" + ast.entries.map(mapEntry).join(',');\n    };\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    KeyVisitor.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        return ast.value.moduleName ? \"EX:\" + ast.value.moduleName + \":\" + ast.value.name :\n            \"EX:\" + ast.value.runtime.name;\n    };\n    return KeyVisitor;\n}());\nfunction KeyVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    KeyVisitor.prototype.visitReadVarExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitWriteVarExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitWriteKeyExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitWritePropExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitInvokeMethodExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitInvokeFunctionExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitInstantiateExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitConditionalExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitNotExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitAssertNotNullExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitCastExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitFunctionExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitBinaryOperatorExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitReadPropExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitReadKeyExpr;\n    /** @type {?} */\n    KeyVisitor.prototype.visitCommaExpr;\n}\n/**\n * @template T\n * @param {?} arg\n * @return {?}\n */\nfunction invalid(arg) {\n    throw new Error(\"Invalid state: Visitor \" + this.constructor.name + \" doesn't handle \" + arg.constructor.name);\n}\n/**\n * @param {?} e\n * @return {?}\n */\nfunction isVariable(e) {\n    return e instanceof o.ReadVarExpr;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction i18nMetaToDocStmt(meta) {\n    var /** @type {?} */ tags = [];\n    if (meta.description) {\n        tags.push({ tagName: \"desc\" /* Desc */, text: meta.description });\n    }\n    if (meta.meaning) {\n        tags.push({ tagName: \"meaning\" /* Meaning */, text: meta.meaning });\n    }\n    return tags.length == 0 ? null : new o.JSDocCommentStmt(tags);\n}\n//# sourceMappingURL=constant_pool.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { extractMessages } from './extractor_merger';\nimport * as i18n from './i18n_ast';\n/**\n * A container for message extracted from the templates.\n */\nvar /**\n * A container for message extracted from the templates.\n */\nMessageBundle = /** @class */ (function () {\n    function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs, _locale) {\n        if (_locale === void 0) { _locale = null; }\n        this._htmlParser = _htmlParser;\n        this._implicitTags = _implicitTags;\n        this._implicitAttrs = _implicitAttrs;\n        this._locale = _locale;\n        this._messages = [];\n    }\n    /**\n     * @param {?} html\n     * @param {?} url\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    MessageBundle.prototype.updateFromTemplate = /**\n     * @param {?} html\n     * @param {?} url\n     * @param {?} interpolationConfig\n     * @return {?}\n     */\n    function (html, url, interpolationConfig) {\n        var /** @type {?} */ htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);\n        if (htmlParserResult.errors.length) {\n            return htmlParserResult.errors;\n        }\n        var /** @type {?} */ i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);\n        if (i18nParserResult.errors.length) {\n            return i18nParserResult.errors;\n        }\n        (_a = this._messages).push.apply(_a, i18nParserResult.messages);\n        return [];\n        var _a;\n    };\n    // Return the message in the internal format\n    // The public (serialized) format might be different, see the `write` method.\n    /**\n     * @return {?}\n     */\n    MessageBundle.prototype.getMessages = /**\n     * @return {?}\n     */\n    function () { return this._messages; };\n    /**\n     * @param {?} serializer\n     * @param {?=} filterSources\n     * @return {?}\n     */\n    MessageBundle.prototype.write = /**\n     * @param {?} serializer\n     * @param {?=} filterSources\n     * @return {?}\n     */\n    function (serializer, filterSources) {\n        var /** @type {?} */ messages = {};\n        var /** @type {?} */ mapperVisitor = new MapPlaceholderNames();\n        // Deduplicate messages based on their ID\n        this._messages.forEach(function (message) {\n            var /** @type {?} */ id = serializer.digest(message);\n            if (!messages.hasOwnProperty(id)) {\n                messages[id] = message;\n            }\n            else {\n                (_a = messages[id].sources).push.apply(_a, message.sources);\n            }\n            var _a;\n        });\n        // Transform placeholder names using the serializer mapping\n        var /** @type {?} */ msgList = Object.keys(messages).map(function (id) {\n            var /** @type {?} */ mapper = serializer.createNameMapper(messages[id]);\n            var /** @type {?} */ src = messages[id];\n            var /** @type {?} */ nodes = mapper ? mapperVisitor.convert(src.nodes, mapper) : src.nodes;\n            var /** @type {?} */ transformedMessage = new i18n.Message(nodes, {}, {}, src.meaning, src.description, id);\n            transformedMessage.sources = src.sources;\n            if (filterSources) {\n                transformedMessage.sources.forEach(function (source) { return source.filePath = filterSources(source.filePath); });\n            }\n            return transformedMessage;\n        });\n        return serializer.write(msgList, this._locale);\n    };\n    return MessageBundle;\n}());\n/**\n * A container for message extracted from the templates.\n */\nexport { MessageBundle };\nfunction MessageBundle_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MessageBundle.prototype._messages;\n    /** @type {?} */\n    MessageBundle.prototype._htmlParser;\n    /** @type {?} */\n    MessageBundle.prototype._implicitTags;\n    /** @type {?} */\n    MessageBundle.prototype._implicitAttrs;\n    /** @type {?} */\n    MessageBundle.prototype._locale;\n}\nvar MapPlaceholderNames = /** @class */ (function (_super) {\n    tslib_1.__extends(MapPlaceholderNames, _super);\n    function MapPlaceholderNames() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?} nodes\n     * @param {?} mapper\n     * @return {?}\n     */\n    MapPlaceholderNames.prototype.convert = /**\n     * @param {?} nodes\n     * @param {?} mapper\n     * @return {?}\n     */\n    function (nodes, mapper) {\n        var _this = this;\n        return mapper ? nodes.map(function (n) { return n.visit(_this, mapper); }) : nodes;\n    };\n    /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    MapPlaceholderNames.prototype.visitTagPlaceholder = /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    function (ph, mapper) {\n        var _this = this;\n        var /** @type {?} */ startName = /** @type {?} */ ((mapper.toPublicName(ph.startName)));\n        var /** @type {?} */ closeName = ph.closeName ? /** @type {?} */ ((mapper.toPublicName(ph.closeName))) : ph.closeName;\n        var /** @type {?} */ children = ph.children.map(function (n) { return n.visit(_this, mapper); });\n        return new i18n.TagPlaceholder(ph.tag, ph.attrs, startName, closeName, children, ph.isVoid, ph.sourceSpan);\n    };\n    /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    MapPlaceholderNames.prototype.visitPlaceholder = /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    function (ph, mapper) {\n        return new i18n.Placeholder(ph.value, /** @type {?} */ ((mapper.toPublicName(ph.name))), ph.sourceSpan);\n    };\n    /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    MapPlaceholderNames.prototype.visitIcuPlaceholder = /**\n     * @param {?} ph\n     * @param {?} mapper\n     * @return {?}\n     */\n    function (ph, mapper) {\n        return new i18n.IcuPlaceholder(ph.value, /** @type {?} */ ((mapper.toPublicName(ph.name))), ph.sourceSpan);\n    };\n    return MapPlaceholderNames;\n}(i18n.CloneVisitor));\n//# sourceMappingURL=message_bundle.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ CORE = '@angular/core';\nvar Identifiers = /** @class */ (function () {\n    function Identifiers() {\n    }\n    /* Methods */\n    Identifiers.NEW_METHOD = 'factory';\n    Identifiers.TRANSFORM_METHOD = 'transform';\n    Identifiers.PATCH_DEPS = 'patchedDeps';\n    /* Instructions */\n    Identifiers.createElement = { name: 'ɵE', moduleName: CORE };\n    Identifiers.elementEnd = { name: 'ɵe', moduleName: CORE };\n    Identifiers.elementProperty = { name: 'ɵp', moduleName: CORE };\n    Identifiers.elementAttribute = { name: 'ɵa', moduleName: CORE };\n    Identifiers.elementClassNamed = { name: 'ɵkn', moduleName: CORE };\n    Identifiers.elementStyleNamed = { name: 'ɵsn', moduleName: CORE };\n    Identifiers.containerCreate = { name: 'ɵC', moduleName: CORE };\n    Identifiers.text = { name: 'ɵT', moduleName: CORE };\n    Identifiers.textCreateBound = { name: 'ɵt', moduleName: CORE };\n    Identifiers.bind = { name: 'ɵb', moduleName: CORE };\n    Identifiers.interpolation1 = { name: 'ɵi1', moduleName: CORE };\n    Identifiers.interpolation2 = { name: 'ɵi2', moduleName: CORE };\n    Identifiers.interpolation3 = { name: 'ɵi3', moduleName: CORE };\n    Identifiers.interpolation4 = { name: 'ɵi4', moduleName: CORE };\n    Identifiers.interpolation5 = { name: 'ɵi5', moduleName: CORE };\n    Identifiers.interpolation6 = { name: 'ɵi6', moduleName: CORE };\n    Identifiers.interpolation7 = { name: 'ɵi7', moduleName: CORE };\n    Identifiers.interpolation8 = { name: 'ɵi8', moduleName: CORE };\n    Identifiers.interpolationV = { name: 'ɵiV', moduleName: CORE };\n    Identifiers.pureFunction0 = { name: 'ɵf0', moduleName: CORE };\n    Identifiers.pureFunction1 = { name: 'ɵf1', moduleName: CORE };\n    Identifiers.pureFunction2 = { name: 'ɵf2', moduleName: CORE };\n    Identifiers.pureFunction3 = { name: 'ɵf3', moduleName: CORE };\n    Identifiers.pureFunction4 = { name: 'ɵf4', moduleName: CORE };\n    Identifiers.pureFunction5 = { name: 'ɵf5', moduleName: CORE };\n    Identifiers.pureFunction6 = { name: 'ɵf6', moduleName: CORE };\n    Identifiers.pureFunction7 = { name: 'ɵf7', moduleName: CORE };\n    Identifiers.pureFunction8 = { name: 'ɵf8', moduleName: CORE };\n    Identifiers.pureFunctionV = { name: 'ɵfV', moduleName: CORE };\n    Identifiers.pipeBind1 = { name: 'ɵpb1', moduleName: CORE };\n    Identifiers.pipeBind2 = { name: 'ɵpb2', moduleName: CORE };\n    Identifiers.pipeBind3 = { name: 'ɵpb3', moduleName: CORE };\n    Identifiers.pipeBind4 = { name: 'ɵpb4', moduleName: CORE };\n    Identifiers.pipeBindV = { name: 'ɵpbV', moduleName: CORE };\n    Identifiers.load = { name: 'ɵld', moduleName: CORE };\n    Identifiers.pipe = { name: 'ɵPp', moduleName: CORE };\n    Identifiers.projection = { name: 'ɵP', moduleName: CORE };\n    Identifiers.projectionDef = { name: 'ɵpD', moduleName: CORE };\n    Identifiers.injectAttribute = { name: 'ɵinjectAttribute', moduleName: CORE };\n    Identifiers.injectElementRef = { name: 'ɵinjectElementRef', moduleName: CORE };\n    Identifiers.injectTemplateRef = { name: 'ɵinjectTemplateRef', moduleName: CORE };\n    Identifiers.injectViewContainerRef = { name: 'ɵinjectViewContainerRef', moduleName: CORE };\n    Identifiers.directiveInject = { name: 'ɵdirectiveInject', moduleName: CORE };\n    Identifiers.defineComponent = { name: 'ɵdefineComponent', moduleName: CORE };\n    Identifiers.defineDirective = {\n        name: 'ɵdefineDirective',\n        moduleName: CORE,\n    };\n    Identifiers.defineInjector = {\n        name: 'defineInjector',\n        moduleName: CORE,\n    };\n    Identifiers.definePipe = { name: 'ɵdefinePipe', moduleName: CORE };\n    Identifiers.query = { name: 'ɵQ', moduleName: CORE };\n    Identifiers.queryRefresh = { name: 'ɵqR', moduleName: CORE };\n    Identifiers.NgOnChangesFeature = { name: 'ɵNgOnChangesFeature', moduleName: CORE };\n    Identifiers.listener = { name: 'ɵL', moduleName: CORE };\n    return Identifiers;\n}());\nexport { Identifiers };\nfunction Identifiers_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Identifiers.NEW_METHOD;\n    /** @type {?} */\n    Identifiers.TRANSFORM_METHOD;\n    /** @type {?} */\n    Identifiers.PATCH_DEPS;\n    /** @type {?} */\n    Identifiers.createElement;\n    /** @type {?} */\n    Identifiers.elementEnd;\n    /** @type {?} */\n    Identifiers.elementProperty;\n    /** @type {?} */\n    Identifiers.elementAttribute;\n    /** @type {?} */\n    Identifiers.elementClassNamed;\n    /** @type {?} */\n    Identifiers.elementStyleNamed;\n    /** @type {?} */\n    Identifiers.containerCreate;\n    /** @type {?} */\n    Identifiers.text;\n    /** @type {?} */\n    Identifiers.textCreateBound;\n    /** @type {?} */\n    Identifiers.bind;\n    /** @type {?} */\n    Identifiers.interpolation1;\n    /** @type {?} */\n    Identifiers.interpolation2;\n    /** @type {?} */\n    Identifiers.interpolation3;\n    /** @type {?} */\n    Identifiers.interpolation4;\n    /** @type {?} */\n    Identifiers.interpolation5;\n    /** @type {?} */\n    Identifiers.interpolation6;\n    /** @type {?} */\n    Identifiers.interpolation7;\n    /** @type {?} */\n    Identifiers.interpolation8;\n    /** @type {?} */\n    Identifiers.interpolationV;\n    /** @type {?} */\n    Identifiers.pureFunction0;\n    /** @type {?} */\n    Identifiers.pureFunction1;\n    /** @type {?} */\n    Identifiers.pureFunction2;\n    /** @type {?} */\n    Identifiers.pureFunction3;\n    /** @type {?} */\n    Identifiers.pureFunction4;\n    /** @type {?} */\n    Identifiers.pureFunction5;\n    /** @type {?} */\n    Identifiers.pureFunction6;\n    /** @type {?} */\n    Identifiers.pureFunction7;\n    /** @type {?} */\n    Identifiers.pureFunction8;\n    /** @type {?} */\n    Identifiers.pureFunctionV;\n    /** @type {?} */\n    Identifiers.pipeBind1;\n    /** @type {?} */\n    Identifiers.pipeBind2;\n    /** @type {?} */\n    Identifiers.pipeBind3;\n    /** @type {?} */\n    Identifiers.pipeBind4;\n    /** @type {?} */\n    Identifiers.pipeBindV;\n    /** @type {?} */\n    Identifiers.load;\n    /** @type {?} */\n    Identifiers.pipe;\n    /** @type {?} */\n    Identifiers.projection;\n    /** @type {?} */\n    Identifiers.projectionDef;\n    /** @type {?} */\n    Identifiers.injectAttribute;\n    /** @type {?} */\n    Identifiers.injectElementRef;\n    /** @type {?} */\n    Identifiers.injectTemplateRef;\n    /** @type {?} */\n    Identifiers.injectViewContainerRef;\n    /** @type {?} */\n    Identifiers.directiveInject;\n    /** @type {?} */\n    Identifiers.defineComponent;\n    /** @type {?} */\n    Identifiers.defineDirective;\n    /** @type {?} */\n    Identifiers.defineInjector;\n    /** @type {?} */\n    Identifiers.definePipe;\n    /** @type {?} */\n    Identifiers.query;\n    /** @type {?} */\n    Identifiers.queryRefresh;\n    /** @type {?} */\n    Identifiers.NgOnChangesFeature;\n    /** @type {?} */\n    Identifiers.listener;\n}\n//# sourceMappingURL=r3_identifiers.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { StaticSymbol } from '../aot/static_symbol';\nimport { identifierName } from '../compile_metadata';\nimport { mapLiteral } from '../output/map_util';\nimport * as o from '../output/output_ast';\nimport { Identifiers as R3 } from './r3_identifiers';\n/**\n * @param {?} meta\n * @param {?} ctx\n * @return {?}\n */\nfunction convertMetaToOutput(meta, ctx) {\n    if (Array.isArray(meta)) {\n        return o.literalArr(meta.map(function (entry) { return convertMetaToOutput(entry, ctx); }));\n    }\n    if (meta instanceof StaticSymbol) {\n        return ctx.importExpr(meta);\n    }\n    if (meta == null) {\n        return o.literal(meta);\n    }\n    throw new Error(\"Internal error: Unsupported or unknown metadata: \" + meta);\n}\n/**\n * @param {?} ctx\n * @param {?} ngModule\n * @param {?} injectableCompiler\n * @return {?}\n */\nexport function compileNgModule(ctx, ngModule, injectableCompiler) {\n    var /** @type {?} */ className = /** @type {?} */ ((identifierName(ngModule.type)));\n    var /** @type {?} */ rawImports = ngModule.rawImports ? [ngModule.rawImports] : [];\n    var /** @type {?} */ rawExports = ngModule.rawExports ? [ngModule.rawExports] : [];\n    var /** @type {?} */ injectorDefArg = mapLiteral({\n        'factory': injectableCompiler.factoryFor({ type: ngModule.type, symbol: ngModule.type.reference }, ctx),\n        'providers': convertMetaToOutput(ngModule.rawProviders, ctx),\n        'imports': convertMetaToOutput(rawImports.concat(rawExports), ctx),\n    });\n    var /** @type {?} */ injectorDef = o.importExpr(R3.defineInjector).callFn([injectorDefArg]);\n    ctx.statements.push(new o.ClassStmt(className, null, /* fields */ [new o.ClassField('ngInjectorDef', /* type */ o.INFERRED_TYPE, /* modifiers */ [o.StmtModifier.Static], injectorDef)], /* getters */ [], /* constructorMethod */ new o.ClassMethod(null, [], []), /* methods */ []));\n}\n//# sourceMappingURL=r3_module_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from './output_ast';\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\nexport function mapEntry(key, value) {\n    return { key: key, value: value, quoted: false };\n}\n/**\n * @param {?} obj\n * @return {?}\n */\nexport function mapLiteral(obj) {\n    return o.literalMap(Object.keys(obj).map(function (key) {\n        return ({\n            key: key,\n            quoted: false,\n            value: obj[key],\n        });\n    }));\n}\n//# sourceMappingURL=map_util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nexport function Node() { }\nfunction Node_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Node.prototype.sourceSpan;\n    /** @type {?} */\n    Node.prototype.visit;\n}\nvar Text = /** @class */ (function () {\n    function Text(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    Text.prototype.visit = /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitText(this); };\n    return Text;\n}());\nexport { Text };\nfunction Text_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Text.prototype.value;\n    /** @type {?} */\n    Text.prototype.sourceSpan;\n}\nvar BoundText = /** @class */ (function () {\n    function BoundText(value, sourceSpan) {\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    BoundText.prototype.visit = /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitBoundText(this); };\n    return BoundText;\n}());\nexport { BoundText };\nfunction BoundText_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundText.prototype.value;\n    /** @type {?} */\n    BoundText.prototype.sourceSpan;\n}\nvar TextAttribute = /** @class */ (function () {\n    function TextAttribute(name, value, sourceSpan, valueSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n        this.valueSpan = valueSpan;\n    }\n    /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    TextAttribute.prototype.visit = /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitAttribute(this); };\n    return TextAttribute;\n}());\nexport { TextAttribute };\nfunction TextAttribute_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TextAttribute.prototype.name;\n    /** @type {?} */\n    TextAttribute.prototype.value;\n    /** @type {?} */\n    TextAttribute.prototype.sourceSpan;\n    /** @type {?} */\n    TextAttribute.prototype.valueSpan;\n}\nvar BoundAttribute = /** @class */ (function () {\n    function BoundAttribute(name, type, securityContext, value, unit, sourceSpan) {\n        this.name = name;\n        this.type = type;\n        this.securityContext = securityContext;\n        this.value = value;\n        this.unit = unit;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} prop\n     * @return {?}\n     */\n    BoundAttribute.fromBoundElementProperty = /**\n     * @param {?} prop\n     * @return {?}\n     */\n    function (prop) {\n        return new BoundAttribute(prop.name, prop.type, prop.securityContext, prop.value, prop.unit, prop.sourceSpan);\n    };\n    /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    BoundAttribute.prototype.visit = /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitBoundAttribute(this); };\n    return BoundAttribute;\n}());\nexport { BoundAttribute };\nfunction BoundAttribute_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundAttribute.prototype.name;\n    /** @type {?} */\n    BoundAttribute.prototype.type;\n    /** @type {?} */\n    BoundAttribute.prototype.securityContext;\n    /** @type {?} */\n    BoundAttribute.prototype.value;\n    /** @type {?} */\n    BoundAttribute.prototype.unit;\n    /** @type {?} */\n    BoundAttribute.prototype.sourceSpan;\n}\nvar BoundEvent = /** @class */ (function () {\n    function BoundEvent(name, handler, target, phase, sourceSpan) {\n        this.name = name;\n        this.handler = handler;\n        this.target = target;\n        this.phase = phase;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    BoundEvent.fromParsedEvent = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var /** @type {?} */ target = event.type === 0 /* Regular */ ? event.targetOrPhase : null;\n        var /** @type {?} */ phase = event.type === 1 /* Animation */ ? event.targetOrPhase : null;\n        return new BoundEvent(event.name, event.handler, target, phase, event.sourceSpan);\n    };\n    /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    BoundEvent.prototype.visit = /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitBoundEvent(this); };\n    return BoundEvent;\n}());\nexport { BoundEvent };\nfunction BoundEvent_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BoundEvent.prototype.name;\n    /** @type {?} */\n    BoundEvent.prototype.handler;\n    /** @type {?} */\n    BoundEvent.prototype.target;\n    /** @type {?} */\n    BoundEvent.prototype.phase;\n    /** @type {?} */\n    BoundEvent.prototype.sourceSpan;\n}\nvar Element = /** @class */ (function () {\n    function Element(name, attributes, inputs, outputs, children, references, sourceSpan, startSourceSpan, endSourceSpan) {\n        this.name = name;\n        this.attributes = attributes;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.children = children;\n        this.references = references;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    Element.prototype.visit = /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitElement(this); };\n    return Element;\n}());\nexport { Element };\nfunction Element_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Element.prototype.name;\n    /** @type {?} */\n    Element.prototype.attributes;\n    /** @type {?} */\n    Element.prototype.inputs;\n    /** @type {?} */\n    Element.prototype.outputs;\n    /** @type {?} */\n    Element.prototype.children;\n    /** @type {?} */\n    Element.prototype.references;\n    /** @type {?} */\n    Element.prototype.sourceSpan;\n    /** @type {?} */\n    Element.prototype.startSourceSpan;\n    /** @type {?} */\n    Element.prototype.endSourceSpan;\n}\nvar Template = /** @class */ (function () {\n    function Template(attributes, inputs, children, references, variables, sourceSpan, startSourceSpan, endSourceSpan) {\n        this.attributes = attributes;\n        this.inputs = inputs;\n        this.children = children;\n        this.references = references;\n        this.variables = variables;\n        this.sourceSpan = sourceSpan;\n        this.startSourceSpan = startSourceSpan;\n        this.endSourceSpan = endSourceSpan;\n    }\n    /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    Template.prototype.visit = /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitTemplate(this); };\n    return Template;\n}());\nexport { Template };\nfunction Template_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Template.prototype.attributes;\n    /** @type {?} */\n    Template.prototype.inputs;\n    /** @type {?} */\n    Template.prototype.children;\n    /** @type {?} */\n    Template.prototype.references;\n    /** @type {?} */\n    Template.prototype.variables;\n    /** @type {?} */\n    Template.prototype.sourceSpan;\n    /** @type {?} */\n    Template.prototype.startSourceSpan;\n    /** @type {?} */\n    Template.prototype.endSourceSpan;\n}\nvar Content = /** @class */ (function () {\n    function Content(selectorIndex, attributes, sourceSpan) {\n        this.selectorIndex = selectorIndex;\n        this.attributes = attributes;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    Content.prototype.visit = /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitContent(this); };\n    return Content;\n}());\nexport { Content };\nfunction Content_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Content.prototype.selectorIndex;\n    /** @type {?} */\n    Content.prototype.attributes;\n    /** @type {?} */\n    Content.prototype.sourceSpan;\n}\nvar Variable = /** @class */ (function () {\n    function Variable(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    Variable.prototype.visit = /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitVariable(this); };\n    return Variable;\n}());\nexport { Variable };\nfunction Variable_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Variable.prototype.name;\n    /** @type {?} */\n    Variable.prototype.value;\n    /** @type {?} */\n    Variable.prototype.sourceSpan;\n}\nvar Reference = /** @class */ (function () {\n    function Reference(name, value, sourceSpan) {\n        this.name = name;\n        this.value = value;\n        this.sourceSpan = sourceSpan;\n    }\n    /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    Reference.prototype.visit = /**\n     * @template Result\n     * @param {?} visitor\n     * @return {?}\n     */\n    function (visitor) { return visitor.visitReference(this); };\n    return Reference;\n}());\nexport { Reference };\nfunction Reference_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Reference.prototype.name;\n    /** @type {?} */\n    Reference.prototype.value;\n    /** @type {?} */\n    Reference.prototype.sourceSpan;\n}\n/**\n * @record\n * @template Result\n */\nexport function Visitor() { }\nfunction Visitor_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    Visitor.prototype.visit;\n    /** @type {?} */\n    Visitor.prototype.visitElement;\n    /** @type {?} */\n    Visitor.prototype.visitTemplate;\n    /** @type {?} */\n    Visitor.prototype.visitContent;\n    /** @type {?} */\n    Visitor.prototype.visitVariable;\n    /** @type {?} */\n    Visitor.prototype.visitReference;\n    /** @type {?} */\n    Visitor.prototype.visitAttribute;\n    /** @type {?} */\n    Visitor.prototype.visitBoundAttribute;\n    /** @type {?} */\n    Visitor.prototype.visitBoundEvent;\n    /** @type {?} */\n    Visitor.prototype.visitText;\n    /** @type {?} */\n    Visitor.prototype.visitBoundText;\n}\nvar NullVisitor = /** @class */ (function () {\n    function NullVisitor() {\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    NullVisitor.prototype.visitElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) { };\n    /**\n     * @param {?} template\n     * @return {?}\n     */\n    NullVisitor.prototype.visitTemplate = /**\n     * @param {?} template\n     * @return {?}\n     */\n    function (template) { };\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    NullVisitor.prototype.visitContent = /**\n     * @param {?} content\n     * @return {?}\n     */\n    function (content) { };\n    /**\n     * @param {?} variable\n     * @return {?}\n     */\n    NullVisitor.prototype.visitVariable = /**\n     * @param {?} variable\n     * @return {?}\n     */\n    function (variable) { };\n    /**\n     * @param {?} reference\n     * @return {?}\n     */\n    NullVisitor.prototype.visitReference = /**\n     * @param {?} reference\n     * @return {?}\n     */\n    function (reference) { };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    NullVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) { };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    NullVisitor.prototype.visitBoundAttribute = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) { };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    NullVisitor.prototype.visitBoundEvent = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) { };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    NullVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    NullVisitor.prototype.visitBoundText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { };\n    return NullVisitor;\n}());\nexport { NullVisitor };\nvar RecursiveVisitor = /** @class */ (function () {\n    function RecursiveVisitor() {\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        visitAll(this, element.attributes);\n        visitAll(this, element.children);\n        visitAll(this, element.references);\n    };\n    /**\n     * @param {?} template\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitTemplate = /**\n     * @param {?} template\n     * @return {?}\n     */\n    function (template) {\n        visitAll(this, template.attributes);\n        visitAll(this, template.children);\n        visitAll(this, template.references);\n        visitAll(this, template.variables);\n    };\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitContent = /**\n     * @param {?} content\n     * @return {?}\n     */\n    function (content) { };\n    /**\n     * @param {?} variable\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitVariable = /**\n     * @param {?} variable\n     * @return {?}\n     */\n    function (variable) { };\n    /**\n     * @param {?} reference\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitReference = /**\n     * @param {?} reference\n     * @return {?}\n     */\n    function (reference) { };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) { };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitBoundAttribute = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) { };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitBoundEvent = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) { };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    RecursiveVisitor.prototype.visitBoundText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { };\n    return RecursiveVisitor;\n}());\nexport { RecursiveVisitor };\nvar TransformVisitor = /** @class */ (function () {\n    function TransformVisitor() {\n    }\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    TransformVisitor.prototype.visitElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        var /** @type {?} */ newAttributes = transformAll(this, element.attributes);\n        var /** @type {?} */ newInputs = transformAll(this, element.inputs);\n        var /** @type {?} */ newOutputs = transformAll(this, element.outputs);\n        var /** @type {?} */ newChildren = transformAll(this, element.children);\n        var /** @type {?} */ newReferences = transformAll(this, element.references);\n        if (newAttributes != element.attributes || newInputs != element.inputs ||\n            newOutputs != element.outputs || newChildren != element.children ||\n            newReferences != element.references) {\n            return new Element(element.name, newAttributes, newInputs, newOutputs, newChildren, newReferences, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n        }\n        return element;\n    };\n    /**\n     * @param {?} template\n     * @return {?}\n     */\n    TransformVisitor.prototype.visitTemplate = /**\n     * @param {?} template\n     * @return {?}\n     */\n    function (template) {\n        var /** @type {?} */ newAttributes = transformAll(this, template.attributes);\n        var /** @type {?} */ newInputs = transformAll(this, template.inputs);\n        var /** @type {?} */ newChildren = transformAll(this, template.children);\n        var /** @type {?} */ newReferences = transformAll(this, template.references);\n        var /** @type {?} */ newVariables = transformAll(this, template.variables);\n        if (newAttributes != template.attributes || newInputs != template.inputs ||\n            newChildren != template.children || newVariables != template.variables ||\n            newReferences != template.references) {\n            return new Template(newAttributes, newInputs, newChildren, newReferences, newVariables, template.sourceSpan, template.startSourceSpan, template.endSourceSpan);\n        }\n        return template;\n    };\n    /**\n     * @param {?} content\n     * @return {?}\n     */\n    TransformVisitor.prototype.visitContent = /**\n     * @param {?} content\n     * @return {?}\n     */\n    function (content) { return content; };\n    /**\n     * @param {?} variable\n     * @return {?}\n     */\n    TransformVisitor.prototype.visitVariable = /**\n     * @param {?} variable\n     * @return {?}\n     */\n    function (variable) { return variable; };\n    /**\n     * @param {?} reference\n     * @return {?}\n     */\n    TransformVisitor.prototype.visitReference = /**\n     * @param {?} reference\n     * @return {?}\n     */\n    function (reference) { return reference; };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    TransformVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) { return attribute; };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    TransformVisitor.prototype.visitBoundAttribute = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) { return attribute; };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    TransformVisitor.prototype.visitBoundEvent = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) { return attribute; };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    TransformVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { return text; };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    TransformVisitor.prototype.visitBoundText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { return text; };\n    return TransformVisitor;\n}());\nexport { TransformVisitor };\n/**\n * @template Result\n * @param {?} visitor\n * @param {?} nodes\n * @return {?}\n */\nexport function visitAll(visitor, nodes) {\n    var /** @type {?} */ result = [];\n    if (visitor.visit) {\n        for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n            var node = nodes_1[_i];\n            var /** @type {?} */ newNode = visitor.visit(node) || node.visit(visitor);\n        }\n    }\n    else {\n        for (var _a = 0, nodes_2 = nodes; _a < nodes_2.length; _a++) {\n            var node = nodes_2[_a];\n            var /** @type {?} */ newNode = node.visit(visitor);\n            if (newNode) {\n                result.push(newNode);\n            }\n        }\n    }\n    return result;\n}\n/**\n * @template Result\n * @param {?} visitor\n * @param {?} nodes\n * @return {?}\n */\nexport function transformAll(visitor, nodes) {\n    var /** @type {?} */ result = [];\n    var /** @type {?} */ changed = false;\n    for (var _i = 0, nodes_3 = nodes; _i < nodes_3.length; _i++) {\n        var node = nodes_3[_i];\n        var /** @type {?} */ newNode = node.visit(visitor);\n        if (newNode) {\n            result.push(/** @type {?} */ (newNode));\n        }\n        changed = changed || newNode != node;\n    }\n    return changed ? result : nodes;\n}\n//# sourceMappingURL=r3_ast.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { flatten, identifierName, sanitizeIdentifier, tokenReference } from '../compile_metadata';\nimport { BindingForm, BuiltinFunctionCall, convertActionBinding, convertPropertyBinding } from '../compiler_util/expression_converter';\nimport * as core from '../core';\nimport { AstMemoryEfficientTransformer, FunctionCall, ImplicitReceiver, LiteralPrimitive, PropertyRead } from '../expression_parser/ast';\nimport { Identifiers } from '../identifiers';\nimport { LifecycleHooks } from '../lifecycle_reflector';\nimport * as o from '../output/output_ast';\nimport { typeSourceSpan } from '../parse_util';\nimport { CssSelector, SelectorMatcher } from '../selector';\nimport { error } from '../util';\nimport * as t from './r3_ast';\nimport { Identifiers as R3 } from './r3_identifiers';\n/**\n * Name of the context parameter passed into a template function\n */\nvar /** @type {?} */ CONTEXT_NAME = 'ctx';\n/**\n * Name of the RenderFlag passed into a template function\n */\nvar /** @type {?} */ RENDER_FLAGS = 'rf';\n/**\n * Name of the temporary to use during data binding\n */\nvar /** @type {?} */ TEMPORARY_NAME = '_t';\n/**\n * The prefix reference variables\n */\nvar /** @type {?} */ REFERENCE_PREFIX = '_r';\n/**\n * The name of the implicit context reference\n */\nvar /** @type {?} */ IMPLICIT_REFERENCE = '$implicit';\n/**\n * Name of the i18n attributes *\n */\nvar /** @type {?} */ I18N_ATTR = 'i18n';\nvar /** @type {?} */ I18N_ATTR_PREFIX = 'i18n-';\n/**\n * I18n separators for metadata *\n */\nvar /** @type {?} */ MEANING_SEPARATOR = '|';\nvar /** @type {?} */ ID_SEPARATOR = '@@';\n/**\n * @param {?} outputCtx\n * @param {?} directive\n * @param {?} reflector\n * @param {?} bindingParser\n * @return {?}\n */\nexport function compileDirective(outputCtx, directive, reflector, bindingParser) {\n    var /** @type {?} */ definitionMapValues = [];\n    var /** @type {?} */ field = function (key, value) {\n        if (value) {\n            definitionMapValues.push({ key: key, value: value, quoted: false });\n        }\n    };\n    // e.g. `type: MyDirective`\n    field('type', outputCtx.importExpr(directive.type.reference));\n    // e.g. `selectors: [['', 'someDir', '']]`\n    field('selectors', createDirectiveSelector(/** @type {?} */ ((directive.selector))));\n    // e.g. `factory: () => new MyApp(injectElementRef())`\n    field('factory', createFactory(directive.type, outputCtx, reflector, directive.queries));\n    // e.g. `hostBindings: (dirIndex, elIndex) => { ... }\n    field('hostBindings', createHostBindingsFunction(directive, outputCtx, bindingParser));\n    // e.g. `attributes: ['role', 'listbox']`\n    field('attributes', createHostAttributesArray(directive, outputCtx));\n    // e.g 'inputs: {a: 'a'}`\n    field('inputs', conditionallyCreateMapObjectLiteral(directive.inputs));\n    // e.g 'outputs: {a: 'a'}`\n    field('outputs', conditionallyCreateMapObjectLiteral(directive.outputs));\n    var /** @type {?} */ className = /** @type {?} */ ((identifierName(directive.type)));\n    className || error(\"Cannot resolver the name of \" + directive.type);\n    var /** @type {?} */ definitionField = outputCtx.constantPool.propertyNameOf(1 /* Directive */);\n    var /** @type {?} */ definitionFunction = o.importExpr(R3.defineDirective).callFn([o.literalMap(definitionMapValues)]);\n    // Create the partial class to be merged with the actual class.\n    outputCtx.statements.push(new o.ClassStmt(className, null, [new o.ClassField(definitionField, o.INFERRED_TYPE, [o.StmtModifier.Static], definitionFunction)], [], new o.ClassMethod(null, [], []), []));\n}\n/**\n * @param {?} outputCtx\n * @param {?} component\n * @param {?} nodes\n * @param {?} hasNgContent\n * @param {?} ngContentSelectors\n * @param {?} reflector\n * @param {?} bindingParser\n * @param {?} directiveTypeBySel\n * @param {?} pipeTypeByName\n * @return {?}\n */\nexport function compileComponent(outputCtx, component, nodes, hasNgContent, ngContentSelectors, reflector, bindingParser, directiveTypeBySel, pipeTypeByName) {\n    var /** @type {?} */ definitionMapValues = [];\n    var /** @type {?} */ field = function (key, value) {\n        if (value) {\n            definitionMapValues.push({ key: key, value: value, quoted: false });\n        }\n    };\n    // Generate the CSS matcher that recognize directive\n    var /** @type {?} */ directiveMatcher = null;\n    if (directiveTypeBySel.size) {\n        var /** @type {?} */ matcher_1 = new SelectorMatcher();\n        directiveTypeBySel.forEach(function (staticType, selector) {\n            matcher_1.addSelectables(CssSelector.parse(selector), staticType);\n        });\n        directiveMatcher = matcher_1;\n    }\n    // Directives and Pipes used from the template\n    var /** @type {?} */ directives = new Set();\n    var /** @type {?} */ pipes = new Set();\n    // e.g. `type: MyApp`\n    field('type', outputCtx.importExpr(component.type.reference));\n    // e.g. `selectors: [['my-app']]`\n    field('selectors', createDirectiveSelector(/** @type {?} */ ((component.selector))));\n    var /** @type {?} */ selector = component.selector && CssSelector.parse(component.selector);\n    var /** @type {?} */ firstSelector = selector && selector[0];\n    // e.g. `attr: [\"class\", \".my.app\"]`\n    // This is optional an only included if the first selector of a component specifies attributes.\n    if (firstSelector) {\n        var /** @type {?} */ selectorAttributes = firstSelector.getAttrs();\n        if (selectorAttributes.length) {\n            field('attrs', outputCtx.constantPool.getConstLiteral(o.literalArr(selectorAttributes.map(function (value) { return value != null ? o.literal(value) : o.literal(undefined); })), /* forceShared */ true));\n        }\n    }\n    // e.g. `factory: function MyApp_Factory() { return new MyApp(injectElementRef()); }`\n    field('factory', createFactory(component.type, outputCtx, reflector, component.queries));\n    // e.g `hostBindings: function MyApp_HostBindings { ... }\n    field('hostBindings', createHostBindingsFunction(component, outputCtx, bindingParser));\n    // e.g. `template: function MyComponent_Template(_ctx, _cm) {...}`\n    var /** @type {?} */ templateTypeName = component.type.reference.name;\n    var /** @type {?} */ templateName = templateTypeName ? templateTypeName + \"_Template\" : null;\n    var /** @type {?} */ templateFunctionExpression = new TemplateDefinitionBuilder(outputCtx, outputCtx.constantPool, reflector, CONTEXT_NAME, BindingScope.ROOT_SCOPE, 0, templateTypeName, templateName, component.viewQueries, directiveMatcher, directives, pipeTypeByName, pipes)\n        .buildTemplateFunction(nodes, [], hasNgContent, ngContentSelectors);\n    field('template', templateFunctionExpression);\n    // e.g. `directives: [MyDirective]`\n    if (directives.size) {\n        var /** @type {?} */ expressions = Array.from(directives).map(function (d) { return outputCtx.importExpr(d); });\n        field('directives', o.literalArr(expressions));\n    }\n    // e.g. `pipes: [MyPipe]`\n    if (pipes.size) {\n        var /** @type {?} */ expressions = Array.from(pipes).map(function (d) { return outputCtx.importExpr(d); });\n        field('pipes', o.literalArr(expressions));\n    }\n    // e.g `inputs: {a: 'a'}`\n    field('inputs', conditionallyCreateMapObjectLiteral(component.inputs));\n    // e.g 'outputs: {a: 'a'}`\n    field('outputs', conditionallyCreateMapObjectLiteral(component.outputs));\n    // e.g. `features: [NgOnChangesFeature(MyComponent)]`\n    var /** @type {?} */ features = [];\n    if (component.type.lifecycleHooks.some(function (lifecycle) { return lifecycle == LifecycleHooks.OnChanges; })) {\n        features.push(o.importExpr(R3.NgOnChangesFeature, null, null).callFn([outputCtx.importExpr(component.type.reference)]));\n    }\n    if (features.length) {\n        field('features', o.literalArr(features));\n    }\n    var /** @type {?} */ definitionField = outputCtx.constantPool.propertyNameOf(2 /* Component */);\n    var /** @type {?} */ definitionFunction = o.importExpr(R3.defineComponent).callFn([o.literalMap(definitionMapValues)]);\n    var /** @type {?} */ className = /** @type {?} */ ((identifierName(component.type)));\n    className || error(\"Cannot resolver the name of \" + component.type);\n    // Create the partial class to be merged with the actual class.\n    outputCtx.statements.push(new o.ClassStmt(className, null, [new o.ClassField(definitionField, o.INFERRED_TYPE, [o.StmtModifier.Static], definitionFunction)], [], new o.ClassMethod(null, [], []), []));\n}\n/**\n * @param {?} feature\n * @return {?}\n */\nfunction unsupported(feature) {\n    if (this) {\n        throw new Error(\"Builder \" + this.constructor.name + \" doesn't support \" + feature + \" yet\");\n    }\n    throw new Error(\"Feature \" + feature + \" is not supported yet\");\n}\nvar /** @type {?} */ BINDING_INSTRUCTION_MAP = (_a = {},\n    _a[0 /* Property */] = R3.elementProperty,\n    _a[1 /* Attribute */] = R3.elementAttribute,\n    _a[2 /* Class */] = R3.elementClassNamed,\n    _a[3 /* Style */] = R3.elementStyleNamed,\n    _a);\n/**\n * @param {?} args\n * @return {?}\n */\nfunction interpolate(args) {\n    args = args.slice(1); // Ignore the length prefix added for render2\n    switch (args.length) {\n        case 3:\n            return o.importExpr(R3.interpolation1).callFn(args);\n        case 5:\n            return o.importExpr(R3.interpolation2).callFn(args);\n        case 7:\n            return o.importExpr(R3.interpolation3).callFn(args);\n        case 9:\n            return o.importExpr(R3.interpolation4).callFn(args);\n        case 11:\n            return o.importExpr(R3.interpolation5).callFn(args);\n        case 13:\n            return o.importExpr(R3.interpolation6).callFn(args);\n        case 15:\n            return o.importExpr(R3.interpolation7).callFn(args);\n        case 17:\n            return o.importExpr(R3.interpolation8).callFn(args);\n    }\n    (args.length >= 19 && args.length % 2 == 1) ||\n        error(\"Invalid interpolation argument length \" + args.length);\n    return o.importExpr(R3.interpolationV).callFn([o.literalArr(args)]);\n}\n// Pipes always have at least one parameter, the value they operate on\nvar /** @type {?} */ pipeBindingIdentifiers = [R3.pipeBind1, R3.pipeBind2, R3.pipeBind3, R3.pipeBind4];\n/**\n * @param {?} args\n * @return {?}\n */\nfunction pipeBinding(args) {\n    return pipeBindingIdentifiers[args.length] || R3.pipeBindV;\n}\nvar /** @type {?} */ pureFunctionIdentifiers = [\n    R3.pureFunction0, R3.pureFunction1, R3.pureFunction2, R3.pureFunction3, R3.pureFunction4,\n    R3.pureFunction5, R3.pureFunction6, R3.pureFunction7, R3.pureFunction8\n];\n/**\n * @param {?} outputContext\n * @param {?} literal\n * @return {?}\n */\nfunction getLiteralFactory(outputContext, literal) {\n    var _a = outputContext.constantPool.getLiteralFactory(literal), literalFactory = _a.literalFactory, literalFactoryArguments = _a.literalFactoryArguments;\n    literalFactoryArguments.length > 0 || error(\"Expected arguments to a literal factory function\");\n    var /** @type {?} */ pureFunctionIdent = pureFunctionIdentifiers[literalFactoryArguments.length] || R3.pureFunctionV;\n    // Literal factories are pure functions that only need to be re-invoked when the parameters\n    // change.\n    return o.importExpr(pureFunctionIdent).callFn([literalFactory].concat(literalFactoryArguments));\n}\n/**\n * @return {?}\n */\nfunction noop() { }\nvar BindingScope = /** @class */ (function () {\n    function BindingScope(parent, declareLocalVarCallback) {\n        if (parent === void 0) { parent = null; }\n        if (declareLocalVarCallback === void 0) { declareLocalVarCallback = noop; }\n        this.parent = parent;\n        this.declareLocalVarCallback = declareLocalVarCallback;\n        /**\n         * Keeps a map from local variables to their expressions.\n         *\n         * This is used when one refers to variable such as: 'let abc = a.b.c`.\n         * - key to the map is the string literal `\"abc\"`.\n         * - value `lhs` is the left hand side which is an AST representing `abc`.\n         * - value `rhs` is the right hand side which is an AST representing `a.b.c`.\n         * - value `declared` is true if the `declareLocalVarCallback` has been called for this scope\n         * already.\n         */\n        this.map = new Map();\n        this.referenceNameIndex = 0;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    BindingScope.prototype.get = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        var /** @type {?} */ current = this;\n        while (current) {\n            var /** @type {?} */ value = current.map.get(name);\n            if (value != null) {\n                if (current !== this) {\n                    // make a local copy and reset the `declared` state.\n                    value = { lhs: value.lhs, rhs: value.rhs, declared: false };\n                    // Cache the value locally.\n                    this.map.set(name, value);\n                }\n                if (value.rhs && !value.declared) {\n                    // if it is first time we are referencing the variable in the scope\n                    // than invoke the callback to insert variable declaration.\n                    this.declareLocalVarCallback(value.lhs, value.rhs);\n                    value.declared = true;\n                }\n                return value.lhs;\n            }\n            current = current.parent;\n        }\n        return null;\n    };\n    /**\n     * Create a local variable for later reference.\n     *\n     * @param name Name of the variable.\n     * @param lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param rhs AST representing the right hand side of the `let lhs = rhs;`. The `rhs` can be\n     * `undefined` for variable that are ambient such as `$event` and which don't have `rhs`\n     * declaration.\n     */\n    /**\n     * Create a local variable for later reference.\n     *\n     * @param {?} name Name of the variable.\n     * @param {?} lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param {?=} rhs AST representing the right hand side of the `let lhs = rhs;`. The `rhs` can be\n     * `undefined` for variable that are ambient such as `$event` and which don't have `rhs`\n     * declaration.\n     * @return {?}\n     */\n    BindingScope.prototype.set = /**\n     * Create a local variable for later reference.\n     *\n     * @param {?} name Name of the variable.\n     * @param {?} lhs AST representing the left hand side of the `let lhs = rhs;`.\n     * @param {?=} rhs AST representing the right hand side of the `let lhs = rhs;`. The `rhs` can be\n     * `undefined` for variable that are ambient such as `$event` and which don't have `rhs`\n     * declaration.\n     * @return {?}\n     */\n    function (name, lhs, rhs) {\n        !this.map.has(name) ||\n            error(\"The name \" + name + \" is already defined in scope to be \" + this.map.get(name));\n        this.map.set(name, { lhs: lhs, rhs: rhs, declared: false });\n        return this;\n    };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    BindingScope.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this.get(name); };\n    /**\n     * @param {?} declareCallback\n     * @return {?}\n     */\n    BindingScope.prototype.nestedScope = /**\n     * @param {?} declareCallback\n     * @return {?}\n     */\n    function (declareCallback) {\n        return new BindingScope(this, declareCallback);\n    };\n    /**\n     * @return {?}\n     */\n    BindingScope.prototype.freshReferenceName = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ current = this;\n        // Find the top scope as it maintains the global reference count\n        while (current.parent)\n            current = current.parent;\n        var /** @type {?} */ ref = \"\" + REFERENCE_PREFIX + current.referenceNameIndex++;\n        return ref;\n    };\n    BindingScope.ROOT_SCOPE = new BindingScope().set('$event', o.variable('$event'));\n    return BindingScope;\n}());\nfunction BindingScope_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingScope.ROOT_SCOPE;\n    /**\n     * Keeps a map from local variables to their expressions.\n     *\n     * This is used when one refers to variable such as: 'let abc = a.b.c`.\n     * - key to the map is the string literal `\"abc\"`.\n     * - value `lhs` is the left hand side which is an AST representing `abc`.\n     * - value `rhs` is the right hand side which is an AST representing `a.b.c`.\n     * - value `declared` is true if the `declareLocalVarCallback` has been called for this scope\n     * already.\n     * @type {?}\n     */\n    BindingScope.prototype.map;\n    /** @type {?} */\n    BindingScope.prototype.referenceNameIndex;\n    /** @type {?} */\n    BindingScope.prototype.parent;\n    /** @type {?} */\n    BindingScope.prototype.declareLocalVarCallback;\n}\n/** @enum {number} */\nvar RenderFlags = {\n    /* Whether to run the creation block (e.g. create elements and directives) */\n    Create: 1,\n    /* Whether to run the update block (e.g. refresh bindings) */\n    Update: 2,\n};\nexport { RenderFlags };\nvar TemplateDefinitionBuilder = /** @class */ (function () {\n    function TemplateDefinitionBuilder(outputCtx, constantPool, reflector, contextParameter, parentBindingScope, level, contextName, templateName, viewQueries, directiveMatcher, directives, pipeTypeByName, pipes) {\n        if (level === void 0) { level = 0; }\n        var _this = this;\n        this.outputCtx = outputCtx;\n        this.constantPool = constantPool;\n        this.reflector = reflector;\n        this.contextParameter = contextParameter;\n        this.level = level;\n        this.contextName = contextName;\n        this.templateName = templateName;\n        this.viewQueries = viewQueries;\n        this.directiveMatcher = directiveMatcher;\n        this.directives = directives;\n        this.pipeTypeByName = pipeTypeByName;\n        this.pipes = pipes;\n        this._dataIndex = 0;\n        this._bindingContext = 0;\n        this._prefixCode = [];\n        this._creationCode = [];\n        this._variableCode = [];\n        this._bindingCode = [];\n        this._postfixCode = [];\n        this._temporary = temporaryAllocator(this._prefixCode, TEMPORARY_NAME);\n        this._projectionDefinitionIndex = -1;\n        this._unsupported = unsupported;\n        this._inI18nSection = false;\n        this._i18nSectionIndex = -1;\n        this._phToNodeIdxes = [{}];\n        // These should be handled in the template or element directly.\n        this.visitReference = invalid;\n        this.visitVariable = invalid;\n        this.visitAttribute = invalid;\n        this.visitBoundAttribute = invalid;\n        this.visitBoundEvent = invalid;\n        this._bindingScope =\n            parentBindingScope.nestedScope(function (lhsVar, expression) {\n                _this._bindingCode.push(lhsVar.set(expression).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n            });\n        this._valueConverter = new ValueConverter(outputCtx, function () { return _this.allocateDataSlot(); }, function (name, localName, slot, value) {\n            var /** @type {?} */ pipeType = pipeTypeByName.get(name);\n            if (pipeType) {\n                _this.pipes.add(pipeType);\n            }\n            _this._bindingScope.set(localName, value);\n            _this._creationCode.push(o.importExpr(R3.pipe).callFn([o.literal(slot), o.literal(name)]).toStmt());\n        });\n    }\n    /**\n     * @param {?} nodes\n     * @param {?} variables\n     * @param {?=} hasNgContent\n     * @param {?=} ngContentSelectors\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.buildTemplateFunction = /**\n     * @param {?} nodes\n     * @param {?} variables\n     * @param {?=} hasNgContent\n     * @param {?=} ngContentSelectors\n     * @return {?}\n     */\n    function (nodes, variables, hasNgContent, ngContentSelectors) {\n        if (hasNgContent === void 0) { hasNgContent = false; }\n        if (ngContentSelectors === void 0) { ngContentSelectors = []; }\n        // Create variable bindings\n        for (var _i = 0, variables_1 = variables; _i < variables_1.length; _i++) {\n            var variable = variables_1[_i];\n            var /** @type {?} */ variableName = variable.name;\n            var /** @type {?} */ expression = o.variable(this.contextParameter).prop(variable.value || IMPLICIT_REFERENCE);\n            var /** @type {?} */ scopedName = this._bindingScope.freshReferenceName();\n            // Add the reference to the local scope.\n            this._bindingScope.set(variableName, o.variable(variableName + scopedName), expression);\n        }\n        // Output a `ProjectionDef` instruction when some `<ng-content>` are present\n        if (hasNgContent) {\n            this._projectionDefinitionIndex = this.allocateDataSlot();\n            var /** @type {?} */ parameters = [o.literal(this._projectionDefinitionIndex)];\n            // Only selectors with a non-default value are generated\n            if (ngContentSelectors.length > 1) {\n                var /** @type {?} */ r3Selectors = ngContentSelectors.map(function (s) { return core.parseSelectorToR3Selector(s); });\n                // `projectionDef` needs both the parsed and raw value of the selectors\n                var /** @type {?} */ parsed = this.outputCtx.constantPool.getConstLiteral(asLiteral(r3Selectors), true);\n                var /** @type {?} */ unParsed = this.outputCtx.constantPool.getConstLiteral(asLiteral(ngContentSelectors), true);\n                parameters.push(parsed, unParsed);\n            }\n            this.instruction.apply(this, [this._creationCode, null, R3.projectionDef].concat(parameters));\n        }\n        // Define and update any view queries\n        for (var _a = 0, _b = this.viewQueries; _a < _b.length; _a++) {\n            var query = _b[_a];\n            // e.g. r3.Q(0, somePredicate, true);\n            var /** @type {?} */ querySlot = this.allocateDataSlot();\n            var /** @type {?} */ predicate = getQueryPredicate(query, this.outputCtx);\n            var /** @type {?} */ args = [\n                o.literal(querySlot, o.INFERRED_TYPE),\n                predicate,\n                o.literal(query.descendants, o.INFERRED_TYPE),\n            ];\n            if (query.read) {\n                args.push(this.outputCtx.importExpr(/** @type {?} */ ((query.read.identifier)).reference));\n            }\n            this.instruction.apply(this, [this._creationCode, null, R3.query].concat(args));\n            // (r3.qR(tmp = r3.ɵld(0)) && (ctx.someDir = tmp));\n            var /** @type {?} */ temporary = this._temporary();\n            var /** @type {?} */ getQueryList = o.importExpr(R3.load).callFn([o.literal(querySlot)]);\n            var /** @type {?} */ refresh = o.importExpr(R3.queryRefresh).callFn([temporary.set(getQueryList)]);\n            var /** @type {?} */ updateDirective = o.variable(CONTEXT_NAME)\n                .prop(query.propertyName)\n                .set(query.first ? temporary.prop('first') : temporary);\n            this._bindingCode.push(refresh.and(updateDirective).toStmt());\n        }\n        t.visitAll(this, nodes);\n        var /** @type {?} */ creationCode = this._creationCode.length > 0 ?\n            [o.ifStmt(o.variable(RENDER_FLAGS).bitwiseAnd(o.literal(1 /* Create */), null, false), this._creationCode)] :\n            [];\n        var /** @type {?} */ updateCode = this._bindingCode.length > 0 ?\n            [o.ifStmt(o.variable(RENDER_FLAGS).bitwiseAnd(o.literal(2 /* Update */), null, false), this._bindingCode)] :\n            [];\n        // Generate maps of placeholder name to node indexes\n        // TODO(vicb): This is a WIP, not fully supported yet\n        for (var _c = 0, _d = this._phToNodeIdxes; _c < _d.length; _c++) {\n            var phToNodeIdx = _d[_c];\n            if (Object.keys(phToNodeIdx).length > 0) {\n                var /** @type {?} */ scopedName = this._bindingScope.freshReferenceName();\n                var /** @type {?} */ phMap = o.variable(scopedName)\n                    .set(mapToExpression(phToNodeIdx, true))\n                    .toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]);\n                this._prefixCode.push(phMap);\n            }\n        }\n        return o.fn([new o.FnParam(RENDER_FLAGS, o.NUMBER_TYPE), new o.FnParam(this.contextParameter, null)], this._prefixCode.concat(creationCode, this._variableCode, updateCode, this._postfixCode), o.INFERRED_TYPE, null, this.templateName);\n    };\n    // LocalResolver\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.getLocal = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) { return this._bindingScope.get(name); };\n    /**\n     * @param {?} ngContent\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitContent = /**\n     * @param {?} ngContent\n     * @return {?}\n     */\n    function (ngContent) {\n        var /** @type {?} */ slot = this.allocateDataSlot();\n        var /** @type {?} */ selectorIndex = ngContent.selectorIndex;\n        var /** @type {?} */ parameters = [\n            o.literal(slot),\n            o.literal(this._projectionDefinitionIndex),\n        ];\n        var /** @type {?} */ attributeAsList = [];\n        ngContent.attributes.forEach(function (attribute) {\n            var /** @type {?} */ name = attribute.name;\n            if (name !== 'select') {\n                attributeAsList.push(name, attribute.value);\n            }\n        });\n        if (attributeAsList.length > 0) {\n            parameters.push(o.literal(selectorIndex), asLiteral(attributeAsList));\n        }\n        else if (selectorIndex !== 0) {\n            parameters.push(o.literal(selectorIndex));\n        }\n        this.instruction.apply(this, [this._creationCode, ngContent.sourceSpan, R3.projection].concat(parameters));\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        var _this = this;\n        var /** @type {?} */ elementIndex = this.allocateDataSlot();\n        var /** @type {?} */ referenceDataSlots = new Map();\n        var /** @type {?} */ wasInI18nSection = this._inI18nSection;\n        var /** @type {?} */ outputAttrs = {};\n        var /** @type {?} */ attrI18nMetas = {};\n        var /** @type {?} */ i18nMeta = '';\n        // Elements inside i18n sections are replaced with placeholders\n        // TODO(vicb): nested elements are a WIP in this phase\n        if (this._inI18nSection) {\n            var /** @type {?} */ phName = element.name.toLowerCase();\n            if (!this._phToNodeIdxes[this._i18nSectionIndex][phName]) {\n                this._phToNodeIdxes[this._i18nSectionIndex][phName] = [];\n            }\n            this._phToNodeIdxes[this._i18nSectionIndex][phName].push(elementIndex);\n        }\n        // Handle i18n attributes\n        for (var _i = 0, _a = element.attributes; _i < _a.length; _i++) {\n            var attr = _a[_i];\n            var /** @type {?} */ name_1 = attr.name;\n            var /** @type {?} */ value = attr.value;\n            if (name_1 === I18N_ATTR) {\n                if (this._inI18nSection) {\n                    throw new Error(\"Could not mark an element as translatable inside of a translatable section\");\n                }\n                this._inI18nSection = true;\n                this._i18nSectionIndex++;\n                this._phToNodeIdxes[this._i18nSectionIndex] = {};\n                i18nMeta = value;\n            }\n            else if (name_1.startsWith(I18N_ATTR_PREFIX)) {\n                attrI18nMetas[name_1.slice(I18N_ATTR_PREFIX.length)] = value;\n            }\n            else {\n                outputAttrs[name_1] = value;\n            }\n        }\n        // Match directives on non i18n attributes\n        if (this.directiveMatcher) {\n            var /** @type {?} */ selector = createCssSelector(element.name, outputAttrs);\n            this.directiveMatcher.match(selector, function (sel, staticType) { _this.directives.add(staticType); });\n        }\n        // Element creation mode\n        var /** @type {?} */ parameters = [\n            o.literal(elementIndex),\n            o.literal(element.name),\n        ];\n        // Add the attributes\n        var /** @type {?} */ i18nMessages = [];\n        var /** @type {?} */ attributes = [];\n        var /** @type {?} */ hasI18nAttr = false;\n        Object.getOwnPropertyNames(outputAttrs).forEach(function (name) {\n            var /** @type {?} */ value = outputAttrs[name];\n            attributes.push(o.literal(name));\n            if (attrI18nMetas.hasOwnProperty(name)) {\n                hasI18nAttr = true;\n                var /** @type {?} */ meta = parseI18nMeta(attrI18nMetas[name]);\n                var /** @type {?} */ variable = _this.constantPool.getTranslation(value, meta);\n                attributes.push(variable);\n            }\n            else {\n                attributes.push(o.literal(value));\n            }\n        });\n        var /** @type {?} */ attrArg = o.TYPED_NULL_EXPR;\n        if (attributes.length > 0) {\n            attrArg = hasI18nAttr ? getLiteralFactory(this.outputCtx, o.literalArr(attributes)) :\n                this.constantPool.getConstLiteral(o.literalArr(attributes), true);\n        }\n        parameters.push(attrArg);\n        if (element.references && element.references.length > 0) {\n            var /** @type {?} */ references = flatten(element.references.map(function (reference) {\n                var /** @type {?} */ slot = _this.allocateDataSlot();\n                referenceDataSlots.set(reference.name, slot);\n                // Generate the update temporary.\n                var /** @type {?} */ variableName = _this._bindingScope.freshReferenceName();\n                _this._variableCode.push(o.variable(variableName, o.INFERRED_TYPE)\n                    .set(o.importExpr(R3.load).callFn([o.literal(slot)]))\n                    .toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n                _this._bindingScope.set(reference.name, o.variable(variableName));\n                return [reference.name, reference.value];\n            }));\n            parameters.push(this.constantPool.getConstLiteral(asLiteral(references), true));\n        }\n        else {\n            parameters.push(o.TYPED_NULL_EXPR);\n        }\n        // Generate the instruction create element instruction\n        if (i18nMessages.length > 0) {\n            (_b = this._creationCode).push.apply(_b, i18nMessages);\n        }\n        this.instruction.apply(this, [this._creationCode, element.sourceSpan, R3.createElement].concat(trimTrailingNulls(parameters)));\n        var /** @type {?} */ implicit = o.variable(CONTEXT_NAME);\n        // Generate Listeners (outputs)\n        element.outputs.forEach(function (outputAst) {\n            var /** @type {?} */ elName = sanitizeIdentifier(element.name);\n            var /** @type {?} */ evName = sanitizeIdentifier(outputAst.name);\n            var /** @type {?} */ functionName = _this.templateName + \"_\" + elName + \"_\" + evName + \"_listener\";\n            var /** @type {?} */ localVars = [];\n            var /** @type {?} */ bindingScope = _this._bindingScope.nestedScope(function (lhsVar, rhsExpression) {\n                localVars.push(lhsVar.set(rhsExpression).toDeclStmt(o.INFERRED_TYPE, [o.StmtModifier.Final]));\n            });\n            var /** @type {?} */ bindingExpr = convertActionBinding(bindingScope, implicit, outputAst.handler, 'b', function () { return error('Unexpected interpolation'); });\n            var /** @type {?} */ handler = o.fn([new o.FnParam('$event', o.DYNAMIC_TYPE)], localVars.concat(bindingExpr.render3Stmts), o.INFERRED_TYPE, null, functionName);\n            _this.instruction(_this._creationCode, outputAst.sourceSpan, R3.listener, o.literal(outputAst.name), handler);\n        });\n        // Generate element input bindings\n        element.inputs.forEach(function (input) {\n            if (input.type === 4 /* Animation */) {\n                _this._unsupported('animations');\n            }\n            var /** @type {?} */ convertedBinding = _this.convertPropertyBinding(implicit, input.value);\n            var /** @type {?} */ instruction = BINDING_INSTRUCTION_MAP[input.type];\n            if (instruction) {\n                // TODO(chuckj): runtime: security context?\n                var /** @type {?} */ value = o.importExpr(R3.bind).callFn([convertedBinding]);\n                _this.instruction(_this._bindingCode, input.sourceSpan, instruction, o.literal(elementIndex), o.literal(input.name), value);\n            }\n            else {\n                _this._unsupported(\"binding type \" + input.type);\n            }\n        });\n        // Traverse element child nodes\n        if (this._inI18nSection && element.children.length == 1 &&\n            element.children[0] instanceof t.Text) {\n            var /** @type {?} */ text = /** @type {?} */ (element.children[0]);\n            this.visitSingleI18nTextChild(text, i18nMeta);\n        }\n        else {\n            t.visitAll(this, element.children);\n        }\n        // Finish element construction mode.\n        this.instruction(this._creationCode, element.endSourceSpan || element.sourceSpan, R3.elementEnd);\n        // Restore the state before exiting this node\n        this._inI18nSection = wasInI18nSection;\n        var _b;\n    };\n    /**\n     * @param {?} template\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitTemplate = /**\n     * @param {?} template\n     * @return {?}\n     */\n    function (template) {\n        var _this = this;\n        var /** @type {?} */ templateIndex = this.allocateDataSlot();\n        var /** @type {?} */ elName = '';\n        if (template.children.length === 1 && template.children[0] instanceof t.Element) {\n            // When the template as a single child, derive the context name from the tag\n            elName = sanitizeIdentifier((/** @type {?} */ (template.children[0])).name);\n        }\n        var /** @type {?} */ contextName = elName ? this.contextName + \"_\" + elName : '';\n        var /** @type {?} */ templateName = contextName ? contextName + \"_Template_\" + templateIndex : \"Template_\" + templateIndex;\n        var /** @type {?} */ templateContext = \"ctx\" + this.level;\n        var /** @type {?} */ parameters = [\n            o.literal(templateIndex),\n            o.variable(templateName),\n            o.TYPED_NULL_EXPR,\n        ];\n        var /** @type {?} */ attributeNames = [];\n        var /** @type {?} */ attributeMap = {};\n        template.attributes.forEach(function (a) {\n            attributeNames.push(asLiteral(a.name), asLiteral(''));\n            attributeMap[a.name] = a.value;\n        });\n        // Match directives on template attributes\n        if (this.directiveMatcher) {\n            var /** @type {?} */ selector = createCssSelector('ng-template', attributeMap);\n            this.directiveMatcher.match(selector, function (cssSelector, staticType) { _this.directives.add(staticType); });\n        }\n        if (attributeNames.length) {\n            parameters.push(this.constantPool.getConstLiteral(o.literalArr(attributeNames), true));\n        }\n        // e.g. C(1, C1Template)\n        this.instruction.apply(this, [this._creationCode, template.sourceSpan, R3.containerCreate].concat(trimTrailingNulls(parameters)));\n        // e.g. p(1, 'forOf', ɵb(ctx.items));\n        var /** @type {?} */ context = o.variable(CONTEXT_NAME);\n        template.inputs.forEach(function (input) {\n            var /** @type {?} */ convertedBinding = _this.convertPropertyBinding(context, input.value);\n            _this.instruction(_this._bindingCode, template.sourceSpan, R3.elementProperty, o.literal(templateIndex), o.literal(input.name), o.importExpr(R3.bind).callFn([convertedBinding]));\n        });\n        // Create the template function\n        var /** @type {?} */ templateVisitor = new TemplateDefinitionBuilder(this.outputCtx, this.constantPool, this.reflector, templateContext, this._bindingScope, this.level + 1, contextName, templateName, [], this.directiveMatcher, this.directives, this.pipeTypeByName, this.pipes);\n        var /** @type {?} */ templateFunctionExpr = templateVisitor.buildTemplateFunction(template.children, template.variables);\n        this._postfixCode.push(templateFunctionExpr.toDeclStmt(templateName, null));\n    };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitBoundText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) {\n        var /** @type {?} */ nodeIndex = this.allocateDataSlot();\n        this.instruction(this._creationCode, text.sourceSpan, R3.text, o.literal(nodeIndex));\n        this.instruction(this._bindingCode, text.sourceSpan, R3.textCreateBound, o.literal(nodeIndex), this.convertPropertyBinding(o.variable(CONTEXT_NAME), text.value));\n    };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) {\n        this.instruction(this._creationCode, text.sourceSpan, R3.text, o.literal(this.allocateDataSlot()), o.literal(text.value));\n    };\n    // When the content of the element is a single text node the translation can be inlined:\n    //\n    // `<p i18n=\"desc|mean\">some content</p>`\n    // compiles to\n    // ```\n    // /**\n    // * @desc desc\n    // * @meaning mean\n    // */\n    // const MSG_XYZ = goog.getMsg('some content');\n    // i0.ɵT(1, MSG_XYZ);\n    // ```\n    /**\n     * @param {?} text\n     * @param {?} i18nMeta\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.visitSingleI18nTextChild = /**\n     * @param {?} text\n     * @param {?} i18nMeta\n     * @return {?}\n     */\n    function (text, i18nMeta) {\n        var /** @type {?} */ meta = parseI18nMeta(i18nMeta);\n        var /** @type {?} */ variable = this.constantPool.getTranslation(text.value, meta);\n        this.instruction(this._creationCode, text.sourceSpan, R3.text, o.literal(this.allocateDataSlot()), variable);\n    };\n    /**\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.allocateDataSlot = /**\n     * @return {?}\n     */\n    function () { return this._dataIndex++; };\n    /**\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.bindingContext = /**\n     * @return {?}\n     */\n    function () { return \"\" + this._bindingContext++; };\n    /**\n     * @param {?} statements\n     * @param {?} span\n     * @param {?} reference\n     * @param {...?} params\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.instruction = /**\n     * @param {?} statements\n     * @param {?} span\n     * @param {?} reference\n     * @param {...?} params\n     * @return {?}\n     */\n    function (statements, span, reference) {\n        var params = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            params[_i - 3] = arguments[_i];\n        }\n        statements.push(o.importExpr(reference, null, span).callFn(params, span).toStmt());\n    };\n    /**\n     * @param {?} implicit\n     * @param {?} value\n     * @return {?}\n     */\n    TemplateDefinitionBuilder.prototype.convertPropertyBinding = /**\n     * @param {?} implicit\n     * @param {?} value\n     * @return {?}\n     */\n    function (implicit, value) {\n        var /** @type {?} */ pipesConvertedValue = value.visit(this._valueConverter);\n        var /** @type {?} */ convertedPropertyBinding = convertPropertyBinding(this, implicit, pipesConvertedValue, this.bindingContext(), BindingForm.TrySimple, interpolate);\n        (_a = this._bindingCode).push.apply(_a, convertedPropertyBinding.stmts);\n        return convertedPropertyBinding.currValExpr;\n        var _a;\n    };\n    return TemplateDefinitionBuilder;\n}());\nfunction TemplateDefinitionBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._dataIndex;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._bindingContext;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._prefixCode;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._creationCode;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._variableCode;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._bindingCode;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._postfixCode;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._temporary;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._projectionDefinitionIndex;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._valueConverter;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._unsupported;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._bindingScope;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._inI18nSection;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._i18nSectionIndex;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype._phToNodeIdxes;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitReference;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitVariable;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitAttribute;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitBoundAttribute;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.visitBoundEvent;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.outputCtx;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.constantPool;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.reflector;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.contextParameter;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.level;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.contextName;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.templateName;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.viewQueries;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.directiveMatcher;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.directives;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.pipeTypeByName;\n    /** @type {?} */\n    TemplateDefinitionBuilder.prototype.pipes;\n}\n/**\n * @param {?} query\n * @param {?} outputCtx\n * @return {?}\n */\nfunction getQueryPredicate(query, outputCtx) {\n    if (query.selectors.length > 1 || (query.selectors.length == 1 && query.selectors[0].value)) {\n        var /** @type {?} */ selectors = query.selectors.map(function (value) { return (value.value); });\n        selectors.some(function (value) { return !value; }) && error('Found a type among the string selectors expected');\n        return outputCtx.constantPool.getConstLiteral(o.literalArr(selectors.map(function (value) { return o.literal(value); })));\n    }\n    if (query.selectors.length == 1) {\n        var /** @type {?} */ first = query.selectors[0];\n        if (first.identifier) {\n            return outputCtx.importExpr(first.identifier.reference);\n        }\n    }\n    error('Unexpected query form');\n    return o.NULL_EXPR;\n}\n/**\n * @param {?} type\n * @param {?} outputCtx\n * @param {?} reflector\n * @param {?} queries\n * @return {?}\n */\nexport function createFactory(type, outputCtx, reflector, queries) {\n    var /** @type {?} */ args = [];\n    var /** @type {?} */ elementRef = reflector.resolveExternalReference(Identifiers.ElementRef);\n    var /** @type {?} */ templateRef = reflector.resolveExternalReference(Identifiers.TemplateRef);\n    var /** @type {?} */ viewContainerRef = reflector.resolveExternalReference(Identifiers.ViewContainerRef);\n    for (var _i = 0, _a = type.diDeps; _i < _a.length; _i++) {\n        var dependency = _a[_i];\n        var /** @type {?} */ token = dependency.token;\n        if (token) {\n            var /** @type {?} */ tokenRef = tokenReference(token);\n            if (tokenRef === elementRef) {\n                args.push(o.importExpr(R3.injectElementRef).callFn([]));\n            }\n            else if (tokenRef === templateRef) {\n                args.push(o.importExpr(R3.injectTemplateRef).callFn([]));\n            }\n            else if (tokenRef === viewContainerRef) {\n                args.push(o.importExpr(R3.injectViewContainerRef).callFn([]));\n            }\n            else if (dependency.isAttribute) {\n                args.push(o.importExpr(R3.injectAttribute).callFn([o.literal(/** @type {?} */ ((dependency.token)).value)]));\n            }\n            else {\n                var /** @type {?} */ tokenValue = token.identifier != null ? outputCtx.importExpr(tokenRef) : o.literal(tokenRef);\n                var /** @type {?} */ directiveInjectArgs = [tokenValue];\n                var /** @type {?} */ flags = extractFlags(dependency);\n                if (flags != 0 /* Default */) {\n                    // Append flag information if other than default.\n                    directiveInjectArgs.push(o.literal(flags));\n                }\n                args.push(o.importExpr(R3.directiveInject).callFn(directiveInjectArgs));\n            }\n        }\n        else {\n            unsupported('dependency without a token');\n        }\n    }\n    var /** @type {?} */ queryDefinitions = [];\n    for (var _b = 0, queries_1 = queries; _b < queries_1.length; _b++) {\n        var query = queries_1[_b];\n        var /** @type {?} */ predicate = getQueryPredicate(query, outputCtx);\n        // e.g. r3.Q(null, somePredicate, false) or r3.Q(null, ['div'], false)\n        var /** @type {?} */ parameters = [\n            o.literal(null, o.INFERRED_TYPE),\n            predicate,\n            o.literal(query.descendants),\n        ];\n        if (query.read) {\n            parameters.push(outputCtx.importExpr(/** @type {?} */ ((query.read.identifier)).reference));\n        }\n        queryDefinitions.push(o.importExpr(R3.query).callFn(parameters));\n    }\n    var /** @type {?} */ createInstance = new o.InstantiateExpr(outputCtx.importExpr(type.reference), args);\n    var /** @type {?} */ result = queryDefinitions.length > 0 ? o.literalArr([createInstance].concat(queryDefinitions)) :\n        createInstance;\n    return o.fn([], [new o.ReturnStatement(result)], o.INFERRED_TYPE, null, type.reference.name ? type.reference.name + \"_Factory\" : null);\n}\n/**\n * @param {?} dependency\n * @return {?}\n */\nfunction extractFlags(dependency) {\n    var /** @type {?} */ flags = 0 /* Default */;\n    if (dependency.isHost) {\n        flags |= 1 /* Host */;\n    }\n    if (dependency.isOptional) {\n        flags |= 8 /* Optional */;\n    }\n    if (dependency.isSelf) {\n        flags |= 2 /* Self */;\n    }\n    if (dependency.isSkipSelf) {\n        flags |= 4 /* SkipSelf */;\n    }\n    if (dependency.isValue) {\n        unsupported('value dependencies');\n    }\n    return flags;\n}\n/**\n *  Remove trailing null nodes as they are implied.\n * @param {?} parameters\n * @return {?}\n */\nfunction trimTrailingNulls(parameters) {\n    while (o.isNull(parameters[parameters.length - 1])) {\n        parameters.pop();\n    }\n    return parameters;\n}\n/**\n * @param {?} selector\n * @return {?}\n */\nfunction createDirectiveSelector(selector) {\n    return asLiteral(core.parseSelectorToR3Selector(selector));\n}\n/**\n * @param {?} directiveMetadata\n * @param {?} outputCtx\n * @return {?}\n */\nfunction createHostAttributesArray(directiveMetadata, outputCtx) {\n    var /** @type {?} */ values = [];\n    var /** @type {?} */ attributes = directiveMetadata.hostAttributes;\n    for (var _i = 0, _a = Object.getOwnPropertyNames(attributes); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var /** @type {?} */ value = attributes[key];\n        values.push(o.literal(key), o.literal(value));\n    }\n    if (values.length > 0) {\n        return outputCtx.constantPool.getConstLiteral(o.literalArr(values));\n    }\n    return null;\n}\n/**\n * @param {?} directiveMetadata\n * @param {?} outputCtx\n * @param {?} bindingParser\n * @return {?}\n */\nfunction createHostBindingsFunction(directiveMetadata, outputCtx, bindingParser) {\n    var /** @type {?} */ statements = [];\n    var /** @type {?} */ temporary = temporaryAllocator(statements, TEMPORARY_NAME);\n    var /** @type {?} */ hostBindingSourceSpan = typeSourceSpan(directiveMetadata.isComponent ? 'Component' : 'Directive', directiveMetadata.type);\n    // Calculate the queries\n    for (var /** @type {?} */ index = 0; index < directiveMetadata.queries.length; index++) {\n        var /** @type {?} */ query = directiveMetadata.queries[index];\n        // e.g. r3.qR(tmp = r3.ld(dirIndex)[1]) && (r3.ld(dirIndex)[0].someDir = tmp);\n        var /** @type {?} */ getDirectiveMemory = o.importExpr(R3.load).callFn([o.variable('dirIndex')]);\n        // The query list is at the query index + 1 because the directive itself is in slot 0.\n        var /** @type {?} */ getQueryList = getDirectiveMemory.key(o.literal(index + 1));\n        var /** @type {?} */ assignToTemporary = temporary().set(getQueryList);\n        var /** @type {?} */ callQueryRefresh = o.importExpr(R3.queryRefresh).callFn([assignToTemporary]);\n        var /** @type {?} */ updateDirective = getDirectiveMemory.key(o.literal(0, o.INFERRED_TYPE))\n            .prop(query.propertyName)\n            .set(query.first ? temporary().prop('first') : temporary());\n        var /** @type {?} */ andExpression = callQueryRefresh.and(updateDirective);\n        statements.push(andExpression.toStmt());\n    }\n    var /** @type {?} */ directiveSummary = directiveMetadata.toSummary();\n    // Calculate the host property bindings\n    var /** @type {?} */ bindings = bindingParser.createBoundHostProperties(directiveSummary, hostBindingSourceSpan);\n    var /** @type {?} */ bindingContext = o.importExpr(R3.load).callFn([o.variable('dirIndex')]);\n    if (bindings) {\n        for (var _i = 0, bindings_1 = bindings; _i < bindings_1.length; _i++) {\n            var binding = bindings_1[_i];\n            var /** @type {?} */ bindingExpr = convertPropertyBinding(null, bindingContext, binding.expression, 'b', BindingForm.TrySimple, function () { return error('Unexpected interpolation'); });\n            statements.push.apply(statements, bindingExpr.stmts);\n            statements.push(o.importExpr(R3.elementProperty)\n                .callFn([\n                o.variable('elIndex'),\n                o.literal(binding.name),\n                o.importExpr(R3.bind).callFn([bindingExpr.currValExpr]),\n            ])\n                .toStmt());\n        }\n    }\n    // Calculate host event bindings\n    var /** @type {?} */ eventBindings = bindingParser.createDirectiveHostEventAsts(directiveSummary, hostBindingSourceSpan);\n    if (eventBindings) {\n        for (var _a = 0, eventBindings_1 = eventBindings; _a < eventBindings_1.length; _a++) {\n            var binding = eventBindings_1[_a];\n            var /** @type {?} */ bindingExpr = convertActionBinding(null, bindingContext, binding.handler, 'b', function () { return error('Unexpected interpolation'); });\n            var /** @type {?} */ bindingName = binding.name && sanitizeIdentifier(binding.name);\n            var /** @type {?} */ typeName = identifierName(directiveMetadata.type);\n            var /** @type {?} */ functionName = typeName && bindingName ? typeName + \"_\" + bindingName + \"_HostBindingHandler\" : null;\n            var /** @type {?} */ handler = o.fn([new o.FnParam('$event', o.DYNAMIC_TYPE)], bindingExpr.stmts.concat([new o.ReturnStatement(bindingExpr.allowDefault)]), o.INFERRED_TYPE, null, functionName);\n            statements.push(o.importExpr(R3.listener).callFn([o.literal(binding.name), handler]).toStmt());\n        }\n    }\n    if (statements.length > 0) {\n        var /** @type {?} */ typeName = directiveMetadata.type.reference.name;\n        return o.fn([\n            new o.FnParam('dirIndex', o.NUMBER_TYPE),\n            new o.FnParam('elIndex', o.NUMBER_TYPE),\n        ], statements, o.INFERRED_TYPE, null, typeName ? typeName + \"_HostBindings\" : null);\n    }\n    return null;\n}\nvar ValueConverter = /** @class */ (function (_super) {\n    tslib_1.__extends(ValueConverter, _super);\n    function ValueConverter(outputCtx, allocateSlot, definePipe) {\n        var _this = _super.call(this) || this;\n        _this.outputCtx = outputCtx;\n        _this.allocateSlot = allocateSlot;\n        _this.definePipe = definePipe;\n        return _this;\n    }\n    // AstMemoryEfficientTransformer\n    /**\n     * @param {?} pipe\n     * @param {?} context\n     * @return {?}\n     */\n    ValueConverter.prototype.visitPipe = /**\n     * @param {?} pipe\n     * @param {?} context\n     * @return {?}\n     */\n    function (pipe, context) {\n        // Allocate a slot to create the pipe\n        var /** @type {?} */ slot = this.allocateSlot();\n        var /** @type {?} */ slotPseudoLocal = \"PIPE:\" + slot;\n        var /** @type {?} */ target = new PropertyRead(pipe.span, new ImplicitReceiver(pipe.span), slotPseudoLocal);\n        var /** @type {?} */ bindingId = pipeBinding(pipe.args);\n        this.definePipe(pipe.name, slotPseudoLocal, slot, o.importExpr(bindingId));\n        var /** @type {?} */ value = pipe.exp.visit(this);\n        var /** @type {?} */ args = this.visitAll(pipe.args);\n        return new FunctionCall(pipe.span, target, [new LiteralPrimitive(pipe.span, slot), value].concat(args));\n    };\n    /**\n     * @param {?} array\n     * @param {?} context\n     * @return {?}\n     */\n    ValueConverter.prototype.visitLiteralArray = /**\n     * @param {?} array\n     * @param {?} context\n     * @return {?}\n     */\n    function (array, context) {\n        var _this = this;\n        return new BuiltinFunctionCall(array.span, this.visitAll(array.expressions), function (values) {\n            // If the literal has calculated (non-literal) elements transform it into\n            // calls to literal factories that compose the literal and will cache intermediate\n            // values. Otherwise, just return an literal array that contains the values.\n            var /** @type {?} */ literal = o.literalArr(values);\n            return values.every(function (a) { return a.isConstant(); }) ?\n                _this.outputCtx.constantPool.getConstLiteral(literal, true) :\n                getLiteralFactory(_this.outputCtx, literal);\n        });\n    };\n    /**\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    ValueConverter.prototype.visitLiteralMap = /**\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    function (map, context) {\n        var _this = this;\n        return new BuiltinFunctionCall(map.span, this.visitAll(map.values), function (values) {\n            // If the literal has calculated (non-literal) elements  transform it into\n            // calls to literal factories that compose the literal and will cache intermediate\n            // values. Otherwise, just return an literal array that contains the values.\n            var /** @type {?} */ literal = o.literalMap(values.map(function (value, index) { return ({ key: map.keys[index].key, value: value, quoted: map.keys[index].quoted }); }));\n            return values.every(function (a) { return a.isConstant(); }) ?\n                _this.outputCtx.constantPool.getConstLiteral(literal, true) :\n                getLiteralFactory(_this.outputCtx, literal);\n        });\n    };\n    return ValueConverter;\n}(AstMemoryEfficientTransformer));\nfunction ValueConverter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ValueConverter.prototype.outputCtx;\n    /** @type {?} */\n    ValueConverter.prototype.allocateSlot;\n    /** @type {?} */\n    ValueConverter.prototype.definePipe;\n}\n/**\n * @template T\n * @param {?} arg\n * @return {?}\n */\nfunction invalid(arg) {\n    throw new Error(\"Invalid state: Visitor \" + this.constructor.name + \" doesn't handle \" + o.constructor.name);\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction asLiteral(value) {\n    if (Array.isArray(value)) {\n        return o.literalArr(value.map(asLiteral));\n    }\n    return o.literal(value, o.INFERRED_TYPE);\n}\n/**\n * @param {?} keys\n * @return {?}\n */\nfunction conditionallyCreateMapObjectLiteral(keys) {\n    if (Object.getOwnPropertyNames(keys).length > 0) {\n        return mapToExpression(keys);\n    }\n    return null;\n}\n/**\n * @param {?} map\n * @param {?=} quoted\n * @return {?}\n */\nfunction mapToExpression(map, quoted) {\n    if (quoted === void 0) { quoted = false; }\n    return o.literalMap(Object.getOwnPropertyNames(map).map(function (key) { return ({ key: key, quoted: quoted, value: asLiteral(map[key]) }); }));\n}\n/**\n * Creates an allocator for a temporary variable.\n *\n * A variable declaration is added to the statements the first time the allocator is invoked.\n * @param {?} statements\n * @param {?} name\n * @return {?}\n */\nfunction temporaryAllocator(statements, name) {\n    var /** @type {?} */ temp = null;\n    return function () {\n        if (!temp) {\n            statements.push(new o.DeclareVarStmt(TEMPORARY_NAME, undefined, o.DYNAMIC_TYPE));\n            temp = o.variable(name);\n        }\n        return temp;\n    };\n}\n/**\n * @param {?=} i18n\n * @return {?}\n */\nfunction parseI18nMeta(i18n) {\n    var /** @type {?} */ meaning;\n    var /** @type {?} */ description;\n    var /** @type {?} */ id;\n    if (i18n) {\n        // TODO(vicb): figure out how to force a message ID with closure ?\n        var /** @type {?} */ idIndex = i18n.indexOf(ID_SEPARATOR);\n        var /** @type {?} */ descIndex = i18n.indexOf(MEANING_SEPARATOR);\n        var /** @type {?} */ meaningAndDesc = void 0;\n        _a = (idIndex > -1) ? [i18n.slice(0, idIndex), i18n.slice(idIndex + 2)] : [i18n, ''], meaningAndDesc = _a[0], id = _a[1];\n        _b = (descIndex > -1) ?\n            [meaningAndDesc.slice(0, descIndex), meaningAndDesc.slice(descIndex + 1)] :\n            ['', meaningAndDesc], meaning = _b[0], description = _b[1];\n    }\n    return { description: description, id: id, meaning: meaning };\n    var _a, _b;\n}\n/**\n * Creates a `CssSelector` given a tag name and a map of attributes\n * @param {?} tag\n * @param {?} attributes\n * @return {?}\n */\nfunction createCssSelector(tag, attributes) {\n    var /** @type {?} */ cssSelector = new CssSelector();\n    cssSelector.setElement(tag);\n    Object.getOwnPropertyNames(attributes).forEach(function (name) {\n        var /** @type {?} */ value = attributes[name];\n        cssSelector.addAttribute(name, value);\n        if (name.toLowerCase() === 'class') {\n            var /** @type {?} */ classes = value.trim().split(/\\s+/g);\n            classes.forEach(function (className) { return cssSelector.addClassName(className); });\n        }\n    });\n    return cssSelector;\n}\nvar _a;\n//# sourceMappingURL=r3_view_compiler_local.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as html from '../ml_parser/ast';\nimport { replaceNgsp } from '../ml_parser/html_whitespaces';\nimport { isNgTemplate } from '../ml_parser/tags';\nimport { ParseError, ParseErrorLevel } from '../parse_util';\nimport { isStyleUrlResolvable } from '../style_url_resolver';\nimport { PreparsedElementType, preparseElement } from '../template_parser/template_preparser';\nimport * as t from './r3_ast';\nvar /** @type {?} */ BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\n// Group 1 = \"bind-\"\nvar /** @type {?} */ KW_BIND_IDX = 1;\n// Group 2 = \"let-\"\nvar /** @type {?} */ KW_LET_IDX = 2;\n// Group 3 = \"ref-/#\"\nvar /** @type {?} */ KW_REF_IDX = 3;\n// Group 4 = \"on-\"\nvar /** @type {?} */ KW_ON_IDX = 4;\n// Group 5 = \"bindon-\"\nvar /** @type {?} */ KW_BINDON_IDX = 5;\n// Group 6 = \"@\"\nvar /** @type {?} */ KW_AT_IDX = 6;\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\nvar /** @type {?} */ IDENT_KW_IDX = 7;\n// Group 8 = identifier inside [()]\nvar /** @type {?} */ IDENT_BANANA_BOX_IDX = 8;\n// Group 9 = identifier inside []\nvar /** @type {?} */ IDENT_PROPERTY_IDX = 9;\n// Group 10 = identifier inside ()\nvar /** @type {?} */ IDENT_EVENT_IDX = 10;\nvar /** @type {?} */ TEMPLATE_ATTR_PREFIX = '*';\nvar /** @type {?} */ CLASS_ATTR = 'class';\n// Default selector used by `<ng-content>` if none specified\nvar /** @type {?} */ DEFAULT_CONTENT_SELECTOR = '*';\nvar HtmlToTemplateTransform = /** @class */ (function () {\n    function HtmlToTemplateTransform(bindingParser) {\n        this.bindingParser = bindingParser;\n        // Selectors for the `ng-content` tags. Only non `*` selectors are recorded here\n        this.ngContentSelectors = [];\n        // Any `<ng-content>` in the template ?\n        this.hasNgContent = false;\n    }\n    // HTML visitor\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.visitElement = /**\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        var /** @type {?} */ preparsedElement = preparseElement(element);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE) {\n            // Skipping <script> for security reasons\n            // Skipping <style> as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n            isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n            // Skipping stylesheets with either relative urls or package scheme as we already processed\n            // them in the StyleCompiler\n            return null;\n        }\n        // Whether the element is a `<ng-template>`\n        var /** @type {?} */ isTemplateElement = isNgTemplate(element.name);\n        var /** @type {?} */ matchableAttributes = [];\n        var /** @type {?} */ parsedProperties = [];\n        var /** @type {?} */ boundEvents = [];\n        var /** @type {?} */ variables = [];\n        var /** @type {?} */ references = [];\n        var /** @type {?} */ attributes = [];\n        var /** @type {?} */ templateMatchableAttributes = [];\n        var /** @type {?} */ inlineTemplateSourceSpan;\n        var /** @type {?} */ templateParsedProperties = [];\n        var /** @type {?} */ templateVariables = [];\n        // Whether the element has any *-attribute\n        var /** @type {?} */ elementHasInlineTemplate = false;\n        for (var _i = 0, _a = element.attrs; _i < _a.length; _i++) {\n            var attribute = _a[_i];\n            var /** @type {?} */ hasBinding = false;\n            var /** @type {?} */ normalizedName = normalizeAttributeName(attribute.name);\n            // `*attr` defines template bindings\n            var /** @type {?} */ isTemplateBinding = false;\n            if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n                if (elementHasInlineTemplate) {\n                    this.reportError(\"Can't have multiple template bindings on one element. Use only one attribute prefixed with *\", attribute.sourceSpan);\n                }\n                isTemplateBinding = true;\n                elementHasInlineTemplate = true;\n                var /** @type {?} */ templateValue = attribute.value;\n                var /** @type {?} */ templateKey = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length);\n                inlineTemplateSourceSpan = attribute.valueSpan || attribute.sourceSpan;\n                this.bindingParser.parseInlineTemplateBinding(templateKey, templateValue, attribute.sourceSpan, templateMatchableAttributes, templateParsedProperties, templateVariables);\n            }\n            else {\n                // Check for variables, events, property bindings, interpolation\n                hasBinding = this.parseAttribute(isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references);\n            }\n            if (!hasBinding && !isTemplateBinding) {\n                // don't include the bindings as attributes as well in the AST\n                attributes.push(/** @type {?} */ (this.visitAttribute(attribute)));\n                matchableAttributes.push([attribute.name, attribute.value]);\n            }\n        }\n        var /** @type {?} */ children = html.visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children);\n        var /** @type {?} */ parsedElement;\n        if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n            // `<ng-content>`\n            this.hasNgContent = true;\n            if (element.children && !element.children.every(isEmptyTextNode)) {\n                this.reportError(\"<ng-content> element cannot have content.\", element.sourceSpan);\n            }\n            var /** @type {?} */ selector = preparsedElement.selectAttr;\n            var /** @type {?} */ attributes_1 = element.attrs.map(function (attribute) {\n                return new t.TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.valueSpan);\n            });\n            var /** @type {?} */ selectorIndex = selector === DEFAULT_CONTENT_SELECTOR ? 0 : this.ngContentSelectors.push(selector);\n            parsedElement = new t.Content(selectorIndex, attributes_1, element.sourceSpan);\n        }\n        else if (isTemplateElement) {\n            // `<ng-template>`\n            var /** @type {?} */ boundAttributes = this.createBoundAttributes(element.name, parsedProperties);\n            parsedElement = new t.Template(attributes, boundAttributes, children, references, variables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n        }\n        else {\n            var /** @type {?} */ boundAttributes = this.createBoundAttributes(element.name, parsedProperties);\n            parsedElement = new t.Element(element.name, attributes, boundAttributes, boundEvents, children, references, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n        }\n        if (elementHasInlineTemplate) {\n            var /** @type {?} */ attributes_2 = [];\n            templateMatchableAttributes.forEach(function (_a) {\n                var name = _a[0], value = _a[1];\n                return attributes_2.push(new t.TextAttribute(name, value, inlineTemplateSourceSpan));\n            });\n            var /** @type {?} */ boundAttributes = this.createBoundAttributes('ng-template', templateParsedProperties);\n            parsedElement = new t.Template(attributes_2, boundAttributes, [parsedElement], [], templateVariables, element.sourceSpan, element.startSourceSpan, element.endSourceSpan);\n        }\n        return parsedElement;\n    };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) {\n        return new t.TextAttribute(attribute.name, attribute.value, attribute.sourceSpan, attribute.valueSpan);\n    };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.visitText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) {\n        var /** @type {?} */ valueNoNgsp = replaceNgsp(text.value);\n        var /** @type {?} */ expr = this.bindingParser.parseInterpolation(valueNoNgsp, text.sourceSpan);\n        return expr ? new t.BoundText(expr, text.sourceSpan) : new t.Text(valueNoNgsp, text.sourceSpan);\n    };\n    /**\n     * @param {?} comment\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.visitComment = /**\n     * @param {?} comment\n     * @return {?}\n     */\n    function (comment) { return null; };\n    /**\n     * @param {?} expansion\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @return {?}\n     */\n    function (expansion) { return null; };\n    /**\n     * @param {?} expansionCase\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @return {?}\n     */\n    function (expansionCase) { return null; };\n    /**\n     * @param {?} elementName\n     * @param {?} properties\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.createBoundAttributes = /**\n     * @param {?} elementName\n     * @param {?} properties\n     * @return {?}\n     */\n    function (elementName, properties) {\n        var _this = this;\n        return properties.filter(function (prop) { return !prop.isLiteral; })\n            .map(function (prop) { return _this.bindingParser.createBoundElementProperty(elementName, prop); })\n            .map(function (prop) { return t.BoundAttribute.fromBoundElementProperty(prop); });\n    };\n    /**\n     * @param {?} isTemplateElement\n     * @param {?} attribute\n     * @param {?} matchableAttributes\n     * @param {?} parsedProperties\n     * @param {?} boundEvents\n     * @param {?} variables\n     * @param {?} references\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.parseAttribute = /**\n     * @param {?} isTemplateElement\n     * @param {?} attribute\n     * @param {?} matchableAttributes\n     * @param {?} parsedProperties\n     * @param {?} boundEvents\n     * @param {?} variables\n     * @param {?} references\n     * @return {?}\n     */\n    function (isTemplateElement, attribute, matchableAttributes, parsedProperties, boundEvents, variables, references) {\n        var /** @type {?} */ name = normalizeAttributeName(attribute.name);\n        var /** @type {?} */ value = attribute.value;\n        var /** @type {?} */ srcSpan = attribute.sourceSpan;\n        var /** @type {?} */ bindParts = name.match(BIND_NAME_REGEXP);\n        var /** @type {?} */ hasBinding = false;\n        if (bindParts) {\n            hasBinding = true;\n            if (bindParts[KW_BIND_IDX] != null) {\n                this.bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, matchableAttributes, parsedProperties);\n            }\n            else if (bindParts[KW_LET_IDX]) {\n                if (isTemplateElement) {\n                    var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];\n                    this.parseVariable(identifier, value, srcSpan, variables);\n                }\n                else {\n                    this.reportError(\"\\\"let-\\\" is only supported on ng-template elements.\", srcSpan);\n                }\n            }\n            else if (bindParts[KW_REF_IDX]) {\n                var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];\n                this.parseReference(identifier, value, srcSpan, references);\n            }\n            else if (bindParts[KW_ON_IDX]) {\n                var /** @type {?} */ events = [];\n                this.bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, matchableAttributes, events);\n                addEvents(events, boundEvents);\n            }\n            else if (bindParts[KW_BINDON_IDX]) {\n                this.bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, matchableAttributes, parsedProperties);\n                this.parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, matchableAttributes, boundEvents);\n            }\n            else if (bindParts[KW_AT_IDX]) {\n                this.bindingParser.parseLiteralAttr(name, value, srcSpan, matchableAttributes, parsedProperties);\n            }\n            else if (bindParts[IDENT_BANANA_BOX_IDX]) {\n                this.bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, matchableAttributes, parsedProperties);\n                this.parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, matchableAttributes, boundEvents);\n            }\n            else if (bindParts[IDENT_PROPERTY_IDX]) {\n                this.bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, matchableAttributes, parsedProperties);\n            }\n            else if (bindParts[IDENT_EVENT_IDX]) {\n                var /** @type {?} */ events = [];\n                this.bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, matchableAttributes, events);\n                addEvents(events, boundEvents);\n            }\n        }\n        else {\n            hasBinding = this.bindingParser.parsePropertyInterpolation(name, value, srcSpan, matchableAttributes, parsedProperties);\n        }\n        return hasBinding;\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} variables\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.parseVariable = /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} variables\n     * @return {?}\n     */\n    function (identifier, value, sourceSpan, variables) {\n        if (identifier.indexOf('-') > -1) {\n            this.reportError(\"\\\"-\\\" is not allowed in variable names\", sourceSpan);\n        }\n        variables.push(new t.Variable(identifier, value, sourceSpan));\n    };\n    /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} references\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.parseReference = /**\n     * @param {?} identifier\n     * @param {?} value\n     * @param {?} sourceSpan\n     * @param {?} references\n     * @return {?}\n     */\n    function (identifier, value, sourceSpan, references) {\n        if (identifier.indexOf('-') > -1) {\n            this.reportError(\"\\\"-\\\" is not allowed in reference names\", sourceSpan);\n        }\n        references.push(new t.Reference(identifier, value, sourceSpan));\n    };\n    /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} boundEvents\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.parseAssignmentEvent = /**\n     * @param {?} name\n     * @param {?} expression\n     * @param {?} sourceSpan\n     * @param {?} targetMatchableAttrs\n     * @param {?} boundEvents\n     * @return {?}\n     */\n    function (name, expression, sourceSpan, targetMatchableAttrs, boundEvents) {\n        var /** @type {?} */ events = [];\n        this.bindingParser.parseEvent(name + \"Change\", expression + \"=$event\", sourceSpan, targetMatchableAttrs, events);\n        addEvents(events, boundEvents);\n    };\n    /**\n     * @param {?} message\n     * @param {?} sourceSpan\n     * @param {?=} level\n     * @return {?}\n     */\n    HtmlToTemplateTransform.prototype.reportError = /**\n     * @param {?} message\n     * @param {?} sourceSpan\n     * @param {?=} level\n     * @return {?}\n     */\n    function (message, sourceSpan, level) {\n        if (level === void 0) { level = ParseErrorLevel.ERROR; }\n        this.errors.push(new ParseError(sourceSpan, message, level));\n    };\n    return HtmlToTemplateTransform;\n}());\nexport { HtmlToTemplateTransform };\nfunction HtmlToTemplateTransform_tsickle_Closure_declarations() {\n    /** @type {?} */\n    HtmlToTemplateTransform.prototype.errors;\n    /** @type {?} */\n    HtmlToTemplateTransform.prototype.ngContentSelectors;\n    /** @type {?} */\n    HtmlToTemplateTransform.prototype.hasNgContent;\n    /** @type {?} */\n    HtmlToTemplateTransform.prototype.bindingParser;\n}\nvar NonBindableVisitor = /** @class */ (function () {\n    function NonBindableVisitor() {\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitElement = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) {\n        var /** @type {?} */ preparsedElement = preparseElement(ast);\n        if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n            preparsedElement.type === PreparsedElementType.STYLE ||\n            preparsedElement.type === PreparsedElementType.STYLESHEET) {\n            // Skipping <script> for security reasons\n            // Skipping <style> and stylesheets as we already processed them\n            // in the StyleCompiler\n            return null;\n        }\n        var /** @type {?} */ children = html.visitAll(this, ast.children, null);\n        return new t.Element(ast.name, /** @type {?} */ (html.visitAll(this, ast.attrs)), /* inputs */ [], /* outputs */ /* outputs */ [], children, /* references */ /* references */ [], ast.sourceSpan, ast.startSourceSpan, ast.endSourceSpan);\n    };\n    /**\n     * @param {?} comment\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitComment = /**\n     * @param {?} comment\n     * @return {?}\n     */\n    function (comment) { return null; };\n    /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitAttribute = /**\n     * @param {?} attribute\n     * @return {?}\n     */\n    function (attribute) {\n        return new t.TextAttribute(attribute.name, attribute.value, attribute.sourceSpan);\n    };\n    /**\n     * @param {?} text\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitText = /**\n     * @param {?} text\n     * @return {?}\n     */\n    function (text) { return new t.Text(text.value, text.sourceSpan); };\n    /**\n     * @param {?} expansion\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitExpansion = /**\n     * @param {?} expansion\n     * @return {?}\n     */\n    function (expansion) { return null; };\n    /**\n     * @param {?} expansionCase\n     * @return {?}\n     */\n    NonBindableVisitor.prototype.visitExpansionCase = /**\n     * @param {?} expansionCase\n     * @return {?}\n     */\n    function (expansionCase) { return null; };\n    return NonBindableVisitor;\n}());\nvar /** @type {?} */ NON_BINDABLE_VISITOR = new NonBindableVisitor();\n/**\n * @param {?} attrName\n * @return {?}\n */\nfunction normalizeAttributeName(attrName) {\n    return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n}\n/**\n * @param {?} events\n * @param {?} boundEvents\n * @return {?}\n */\nfunction addEvents(events, boundEvents) {\n    boundEvents.push.apply(boundEvents, events.map(function (e) { return t.BoundEvent.fromParsedEvent(e); }));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction isEmptyTextNode(node) {\n    return node instanceof html.Text && node.value.trim().length == 0;\n}\n//# sourceMappingURL=r3_template_transform.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { areAllEquivalent } from '../output/output_ast';\nimport { TypeScriptEmitter } from '../output/ts_emitter';\nvar GeneratedFile = /** @class */ (function () {\n    function GeneratedFile(srcFileUrl, genFileUrl, sourceOrStmts) {\n        this.srcFileUrl = srcFileUrl;\n        this.genFileUrl = genFileUrl;\n        if (typeof sourceOrStmts === 'string') {\n            this.source = sourceOrStmts;\n            this.stmts = null;\n        }\n        else {\n            this.source = null;\n            this.stmts = sourceOrStmts;\n        }\n    }\n    /**\n     * @param {?} other\n     * @return {?}\n     */\n    GeneratedFile.prototype.isEquivalent = /**\n     * @param {?} other\n     * @return {?}\n     */\n    function (other) {\n        if (this.genFileUrl !== other.genFileUrl) {\n            return false;\n        }\n        if (this.source) {\n            return this.source === other.source;\n        }\n        if (other.stmts == null) {\n            return false;\n        }\n        // Note: the constructor guarantees that if this.source is not filled,\n        // then this.stmts is.\n        return areAllEquivalent(/** @type {?} */ ((this.stmts)), /** @type {?} */ ((other.stmts)));\n    };\n    return GeneratedFile;\n}());\nexport { GeneratedFile };\nfunction GeneratedFile_tsickle_Closure_declarations() {\n    /** @type {?} */\n    GeneratedFile.prototype.source;\n    /** @type {?} */\n    GeneratedFile.prototype.stmts;\n    /** @type {?} */\n    GeneratedFile.prototype.srcFileUrl;\n    /** @type {?} */\n    GeneratedFile.prototype.genFileUrl;\n}\n/**\n * @param {?} file\n * @param {?=} preamble\n * @return {?}\n */\nexport function toTypeScript(file, preamble) {\n    if (preamble === void 0) { preamble = ''; }\n    if (!file.stmts) {\n        throw new Error(\"Illegal state: No stmts present on GeneratedFile \" + file.genFileUrl);\n    }\n    return new TypeScriptEmitter().emitStatements(file.genFileUrl, file.stmts, preamble);\n}\n//# sourceMappingURL=generated_file.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { tokenReference } from '../compile_metadata';\n/**\n * @record\n */\nexport function LazyRoute() { }\nfunction LazyRoute_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LazyRoute.prototype.module;\n    /** @type {?} */\n    LazyRoute.prototype.route;\n    /** @type {?} */\n    LazyRoute.prototype.referencedModule;\n}\n/**\n * @param {?} moduleMeta\n * @param {?} reflector\n * @return {?}\n */\nexport function listLazyRoutes(moduleMeta, reflector) {\n    var /** @type {?} */ allLazyRoutes = [];\n    for (var _i = 0, _a = moduleMeta.transitiveModule.providers; _i < _a.length; _i++) {\n        var _b = _a[_i], provider = _b.provider, module = _b.module;\n        if (tokenReference(provider.token) === reflector.ROUTES) {\n            var /** @type {?} */ loadChildren = _collectLoadChildren(provider.useValue);\n            for (var _c = 0, loadChildren_1 = loadChildren; _c < loadChildren_1.length; _c++) {\n                var route = loadChildren_1[_c];\n                allLazyRoutes.push(parseLazyRoute(route, reflector, module.reference));\n            }\n        }\n    }\n    return allLazyRoutes;\n}\n/**\n * @param {?} routes\n * @param {?=} target\n * @return {?}\n */\nfunction _collectLoadChildren(routes, target) {\n    if (target === void 0) { target = []; }\n    if (typeof routes === 'string') {\n        target.push(routes);\n    }\n    else if (Array.isArray(routes)) {\n        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {\n            var route = routes_1[_i];\n            _collectLoadChildren(route, target);\n        }\n    }\n    else if (routes.loadChildren) {\n        _collectLoadChildren(routes.loadChildren, target);\n    }\n    else if (routes.children) {\n        _collectLoadChildren(routes.children, target);\n    }\n    return target;\n}\n/**\n * @param {?} route\n * @param {?} reflector\n * @param {?=} module\n * @return {?}\n */\nexport function parseLazyRoute(route, reflector, module) {\n    var _a = route.split('#'), routePath = _a[0], routeName = _a[1];\n    var /** @type {?} */ referencedModule = reflector.resolveExternalReference({\n        moduleName: routePath,\n        name: routeName,\n    }, module ? module.filePath : undefined);\n    return { route: route, module: module || referencedModule, referencedModule: referencedModule };\n}\n//# sourceMappingURL=lazy_routes.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { ValueTransformer, visitValue } from '../util';\nimport { StaticSymbol } from './static_symbol';\nimport { isGeneratedFile, stripSummaryForJitFileSuffix, stripSummaryForJitNameSuffix, summaryForJitFileName, summaryForJitName } from './util';\nvar /** @type {?} */ DTS = /\\.d\\.ts$/;\nvar /** @type {?} */ TS = /^(?!.*\\.d\\.ts$).*\\.ts$/;\nvar ResolvedStaticSymbol = /** @class */ (function () {\n    function ResolvedStaticSymbol(symbol, metadata) {\n        this.symbol = symbol;\n        this.metadata = metadata;\n    }\n    return ResolvedStaticSymbol;\n}());\nexport { ResolvedStaticSymbol };\nfunction ResolvedStaticSymbol_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ResolvedStaticSymbol.prototype.symbol;\n    /** @type {?} */\n    ResolvedStaticSymbol.prototype.metadata;\n}\n/**\n * The host of the SymbolResolverHost disconnects the implementation from TypeScript / other\n * language\n * services and from underlying file systems.\n * @record\n */\nexport function StaticSymbolResolverHost() { }\nfunction StaticSymbolResolverHost_tsickle_Closure_declarations() {\n    /**\n     * Return a ModuleMetadata for the given module.\n     * Angular CLI will produce this metadata for a module whenever a .d.ts files is\n     * produced and the module has exported variables or classes with decorators. Module metadata can\n     * also be produced directly from TypeScript sources by using MetadataCollector in tools/metadata.\n     *\n     * \\@param modulePath is a string identifier for a module as an absolute path.\n     * \\@return the metadata for the given module.\n     * @type {?}\n     */\n    StaticSymbolResolverHost.prototype.getMetadataFor;\n    /**\n     * Converts a module name that is used in an `import` to a file path.\n     * I.e.\n     * `path/to/containingFile.ts` containing `import {...} from 'module-name'`.\n     * @type {?}\n     */\n    StaticSymbolResolverHost.prototype.moduleNameToFileName;\n    /**\n     * Get a file suitable for display to the user that should be relative to the project directory\n     * or the current directory.\n     * @type {?}\n     */\n    StaticSymbolResolverHost.prototype.getOutputName;\n}\nvar /** @type {?} */ SUPPORTED_SCHEMA_VERSION = 4;\n/**\n * This class is responsible for loading metadata per symbol,\n * and normalizing references between symbols.\n *\n * Internally, it only uses symbols without members,\n * and deduces the values for symbols with members based\n * on these symbols.\n */\nvar /**\n * This class is responsible for loading metadata per symbol,\n * and normalizing references between symbols.\n *\n * Internally, it only uses symbols without members,\n * and deduces the values for symbols with members based\n * on these symbols.\n */\nStaticSymbolResolver = /** @class */ (function () {\n    function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {\n        this.host = host;\n        this.staticSymbolCache = staticSymbolCache;\n        this.summaryResolver = summaryResolver;\n        this.errorRecorder = errorRecorder;\n        this.metadataCache = new Map();\n        this.resolvedSymbols = new Map();\n        this.resolvedFilePaths = new Set();\n        this.importAs = new Map();\n        this.symbolResourcePaths = new Map();\n        this.symbolFromFile = new Map();\n        this.knownFileNameToModuleNames = new Map();\n    }\n    /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.resolveSymbol = /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        if (staticSymbol.members.length > 0) {\n            return /** @type {?} */ ((this._resolveSymbolMembers(staticSymbol)));\n        }\n        // Note: always ask for a summary first,\n        // as we might have read shallow metadata via a .d.ts file\n        // for the symbol.\n        var /** @type {?} */ resultFromSummary = /** @type {?} */ ((this._resolveSymbolFromSummary(staticSymbol)));\n        if (resultFromSummary) {\n            return resultFromSummary;\n        }\n        var /** @type {?} */ resultFromCache = this.resolvedSymbols.get(staticSymbol);\n        if (resultFromCache) {\n            return resultFromCache;\n        }\n        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\n        // have summaries, only .d.ts files. So we always need to check both, the summary\n        // and metadata.\n        this._createSymbolsOf(staticSymbol.filePath);\n        return /** @type {?} */ ((this.resolvedSymbols.get(staticSymbol)));\n    };\n    /**\n     * getImportAs produces a symbol that can be used to import the given symbol.\n     * The import might be different than the symbol if the symbol is exported from\n     * a library with a summary; in which case we want to import the symbol from the\n     * ngfactory re-export instead of directly to avoid introducing a direct dependency\n     * on an otherwise indirect dependency.\n     *\n     * @param staticSymbol the symbol for which to generate a import symbol\n     */\n    /**\n     * getImportAs produces a symbol that can be used to import the given symbol.\n     * The import might be different than the symbol if the symbol is exported from\n     * a library with a summary; in which case we want to import the symbol from the\n     * ngfactory re-export instead of directly to avoid introducing a direct dependency\n     * on an otherwise indirect dependency.\n     *\n     * @param {?} staticSymbol the symbol for which to generate a import symbol\n     * @param {?=} useSummaries\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getImportAs = /**\n     * getImportAs produces a symbol that can be used to import the given symbol.\n     * The import might be different than the symbol if the symbol is exported from\n     * a library with a summary; in which case we want to import the symbol from the\n     * ngfactory re-export instead of directly to avoid introducing a direct dependency\n     * on an otherwise indirect dependency.\n     *\n     * @param {?} staticSymbol the symbol for which to generate a import symbol\n     * @param {?=} useSummaries\n     * @return {?}\n     */\n    function (staticSymbol, useSummaries) {\n        if (useSummaries === void 0) { useSummaries = true; }\n        if (staticSymbol.members.length) {\n            var /** @type {?} */ baseSymbol = this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name);\n            var /** @type {?} */ baseImportAs = this.getImportAs(baseSymbol, useSummaries);\n            return baseImportAs ?\n                this.getStaticSymbol(baseImportAs.filePath, baseImportAs.name, staticSymbol.members) :\n                null;\n        }\n        var /** @type {?} */ summarizedFileName = stripSummaryForJitFileSuffix(staticSymbol.filePath);\n        if (summarizedFileName !== staticSymbol.filePath) {\n            var /** @type {?} */ summarizedName = stripSummaryForJitNameSuffix(staticSymbol.name);\n            var /** @type {?} */ baseSymbol = this.getStaticSymbol(summarizedFileName, summarizedName, staticSymbol.members);\n            var /** @type {?} */ baseImportAs = this.getImportAs(baseSymbol, useSummaries);\n            return baseImportAs ?\n                this.getStaticSymbol(summaryForJitFileName(baseImportAs.filePath), summaryForJitName(baseImportAs.name), baseSymbol.members) :\n                null;\n        }\n        var /** @type {?} */ result = (useSummaries && this.summaryResolver.getImportAs(staticSymbol)) || null;\n        if (!result) {\n            result = /** @type {?} */ ((this.importAs.get(staticSymbol)));\n        }\n        return result;\n    };\n    /**\n     * getResourcePath produces the path to the original location of the symbol and should\n     * be used to determine the relative location of resource references recorded in\n     * symbol metadata.\n     */\n    /**\n     * getResourcePath produces the path to the original location of the symbol and should\n     * be used to determine the relative location of resource references recorded in\n     * symbol metadata.\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getResourcePath = /**\n     * getResourcePath produces the path to the original location of the symbol and should\n     * be used to determine the relative location of resource references recorded in\n     * symbol metadata.\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        return this.symbolResourcePaths.get(staticSymbol) || staticSymbol.filePath;\n    };\n    /**\n     * getTypeArity returns the number of generic type parameters the given symbol\n     * has. If the symbol is not a type the result is null.\n     */\n    /**\n     * getTypeArity returns the number of generic type parameters the given symbol\n     * has. If the symbol is not a type the result is null.\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getTypeArity = /**\n     * getTypeArity returns the number of generic type parameters the given symbol\n     * has. If the symbol is not a type the result is null.\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        // If the file is a factory/ngsummary file, don't resolve the symbol as doing so would\n        // cause the metadata for an factory/ngsummary file to be loaded which doesn't exist.\n        // All references to generated classes must include the correct arity whenever\n        // generating code.\n        if (isGeneratedFile(staticSymbol.filePath)) {\n            return null;\n        }\n        var /** @type {?} */ resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(staticSymbol));\n        while (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {\n            resolvedSymbol = unwrapResolvedMetadata(this.resolveSymbol(resolvedSymbol.metadata));\n        }\n        return (resolvedSymbol && resolvedSymbol.metadata && resolvedSymbol.metadata.arity) || null;\n    };\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getKnownModuleName = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        return this.knownFileNameToModuleNames.get(filePath) || null;\n    };\n    /**\n     * @param {?} sourceSymbol\n     * @param {?} targetSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.recordImportAs = /**\n     * @param {?} sourceSymbol\n     * @param {?} targetSymbol\n     * @return {?}\n     */\n    function (sourceSymbol, targetSymbol) {\n        sourceSymbol.assertNoMembers();\n        targetSymbol.assertNoMembers();\n        this.importAs.set(sourceSymbol, targetSymbol);\n    };\n    /**\n     * @param {?} fileName\n     * @param {?} moduleName\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.recordModuleNameForFileName = /**\n     * @param {?} fileName\n     * @param {?} moduleName\n     * @return {?}\n     */\n    function (fileName, moduleName) {\n        this.knownFileNameToModuleNames.set(fileName, moduleName);\n    };\n    /**\n     * Invalidate all information derived from the given file.\n     *\n     * @param fileName the file to invalidate\n     */\n    /**\n     * Invalidate all information derived from the given file.\n     *\n     * @param {?} fileName the file to invalidate\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.invalidateFile = /**\n     * Invalidate all information derived from the given file.\n     *\n     * @param {?} fileName the file to invalidate\n     * @return {?}\n     */\n    function (fileName) {\n        this.metadataCache.delete(fileName);\n        this.resolvedFilePaths.delete(fileName);\n        var /** @type {?} */ symbols = this.symbolFromFile.get(fileName);\n        if (symbols) {\n            this.symbolFromFile.delete(fileName);\n            for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {\n                var symbol = symbols_1[_i];\n                this.resolvedSymbols.delete(symbol);\n                this.importAs.delete(symbol);\n                this.symbolResourcePaths.delete(symbol);\n            }\n        }\n    };\n    /* @internal */\n    /**\n     * @template T\n     * @param {?} cb\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.ignoreErrorsFor = /**\n     * @template T\n     * @param {?} cb\n     * @return {?}\n     */\n    function (cb) {\n        var /** @type {?} */ recorder = this.errorRecorder;\n        this.errorRecorder = function () { };\n        try {\n            return cb();\n        }\n        finally {\n            this.errorRecorder = recorder;\n        }\n    };\n    /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype._resolveSymbolMembers = /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        var /** @type {?} */ members = staticSymbol.members;\n        var /** @type {?} */ baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));\n        if (!baseResolvedSymbol) {\n            return null;\n        }\n        var /** @type {?} */ baseMetadata = unwrapResolvedMetadata(baseResolvedSymbol.metadata);\n        if (baseMetadata instanceof StaticSymbol) {\n            return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));\n        }\n        else if (baseMetadata && baseMetadata.__symbolic === 'class') {\n            if (baseMetadata.statics && members.length === 1) {\n                return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);\n            }\n        }\n        else {\n            var /** @type {?} */ value = baseMetadata;\n            for (var /** @type {?} */ i = 0; i < members.length && value; i++) {\n                value = value[members[i]];\n            }\n            return new ResolvedStaticSymbol(staticSymbol, value);\n        }\n        return null;\n    };\n    /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype._resolveSymbolFromSummary = /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        var /** @type {?} */ summary = this.summaryResolver.resolveSummary(staticSymbol);\n        return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;\n    };\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param declarationFile the absolute path of the file where the symbol is declared\n     * @param name the name of the type.\n     * @param members a symbol for a static member of the named type\n     */\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param {?} declarationFile the absolute path of the file where the symbol is declared\n     * @param {?} name the name of the type.\n     * @param {?=} members a symbol for a static member of the named type\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getStaticSymbol = /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param {?} declarationFile the absolute path of the file where the symbol is declared\n     * @param {?} name the name of the type.\n     * @param {?=} members a symbol for a static member of the named type\n     * @return {?}\n     */\n    function (declarationFile, name, members) {\n        return this.staticSymbolCache.get(declarationFile, name, members);\n    };\n    /**\n     * hasDecorators checks a file's metadata for the presence of decorators without evaluating the\n     * metadata.\n     *\n     * @param filePath the absolute path to examine for decorators.\n     * @returns true if any class in the file has a decorator.\n     */\n    /**\n     * hasDecorators checks a file's metadata for the presence of decorators without evaluating the\n     * metadata.\n     *\n     * @param {?} filePath the absolute path to examine for decorators.\n     * @return {?} true if any class in the file has a decorator.\n     */\n    StaticSymbolResolver.prototype.hasDecorators = /**\n     * hasDecorators checks a file's metadata for the presence of decorators without evaluating the\n     * metadata.\n     *\n     * @param {?} filePath the absolute path to examine for decorators.\n     * @return {?} true if any class in the file has a decorator.\n     */\n    function (filePath) {\n        var /** @type {?} */ metadata = this.getModuleMetadata(filePath);\n        if (metadata['metadata']) {\n            return Object.keys(metadata['metadata']).some(function (metadataKey) {\n                var /** @type {?} */ entry = metadata['metadata'][metadataKey];\n                return entry && entry.__symbolic === 'class' && entry.decorators;\n            });\n        }\n        return false;\n    };\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getSymbolsOf = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        var /** @type {?} */ summarySymbols = this.summaryResolver.getSymbolsOf(filePath);\n        if (summarySymbols) {\n            return summarySymbols;\n        }\n        // Note: Some users use libraries that were not compiled with ngc, i.e. they don't\n        // have summaries, only .d.ts files, but `summaryResolver.isLibraryFile` returns true.\n        this._createSymbolsOf(filePath);\n        var /** @type {?} */ metadataSymbols = [];\n        this.resolvedSymbols.forEach(function (resolvedSymbol) {\n            if (resolvedSymbol.symbol.filePath === filePath) {\n                metadataSymbols.push(resolvedSymbol.symbol);\n            }\n        });\n        return metadataSymbols;\n    };\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype._createSymbolsOf = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        var _this = this;\n        if (this.resolvedFilePaths.has(filePath)) {\n            return;\n        }\n        this.resolvedFilePaths.add(filePath);\n        var /** @type {?} */ resolvedSymbols = [];\n        var /** @type {?} */ metadata = this.getModuleMetadata(filePath);\n        if (metadata['importAs']) {\n            // Index bundle indices should use the importAs module name defined\n            // in the bundle.\n            this.knownFileNameToModuleNames.set(filePath, metadata['importAs']);\n        }\n        // handle the symbols in one of the re-export location\n        if (metadata['exports']) {\n            var _loop_1 = function (moduleExport) {\n                // handle the symbols in the list of explicitly re-exported symbols.\n                if (moduleExport.export) {\n                    moduleExport.export.forEach(function (exportSymbol) {\n                        var /** @type {?} */ symbolName;\n                        if (typeof exportSymbol === 'string') {\n                            symbolName = exportSymbol;\n                        }\n                        else {\n                            symbolName = exportSymbol.as;\n                        }\n                        symbolName = unescapeIdentifier(symbolName);\n                        var /** @type {?} */ symName = symbolName;\n                        if (typeof exportSymbol !== 'string') {\n                            symName = unescapeIdentifier(exportSymbol.name);\n                        }\n                        var /** @type {?} */ resolvedModule = _this.resolveModule(moduleExport.from, filePath);\n                        if (resolvedModule) {\n                            var /** @type {?} */ targetSymbol = _this.getStaticSymbol(resolvedModule, symName);\n                            var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, symbolName);\n                            resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));\n                        }\n                    });\n                }\n                else {\n                    // handle the symbols via export * directives.\n                    var /** @type {?} */ resolvedModule = this_1.resolveModule(moduleExport.from, filePath);\n                    if (resolvedModule) {\n                        var /** @type {?} */ nestedExports = this_1.getSymbolsOf(resolvedModule);\n                        nestedExports.forEach(function (targetSymbol) {\n                            var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name);\n                            resolvedSymbols.push(_this.createExport(sourceSymbol, targetSymbol));\n                        });\n                    }\n                }\n            };\n            var this_1 = this;\n            for (var _i = 0, _a = metadata['exports']; _i < _a.length; _i++) {\n                var moduleExport = _a[_i];\n                _loop_1(moduleExport);\n            }\n        }\n        // handle the actual metadata. Has to be after the exports\n        // as there migth be collisions in the names, and we want the symbols\n        // of the current module to win ofter reexports.\n        if (metadata['metadata']) {\n            // handle direct declarations of the symbol\n            var /** @type {?} */ topLevelSymbolNames_1 = new Set(Object.keys(metadata['metadata']).map(unescapeIdentifier));\n            var /** @type {?} */ origins_1 = metadata['origins'] || {};\n            Object.keys(metadata['metadata']).forEach(function (metadataKey) {\n                var /** @type {?} */ symbolMeta = metadata['metadata'][metadataKey];\n                var /** @type {?} */ name = unescapeIdentifier(metadataKey);\n                var /** @type {?} */ symbol = _this.getStaticSymbol(filePath, name);\n                var /** @type {?} */ origin = origins_1.hasOwnProperty(metadataKey) && origins_1[metadataKey];\n                if (origin) {\n                    // If the symbol is from a bundled index, use the declaration location of the\n                    // symbol so relative references (such as './my.html') will be calculated\n                    // correctly.\n                    var /** @type {?} */ originFilePath = _this.resolveModule(origin, filePath);\n                    if (!originFilePath) {\n                        _this.reportError(new Error(\"Couldn't resolve original symbol for \" + origin + \" from \" + filePath));\n                    }\n                    else {\n                        _this.symbolResourcePaths.set(symbol, originFilePath);\n                    }\n                }\n                resolvedSymbols.push(_this.createResolvedSymbol(symbol, filePath, topLevelSymbolNames_1, symbolMeta));\n            });\n        }\n        resolvedSymbols.forEach(function (resolvedSymbol) { return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol); });\n        this.symbolFromFile.set(filePath, resolvedSymbols.map(function (resolvedSymbol) { return resolvedSymbol.symbol; }));\n    };\n    /**\n     * @param {?} sourceSymbol\n     * @param {?} topLevelPath\n     * @param {?} topLevelSymbolNames\n     * @param {?} metadata\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.createResolvedSymbol = /**\n     * @param {?} sourceSymbol\n     * @param {?} topLevelPath\n     * @param {?} topLevelSymbolNames\n     * @param {?} metadata\n     * @return {?}\n     */\n    function (sourceSymbol, topLevelPath, topLevelSymbolNames, metadata) {\n        var _this = this;\n        // For classes that don't have Angular summaries / metadata,\n        // we only keep their arity, but nothing else\n        // (e.g. their constructor parameters).\n        // We do this to prevent introducing deep imports\n        // as we didn't generate .ngfactory.ts files with proper reexports.\n        var /** @type {?} */ isTsFile = TS.test(sourceSymbol.filePath);\n        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) && !isTsFile && metadata &&\n            metadata['__symbolic'] === 'class') {\n            var /** @type {?} */ transformedMeta_1 = { __symbolic: 'class', arity: metadata.arity };\n            return new ResolvedStaticSymbol(sourceSymbol, transformedMeta_1);\n        }\n        var /** @type {?} */ _originalFileMemo;\n        var /** @type {?} */ getOriginalName = function () {\n            if (!_originalFileMemo) {\n                // Guess what hte original file name is from the reference. If it has a `.d.ts` extension\n                // replace it with `.ts`. If it already has `.ts` just leave it in place. If it doesn't have\n                // .ts or .d.ts, append `.ts'. Also, if it is in `node_modules`, trim the `node_module`\n                // location as it is not important to finding the file.\n                _originalFileMemo =\n                    _this.host.getOutputName(topLevelPath.replace(/((\\.ts)|(\\.d\\.ts)|)$/, '.ts')\n                        .replace(/^.*node_modules[/\\\\]/, ''));\n            }\n            return _originalFileMemo;\n        };\n        var /** @type {?} */ self = this;\n        var ReferenceTransformer = /** @class */ (function (_super) {\n            tslib_1.__extends(ReferenceTransformer, _super);\n            function ReferenceTransformer() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /**\n             * @param {?} map\n             * @param {?} functionParams\n             * @return {?}\n             */\n            ReferenceTransformer.prototype.visitStringMap = /**\n             * @param {?} map\n             * @param {?} functionParams\n             * @return {?}\n             */\n            function (map, functionParams) {\n                var /** @type {?} */ symbolic = map['__symbolic'];\n                if (symbolic === 'function') {\n                    var /** @type {?} */ oldLen = functionParams.length;\n                    functionParams.push.apply(functionParams, (map['parameters'] || []));\n                    var /** @type {?} */ result = _super.prototype.visitStringMap.call(this, map, functionParams);\n                    functionParams.length = oldLen;\n                    return result;\n                }\n                else if (symbolic === 'reference') {\n                    var /** @type {?} */ module = map['module'];\n                    var /** @type {?} */ name_1 = map['name'] ? unescapeIdentifier(map['name']) : map['name'];\n                    if (!name_1) {\n                        return null;\n                    }\n                    var /** @type {?} */ filePath = void 0;\n                    if (module) {\n                        filePath = /** @type {?} */ ((self.resolveModule(module, sourceSymbol.filePath)));\n                        if (!filePath) {\n                            return {\n                                __symbolic: 'error',\n                                message: \"Could not resolve \" + module + \" relative to \" + sourceSymbol.filePath + \".\",\n                                line: map[\"line\"],\n                                character: map[\"character\"],\n                                fileName: getOriginalName()\n                            };\n                        }\n                        return {\n                            __symbolic: 'resolved',\n                            symbol: self.getStaticSymbol(filePath, name_1),\n                            line: map[\"line\"],\n                            character: map[\"character\"],\n                            fileName: getOriginalName()\n                        };\n                    }\n                    else if (functionParams.indexOf(name_1) >= 0) {\n                        // reference to a function parameter\n                        return { __symbolic: 'reference', name: name_1 };\n                    }\n                    else {\n                        if (topLevelSymbolNames.has(name_1)) {\n                            return self.getStaticSymbol(topLevelPath, name_1);\n                        }\n                        // ambient value\n                        null;\n                    }\n                }\n                else if (symbolic === 'error') {\n                    return tslib_1.__assign({}, map, { fileName: getOriginalName() });\n                }\n                else {\n                    return _super.prototype.visitStringMap.call(this, map, functionParams);\n                }\n            };\n            return ReferenceTransformer;\n        }(ValueTransformer));\n        var /** @type {?} */ transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);\n        var /** @type {?} */ unwrappedTransformedMeta = unwrapResolvedMetadata(transformedMeta);\n        if (unwrappedTransformedMeta instanceof StaticSymbol) {\n            return this.createExport(sourceSymbol, unwrappedTransformedMeta);\n        }\n        return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);\n    };\n    /**\n     * @param {?} sourceSymbol\n     * @param {?} targetSymbol\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.createExport = /**\n     * @param {?} sourceSymbol\n     * @param {?} targetSymbol\n     * @return {?}\n     */\n    function (sourceSymbol, targetSymbol) {\n        sourceSymbol.assertNoMembers();\n        targetSymbol.assertNoMembers();\n        if (this.summaryResolver.isLibraryFile(sourceSymbol.filePath) &&\n            this.summaryResolver.isLibraryFile(targetSymbol.filePath)) {\n            // This case is for an ng library importing symbols from a plain ts library\n            // transitively.\n            // Note: We rely on the fact that we discover symbols in the direction\n            // from source files to library files\n            this.importAs.set(targetSymbol, this.getImportAs(sourceSymbol) || sourceSymbol);\n        }\n        return new ResolvedStaticSymbol(sourceSymbol, targetSymbol);\n    };\n    /**\n     * @param {?} error\n     * @param {?=} context\n     * @param {?=} path\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.reportError = /**\n     * @param {?} error\n     * @param {?=} context\n     * @param {?=} path\n     * @return {?}\n     */\n    function (error, context, path) {\n        if (this.errorRecorder) {\n            this.errorRecorder(error, (context && context.filePath) || path);\n        }\n        else {\n            throw error;\n        }\n    };\n    /**\n     * @param {?} module an absolute path to a module file.\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getModuleMetadata = /**\n     * @param {?} module an absolute path to a module file.\n     * @return {?}\n     */\n    function (module) {\n        var /** @type {?} */ moduleMetadata = this.metadataCache.get(module);\n        if (!moduleMetadata) {\n            var /** @type {?} */ moduleMetadatas = this.host.getMetadataFor(module);\n            if (moduleMetadatas) {\n                var /** @type {?} */ maxVersion_1 = -1;\n                moduleMetadatas.forEach(function (md) {\n                    if (md && md['version'] > maxVersion_1) {\n                        maxVersion_1 = md['version'];\n                        moduleMetadata = md;\n                    }\n                });\n            }\n            if (!moduleMetadata) {\n                moduleMetadata =\n                    { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };\n            }\n            if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {\n                var /** @type {?} */ errorMessage = moduleMetadata['version'] == 2 ?\n                    \"Unsupported metadata version \" + moduleMetadata['version'] + \" for module \" + module + \". This module should be compiled with a newer version of ngc\" :\n                    \"Metadata version mismatch for module \" + module + \", found version \" + moduleMetadata['version'] + \", expected \" + SUPPORTED_SCHEMA_VERSION;\n                this.reportError(new Error(errorMessage));\n            }\n            this.metadataCache.set(module, moduleMetadata);\n        }\n        return moduleMetadata;\n    };\n    /**\n     * @param {?} module\n     * @param {?} symbolName\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.getSymbolByModule = /**\n     * @param {?} module\n     * @param {?} symbolName\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    function (module, symbolName, containingFile) {\n        var /** @type {?} */ filePath = this.resolveModule(module, containingFile);\n        if (!filePath) {\n            this.reportError(new Error(\"Could not resolve module \" + module + (containingFile ? ' relative to ' +\n                containingFile : '')));\n            return this.getStaticSymbol(\"ERROR:\" + module, symbolName);\n        }\n        return this.getStaticSymbol(filePath, symbolName);\n    };\n    /**\n     * @param {?} module\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    StaticSymbolResolver.prototype.resolveModule = /**\n     * @param {?} module\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    function (module, containingFile) {\n        try {\n            return this.host.moduleNameToFileName(module, containingFile);\n        }\n        catch (/** @type {?} */ e) {\n            console.error(\"Could not resolve module '\" + module + \"' relative to file \" + containingFile);\n            this.reportError(e, undefined, containingFile);\n        }\n        return null;\n    };\n    return StaticSymbolResolver;\n}());\n/**\n * This class is responsible for loading metadata per symbol,\n * and normalizing references between symbols.\n *\n * Internally, it only uses symbols without members,\n * and deduces the values for symbols with members based\n * on these symbols.\n */\nexport { StaticSymbolResolver };\nfunction StaticSymbolResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticSymbolResolver.prototype.metadataCache;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.resolvedSymbols;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.resolvedFilePaths;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.importAs;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.symbolResourcePaths;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.symbolFromFile;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.knownFileNameToModuleNames;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.host;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.staticSymbolCache;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.summaryResolver;\n    /** @type {?} */\n    StaticSymbolResolver.prototype.errorRecorder;\n}\n/**\n * @param {?} identifier\n * @return {?}\n */\nexport function unescapeIdentifier(identifier) {\n    return identifier.startsWith('___') ? identifier.substr(1) : identifier;\n}\n/**\n * @param {?} metadata\n * @return {?}\n */\nexport function unwrapResolvedMetadata(metadata) {\n    if (metadata && metadata.__symbolic === 'resolved') {\n        return metadata.symbol;\n    }\n    return metadata;\n}\n//# sourceMappingURL=static_symbol_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as tslib_1 from \"tslib\";\nimport { CompileNgModuleMetadata, CompileSummaryKind } from '../compile_metadata';\nimport * as o from '../output/output_ast';\nimport { ValueTransformer, visitValue } from '../util';\nimport { StaticSymbol } from './static_symbol';\nimport { unwrapResolvedMetadata } from './static_symbol_resolver';\nimport { isLoweredSymbol, ngfactoryFilePath, summaryForJitFileName, summaryForJitName } from './util';\n/**\n * @param {?} srcFileName\n * @param {?} forJitCtx\n * @param {?} summaryResolver\n * @param {?} symbolResolver\n * @param {?} symbols\n * @param {?} types\n * @return {?}\n */\nexport function serializeSummaries(srcFileName, forJitCtx, summaryResolver, symbolResolver, symbols, types) {\n    var /** @type {?} */ toJsonSerializer = new ToJsonSerializer(symbolResolver, summaryResolver, srcFileName);\n    // for symbols, we use everything except for the class metadata itself\n    // (we keep the statics though), as the class metadata is contained in the\n    // CompileTypeSummary.\n    symbols.forEach(function (resolvedSymbol) {\n        return toJsonSerializer.addSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata });\n    });\n    // Add type summaries.\n    types.forEach(function (_a) {\n        var summary = _a.summary, metadata = _a.metadata;\n        toJsonSerializer.addSummary({ symbol: summary.type.reference, metadata: undefined, type: summary });\n    });\n    var _a = toJsonSerializer.serialize(), json = _a.json, exportAs = _a.exportAs;\n    if (forJitCtx) {\n        var /** @type {?} */ forJitSerializer_1 = new ForJitSerializer(forJitCtx, symbolResolver, summaryResolver);\n        types.forEach(function (_a) {\n            var summary = _a.summary, metadata = _a.metadata;\n            forJitSerializer_1.addSourceType(summary, metadata);\n        });\n        toJsonSerializer.unprocessedSymbolSummariesBySymbol.forEach(function (summary) {\n            if (summaryResolver.isLibraryFile(summary.symbol.filePath) && summary.type) {\n                forJitSerializer_1.addLibType(summary.type);\n            }\n        });\n        forJitSerializer_1.serialize(exportAs);\n    }\n    return { json: json, exportAs: exportAs };\n}\n/**\n * @param {?} symbolCache\n * @param {?} summaryResolver\n * @param {?} libraryFileName\n * @param {?} json\n * @return {?}\n */\nexport function deserializeSummaries(symbolCache, summaryResolver, libraryFileName, json) {\n    var /** @type {?} */ deserializer = new FromJsonDeserializer(symbolCache, summaryResolver);\n    return deserializer.deserialize(libraryFileName, json);\n}\n/**\n * @param {?} outputCtx\n * @param {?} reference\n * @return {?}\n */\nexport function createForJitStub(outputCtx, reference) {\n    return createSummaryForJitFunction(outputCtx, reference, o.NULL_EXPR);\n}\n/**\n * @param {?} outputCtx\n * @param {?} reference\n * @param {?} value\n * @return {?}\n */\nfunction createSummaryForJitFunction(outputCtx, reference, value) {\n    var /** @type {?} */ fnName = summaryForJitName(reference.name);\n    outputCtx.statements.push(o.fn([], [new o.ReturnStatement(value)], new o.ArrayType(o.DYNAMIC_TYPE)).toDeclStmt(fnName, [\n        o.StmtModifier.Final, o.StmtModifier.Exported\n    ]));\n}\n/** @enum {number} */\nvar SerializationFlags = {\n    None: 0,\n    ResolveValue: 1,\n};\nvar ToJsonSerializer = /** @class */ (function (_super) {\n    tslib_1.__extends(ToJsonSerializer, _super);\n    function ToJsonSerializer(symbolResolver, summaryResolver, srcFileName) {\n        var _this = _super.call(this) || this;\n        _this.symbolResolver = symbolResolver;\n        _this.summaryResolver = summaryResolver;\n        _this.srcFileName = srcFileName;\n        _this.symbols = [];\n        _this.indexBySymbol = new Map();\n        _this.reexportedBy = new Map();\n        _this.processedSummaryBySymbol = new Map();\n        _this.processedSummaries = [];\n        _this.unprocessedSymbolSummariesBySymbol = new Map();\n        _this.moduleName = symbolResolver.getKnownModuleName(srcFileName);\n        return _this;\n    }\n    /**\n     * @param {?} summary\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.addSummary = /**\n     * @param {?} summary\n     * @return {?}\n     */\n    function (summary) {\n        var _this = this;\n        var /** @type {?} */ unprocessedSummary = this.unprocessedSymbolSummariesBySymbol.get(summary.symbol);\n        var /** @type {?} */ processedSummary = this.processedSummaryBySymbol.get(summary.symbol);\n        if (!unprocessedSummary) {\n            unprocessedSummary = { symbol: summary.symbol, metadata: undefined };\n            this.unprocessedSymbolSummariesBySymbol.set(summary.symbol, unprocessedSummary);\n            processedSummary = { symbol: this.processValue(summary.symbol, 0 /* None */) };\n            this.processedSummaries.push(processedSummary);\n            this.processedSummaryBySymbol.set(summary.symbol, processedSummary);\n        }\n        if (!unprocessedSummary.metadata && summary.metadata) {\n            var /** @type {?} */ metadata_1 = summary.metadata || {};\n            if (metadata_1.__symbolic === 'class') {\n                // For classes, we keep everything except their class decorators.\n                // We need to keep e.g. the ctor args, method names, method decorators\n                // so that the class can be extended in another compilation unit.\n                // We don't keep the class decorators as\n                // 1) they refer to data\n                //   that should not cause a rebuild of downstream compilation units\n                //   (e.g. inline templates of @Component, or @NgModule.declarations)\n                // 2) their data is already captured in TypeSummaries, e.g. DirectiveSummary.\n                var /** @type {?} */ clone_1 = {};\n                Object.keys(metadata_1).forEach(function (propName) {\n                    if (propName !== 'decorators') {\n                        clone_1[propName] = metadata_1[propName];\n                    }\n                });\n                metadata_1 = clone_1;\n            }\n            else if (isCall(metadata_1)) {\n                if (!isFunctionCall(metadata_1) && !isMethodCallOnVariable(metadata_1)) {\n                    // Don't store complex calls as we won't be able to simplify them anyways later on.\n                    // Don't store complex calls as we won't be able to simplify them anyways later on.\n                    metadata_1 = {\n                        __symbolic: 'error',\n                        message: 'Complex function calls are not supported.',\n                    };\n                }\n            }\n            // Note: We need to keep storing ctor calls for e.g.\n            // `export const x = new InjectionToken(...)`\n            unprocessedSummary.metadata = metadata_1;\n            processedSummary.metadata = this.processValue(metadata_1, 1 /* ResolveValue */);\n            if (metadata_1 instanceof StaticSymbol &&\n                this.summaryResolver.isLibraryFile(metadata_1.filePath)) {\n                var /** @type {?} */ declarationSymbol = this.symbols[/** @type {?} */ ((this.indexBySymbol.get(metadata_1)))];\n                if (!isLoweredSymbol(declarationSymbol.name)) {\n                    // Note: symbols that were introduced during codegen in the user file can have a reexport\n                    // if a user used `export *`. However, we can't rely on this as tsickle will change\n                    // `export *` into named exports, using only the information from the typechecker.\n                    // As we introduce the new symbols after typecheck, Tsickle does not know about them,\n                    // and omits them when expanding `export *`.\n                    // So we have to keep reexporting these symbols manually via .ngfactory files.\n                    this.reexportedBy.set(declarationSymbol, summary.symbol);\n                }\n            }\n        }\n        if (!unprocessedSummary.type && summary.type) {\n            unprocessedSummary.type = summary.type;\n            // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,\n            // as the type summaries already contain the transitive data that they require\n            // (in a minimal way).\n            processedSummary.type = this.processValue(summary.type, 0 /* None */);\n            // except for reexported directives / pipes, so we need to store\n            // their summaries explicitly.\n            if (summary.type.summaryKind === CompileSummaryKind.NgModule) {\n                var /** @type {?} */ ngModuleSummary = /** @type {?} */ (summary.type);\n                ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {\n                    var /** @type {?} */ symbol = id.reference;\n                    if (_this.summaryResolver.isLibraryFile(symbol.filePath) &&\n                        !_this.unprocessedSymbolSummariesBySymbol.has(symbol)) {\n                        var /** @type {?} */ summary_1 = _this.summaryResolver.resolveSummary(symbol);\n                        if (summary_1) {\n                            _this.addSummary(summary_1);\n                        }\n                    }\n                });\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.serialize = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ exportAs = [];\n        var /** @type {?} */ json = JSON.stringify({\n            moduleName: this.moduleName,\n            summaries: this.processedSummaries,\n            symbols: this.symbols.map(function (symbol, index) {\n                symbol.assertNoMembers();\n                var /** @type {?} */ importAs = /** @type {?} */ ((undefined));\n                if (_this.summaryResolver.isLibraryFile(symbol.filePath)) {\n                    var /** @type {?} */ reexportSymbol = _this.reexportedBy.get(symbol);\n                    if (reexportSymbol) {\n                        importAs = /** @type {?} */ ((_this.indexBySymbol.get(reexportSymbol)));\n                    }\n                    else {\n                        var /** @type {?} */ summary = _this.unprocessedSymbolSummariesBySymbol.get(symbol);\n                        if (!summary || !summary.metadata || summary.metadata.__symbolic !== 'interface') {\n                            importAs = symbol.name + \"_\" + index;\n                            exportAs.push({ symbol: symbol, exportAs: importAs });\n                        }\n                    }\n                }\n                return {\n                    __symbol: index,\n                    name: symbol.name,\n                    filePath: _this.summaryResolver.toSummaryFileName(symbol.filePath, _this.srcFileName),\n                    importAs: importAs\n                };\n            })\n        });\n        return { json: json, exportAs: exportAs };\n    };\n    /**\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.processValue = /**\n     * @param {?} value\n     * @param {?} flags\n     * @return {?}\n     */\n    function (value, flags) {\n        return visitValue(value, this, flags);\n    };\n    /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.visitOther = /**\n     * @param {?} value\n     * @param {?} context\n     * @return {?}\n     */\n    function (value, context) {\n        if (value instanceof StaticSymbol) {\n            var /** @type {?} */ baseSymbol = this.symbolResolver.getStaticSymbol(value.filePath, value.name);\n            var /** @type {?} */ index = this.visitStaticSymbol(baseSymbol, context);\n            return { __symbol: index, members: value.members };\n        }\n    };\n    /**\n     * Strip line and character numbers from ngsummaries.\n     * Emitting them causes white spaces changes to retrigger upstream\n     * recompilations in bazel.\n     * TODO: find out a way to have line and character numbers in errors without\n     * excessive recompilation in bazel.\n     */\n    /**\n     * Strip line and character numbers from ngsummaries.\n     * Emitting them causes white spaces changes to retrigger upstream\n     * recompilations in bazel.\n     * TODO: find out a way to have line and character numbers in errors without\n     * excessive recompilation in bazel.\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.visitStringMap = /**\n     * Strip line and character numbers from ngsummaries.\n     * Emitting them causes white spaces changes to retrigger upstream\n     * recompilations in bazel.\n     * TODO: find out a way to have line and character numbers in errors without\n     * excessive recompilation in bazel.\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    function (map, context) {\n        if (map['__symbolic'] === 'resolved') {\n            return visitValue(map[\"symbol\"], this, context);\n        }\n        if (map['__symbolic'] === 'error') {\n            delete map['line'];\n            delete map['character'];\n        }\n        return _super.prototype.visitStringMap.call(this, map, context);\n    };\n    /**\n     * Returns null if the options.resolveValue is true, and the summary for the symbol\n     * resolved to a type or could not be resolved.\n     * @param {?} baseSymbol\n     * @param {?} flags\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.visitStaticSymbol = /**\n     * Returns null if the options.resolveValue is true, and the summary for the symbol\n     * resolved to a type or could not be resolved.\n     * @param {?} baseSymbol\n     * @param {?} flags\n     * @return {?}\n     */\n    function (baseSymbol, flags) {\n        var /** @type {?} */ index = this.indexBySymbol.get(baseSymbol);\n        var /** @type {?} */ summary = null;\n        if (flags & 1 /* ResolveValue */ &&\n            this.summaryResolver.isLibraryFile(baseSymbol.filePath)) {\n            if (this.unprocessedSymbolSummariesBySymbol.has(baseSymbol)) {\n                // the summary for this symbol was already added\n                // -> nothing to do.\n                return /** @type {?} */ ((index));\n            }\n            summary = this.loadSummary(baseSymbol);\n            if (summary && summary.metadata instanceof StaticSymbol) {\n                // The summary is a reexport\n                index = this.visitStaticSymbol(summary.metadata, flags);\n                // reset the summary as it is just a reexport, so we don't want to store it.\n                summary = null;\n            }\n        }\n        else if (index != null) {\n            // Note: == on purpose to compare with undefined!\n            // No summary and the symbol is already added -> nothing to do.\n            return index;\n        }\n        // Note: == on purpose to compare with undefined!\n        if (index == null) {\n            index = this.symbols.length;\n            this.symbols.push(baseSymbol);\n        }\n        this.indexBySymbol.set(baseSymbol, index);\n        if (summary) {\n            this.addSummary(summary);\n        }\n        return index;\n    };\n    /**\n     * @param {?} symbol\n     * @return {?}\n     */\n    ToJsonSerializer.prototype.loadSummary = /**\n     * @param {?} symbol\n     * @return {?}\n     */\n    function (symbol) {\n        var /** @type {?} */ summary = this.summaryResolver.resolveSummary(symbol);\n        if (!summary) {\n            // some symbols might originate from a plain typescript library\n            // that just exported .d.ts and .metadata.json files, i.e. where no summary\n            // files were created.\n            var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n            if (resolvedSymbol) {\n                summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };\n            }\n        }\n        return summary;\n    };\n    return ToJsonSerializer;\n}(ValueTransformer));\nfunction ToJsonSerializer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ToJsonSerializer.prototype.symbols;\n    /** @type {?} */\n    ToJsonSerializer.prototype.indexBySymbol;\n    /** @type {?} */\n    ToJsonSerializer.prototype.reexportedBy;\n    /** @type {?} */\n    ToJsonSerializer.prototype.processedSummaryBySymbol;\n    /** @type {?} */\n    ToJsonSerializer.prototype.processedSummaries;\n    /** @type {?} */\n    ToJsonSerializer.prototype.moduleName;\n    /** @type {?} */\n    ToJsonSerializer.prototype.unprocessedSymbolSummariesBySymbol;\n    /** @type {?} */\n    ToJsonSerializer.prototype.symbolResolver;\n    /** @type {?} */\n    ToJsonSerializer.prototype.summaryResolver;\n    /** @type {?} */\n    ToJsonSerializer.prototype.srcFileName;\n}\nvar ForJitSerializer = /** @class */ (function () {\n    function ForJitSerializer(outputCtx, symbolResolver, summaryResolver) {\n        this.outputCtx = outputCtx;\n        this.symbolResolver = symbolResolver;\n        this.summaryResolver = summaryResolver;\n        this.data = [];\n    }\n    /**\n     * @param {?} summary\n     * @param {?} metadata\n     * @return {?}\n     */\n    ForJitSerializer.prototype.addSourceType = /**\n     * @param {?} summary\n     * @param {?} metadata\n     * @return {?}\n     */\n    function (summary, metadata) {\n        this.data.push({ summary: summary, metadata: metadata, isLibrary: false });\n    };\n    /**\n     * @param {?} summary\n     * @return {?}\n     */\n    ForJitSerializer.prototype.addLibType = /**\n     * @param {?} summary\n     * @return {?}\n     */\n    function (summary) {\n        this.data.push({ summary: summary, metadata: null, isLibrary: true });\n    };\n    /**\n     * @param {?} exportAsArr\n     * @return {?}\n     */\n    ForJitSerializer.prototype.serialize = /**\n     * @param {?} exportAsArr\n     * @return {?}\n     */\n    function (exportAsArr) {\n        var _this = this;\n        var /** @type {?} */ exportAsBySymbol = new Map();\n        for (var _i = 0, exportAsArr_1 = exportAsArr; _i < exportAsArr_1.length; _i++) {\n            var _a = exportAsArr_1[_i], symbol = _a.symbol, exportAs = _a.exportAs;\n            exportAsBySymbol.set(symbol, exportAs);\n        }\n        var /** @type {?} */ ngModuleSymbols = new Set();\n        for (var _b = 0, _c = this.data; _b < _c.length; _b++) {\n            var _d = _c[_b], summary = _d.summary, metadata = _d.metadata, isLibrary = _d.isLibrary;\n            if (summary.summaryKind === CompileSummaryKind.NgModule) {\n                // collect the symbols that refer to NgModule classes.\n                // Note: we can't just rely on `summary.type.summaryKind` to determine this as\n                // we don't add the summaries of all referenced symbols when we serialize type summaries.\n                // See serializeSummaries for details.\n                ngModuleSymbols.add(summary.type.reference);\n                var /** @type {?} */ modSummary = /** @type {?} */ (summary);\n                for (var _e = 0, _f = modSummary.modules; _e < _f.length; _e++) {\n                    var mod = _f[_e];\n                    ngModuleSymbols.add(mod.reference);\n                }\n            }\n            if (!isLibrary) {\n                var /** @type {?} */ fnName = summaryForJitName(summary.type.reference.name);\n                createSummaryForJitFunction(this.outputCtx, summary.type.reference, this.serializeSummaryWithDeps(summary, /** @type {?} */ ((metadata))));\n            }\n        }\n        ngModuleSymbols.forEach(function (ngModuleSymbol) {\n            if (_this.summaryResolver.isLibraryFile(ngModuleSymbol.filePath)) {\n                var /** @type {?} */ exportAs = exportAsBySymbol.get(ngModuleSymbol) || ngModuleSymbol.name;\n                var /** @type {?} */ jitExportAsName = summaryForJitName(exportAs);\n                _this.outputCtx.statements.push(o.variable(jitExportAsName)\n                    .set(_this.serializeSummaryRef(ngModuleSymbol))\n                    .toDeclStmt(null, [o.StmtModifier.Exported]));\n            }\n        });\n    };\n    /**\n     * @param {?} summary\n     * @param {?} metadata\n     * @return {?}\n     */\n    ForJitSerializer.prototype.serializeSummaryWithDeps = /**\n     * @param {?} summary\n     * @param {?} metadata\n     * @return {?}\n     */\n    function (summary, metadata) {\n        var _this = this;\n        var /** @type {?} */ expressions = [this.serializeSummary(summary)];\n        var /** @type {?} */ providers = [];\n        if (metadata instanceof CompileNgModuleMetadata) {\n            expressions.push.apply(expressions, \n            // For directives / pipes, we only add the declared ones,\n            // and rely on transitively importing NgModules to get the transitive\n            // summaries.\n            metadata.declaredDirectives.concat(metadata.declaredPipes)\n                .map(function (type) { return type.reference; })\n                .concat(metadata.transitiveModule.modules.map(function (type) { return type.reference; })\n                .filter(function (ref) { return ref !== metadata.type.reference; }))\n                .map(function (ref) { return _this.serializeSummaryRef(ref); }));\n            // Note: We don't use `NgModuleSummary.providers`, as that one is transitive,\n            // and we already have transitive modules.\n            providers = metadata.providers;\n        }\n        else if (summary.summaryKind === CompileSummaryKind.Directive) {\n            var /** @type {?} */ dirSummary = /** @type {?} */ (summary);\n            providers = dirSummary.providers.concat(dirSummary.viewProviders);\n        }\n        // Note: We can't just refer to the `ngsummary.ts` files for `useClass` providers (as we do for\n        // declaredDirectives / declaredPipes), as we allow\n        // providers without ctor arguments to skip the `@Injectable` decorator,\n        // i.e. we didn't generate .ngsummary.ts files for these.\n        expressions.push.apply(expressions, providers.filter(function (provider) { return !!provider.useClass; }).map(function (provider) {\n            return _this.serializeSummary(/** @type {?} */ ({\n                summaryKind: CompileSummaryKind.Injectable, type: provider.useClass\n            }));\n        }));\n        return o.literalArr(expressions);\n    };\n    /**\n     * @param {?} typeSymbol\n     * @return {?}\n     */\n    ForJitSerializer.prototype.serializeSummaryRef = /**\n     * @param {?} typeSymbol\n     * @return {?}\n     */\n    function (typeSymbol) {\n        var /** @type {?} */ jitImportedSymbol = this.symbolResolver.getStaticSymbol(summaryForJitFileName(typeSymbol.filePath), summaryForJitName(typeSymbol.name));\n        return this.outputCtx.importExpr(jitImportedSymbol);\n    };\n    /**\n     * @param {?} data\n     * @return {?}\n     */\n    ForJitSerializer.prototype.serializeSummary = /**\n     * @param {?} data\n     * @return {?}\n     */\n    function (data) {\n        var /** @type {?} */ outputCtx = this.outputCtx;\n        var Transformer = /** @class */ (function () {\n            function Transformer() {\n            }\n            /**\n             * @param {?} arr\n             * @param {?} context\n             * @return {?}\n             */\n            Transformer.prototype.visitArray = /**\n             * @param {?} arr\n             * @param {?} context\n             * @return {?}\n             */\n            function (arr, context) {\n                var _this = this;\n                return o.literalArr(arr.map(function (entry) { return visitValue(entry, _this, context); }));\n            };\n            /**\n             * @param {?} map\n             * @param {?} context\n             * @return {?}\n             */\n            Transformer.prototype.visitStringMap = /**\n             * @param {?} map\n             * @param {?} context\n             * @return {?}\n             */\n            function (map, context) {\n                var _this = this;\n                return new o.LiteralMapExpr(Object.keys(map).map(function (key) { return new o.LiteralMapEntry(key, visitValue(map[key], _this, context), false); }));\n            };\n            /**\n             * @param {?} value\n             * @param {?} context\n             * @return {?}\n             */\n            Transformer.prototype.visitPrimitive = /**\n             * @param {?} value\n             * @param {?} context\n             * @return {?}\n             */\n            function (value, context) { return o.literal(value); };\n            /**\n             * @param {?} value\n             * @param {?} context\n             * @return {?}\n             */\n            Transformer.prototype.visitOther = /**\n             * @param {?} value\n             * @param {?} context\n             * @return {?}\n             */\n            function (value, context) {\n                if (value instanceof StaticSymbol) {\n                    return outputCtx.importExpr(value);\n                }\n                else {\n                    throw new Error(\"Illegal State: Encountered value \" + value);\n                }\n            };\n            return Transformer;\n        }());\n        return visitValue(data, new Transformer(), null);\n    };\n    return ForJitSerializer;\n}());\nfunction ForJitSerializer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ForJitSerializer.prototype.data;\n    /** @type {?} */\n    ForJitSerializer.prototype.outputCtx;\n    /** @type {?} */\n    ForJitSerializer.prototype.symbolResolver;\n    /** @type {?} */\n    ForJitSerializer.prototype.summaryResolver;\n}\nvar FromJsonDeserializer = /** @class */ (function (_super) {\n    tslib_1.__extends(FromJsonDeserializer, _super);\n    function FromJsonDeserializer(symbolCache, summaryResolver) {\n        var _this = _super.call(this) || this;\n        _this.symbolCache = symbolCache;\n        _this.summaryResolver = summaryResolver;\n        return _this;\n    }\n    /**\n     * @param {?} libraryFileName\n     * @param {?} json\n     * @return {?}\n     */\n    FromJsonDeserializer.prototype.deserialize = /**\n     * @param {?} libraryFileName\n     * @param {?} json\n     * @return {?}\n     */\n    function (libraryFileName, json) {\n        var _this = this;\n        var /** @type {?} */ data = JSON.parse(json);\n        var /** @type {?} */ allImportAs = [];\n        this.symbols = data.symbols.map(function (serializedSymbol) {\n            return _this.symbolCache.get(_this.summaryResolver.fromSummaryFileName(serializedSymbol.filePath, libraryFileName), serializedSymbol.name);\n        });\n        data.symbols.forEach(function (serializedSymbol, index) {\n            var /** @type {?} */ symbol = _this.symbols[index];\n            var /** @type {?} */ importAs = serializedSymbol.importAs;\n            if (typeof importAs === 'number') {\n                allImportAs.push({ symbol: symbol, importAs: _this.symbols[importAs] });\n            }\n            else if (typeof importAs === 'string') {\n                allImportAs.push({ symbol: symbol, importAs: _this.symbolCache.get(ngfactoryFilePath(libraryFileName), importAs) });\n            }\n        });\n        var /** @type {?} */ summaries = /** @type {?} */ (visitValue(data.summaries, this, null));\n        return { moduleName: data.moduleName, summaries: summaries, importAs: allImportAs };\n    };\n    /**\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    FromJsonDeserializer.prototype.visitStringMap = /**\n     * @param {?} map\n     * @param {?} context\n     * @return {?}\n     */\n    function (map, context) {\n        if ('__symbol' in map) {\n            var /** @type {?} */ baseSymbol = this.symbols[map['__symbol']];\n            var /** @type {?} */ members = map['members'];\n            return members.length ? this.symbolCache.get(baseSymbol.filePath, baseSymbol.name, members) :\n                baseSymbol;\n        }\n        else {\n            return _super.prototype.visitStringMap.call(this, map, context);\n        }\n    };\n    return FromJsonDeserializer;\n}(ValueTransformer));\nfunction FromJsonDeserializer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FromJsonDeserializer.prototype.symbols;\n    /** @type {?} */\n    FromJsonDeserializer.prototype.symbolCache;\n    /** @type {?} */\n    FromJsonDeserializer.prototype.summaryResolver;\n}\n/**\n * @param {?} metadata\n * @return {?}\n */\nfunction isCall(metadata) {\n    return metadata && metadata.__symbolic === 'call';\n}\n/**\n * @param {?} metadata\n * @return {?}\n */\nfunction isFunctionCall(metadata) {\n    return isCall(metadata) && unwrapResolvedMetadata(metadata.expression) instanceof StaticSymbol;\n}\n/**\n * @param {?} metadata\n * @return {?}\n */\nfunction isMethodCallOnVariable(metadata) {\n    return isCall(metadata) && metadata.expression && metadata.expression.__symbolic === 'select' &&\n        unwrapResolvedMetadata(metadata.expression.expression) instanceof StaticSymbol;\n}\n//# sourceMappingURL=summary_serializer.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { componentFactoryName, flatten, identifierName, templateSourceUrl } from '../compile_metadata';\nimport { ConstantPool } from '../constant_pool';\nimport { ViewEncapsulation } from '../core';\nimport { MessageBundle } from '../i18n/message_bundle';\nimport { Identifiers, createTokenForExternalReference } from '../identifiers';\nimport * as html from '../ml_parser/ast';\nimport { HtmlParser } from '../ml_parser/html_parser';\nimport { removeWhitespaces } from '../ml_parser/html_whitespaces';\nimport { DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig } from '../ml_parser/interpolation_config';\nimport * as o from '../output/output_ast';\nimport { compileNgModule as compileIvyModule } from '../render3/r3_module_compiler';\nimport { compilePipe as compileIvyPipe } from '../render3/r3_pipe_compiler';\nimport { HtmlToTemplateTransform } from '../render3/r3_template_transform';\nimport { compileComponent as compileIvyComponent, compileDirective as compileIvyDirective } from '../render3/r3_view_compiler_local';\nimport { DomElementSchemaRegistry } from '../schema/dom_element_schema_registry';\nimport { BindingParser } from '../template_parser/binding_parser';\nimport { error, syntaxError, visitValue } from '../util';\nimport { GeneratedFile } from './generated_file';\nimport { listLazyRoutes, parseLazyRoute } from './lazy_routes';\nimport { StaticSymbol } from './static_symbol';\nimport { createForJitStub, serializeSummaries } from './summary_serializer';\nimport { ngfactoryFilePath, normalizeGenFileSuffix, splitTypescriptSuffix, summaryFileName, summaryForJitFileName } from './util';\n/** @enum {number} */\nvar StubEmitFlags = { Basic: 1, TypeCheck: 2, All: 3, };\nvar AotCompiler = /** @class */ (function () {\n    function AotCompiler(_config, _options, _host, reflector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _typeCheckCompiler, _ngModuleCompiler, _injectableCompiler, _outputEmitter, _summaryResolver, _symbolResolver) {\n        this._config = _config;\n        this._options = _options;\n        this._host = _host;\n        this.reflector = reflector;\n        this._metadataResolver = _metadataResolver;\n        this._templateParser = _templateParser;\n        this._styleCompiler = _styleCompiler;\n        this._viewCompiler = _viewCompiler;\n        this._typeCheckCompiler = _typeCheckCompiler;\n        this._ngModuleCompiler = _ngModuleCompiler;\n        this._injectableCompiler = _injectableCompiler;\n        this._outputEmitter = _outputEmitter;\n        this._summaryResolver = _summaryResolver;\n        this._symbolResolver = _symbolResolver;\n        this._templateAstCache = new Map();\n        this._analyzedFiles = new Map();\n        this._analyzedFilesForInjectables = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    AotCompiler.prototype.clearCache = /**\n     * @return {?}\n     */\n    function () { this._metadataResolver.clearCache(); };\n    /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    AotCompiler.prototype.analyzeModulesSync = /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    function (rootFiles) {\n        var _this = this;\n        var /** @type {?} */ analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);\n        analyzeResult.ngModules.forEach(function (ngModule) {\n            return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true);\n        });\n        return analyzeResult;\n    };\n    /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    AotCompiler.prototype.analyzeModulesAsync = /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    function (rootFiles) {\n        var _this = this;\n        var /** @type {?} */ analyzeResult = analyzeAndValidateNgModules(rootFiles, this._host, this._symbolResolver, this._metadataResolver);\n        return Promise\n            .all(analyzeResult.ngModules.map(function (ngModule) {\n            return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);\n        }))\n            .then(function () { return analyzeResult; });\n    };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    AotCompiler.prototype._analyzeFile = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) {\n        var /** @type {?} */ analyzedFile = this._analyzedFiles.get(fileName);\n        if (!analyzedFile) {\n            analyzedFile =\n                analyzeFile(this._host, this._symbolResolver, this._metadataResolver, fileName);\n            this._analyzedFiles.set(fileName, analyzedFile);\n        }\n        return analyzedFile;\n    };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    AotCompiler.prototype._analyzeFileForInjectables = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) {\n        var /** @type {?} */ analyzedFile = this._analyzedFilesForInjectables.get(fileName);\n        if (!analyzedFile) {\n            analyzedFile = analyzeFileForInjectables(this._host, this._symbolResolver, this._metadataResolver, fileName);\n            this._analyzedFilesForInjectables.set(fileName, analyzedFile);\n        }\n        return analyzedFile;\n    };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    AotCompiler.prototype.findGeneratedFileNames = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) {\n        var _this = this;\n        var /** @type {?} */ genFileNames = [];\n        var /** @type {?} */ file = this._analyzeFile(fileName);\n        // Make sure we create a .ngfactory if we have a injectable/directive/pipe/NgModule\n        // or a reference to a non source file.\n        // Note: This is overestimating the required .ngfactory files as the real calculation is harder.\n        // Only do this for StubEmitFlags.Basic, as adding a type check block\n        // does not change this file (as we generate type check blocks based on NgModules).\n        if (this._options.allowEmptyCodegenFiles || file.directives.length || file.pipes.length ||\n            file.injectables.length || file.ngModules.length || file.exportsNonSourceFiles) {\n            genFileNames.push(ngfactoryFilePath(file.fileName, true));\n            if (this._options.enableSummariesForJit) {\n                genFileNames.push(summaryForJitFileName(file.fileName, true));\n            }\n        }\n        var /** @type {?} */ fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(file.fileName, true)[1]);\n        file.directives.forEach(function (dirSymbol) {\n            var /** @type {?} */ compMeta = /** @type {?} */ ((_this._metadataResolver.getNonNormalizedDirectiveMetadata(dirSymbol))).metadata;\n            if (!compMeta.isComponent) {\n                return;\n            } /** @type {?} */\n            ((\n            // Note: compMeta is a component and therefore template is non null.\n            compMeta.template)).styleUrls.forEach(function (styleUrl) {\n                var /** @type {?} */ normalizedUrl = _this._host.resourceNameToFileName(styleUrl, file.fileName);\n                if (!normalizedUrl) {\n                    throw syntaxError(\"Couldn't resolve resource \" + styleUrl + \" relative to \" + file.fileName);\n                }\n                var /** @type {?} */ needsShim = (/** @type {?} */ ((compMeta.template)).encapsulation || _this._config.defaultEncapsulation) === ViewEncapsulation.Emulated;\n                genFileNames.push(_stylesModuleUrl(normalizedUrl, needsShim, fileSuffix));\n                if (_this._options.allowEmptyCodegenFiles) {\n                    genFileNames.push(_stylesModuleUrl(normalizedUrl, !needsShim, fileSuffix));\n                }\n            });\n        });\n        return genFileNames;\n    };\n    /**\n     * @param {?} genFileName\n     * @param {?=} originalFileName\n     * @return {?}\n     */\n    AotCompiler.prototype.emitBasicStub = /**\n     * @param {?} genFileName\n     * @param {?=} originalFileName\n     * @return {?}\n     */\n    function (genFileName, originalFileName) {\n        var /** @type {?} */ outputCtx = this._createOutputContext(genFileName);\n        if (genFileName.endsWith('.ngfactory.ts')) {\n            if (!originalFileName) {\n                throw new Error(\"Assertion error: require the original file for .ngfactory.ts stubs. File: \" + genFileName);\n            }\n            var /** @type {?} */ originalFile = this._analyzeFile(originalFileName);\n            this._createNgFactoryStub(outputCtx, originalFile, 1 /* Basic */);\n        }\n        else if (genFileName.endsWith('.ngsummary.ts')) {\n            if (this._options.enableSummariesForJit) {\n                if (!originalFileName) {\n                    throw new Error(\"Assertion error: require the original file for .ngsummary.ts stubs. File: \" + genFileName);\n                }\n                var /** @type {?} */ originalFile = this._analyzeFile(originalFileName);\n                _createEmptyStub(outputCtx);\n                originalFile.ngModules.forEach(function (ngModule) {\n                    // create exports that user code can reference\n                    createForJitStub(outputCtx, ngModule.type.reference);\n                });\n            }\n        }\n        else if (genFileName.endsWith('.ngstyle.ts')) {\n            _createEmptyStub(outputCtx);\n        }\n        // Note: for the stubs, we don't need a property srcFileUrl,\n        // as later on in emitAllImpls we will create the proper GeneratedFiles with the\n        // correct srcFileUrl.\n        // This is good as e.g. for .ngstyle.ts files we can't derive\n        // the url of components based on the genFileUrl.\n        return this._codegenSourceModule('unknown', outputCtx);\n    };\n    /**\n     * @param {?} genFileName\n     * @param {?} originalFileName\n     * @return {?}\n     */\n    AotCompiler.prototype.emitTypeCheckStub = /**\n     * @param {?} genFileName\n     * @param {?} originalFileName\n     * @return {?}\n     */\n    function (genFileName, originalFileName) {\n        var /** @type {?} */ originalFile = this._analyzeFile(originalFileName);\n        var /** @type {?} */ outputCtx = this._createOutputContext(genFileName);\n        if (genFileName.endsWith('.ngfactory.ts')) {\n            this._createNgFactoryStub(outputCtx, originalFile, 2 /* TypeCheck */);\n        }\n        return outputCtx.statements.length > 0 ?\n            this._codegenSourceModule(originalFile.fileName, outputCtx) :\n            null;\n    };\n    /**\n     * @param {?} fileNames\n     * @param {?} tsFiles\n     * @return {?}\n     */\n    AotCompiler.prototype.loadFilesAsync = /**\n     * @param {?} fileNames\n     * @param {?} tsFiles\n     * @return {?}\n     */\n    function (fileNames, tsFiles) {\n        var _this = this;\n        var /** @type {?} */ files = fileNames.map(function (fileName) { return _this._analyzeFile(fileName); });\n        var /** @type {?} */ loadingPromises = [];\n        files.forEach(function (file) {\n            return file.ngModules.forEach(function (ngModule) {\n                return loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false));\n            });\n        });\n        var /** @type {?} */ analyzedInjectables = tsFiles.map(function (tsFile) { return _this._analyzeFileForInjectables(tsFile); });\n        return Promise.all(loadingPromises).then(function (_) {\n            return ({\n                analyzedModules: mergeAndValidateNgFiles(files),\n                analyzedInjectables: analyzedInjectables,\n            });\n        });\n    };\n    /**\n     * @param {?} fileNames\n     * @param {?} tsFiles\n     * @return {?}\n     */\n    AotCompiler.prototype.loadFilesSync = /**\n     * @param {?} fileNames\n     * @param {?} tsFiles\n     * @return {?}\n     */\n    function (fileNames, tsFiles) {\n        var _this = this;\n        var /** @type {?} */ files = fileNames.map(function (fileName) { return _this._analyzeFile(fileName); });\n        files.forEach(function (file) {\n            return file.ngModules.forEach(function (ngModule) {\n                return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, true);\n            });\n        });\n        var /** @type {?} */ analyzedInjectables = tsFiles.map(function (tsFile) { return _this._analyzeFileForInjectables(tsFile); });\n        return {\n            analyzedModules: mergeAndValidateNgFiles(files),\n            analyzedInjectables: analyzedInjectables,\n        };\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} file\n     * @param {?} emitFlags\n     * @return {?}\n     */\n    AotCompiler.prototype._createNgFactoryStub = /**\n     * @param {?} outputCtx\n     * @param {?} file\n     * @param {?} emitFlags\n     * @return {?}\n     */\n    function (outputCtx, file, emitFlags) {\n        var _this = this;\n        var /** @type {?} */ componentId = 0;\n        file.ngModules.forEach(function (ngModuleMeta, ngModuleIndex) {\n            // Note: the code below needs to executed for StubEmitFlags.Basic and StubEmitFlags.TypeCheck,\n            // so we don't change the .ngfactory file too much when adding the type-check block.\n            // create exports that user code can reference\n            // Note: the code below needs to executed for StubEmitFlags.Basic and StubEmitFlags.TypeCheck,\n            // so we don't change the .ngfactory file too much when adding the type-check block.\n            // create exports that user code can reference\n            _this._ngModuleCompiler.createStub(outputCtx, ngModuleMeta.type.reference);\n            // add references to the symbols from the metadata.\n            // These can be used by the type check block for components,\n            // and they also cause TypeScript to include these files into the program too,\n            // which will make them part of the analyzedFiles.\n            var /** @type {?} */ externalReferences = ngModuleMeta.transitiveModule.directives.map(function (d) { return d.reference; }).concat(ngModuleMeta.transitiveModule.pipes.map(function (d) { return d.reference; }), ngModuleMeta.importedModules.map(function (m) { return m.type.reference; }), ngModuleMeta.exportedModules.map(function (m) { return m.type.reference; }), _this._externalIdentifierReferences([Identifiers.TemplateRef, Identifiers.ElementRef]));\n            var /** @type {?} */ externalReferenceVars = new Map();\n            externalReferences.forEach(function (ref, typeIndex) {\n                externalReferenceVars.set(ref, \"_decl\" + ngModuleIndex + \"_\" + typeIndex);\n            });\n            externalReferenceVars.forEach(function (varName, reference) {\n                outputCtx.statements.push(o.variable(varName)\n                    .set(o.NULL_EXPR.cast(o.DYNAMIC_TYPE))\n                    .toDeclStmt(o.expressionType(outputCtx.importExpr(reference, /* typeParams */ null, /* useSummaries */ /* useSummaries */ false))));\n            });\n            if (emitFlags & 2 /* TypeCheck */) {\n                // add the type-check block for all components of the NgModule\n                ngModuleMeta.declaredDirectives.forEach(function (dirId) {\n                    var /** @type {?} */ compMeta = _this._metadataResolver.getDirectiveMetadata(dirId.reference);\n                    if (!compMeta.isComponent) {\n                        return;\n                    }\n                    componentId++;\n                    _this._createTypeCheckBlock(outputCtx, compMeta.type.reference.name + \"_Host_\" + componentId, ngModuleMeta, _this._metadataResolver.getHostComponentMetadata(compMeta), [compMeta.type], externalReferenceVars);\n                    _this._createTypeCheckBlock(outputCtx, compMeta.type.reference.name + \"_\" + componentId, ngModuleMeta, compMeta, ngModuleMeta.transitiveModule.directives, externalReferenceVars);\n                });\n            }\n        });\n        if (outputCtx.statements.length === 0) {\n            _createEmptyStub(outputCtx);\n        }\n    };\n    /**\n     * @param {?} references\n     * @return {?}\n     */\n    AotCompiler.prototype._externalIdentifierReferences = /**\n     * @param {?} references\n     * @return {?}\n     */\n    function (references) {\n        var /** @type {?} */ result = [];\n        for (var _i = 0, references_1 = references; _i < references_1.length; _i++) {\n            var reference = references_1[_i];\n            var /** @type {?} */ token = createTokenForExternalReference(this.reflector, reference);\n            if (token.identifier) {\n                result.push(token.identifier.reference);\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} ctx\n     * @param {?} componentId\n     * @param {?} moduleMeta\n     * @param {?} compMeta\n     * @param {?} directives\n     * @param {?} externalReferenceVars\n     * @return {?}\n     */\n    AotCompiler.prototype._createTypeCheckBlock = /**\n     * @param {?} ctx\n     * @param {?} componentId\n     * @param {?} moduleMeta\n     * @param {?} compMeta\n     * @param {?} directives\n     * @param {?} externalReferenceVars\n     * @return {?}\n     */\n    function (ctx, componentId, moduleMeta, compMeta, directives, externalReferenceVars) {\n        var _a = this._parseTemplate(compMeta, moduleMeta, directives), parsedTemplate = _a.template, usedPipes = _a.pipes;\n        (_b = ctx.statements).push.apply(_b, this._typeCheckCompiler.compileComponent(componentId, compMeta, parsedTemplate, usedPipes, externalReferenceVars, ctx));\n        var _b;\n    };\n    /**\n     * @param {?} analyzeResult\n     * @param {?} locale\n     * @return {?}\n     */\n    AotCompiler.prototype.emitMessageBundle = /**\n     * @param {?} analyzeResult\n     * @param {?} locale\n     * @return {?}\n     */\n    function (analyzeResult, locale) {\n        var _this = this;\n        var /** @type {?} */ errors = [];\n        var /** @type {?} */ htmlParser = new HtmlParser();\n        // TODO(vicb): implicit tags & attributes\n        var /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n        analyzeResult.files.forEach(function (file) {\n            var /** @type {?} */ compMetas = [];\n            file.directives.forEach(function (directiveType) {\n                var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(directiveType);\n                if (dirMeta && dirMeta.isComponent) {\n                    compMetas.push(dirMeta);\n                }\n            });\n            compMetas.forEach(function (compMeta) {\n                var /** @type {?} */ html = /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).template));\n                var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((compMeta.template)).interpolation);\n                errors.push.apply(errors, /** @type {?} */ ((messageBundle.updateFromTemplate(html, file.fileName, interpolationConfig))));\n            });\n        });\n        if (errors.length) {\n            throw new Error(errors.map(function (e) { return e.toString(); }).join('\\n'));\n        }\n        return messageBundle;\n    };\n    /**\n     * @param {?} __0\n     * @param {?} r3Files\n     * @return {?}\n     */\n    AotCompiler.prototype.emitAllPartialModules = /**\n     * @param {?} __0\n     * @param {?} r3Files\n     * @return {?}\n     */\n    function (_a, r3Files) {\n        var _this = this;\n        var ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files;\n        var /** @type {?} */ contextMap = new Map();\n        var /** @type {?} */ getContext = function (fileName) {\n            if (!contextMap.has(fileName)) {\n                contextMap.set(fileName, _this._createOutputContext(fileName));\n            }\n            return /** @type {?} */ ((contextMap.get(fileName)));\n        };\n        files.forEach(function (file) {\n            return _this._compilePartialModule(file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables, getContext(file.fileName));\n        });\n        r3Files.forEach(function (file) {\n            return _this._compileShallowModules(file.fileName, file.shallowModules, getContext(file.fileName));\n        });\n        return Array.from(contextMap.values())\n            .map(function (context) {\n            return ({\n                fileName: context.genFilePath,\n                statements: context.constantPool.statements.concat(context.statements),\n            });\n        });\n    };\n    /**\n     * @param {?} fileName\n     * @param {?} shallowModules\n     * @param {?} context\n     * @return {?}\n     */\n    AotCompiler.prototype._compileShallowModules = /**\n     * @param {?} fileName\n     * @param {?} shallowModules\n     * @param {?} context\n     * @return {?}\n     */\n    function (fileName, shallowModules, context) {\n        var _this = this;\n        shallowModules.forEach(function (module) { return compileIvyModule(context, module, _this._injectableCompiler); });\n    };\n    /**\n     * @param {?} fileName\n     * @param {?} ngModuleByPipeOrDirective\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @param {?} context\n     * @return {?}\n     */\n    AotCompiler.prototype._compilePartialModule = /**\n     * @param {?} fileName\n     * @param {?} ngModuleByPipeOrDirective\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @param {?} context\n     * @return {?}\n     */\n    function (fileName, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables, context) {\n        var _this = this;\n        var /** @type {?} */ errors = [];\n        var /** @type {?} */ schemaRegistry = new DomElementSchemaRegistry();\n        var /** @type {?} */ hostBindingParser = new BindingParser(this._templateParser.expressionParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);\n        // Process all components and directives\n        directives.forEach(function (directiveType) {\n            var /** @type {?} */ directiveMetadata = _this._metadataResolver.getDirectiveMetadata(directiveType);\n            if (directiveMetadata.isComponent) {\n                var /** @type {?} */ module = /** @type {?} */ ((ngModuleByPipeOrDirective.get(directiveType)));\n                module ||\n                    error(\"Cannot determine the module for component '\" + identifierName(directiveMetadata.type) + \"'\");\n                var /** @type {?} */ htmlAst = /** @type {?} */ ((/** @type {?} */ ((directiveMetadata.template)).htmlAst));\n                var /** @type {?} */ preserveWhitespaces = /** @type {?} */ ((/** @type {?} */ ((directiveMetadata)).template)).preserveWhitespaces;\n                if (!preserveWhitespaces) {\n                    htmlAst = removeWhitespaces(htmlAst);\n                }\n                var /** @type {?} */ transform = new HtmlToTemplateTransform(hostBindingParser);\n                var /** @type {?} */ nodes = html.visitAll(transform, htmlAst.rootNodes, null);\n                var /** @type {?} */ hasNgContent = transform.hasNgContent;\n                var /** @type {?} */ ngContentSelectors = transform.ngContentSelectors;\n                // Map of StaticType by directive selectors\n                var /** @type {?} */ directiveTypeBySel_1 = new Map();\n                var /** @type {?} */ directives_1 = module.transitiveModule.directives.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });\n                directives_1.forEach(function (directive) {\n                    if (directive.selector) {\n                        directiveTypeBySel_1.set(directive.selector, directive.type.reference);\n                    }\n                });\n                // Map of StaticType by pipe names\n                var /** @type {?} */ pipeTypeByName_1 = new Map();\n                var /** @type {?} */ pipes_1 = module.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });\n                pipes_1.forEach(function (pipe) { pipeTypeByName_1.set(pipe.name, pipe.type.reference); });\n                compileIvyComponent(context, directiveMetadata, nodes, hasNgContent, ngContentSelectors, _this.reflector, hostBindingParser, directiveTypeBySel_1, pipeTypeByName_1);\n            }\n            else {\n                compileIvyDirective(context, directiveMetadata, _this.reflector, hostBindingParser);\n            }\n        });\n        pipes.forEach(function (pipeType) {\n            var /** @type {?} */ pipeMetadata = _this._metadataResolver.getPipeMetadata(pipeType);\n            if (pipeMetadata) {\n                compileIvyPipe(context, pipeMetadata, _this.reflector);\n            }\n        });\n        injectables.forEach(function (injectable) { return _this._injectableCompiler.compile(injectable, context); });\n    };\n    /**\n     * @param {?} files\n     * @return {?}\n     */\n    AotCompiler.prototype.emitAllPartialModules2 = /**\n     * @param {?} files\n     * @return {?}\n     */\n    function (files) {\n        var _this = this;\n        // Using reduce like this is a select many pattern (where map is a select pattern)\n        return files.reduce(function (r, file) {\n            r.push.apply(r, _this._emitPartialModule2(file.fileName, file.injectables));\n            return r;\n        }, []);\n    };\n    /**\n     * @param {?} fileName\n     * @param {?} injectables\n     * @return {?}\n     */\n    AotCompiler.prototype._emitPartialModule2 = /**\n     * @param {?} fileName\n     * @param {?} injectables\n     * @return {?}\n     */\n    function (fileName, injectables) {\n        var _this = this;\n        var /** @type {?} */ context = this._createOutputContext(fileName);\n        injectables.forEach(function (injectable) { return _this._injectableCompiler.compile(injectable, context); });\n        if (context.statements && context.statements.length > 0) {\n            return [{ fileName: fileName, statements: context.constantPool.statements.concat(context.statements) }];\n        }\n        return [];\n    };\n    /**\n     * @param {?} analyzeResult\n     * @return {?}\n     */\n    AotCompiler.prototype.emitAllImpls = /**\n     * @param {?} analyzeResult\n     * @return {?}\n     */\n    function (analyzeResult) {\n        var _this = this;\n        var ngModuleByPipeOrDirective = analyzeResult.ngModuleByPipeOrDirective, files = analyzeResult.files;\n        var /** @type {?} */ sourceModules = files.map(function (file) {\n            return _this._compileImplFile(file.fileName, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables);\n        });\n        return flatten(sourceModules);\n    };\n    /**\n     * @param {?} srcFileUrl\n     * @param {?} ngModuleByPipeOrDirective\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @return {?}\n     */\n    AotCompiler.prototype._compileImplFile = /**\n     * @param {?} srcFileUrl\n     * @param {?} ngModuleByPipeOrDirective\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @return {?}\n     */\n    function (srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {\n        var _this = this;\n        var /** @type {?} */ fileSuffix = normalizeGenFileSuffix(splitTypescriptSuffix(srcFileUrl, true)[1]);\n        var /** @type {?} */ generatedFiles = [];\n        var /** @type {?} */ outputCtx = this._createOutputContext(ngfactoryFilePath(srcFileUrl, true));\n        generatedFiles.push.apply(generatedFiles, this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables, outputCtx));\n        // compile all ng modules\n        ngModules.forEach(function (ngModuleMeta) { return _this._compileModule(outputCtx, ngModuleMeta); });\n        // compile components\n        directives.forEach(function (dirType) {\n            var /** @type {?} */ compMeta = _this._metadataResolver.getDirectiveMetadata(/** @type {?} */ (dirType));\n            if (!compMeta.isComponent) {\n                return;\n            }\n            var /** @type {?} */ ngModule = ngModuleByPipeOrDirective.get(dirType);\n            if (!ngModule) {\n                throw new Error(\"Internal Error: cannot determine the module for component \" + identifierName(compMeta.type) + \"!\");\n            }\n            // compile styles\n            var /** @type {?} */ componentStylesheet = _this._styleCompiler.compileComponent(outputCtx, compMeta); /** @type {?} */\n            ((\n            // Note: compMeta is a component and therefore template is non null.\n            compMeta.template)).externalStylesheets.forEach(function (stylesheetMeta) {\n                // Note: fill non shim and shim style files as they might\n                // be shared by component with and without ViewEncapsulation.\n                var /** @type {?} */ shim = _this._styleCompiler.needsStyleShim(compMeta);\n                generatedFiles.push(_this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, shim, fileSuffix));\n                if (_this._options.allowEmptyCodegenFiles) {\n                    generatedFiles.push(_this._codegenStyles(srcFileUrl, compMeta, stylesheetMeta, !shim, fileSuffix));\n                }\n            });\n            // compile components\n            var /** @type {?} */ compViewVars = _this._compileComponent(outputCtx, compMeta, ngModule, ngModule.transitiveModule.directives, componentStylesheet, fileSuffix);\n            _this._compileComponentFactory(outputCtx, compMeta, ngModule, fileSuffix);\n        });\n        if (outputCtx.statements.length > 0 || this._options.allowEmptyCodegenFiles) {\n            var /** @type {?} */ srcModule = this._codegenSourceModule(srcFileUrl, outputCtx);\n            generatedFiles.unshift(srcModule);\n        }\n        return generatedFiles;\n    };\n    /**\n     * @param {?} srcFileName\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @param {?} ngFactoryCtx\n     * @return {?}\n     */\n    AotCompiler.prototype._createSummary = /**\n     * @param {?} srcFileName\n     * @param {?} directives\n     * @param {?} pipes\n     * @param {?} ngModules\n     * @param {?} injectables\n     * @param {?} ngFactoryCtx\n     * @return {?}\n     */\n    function (srcFileName, directives, pipes, ngModules, injectables, ngFactoryCtx) {\n        var _this = this;\n        var /** @type {?} */ symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileName)\n            .map(function (symbol) { return _this._symbolResolver.resolveSymbol(symbol); });\n        var /** @type {?} */ typeData = ngModules.map(function (meta) {\n            return ({\n                summary: /** @type {?} */ ((_this._metadataResolver.getNgModuleSummary(meta.type.reference))),\n                metadata: /** @type {?} */ ((_this._metadataResolver.getNgModuleMetadata(meta.type.reference)))\n            });\n        }).concat(directives.map(function (ref) {\n            return ({\n                summary: /** @type {?} */ ((_this._metadataResolver.getDirectiveSummary(ref))),\n                metadata: /** @type {?} */ ((_this._metadataResolver.getDirectiveMetadata(ref)))\n            });\n        }), pipes.map(function (ref) {\n            return ({\n                summary: /** @type {?} */ ((_this._metadataResolver.getPipeSummary(ref))),\n                metadata: /** @type {?} */ ((_this._metadataResolver.getPipeMetadata(ref)))\n            });\n        }), injectables.map(function (ref) {\n            return ({\n                summary: /** @type {?} */ ((_this._metadataResolver.getInjectableSummary(ref.symbol))),\n                metadata: /** @type {?} */ ((_this._metadataResolver.getInjectableSummary(ref.symbol))).type\n            });\n        }));\n        var /** @type {?} */ forJitOutputCtx = this._options.enableSummariesForJit ?\n            this._createOutputContext(summaryForJitFileName(srcFileName, true)) :\n            null;\n        var _a = serializeSummaries(srcFileName, forJitOutputCtx, this._summaryResolver, this._symbolResolver, symbolSummaries, typeData), json = _a.json, exportAs = _a.exportAs;\n        exportAs.forEach(function (entry) {\n            ngFactoryCtx.statements.push(o.variable(entry.exportAs).set(ngFactoryCtx.importExpr(entry.symbol)).toDeclStmt(null, [\n                o.StmtModifier.Exported\n            ]));\n        });\n        var /** @type {?} */ summaryJson = new GeneratedFile(srcFileName, summaryFileName(srcFileName), json);\n        var /** @type {?} */ result = [summaryJson];\n        if (forJitOutputCtx) {\n            result.push(this._codegenSourceModule(srcFileName, forJitOutputCtx));\n        }\n        return result;\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} ngModule\n     * @return {?}\n     */\n    AotCompiler.prototype._compileModule = /**\n     * @param {?} outputCtx\n     * @param {?} ngModule\n     * @return {?}\n     */\n    function (outputCtx, ngModule) {\n        var /** @type {?} */ providers = [];\n        if (this._options.locale) {\n            var /** @type {?} */ normalizedLocale = this._options.locale.replace(/_/g, '-');\n            providers.push({\n                token: createTokenForExternalReference(this.reflector, Identifiers.LOCALE_ID),\n                useValue: normalizedLocale,\n            });\n        }\n        if (this._options.i18nFormat) {\n            providers.push({\n                token: createTokenForExternalReference(this.reflector, Identifiers.TRANSLATIONS_FORMAT),\n                useValue: this._options.i18nFormat\n            });\n        }\n        this._ngModuleCompiler.compile(outputCtx, ngModule, providers);\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    AotCompiler.prototype._compileComponentFactory = /**\n     * @param {?} outputCtx\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    function (outputCtx, compMeta, ngModule, fileSuffix) {\n        var /** @type {?} */ hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta);\n        var /** @type {?} */ hostViewFactoryVar = this._compileComponent(outputCtx, hostMeta, ngModule, [compMeta.type], null, fileSuffix)\n            .viewClassVar;\n        var /** @type {?} */ compFactoryVar = componentFactoryName(compMeta.type.reference);\n        var /** @type {?} */ inputsExprs = [];\n        for (var /** @type {?} */ propName in compMeta.inputs) {\n            var /** @type {?} */ templateName = compMeta.inputs[propName];\n            // Don't quote so that the key gets minified...\n            inputsExprs.push(new o.LiteralMapEntry(propName, o.literal(templateName), false));\n        }\n        var /** @type {?} */ outputsExprs = [];\n        for (var /** @type {?} */ propName in compMeta.outputs) {\n            var /** @type {?} */ templateName = compMeta.outputs[propName];\n            // Don't quote so that the key gets minified...\n            outputsExprs.push(new o.LiteralMapEntry(propName, o.literal(templateName), false));\n        }\n        outputCtx.statements.push(o.variable(compFactoryVar)\n            .set(o.importExpr(Identifiers.createComponentFactory).callFn([\n            o.literal(compMeta.selector), outputCtx.importExpr(compMeta.type.reference),\n            o.variable(hostViewFactoryVar), new o.LiteralMapExpr(inputsExprs),\n            new o.LiteralMapExpr(outputsExprs),\n            o.literalArr(/** @type {?} */ ((compMeta.template)).ngContentSelectors.map(function (selector) { return o.literal(selector); }))\n        ]))\n            .toDeclStmt(o.importType(Identifiers.ComponentFactory, [/** @type {?} */ ((o.expressionType(outputCtx.importExpr(compMeta.type.reference))))], [o.TypeModifier.Const]), [o.StmtModifier.Final, o.StmtModifier.Exported]));\n    };\n    /**\n     * @param {?} outputCtx\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @param {?} componentStyles\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    AotCompiler.prototype._compileComponent = /**\n     * @param {?} outputCtx\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @param {?} componentStyles\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    function (outputCtx, compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix) {\n        var _a = this._parseTemplate(compMeta, ngModule, directiveIdentifiers), parsedTemplate = _a.template, usedPipes = _a.pipes;\n        var /** @type {?} */ stylesExpr = componentStyles ? o.variable(componentStyles.stylesVar) : o.literalArr([]);\n        var /** @type {?} */ viewResult = this._viewCompiler.compileComponent(outputCtx, compMeta, parsedTemplate, stylesExpr, usedPipes);\n        if (componentStyles) {\n            _resolveStyleStatements(this._symbolResolver, componentStyles, this._styleCompiler.needsStyleShim(compMeta), fileSuffix);\n        }\n        return viewResult;\n    };\n    /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @return {?}\n     */\n    AotCompiler.prototype._parseTemplate = /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @return {?}\n     */\n    function (compMeta, ngModule, directiveIdentifiers) {\n        var _this = this;\n        if (this._templateAstCache.has(compMeta.type.reference)) {\n            return /** @type {?} */ ((this._templateAstCache.get(compMeta.type.reference)));\n        }\n        var /** @type {?} */ preserveWhitespaces = /** @type {?} */ ((/** @type {?} */ ((compMeta)).template)).preserveWhitespaces;\n        var /** @type {?} */ directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });\n        var /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });\n        var /** @type {?} */ result = this._templateParser.parse(compMeta, /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).htmlAst)), directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, /** @type {?} */ ((compMeta.template))), preserveWhitespaces);\n        this._templateAstCache.set(compMeta.type.reference, result);\n        return result;\n    };\n    /**\n     * @param {?} genFilePath\n     * @return {?}\n     */\n    AotCompiler.prototype._createOutputContext = /**\n     * @param {?} genFilePath\n     * @return {?}\n     */\n    function (genFilePath) {\n        var _this = this;\n        var /** @type {?} */ importExpr = function (symbol, typeParams, useSummaries) {\n            if (typeParams === void 0) { typeParams = null; }\n            if (useSummaries === void 0) { useSummaries = true; }\n            if (!(symbol instanceof StaticSymbol)) {\n                throw new Error(\"Internal error: unknown identifier \" + JSON.stringify(symbol));\n            }\n            var /** @type {?} */ arity = _this._symbolResolver.getTypeArity(symbol) || 0;\n            var _a = _this._symbolResolver.getImportAs(symbol, useSummaries) || symbol, filePath = _a.filePath, name = _a.name, members = _a.members;\n            var /** @type {?} */ importModule = _this._fileNameToModuleName(filePath, genFilePath);\n            // It should be good enough to compare filePath to genFilePath and if they are equal\n            // there is a self reference. However, ngfactory files generate to .ts but their\n            // symbols have .d.ts so a simple compare is insufficient. They should be canonical\n            // and is tracked by #17705.\n            var /** @type {?} */ selfReference = _this._fileNameToModuleName(genFilePath, genFilePath);\n            var /** @type {?} */ moduleName = importModule === selfReference ? null : importModule;\n            // If we are in a type expression that refers to a generic type then supply\n            // the required type parameters. If there were not enough type parameters\n            // supplied, supply any as the type. Outside a type expression the reference\n            // should not supply type parameters and be treated as a simple value reference\n            // to the constructor function itself.\n            var /** @type {?} */ suppliedTypeParams = typeParams || [];\n            var /** @type {?} */ missingTypeParamsCount = arity - suppliedTypeParams.length;\n            var /** @type {?} */ allTypeParams = suppliedTypeParams.concat(new Array(missingTypeParamsCount).fill(o.DYNAMIC_TYPE));\n            return members.reduce(function (expr, memberName) { return expr.prop(memberName); }, /** @type {?} */ (o.importExpr(new o.ExternalReference(moduleName, name, null), allTypeParams)));\n        };\n        return { statements: [], genFilePath: genFilePath, importExpr: importExpr, constantPool: new ConstantPool() };\n    };\n    /**\n     * @param {?} importedFilePath\n     * @param {?} containingFilePath\n     * @return {?}\n     */\n    AotCompiler.prototype._fileNameToModuleName = /**\n     * @param {?} importedFilePath\n     * @param {?} containingFilePath\n     * @return {?}\n     */\n    function (importedFilePath, containingFilePath) {\n        return this._summaryResolver.getKnownModuleName(importedFilePath) ||\n            this._symbolResolver.getKnownModuleName(importedFilePath) ||\n            this._host.fileNameToModuleName(importedFilePath, containingFilePath);\n    };\n    /**\n     * @param {?} srcFileUrl\n     * @param {?} compMeta\n     * @param {?} stylesheetMetadata\n     * @param {?} isShimmed\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    AotCompiler.prototype._codegenStyles = /**\n     * @param {?} srcFileUrl\n     * @param {?} compMeta\n     * @param {?} stylesheetMetadata\n     * @param {?} isShimmed\n     * @param {?} fileSuffix\n     * @return {?}\n     */\n    function (srcFileUrl, compMeta, stylesheetMetadata, isShimmed, fileSuffix) {\n        var /** @type {?} */ outputCtx = this._createOutputContext(_stylesModuleUrl(/** @type {?} */ ((stylesheetMetadata.moduleUrl)), isShimmed, fileSuffix));\n        var /** @type {?} */ compiledStylesheet = this._styleCompiler.compileStyles(outputCtx, compMeta, stylesheetMetadata, isShimmed);\n        _resolveStyleStatements(this._symbolResolver, compiledStylesheet, isShimmed, fileSuffix);\n        return this._codegenSourceModule(srcFileUrl, outputCtx);\n    };\n    /**\n     * @param {?} srcFileUrl\n     * @param {?} ctx\n     * @return {?}\n     */\n    AotCompiler.prototype._codegenSourceModule = /**\n     * @param {?} srcFileUrl\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (srcFileUrl, ctx) {\n        return new GeneratedFile(srcFileUrl, ctx.genFilePath, ctx.statements);\n    };\n    /**\n     * @param {?=} entryRoute\n     * @param {?=} analyzedModules\n     * @return {?}\n     */\n    AotCompiler.prototype.listLazyRoutes = /**\n     * @param {?=} entryRoute\n     * @param {?=} analyzedModules\n     * @return {?}\n     */\n    function (entryRoute, analyzedModules) {\n        var /** @type {?} */ self = this;\n        if (entryRoute) {\n            var /** @type {?} */ symbol = parseLazyRoute(entryRoute, this.reflector).referencedModule;\n            return visitLazyRoute(symbol);\n        }\n        else if (analyzedModules) {\n            var /** @type {?} */ allLazyRoutes = [];\n            for (var _i = 0, _a = analyzedModules.ngModules; _i < _a.length; _i++) {\n                var ngModule = _a[_i];\n                var /** @type {?} */ lazyRoutes = listLazyRoutes(ngModule, this.reflector);\n                for (var _b = 0, lazyRoutes_1 = lazyRoutes; _b < lazyRoutes_1.length; _b++) {\n                    var lazyRoute = lazyRoutes_1[_b];\n                    allLazyRoutes.push(lazyRoute);\n                }\n            }\n            return allLazyRoutes;\n        }\n        else {\n            throw new Error(\"Either route or analyzedModules has to be specified!\");\n        }\n        /**\n         * @param {?} symbol\n         * @param {?=} seenRoutes\n         * @param {?=} allLazyRoutes\n         * @return {?}\n         */\n        function visitLazyRoute(symbol, seenRoutes, allLazyRoutes) {\n            if (seenRoutes === void 0) { seenRoutes = new Set(); }\n            if (allLazyRoutes === void 0) { allLazyRoutes = []; }\n            // Support pointing to default exports, but stop recursing there,\n            // as the StaticReflector does not yet support default exports.\n            if (seenRoutes.has(symbol) || !symbol.name) {\n                return allLazyRoutes;\n            }\n            seenRoutes.add(symbol);\n            var /** @type {?} */ lazyRoutes = listLazyRoutes(/** @type {?} */ ((self._metadataResolver.getNgModuleMetadata(symbol, true))), self.reflector);\n            for (var _i = 0, lazyRoutes_2 = lazyRoutes; _i < lazyRoutes_2.length; _i++) {\n                var lazyRoute = lazyRoutes_2[_i];\n                allLazyRoutes.push(lazyRoute);\n                visitLazyRoute(lazyRoute.referencedModule, seenRoutes, allLazyRoutes);\n            }\n            return allLazyRoutes;\n        }\n    };\n    return AotCompiler;\n}());\nexport { AotCompiler };\nfunction AotCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AotCompiler.prototype._templateAstCache;\n    /** @type {?} */\n    AotCompiler.prototype._analyzedFiles;\n    /** @type {?} */\n    AotCompiler.prototype._analyzedFilesForInjectables;\n    /** @type {?} */\n    AotCompiler.prototype._config;\n    /** @type {?} */\n    AotCompiler.prototype._options;\n    /** @type {?} */\n    AotCompiler.prototype._host;\n    /** @type {?} */\n    AotCompiler.prototype.reflector;\n    /** @type {?} */\n    AotCompiler.prototype._metadataResolver;\n    /** @type {?} */\n    AotCompiler.prototype._templateParser;\n    /** @type {?} */\n    AotCompiler.prototype._styleCompiler;\n    /** @type {?} */\n    AotCompiler.prototype._viewCompiler;\n    /** @type {?} */\n    AotCompiler.prototype._typeCheckCompiler;\n    /** @type {?} */\n    AotCompiler.prototype._ngModuleCompiler;\n    /** @type {?} */\n    AotCompiler.prototype._injectableCompiler;\n    /** @type {?} */\n    AotCompiler.prototype._outputEmitter;\n    /** @type {?} */\n    AotCompiler.prototype._summaryResolver;\n    /** @type {?} */\n    AotCompiler.prototype._symbolResolver;\n}\n/**\n * @param {?} outputCtx\n * @return {?}\n */\nfunction _createEmptyStub(outputCtx) {\n    // Note: We need to produce at least one import statement so that\n    // TypeScript knows that the file is an es6 module. Otherwise our generated\n    // exports / imports won't be emitted properly by TypeScript.\n    outputCtx.statements.push(o.importExpr(Identifiers.ComponentFactory).toStmt());\n}\n/**\n * @param {?} symbolResolver\n * @param {?} compileResult\n * @param {?} needsShim\n * @param {?} fileSuffix\n * @return {?}\n */\nfunction _resolveStyleStatements(symbolResolver, compileResult, needsShim, fileSuffix) {\n    compileResult.dependencies.forEach(function (dep) {\n        dep.setValue(symbolResolver.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, needsShim, fileSuffix), dep.name));\n    });\n}\n/**\n * @param {?} stylesheetUrl\n * @param {?} shim\n * @param {?} suffix\n * @return {?}\n */\nfunction _stylesModuleUrl(stylesheetUrl, shim, suffix) {\n    return \"\" + stylesheetUrl + (shim ? '.shim' : '') + \".ngstyle\" + suffix;\n}\n/**\n * @record\n */\nexport function NgAnalyzedModules() { }\nfunction NgAnalyzedModules_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgAnalyzedModules.prototype.ngModules;\n    /** @type {?} */\n    NgAnalyzedModules.prototype.ngModuleByPipeOrDirective;\n    /** @type {?} */\n    NgAnalyzedModules.prototype.files;\n    /** @type {?|undefined} */\n    NgAnalyzedModules.prototype.symbolsMissingModule;\n}\n/**\n * @record\n */\nexport function NgAnalyzedFileWithInjectables() { }\nfunction NgAnalyzedFileWithInjectables_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgAnalyzedFileWithInjectables.prototype.fileName;\n    /** @type {?} */\n    NgAnalyzedFileWithInjectables.prototype.injectables;\n    /** @type {?} */\n    NgAnalyzedFileWithInjectables.prototype.shallowModules;\n}\n/**\n * @record\n */\nexport function NgAnalyzedFile() { }\nfunction NgAnalyzedFile_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgAnalyzedFile.prototype.fileName;\n    /** @type {?} */\n    NgAnalyzedFile.prototype.directives;\n    /** @type {?} */\n    NgAnalyzedFile.prototype.pipes;\n    /** @type {?} */\n    NgAnalyzedFile.prototype.ngModules;\n    /** @type {?} */\n    NgAnalyzedFile.prototype.injectables;\n    /** @type {?} */\n    NgAnalyzedFile.prototype.exportsNonSourceFiles;\n}\n/**\n * @record\n */\nexport function NgAnalyzeModulesHost() { }\nfunction NgAnalyzeModulesHost_tsickle_Closure_declarations() {\n    /** @type {?} */\n    NgAnalyzeModulesHost.prototype.isSourceFile;\n}\n/**\n * @param {?} fileNames\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} metadataResolver\n * @return {?}\n */\nexport function analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {\n    var /** @type {?} */ files = _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver);\n    return mergeAnalyzedFiles(files);\n}\n/**\n * @param {?} fileNames\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} metadataResolver\n * @return {?}\n */\nexport function analyzeAndValidateNgModules(fileNames, host, staticSymbolResolver, metadataResolver) {\n    return validateAnalyzedModules(analyzeNgModules(fileNames, host, staticSymbolResolver, metadataResolver));\n}\n/**\n * @param {?} analyzedModules\n * @return {?}\n */\nfunction validateAnalyzedModules(analyzedModules) {\n    if (analyzedModules.symbolsMissingModule && analyzedModules.symbolsMissingModule.length) {\n        var /** @type {?} */ messages = analyzedModules.symbolsMissingModule.map(function (s) {\n            return \"Cannot determine the module for class \" + s.name + \" in \" + s.filePath + \"! Add \" + s.name + \" to the NgModule to fix it.\";\n        });\n        throw syntaxError(messages.join('\\n'));\n    }\n    return analyzedModules;\n}\n/**\n * @param {?} fileNames\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} metadataResolver\n * @return {?}\n */\nfunction _analyzeFilesIncludingNonProgramFiles(fileNames, host, staticSymbolResolver, metadataResolver) {\n    var /** @type {?} */ seenFiles = new Set();\n    var /** @type {?} */ files = [];\n    var /** @type {?} */ visitFile = function (fileName) {\n        if (seenFiles.has(fileName) || !host.isSourceFile(fileName)) {\n            return false;\n        }\n        seenFiles.add(fileName);\n        var /** @type {?} */ analyzedFile = analyzeFile(host, staticSymbolResolver, metadataResolver, fileName);\n        files.push(analyzedFile);\n        analyzedFile.ngModules.forEach(function (ngModule) {\n            ngModule.transitiveModule.modules.forEach(function (modMeta) { return visitFile(modMeta.reference.filePath); });\n        });\n    };\n    fileNames.forEach(function (fileName) { return visitFile(fileName); });\n    return files;\n}\n/**\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} metadataResolver\n * @param {?} fileName\n * @return {?}\n */\nexport function analyzeFile(host, staticSymbolResolver, metadataResolver, fileName) {\n    var /** @type {?} */ directives = [];\n    var /** @type {?} */ pipes = [];\n    var /** @type {?} */ injectables = [];\n    var /** @type {?} */ ngModules = [];\n    var /** @type {?} */ hasDecorators = staticSymbolResolver.hasDecorators(fileName);\n    var /** @type {?} */ exportsNonSourceFiles = false;\n    // Don't analyze .d.ts files that have no decorators as a shortcut\n    // to speed up the analysis. This prevents us from\n    // resolving the references in these files.\n    // Note: exportsNonSourceFiles is only needed when compiling with summaries,\n    // which is not the case when .d.ts files are treated as input files.\n    if (!fileName.endsWith('.d.ts') || hasDecorators) {\n        staticSymbolResolver.getSymbolsOf(fileName).forEach(function (symbol) {\n            var /** @type {?} */ resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n            var /** @type {?} */ symbolMeta = resolvedSymbol.metadata;\n            if (!symbolMeta || symbolMeta.__symbolic === 'error') {\n                return;\n            }\n            var /** @type {?} */ isNgSymbol = false;\n            if (symbolMeta.__symbolic === 'class') {\n                if (metadataResolver.isDirective(symbol)) {\n                    isNgSymbol = true;\n                    directives.push(symbol);\n                }\n                else if (metadataResolver.isPipe(symbol)) {\n                    isNgSymbol = true;\n                    pipes.push(symbol);\n                }\n                else if (metadataResolver.isNgModule(symbol)) {\n                    var /** @type {?} */ ngModule = metadataResolver.getNgModuleMetadata(symbol, false);\n                    if (ngModule) {\n                        isNgSymbol = true;\n                        ngModules.push(ngModule);\n                    }\n                }\n                else if (metadataResolver.isInjectable(symbol)) {\n                    isNgSymbol = true;\n                    var /** @type {?} */ injectable = metadataResolver.getInjectableMetadata(symbol, null, false);\n                    if (injectable) {\n                        injectables.push(injectable);\n                    }\n                }\n            }\n            if (!isNgSymbol) {\n                exportsNonSourceFiles =\n                    exportsNonSourceFiles || isValueExportingNonSourceFile(host, symbolMeta);\n            }\n        });\n    }\n    return {\n        fileName: fileName, directives: directives, pipes: pipes, ngModules: ngModules, injectables: injectables, exportsNonSourceFiles: exportsNonSourceFiles,\n    };\n}\n/**\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} metadataResolver\n * @param {?} fileName\n * @return {?}\n */\nexport function analyzeFileForInjectables(host, staticSymbolResolver, metadataResolver, fileName) {\n    var /** @type {?} */ injectables = [];\n    var /** @type {?} */ shallowModules = [];\n    if (staticSymbolResolver.hasDecorators(fileName)) {\n        staticSymbolResolver.getSymbolsOf(fileName).forEach(function (symbol) {\n            var /** @type {?} */ resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);\n            var /** @type {?} */ symbolMeta = resolvedSymbol.metadata;\n            if (!symbolMeta || symbolMeta.__symbolic === 'error') {\n                return;\n            }\n            if (symbolMeta.__symbolic === 'class') {\n                if (metadataResolver.isInjectable(symbol)) {\n                    var /** @type {?} */ injectable = metadataResolver.getInjectableMetadata(symbol, null, false);\n                    if (injectable) {\n                        injectables.push(injectable);\n                    }\n                }\n                else if (metadataResolver.isNgModule(symbol)) {\n                    var /** @type {?} */ module = metadataResolver.getShallowModuleMetadata(symbol);\n                    if (module) {\n                        shallowModules.push(module);\n                    }\n                }\n            }\n        });\n    }\n    return { fileName: fileName, injectables: injectables, shallowModules: shallowModules };\n}\n/**\n * @param {?} host\n * @param {?} metadata\n * @return {?}\n */\nfunction isValueExportingNonSourceFile(host, metadata) {\n    var /** @type {?} */ exportsNonSourceFiles = false;\n    var Visitor = /** @class */ (function () {\n        function Visitor() {\n        }\n        /**\n         * @param {?} arr\n         * @param {?} context\n         * @return {?}\n         */\n        Visitor.prototype.visitArray = /**\n         * @param {?} arr\n         * @param {?} context\n         * @return {?}\n         */\n        function (arr, context) {\n            var _this = this;\n            arr.forEach(function (v) { return visitValue(v, _this, context); });\n        };\n        /**\n         * @param {?} map\n         * @param {?} context\n         * @return {?}\n         */\n        Visitor.prototype.visitStringMap = /**\n         * @param {?} map\n         * @param {?} context\n         * @return {?}\n         */\n        function (map, context) {\n            var _this = this;\n            Object.keys(map).forEach(function (key) { return visitValue(map[key], _this, context); });\n        };\n        /**\n         * @param {?} value\n         * @param {?} context\n         * @return {?}\n         */\n        Visitor.prototype.visitPrimitive = /**\n         * @param {?} value\n         * @param {?} context\n         * @return {?}\n         */\n        function (value, context) { };\n        /**\n         * @param {?} value\n         * @param {?} context\n         * @return {?}\n         */\n        Visitor.prototype.visitOther = /**\n         * @param {?} value\n         * @param {?} context\n         * @return {?}\n         */\n        function (value, context) {\n            if (value instanceof StaticSymbol && !host.isSourceFile(value.filePath)) {\n                exportsNonSourceFiles = true;\n            }\n        };\n        return Visitor;\n    }());\n    visitValue(metadata, new Visitor(), null);\n    return exportsNonSourceFiles;\n}\n/**\n * @param {?} analyzedFiles\n * @return {?}\n */\nexport function mergeAnalyzedFiles(analyzedFiles) {\n    var /** @type {?} */ allNgModules = [];\n    var /** @type {?} */ ngModuleByPipeOrDirective = new Map();\n    var /** @type {?} */ allPipesAndDirectives = new Set();\n    analyzedFiles.forEach(function (af) {\n        af.ngModules.forEach(function (ngModule) {\n            allNgModules.push(ngModule);\n            ngModule.declaredDirectives.forEach(function (d) { return ngModuleByPipeOrDirective.set(d.reference, ngModule); });\n            ngModule.declaredPipes.forEach(function (p) { return ngModuleByPipeOrDirective.set(p.reference, ngModule); });\n        });\n        af.directives.forEach(function (d) { return allPipesAndDirectives.add(d); });\n        af.pipes.forEach(function (p) { return allPipesAndDirectives.add(p); });\n    });\n    var /** @type {?} */ symbolsMissingModule = [];\n    allPipesAndDirectives.forEach(function (ref) {\n        if (!ngModuleByPipeOrDirective.has(ref)) {\n            symbolsMissingModule.push(ref);\n        }\n    });\n    return {\n        ngModules: allNgModules,\n        ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,\n        symbolsMissingModule: symbolsMissingModule,\n        files: analyzedFiles\n    };\n}\n/**\n * @param {?} files\n * @return {?}\n */\nfunction mergeAndValidateNgFiles(files) {\n    return validateAnalyzedModules(mergeAnalyzedFiles(files));\n}\n//# sourceMappingURL=compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { identifierName } from '../compile_metadata';\nimport * as o from '../output/output_ast';\nimport { error } from '../util';\nimport { Identifiers as R3 } from './r3_identifiers';\nimport { createFactory } from './r3_view_compiler_local';\n/**\n * Write a pipe definition to the output context.\n * @param {?} outputCtx\n * @param {?} pipe\n * @param {?} reflector\n * @return {?}\n */\nexport function compilePipe(outputCtx, pipe, reflector) {\n    var /** @type {?} */ definitionMapValues = [];\n    // e.g. `name: 'myPipe'`\n    definitionMapValues.push({ key: 'name', value: o.literal(pipe.name), quoted: false });\n    // e.g. `type: MyPipe`\n    definitionMapValues.push({ key: 'type', value: outputCtx.importExpr(pipe.type.reference), quoted: false });\n    // e.g. `factory: function MyPipe_Factory() { return new MyPipe(); }`\n    var /** @type {?} */ templateFactory = createFactory(pipe.type, outputCtx, reflector, []);\n    definitionMapValues.push({ key: 'factory', value: templateFactory, quoted: false });\n    // e.g. `pure: true`\n    if (pipe.pure) {\n        definitionMapValues.push({ key: 'pure', value: o.literal(true), quoted: false });\n    }\n    var /** @type {?} */ className = /** @type {?} */ ((identifierName(pipe.type)));\n    className || error(\"Cannot resolve the name of \" + pipe.type);\n    var /** @type {?} */ definitionField = outputCtx.constantPool.propertyNameOf(3 /* Pipe */);\n    var /** @type {?} */ definitionFunction = o.importExpr(R3.definePipe).callFn([o.literalMap(definitionMapValues)]);\n    outputCtx.statements.push(new o.ClassStmt(className, null, /* fields */ [new o.ClassField(definitionField, /* type */ o.INFERRED_TYPE, /* modifiers */ [o.StmtModifier.Static], definitionFunction)], /* getters */ [], /* constructorMethod */ new o.ClassMethod(null, [], []), /* methods */ []));\n}\n//# sourceMappingURL=r3_pipe_compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { syntaxError } from '../util';\n/**\n * @record\n */\nexport function Position() { }\nfunction Position_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Position.prototype.fileName;\n    /** @type {?} */\n    Position.prototype.line;\n    /** @type {?} */\n    Position.prototype.column;\n}\n/**\n * @record\n */\nexport function FormattedMessageChain() { }\nfunction FormattedMessageChain_tsickle_Closure_declarations() {\n    /** @type {?} */\n    FormattedMessageChain.prototype.message;\n    /** @type {?|undefined} */\n    FormattedMessageChain.prototype.position;\n    /** @type {?|undefined} */\n    FormattedMessageChain.prototype.next;\n}\nvar /** @type {?} */ FORMATTED_MESSAGE = 'ngFormattedMessage';\n/**\n * @param {?} level\n * @return {?}\n */\nfunction indentStr(level) {\n    if (level <= 0)\n        return '';\n    if (level < 6)\n        return ['', ' ', '  ', '   ', '    ', '     '][level];\n    var /** @type {?} */ half = indentStr(Math.floor(level / 2));\n    return half + half + (level % 2 === 1 ? ' ' : '');\n}\n/**\n * @param {?} chain\n * @param {?=} indent\n * @return {?}\n */\nfunction formatChain(chain, indent) {\n    if (indent === void 0) { indent = 0; }\n    if (!chain)\n        return '';\n    var /** @type {?} */ position = chain.position ?\n        chain.position.fileName + \"(\" + (chain.position.line + 1) + \",\" + (chain.position.column + 1) + \")\" :\n        '';\n    var /** @type {?} */ prefix = position && indent === 0 ? position + \": \" : '';\n    var /** @type {?} */ postfix = position && indent !== 0 ? \" at \" + position : '';\n    var /** @type {?} */ message = \"\" + prefix + chain.message + postfix;\n    return \"\" + indentStr(indent) + message + ((chain.next && ('\\n' + formatChain(chain.next, indent + 2))) || '');\n}\n/**\n * @param {?} chain\n * @return {?}\n */\nexport function formattedError(chain) {\n    var /** @type {?} */ message = formatChain(chain) + '.';\n    var /** @type {?} */ error = /** @type {?} */ (syntaxError(message));\n    (/** @type {?} */ (error))[FORMATTED_MESSAGE] = true;\n    error.chain = chain;\n    error.position = chain.position;\n    return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nexport function isFormattedError(error) {\n    return !!(/** @type {?} */ (error))[FORMATTED_MESSAGE];\n}\n//# sourceMappingURL=formatted_error.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { CompileSummaryKind } from '../compile_metadata';\nimport { createAttribute, createComponent, createContentChild, createContentChildren, createDirective, createHost, createHostBinding, createHostListener, createInject, createInjectable, createInput, createNgModule, createOptional, createOutput, createPipe, createSelf, createSkipSelf, createViewChild, createViewChildren } from '../core';\nimport { syntaxError } from '../util';\nimport { formattedError } from './formatted_error';\nimport { StaticSymbol } from './static_symbol';\nvar /** @type {?} */ ANGULAR_CORE = '@angular/core';\nvar /** @type {?} */ ANGULAR_ROUTER = '@angular/router';\nvar /** @type {?} */ HIDDEN_KEY = /^\\$.*\\$$/;\nvar /** @type {?} */ IGNORE = {\n    __symbolic: 'ignore'\n};\nvar /** @type {?} */ USE_VALUE = 'useValue';\nvar /** @type {?} */ PROVIDE = 'provide';\nvar /** @type {?} */ REFERENCE_SET = new Set([USE_VALUE, 'useFactory', 'data', 'id', 'loadChildren']);\nvar /** @type {?} */ TYPEGUARD_POSTFIX = 'TypeGuard';\nvar /** @type {?} */ USE_IF = 'UseIf';\n/**\n * @param {?} value\n * @return {?}\n */\nfunction shouldIgnore(value) {\n    return value && value.__symbolic == 'ignore';\n}\n/**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nvar /**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nStaticReflector = /** @class */ (function () {\n    function StaticReflector(summaryResolver, symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {\n        if (knownMetadataClasses === void 0) { knownMetadataClasses = []; }\n        if (knownMetadataFunctions === void 0) { knownMetadataFunctions = []; }\n        var _this = this;\n        this.summaryResolver = summaryResolver;\n        this.symbolResolver = symbolResolver;\n        this.errorRecorder = errorRecorder;\n        this.annotationCache = new Map();\n        this.shallowAnnotationCache = new Map();\n        this.propertyCache = new Map();\n        this.parameterCache = new Map();\n        this.methodCache = new Map();\n        this.staticCache = new Map();\n        this.conversionMap = new Map();\n        this.resolvedExternalReferences = new Map();\n        this.annotationForParentClassWithSummaryKind = new Map();\n        this.initializeConversionMap();\n        knownMetadataClasses.forEach(function (kc) {\n            return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor);\n        });\n        knownMetadataFunctions.forEach(function (kf) { return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn); });\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Directive, [createDirective, createComponent]);\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Pipe, [createPipe]);\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.NgModule, [createNgModule]);\n        this.annotationForParentClassWithSummaryKind.set(CompileSummaryKind.Injectable, [createInjectable, createPipe, createDirective, createComponent, createNgModule]);\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    StaticReflector.prototype.componentModuleUrl = /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function (typeOrFunc) {\n        var /** @type {?} */ staticSymbol = this.findSymbolDeclaration(typeOrFunc);\n        return this.symbolResolver.getResourcePath(staticSymbol);\n    };\n    /**\n     * @param {?} ref\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    StaticReflector.prototype.resolveExternalReference = /**\n     * @param {?} ref\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    function (ref, containingFile) {\n        var /** @type {?} */ key = undefined;\n        if (!containingFile) {\n            key = ref.moduleName + \":\" + ref.name;\n            var /** @type {?} */ declarationSymbol_1 = this.resolvedExternalReferences.get(key);\n            if (declarationSymbol_1)\n                return declarationSymbol_1;\n        }\n        var /** @type {?} */ refSymbol = this.symbolResolver.getSymbolByModule(/** @type {?} */ ((ref.moduleName)), /** @type {?} */ ((ref.name)), containingFile);\n        var /** @type {?} */ declarationSymbol = this.findSymbolDeclaration(refSymbol);\n        if (!containingFile) {\n            this.symbolResolver.recordModuleNameForFileName(refSymbol.filePath, /** @type {?} */ ((ref.moduleName)));\n            this.symbolResolver.recordImportAs(declarationSymbol, refSymbol);\n        }\n        if (key) {\n            this.resolvedExternalReferences.set(key, declarationSymbol);\n        }\n        return declarationSymbol;\n    };\n    /**\n     * @param {?} moduleUrl\n     * @param {?} name\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    StaticReflector.prototype.findDeclaration = /**\n     * @param {?} moduleUrl\n     * @param {?} name\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    function (moduleUrl, name, containingFile) {\n        return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));\n    };\n    /**\n     * @param {?} moduleUrl\n     * @param {?} name\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    StaticReflector.prototype.tryFindDeclaration = /**\n     * @param {?} moduleUrl\n     * @param {?} name\n     * @param {?=} containingFile\n     * @return {?}\n     */\n    function (moduleUrl, name, containingFile) {\n        var _this = this;\n        return this.symbolResolver.ignoreErrorsFor(function () { return _this.findDeclaration(moduleUrl, name, containingFile); });\n    };\n    /**\n     * @param {?} symbol\n     * @return {?}\n     */\n    StaticReflector.prototype.findSymbolDeclaration = /**\n     * @param {?} symbol\n     * @return {?}\n     */\n    function (symbol) {\n        var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);\n        if (resolvedSymbol) {\n            var /** @type {?} */ resolvedMetadata = resolvedSymbol.metadata;\n            if (resolvedMetadata && resolvedMetadata.__symbolic === 'resolved') {\n                resolvedMetadata = resolvedMetadata.symbol;\n            }\n            if (resolvedMetadata instanceof StaticSymbol) {\n                return this.findSymbolDeclaration(resolvedSymbol.metadata);\n            }\n        }\n        return symbol;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.tryAnnotations = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ originalRecorder = this.errorRecorder;\n        this.errorRecorder = function (error, fileName) { };\n        try {\n            return this.annotations(type);\n        }\n        finally {\n            this.errorRecorder = originalRecorder;\n        }\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.annotations = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var _this = this;\n        return this._annotations(type, function (type, decorators) { return _this.simplify(type, decorators); }, this.annotationCache);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.shallowAnnotations = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var _this = this;\n        return this._annotations(type, function (type, decorators) { return _this.simplify(type, decorators, true); }, this.shallowAnnotationCache);\n    };\n    /**\n     * @param {?} type\n     * @param {?} simplify\n     * @param {?} annotationCache\n     * @return {?}\n     */\n    StaticReflector.prototype._annotations = /**\n     * @param {?} type\n     * @param {?} simplify\n     * @param {?} annotationCache\n     * @return {?}\n     */\n    function (type, simplify, annotationCache) {\n        var /** @type {?} */ annotations = annotationCache.get(type);\n        if (!annotations) {\n            annotations = [];\n            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);\n            var /** @type {?} */ parentType = this.findParentType(type, classMetadata);\n            if (parentType) {\n                var /** @type {?} */ parentAnnotations = this.annotations(parentType);\n                annotations.push.apply(annotations, parentAnnotations);\n            }\n            var /** @type {?} */ ownAnnotations_1 = [];\n            if (classMetadata['decorators']) {\n                ownAnnotations_1 = simplify(type, classMetadata['decorators']);\n                if (ownAnnotations_1) {\n                    annotations.push.apply(annotations, ownAnnotations_1);\n                }\n            }\n            if (parentType && !this.summaryResolver.isLibraryFile(type.filePath) &&\n                this.summaryResolver.isLibraryFile(parentType.filePath)) {\n                var /** @type {?} */ summary = this.summaryResolver.resolveSummary(parentType);\n                if (summary && summary.type) {\n                    var /** @type {?} */ requiredAnnotationTypes = /** @type {?} */ ((this.annotationForParentClassWithSummaryKind.get(/** @type {?} */ ((summary.type.summaryKind)))));\n                    var /** @type {?} */ typeHasRequiredAnnotation = requiredAnnotationTypes.some(function (requiredType) { return ownAnnotations_1.some(function (ann) { return requiredType.isTypeOf(ann); }); });\n                    if (!typeHasRequiredAnnotation) {\n                        this.reportError(formatMetadataError(metadataError(\"Class \" + type.name + \" in \" + type.filePath + \" extends from a \" + CompileSummaryKind[(/** @type {?} */ ((summary.type.summaryKind)))] + \" in another compilation unit without duplicating the decorator\", undefined, \"Please add a \" + requiredAnnotationTypes.map(function (type) { return type.ngMetadataName; }).join(' or ') + \" decorator to the class\"), type), type);\n                    }\n                }\n            }\n            annotationCache.set(type, annotations.filter(function (ann) { return !!ann; }));\n        }\n        return annotations;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.propMetadata = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var _this = this;\n        var /** @type {?} */ propMetadata = this.propertyCache.get(type);\n        if (!propMetadata) {\n            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);\n            propMetadata = {};\n            var /** @type {?} */ parentType = this.findParentType(type, classMetadata);\n            if (parentType) {\n                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentType);\n                Object.keys(parentPropMetadata_1).forEach(function (parentProp) {\n                    /** @type {?} */ ((propMetadata))[parentProp] = parentPropMetadata_1[parentProp];\n                });\n            }\n            var /** @type {?} */ members_1 = classMetadata['members'] || {};\n            Object.keys(members_1).forEach(function (propName) {\n                var /** @type {?} */ propData = members_1[propName];\n                var /** @type {?} */ prop = (/** @type {?} */ (propData))\n                    .find(function (a) { return a['__symbolic'] == 'property' || a['__symbolic'] == 'method'; });\n                var /** @type {?} */ decorators = [];\n                if (/** @type {?} */ ((propMetadata))[propName]) {\n                    decorators.push.apply(decorators, /** @type {?} */ ((propMetadata))[propName]);\n                } /** @type {?} */\n                ((propMetadata))[propName] = decorators;\n                if (prop && prop['decorators']) {\n                    decorators.push.apply(decorators, _this.simplify(type, prop['decorators']));\n                }\n            });\n            this.propertyCache.set(type, propMetadata);\n        }\n        return propMetadata;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.parameters = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var _this = this;\n        if (!(type instanceof StaticSymbol)) {\n            this.reportError(new Error(\"parameters received \" + JSON.stringify(type) + \" which is not a StaticSymbol\"), type);\n            return [];\n        }\n        try {\n            var /** @type {?} */ parameters_1 = this.parameterCache.get(type);\n            if (!parameters_1) {\n                var /** @type {?} */ classMetadata = this.getTypeMetadata(type);\n                var /** @type {?} */ parentType = this.findParentType(type, classMetadata);\n                var /** @type {?} */ members = classMetadata ? classMetadata['members'] : null;\n                var /** @type {?} */ ctorData = members ? members['__ctor__'] : null;\n                if (ctorData) {\n                    var /** @type {?} */ ctor = (/** @type {?} */ (ctorData)).find(function (a) { return a['__symbolic'] == 'constructor'; });\n                    var /** @type {?} */ rawParameterTypes = /** @type {?} */ (ctor['parameters']) || [];\n                    var /** @type {?} */ parameterDecorators_1 = /** @type {?} */ (this.simplify(type, ctor['parameterDecorators'] || []));\n                    parameters_1 = [];\n                    rawParameterTypes.forEach(function (rawParamType, index) {\n                        var /** @type {?} */ nestedResult = [];\n                        var /** @type {?} */ paramType = _this.trySimplify(type, rawParamType);\n                        if (paramType)\n                            nestedResult.push(paramType);\n                        var /** @type {?} */ decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;\n                        if (decorators) {\n                            nestedResult.push.apply(nestedResult, decorators);\n                        } /** @type {?} */\n                        ((parameters_1)).push(nestedResult);\n                    });\n                }\n                else if (parentType) {\n                    parameters_1 = this.parameters(parentType);\n                }\n                if (!parameters_1) {\n                    parameters_1 = [];\n                }\n                this.parameterCache.set(type, parameters_1);\n            }\n            return parameters_1;\n        }\n        catch (/** @type {?} */ e) {\n            console.error(\"Failed on type \" + JSON.stringify(type) + \" with error \" + e);\n            throw e;\n        }\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype._methodNames = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ methodNames = this.methodCache.get(type);\n        if (!methodNames) {\n            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);\n            methodNames = {};\n            var /** @type {?} */ parentType = this.findParentType(type, classMetadata);\n            if (parentType) {\n                var /** @type {?} */ parentMethodNames_1 = this._methodNames(parentType);\n                Object.keys(parentMethodNames_1).forEach(function (parentProp) {\n                    /** @type {?} */ ((methodNames))[parentProp] = parentMethodNames_1[parentProp];\n                });\n            }\n            var /** @type {?} */ members_2 = classMetadata['members'] || {};\n            Object.keys(members_2).forEach(function (propName) {\n                var /** @type {?} */ propData = members_2[propName];\n                var /** @type {?} */ isMethod = (/** @type {?} */ (propData)).some(function (a) { return a['__symbolic'] == 'method'; }); /** @type {?} */\n                ((methodNames))[propName] = /** @type {?} */ ((methodNames))[propName] || isMethod;\n            });\n            this.methodCache.set(type, methodNames);\n        }\n        return methodNames;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype._staticMembers = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ staticMembers = this.staticCache.get(type);\n        if (!staticMembers) {\n            var /** @type {?} */ classMetadata = this.getTypeMetadata(type);\n            var /** @type {?} */ staticMemberData = classMetadata['statics'] || {};\n            staticMembers = Object.keys(staticMemberData);\n            this.staticCache.set(type, staticMembers);\n        }\n        return staticMembers;\n    };\n    /**\n     * @param {?} type\n     * @param {?} classMetadata\n     * @return {?}\n     */\n    StaticReflector.prototype.findParentType = /**\n     * @param {?} type\n     * @param {?} classMetadata\n     * @return {?}\n     */\n    function (type, classMetadata) {\n        var /** @type {?} */ parentType = this.trySimplify(type, classMetadata['extends']);\n        if (parentType instanceof StaticSymbol) {\n            return parentType;\n        }\n    };\n    /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    StaticReflector.prototype.hasLifecycleHook = /**\n     * @param {?} type\n     * @param {?} lcProperty\n     * @return {?}\n     */\n    function (type, lcProperty) {\n        if (!(type instanceof StaticSymbol)) {\n            this.reportError(new Error(\"hasLifecycleHook received \" + JSON.stringify(type) + \" which is not a StaticSymbol\"), type);\n        }\n        try {\n            return !!this._methodNames(type)[lcProperty];\n        }\n        catch (/** @type {?} */ e) {\n            console.error(\"Failed on type \" + JSON.stringify(type) + \" with error \" + e);\n            throw e;\n        }\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.guards = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        if (!(type instanceof StaticSymbol)) {\n            this.reportError(new Error(\"guards received \" + JSON.stringify(type) + \" which is not a StaticSymbol\"), type);\n            return {};\n        }\n        var /** @type {?} */ staticMembers = this._staticMembers(type);\n        var /** @type {?} */ result = {};\n        for (var _i = 0, staticMembers_1 = staticMembers; _i < staticMembers_1.length; _i++) {\n            var name_1 = staticMembers_1[_i];\n            if (name_1.endsWith(TYPEGUARD_POSTFIX)) {\n                var /** @type {?} */ property = name_1.substr(0, name_1.length - TYPEGUARD_POSTFIX.length);\n                var /** @type {?} */ value = void 0;\n                if (property.endsWith(USE_IF)) {\n                    property = name_1.substr(0, property.length - USE_IF.length);\n                    value = USE_IF;\n                }\n                else {\n                    value = this.getStaticSymbol(type.filePath, type.name, [name_1]);\n                }\n                result[property] = value;\n            }\n        }\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @param {?} ctor\n     * @return {?}\n     */\n    StaticReflector.prototype._registerDecoratorOrConstructor = /**\n     * @param {?} type\n     * @param {?} ctor\n     * @return {?}\n     */\n    function (type, ctor) {\n        this.conversionMap.set(type, function (context, args) { return new (ctor.bind.apply(ctor, [void 0].concat(args)))(); });\n    };\n    /**\n     * @param {?} type\n     * @param {?} fn\n     * @return {?}\n     */\n    StaticReflector.prototype._registerFunction = /**\n     * @param {?} type\n     * @param {?} fn\n     * @return {?}\n     */\n    function (type, fn) {\n        this.conversionMap.set(type, function (context, args) { return fn.apply(undefined, args); });\n    };\n    /**\n     * @return {?}\n     */\n    StaticReflector.prototype.initializeConversionMap = /**\n     * @return {?}\n     */\n    function () {\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Injectable'), createInjectable);\n        this.injectionToken = this.findDeclaration(ANGULAR_CORE, 'InjectionToken');\n        this.opaqueToken = this.findDeclaration(ANGULAR_CORE, 'OpaqueToken');\n        this.ROUTES = this.tryFindDeclaration(ANGULAR_ROUTER, 'ROUTES');\n        this.ANALYZE_FOR_ENTRY_COMPONENTS =\n            this.findDeclaration(ANGULAR_CORE, 'ANALYZE_FOR_ENTRY_COMPONENTS');\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Inject'), createInject);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Attribute'), createAttribute);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChild'), createContentChild);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ContentChildren'), createContentChildren);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChild'), createViewChild);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'ViewChildren'), createViewChildren);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Input'), createInput);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Output'), createOutput);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Pipe'), createPipe);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostBinding'), createHostBinding);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'HostListener'), createHostListener);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Directive'), createDirective);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Component'), createComponent);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'NgModule'), createNgModule);\n        // Note: Some metadata classes can be used directly with Provider.deps.\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Host'), createHost);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Self'), createSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'SkipSelf'), createSkipSelf);\n        this._registerDecoratorOrConstructor(this.findDeclaration(ANGULAR_CORE, 'Optional'), createOptional);\n    };\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param declarationFile the absolute path of the file where the symbol is declared\n     * @param name the name of the type.\n     */\n    /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param {?} declarationFile the absolute path of the file where the symbol is declared\n     * @param {?} name the name of the type.\n     * @param {?=} members\n     * @return {?}\n     */\n    StaticReflector.prototype.getStaticSymbol = /**\n     * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.\n     * All types passed to the StaticResolver should be pseudo-types returned by this method.\n     *\n     * @param {?} declarationFile the absolute path of the file where the symbol is declared\n     * @param {?} name the name of the type.\n     * @param {?=} members\n     * @return {?}\n     */\n    function (declarationFile, name, members) {\n        return this.symbolResolver.getStaticSymbol(declarationFile, name, members);\n    };\n    /**\n     * Simplify but discard any errors\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    StaticReflector.prototype.trySimplify = /**\n     * Simplify but discard any errors\n     * @param {?} context\n     * @param {?} value\n     * @return {?}\n     */\n    function (context, value) {\n        var /** @type {?} */ originalRecorder = this.errorRecorder;\n        this.errorRecorder = function (error, fileName) { };\n        var /** @type {?} */ result = this.simplify(context, value);\n        this.errorRecorder = originalRecorder;\n        return result;\n    };\n    /**\n     * \\@internal\n     * @param {?} context\n     * @param {?} value\n     * @param {?=} lazy\n     * @return {?}\n     */\n    StaticReflector.prototype.simplify = /**\n     * \\@internal\n     * @param {?} context\n     * @param {?} value\n     * @param {?=} lazy\n     * @return {?}\n     */\n    function (context, value, lazy) {\n        if (lazy === void 0) { lazy = false; }\n        var /** @type {?} */ self = this;\n        var /** @type {?} */ scope = BindingScope.empty;\n        var /** @type {?} */ calling = new Map();\n        var /** @type {?} */ rootContext = context;\n        /**\n         * @param {?} context\n         * @param {?} value\n         * @param {?} depth\n         * @param {?} references\n         * @return {?}\n         */\n        function simplifyInContext(context, value, depth, references) {\n            /**\n             * @param {?} staticSymbol\n             * @return {?}\n             */\n            function resolveReferenceValue(staticSymbol) {\n                var /** @type {?} */ resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);\n                return resolvedSymbol ? resolvedSymbol.metadata : null;\n            }\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            function simplifyEagerly(value) {\n                return simplifyInContext(context, value, depth, 0);\n            }\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            function simplifyLazily(value) {\n                return simplifyInContext(context, value, depth, references + 1);\n            }\n            /**\n             * @param {?} nestedContext\n             * @param {?} value\n             * @return {?}\n             */\n            function simplifyNested(nestedContext, value) {\n                if (nestedContext === context) {\n                    // If the context hasn't changed let the exception propagate unmodified.\n                    return simplifyInContext(nestedContext, value, depth + 1, references);\n                }\n                try {\n                    return simplifyInContext(nestedContext, value, depth + 1, references);\n                }\n                catch (/** @type {?} */ e) {\n                    if (isMetadataError(e)) {\n                        // Propagate the message text up but add a message to the chain that explains how we got\n                        // here.\n                        // e.chain implies e.symbol\n                        var /** @type {?} */ summaryMsg = e.chain ? 'references \\'' + /** @type {?} */ ((e.symbol)).name + '\\'' : errorSummary(e);\n                        var /** @type {?} */ summary = \"'\" + nestedContext.name + \"' \" + summaryMsg;\n                        var /** @type {?} */ chain = { message: summary, position: e.position, next: e.chain };\n                        // TODO(chuckj): retrieve the position information indirectly from the collectors node\n                        // map if the metadata is from a .ts file.\n                        self.error({\n                            message: e.message,\n                            advise: e.advise,\n                            context: e.context, chain: chain,\n                            symbol: nestedContext\n                        }, context);\n                    }\n                    else {\n                        // It is probably an internal error.\n                        throw e;\n                    }\n                }\n            }\n            /**\n             * @param {?} functionSymbol\n             * @param {?} targetFunction\n             * @param {?} args\n             * @param {?} targetExpression\n             * @return {?}\n             */\n            function simplifyCall(functionSymbol, targetFunction, args, targetExpression) {\n                if (targetFunction && targetFunction['__symbolic'] == 'function') {\n                    if (calling.get(functionSymbol)) {\n                        self.error({\n                            message: 'Recursion is not supported',\n                            summary: \"called '\" + functionSymbol.name + \"' recursively\",\n                            value: targetFunction\n                        }, functionSymbol);\n                    }\n                    try {\n                        var /** @type {?} */ value_1 = targetFunction['value'];\n                        if (value_1 && (depth != 0 || value_1.__symbolic != 'error')) {\n                            var /** @type {?} */ parameters = targetFunction['parameters'];\n                            var /** @type {?} */ defaults = targetFunction.defaults;\n                            args = args.map(function (arg) { return simplifyNested(context, arg); })\n                                .map(function (arg) { return shouldIgnore(arg) ? undefined : arg; });\n                            if (defaults && defaults.length > args.length) {\n                                args.push.apply(args, defaults.slice(args.length).map(function (value) { return simplify(value); }));\n                            }\n                            calling.set(functionSymbol, true);\n                            var /** @type {?} */ functionScope = BindingScope.build();\n                            for (var /** @type {?} */ i = 0; i < parameters.length; i++) {\n                                functionScope.define(parameters[i], args[i]);\n                            }\n                            var /** @type {?} */ oldScope = scope;\n                            var /** @type {?} */ result_1;\n                            try {\n                                scope = functionScope.done();\n                                result_1 = simplifyNested(functionSymbol, value_1);\n                            }\n                            finally {\n                                scope = oldScope;\n                            }\n                            return result_1;\n                        }\n                    }\n                    finally {\n                        calling.delete(functionSymbol);\n                    }\n                }\n                if (depth === 0) {\n                    // If depth is 0 we are evaluating the top level expression that is describing element\n                    // decorator. In this case, it is a decorator we don't understand, such as a custom\n                    // non-angular decorator, and we should just ignore it.\n                    return IGNORE;\n                }\n                var /** @type {?} */ position = undefined;\n                if (targetExpression && targetExpression.__symbolic == 'resolved') {\n                    var /** @type {?} */ line = targetExpression.line;\n                    var /** @type {?} */ character = targetExpression.character;\n                    var /** @type {?} */ fileName = targetExpression.fileName;\n                    if (fileName != null && line != null && character != null) {\n                        position = { fileName: fileName, line: line, column: character };\n                    }\n                }\n                self.error({\n                    message: FUNCTION_CALL_NOT_SUPPORTED,\n                    context: functionSymbol,\n                    value: targetFunction, position: position\n                }, context);\n            }\n            /**\n             * @param {?} expression\n             * @return {?}\n             */\n            function simplify(expression) {\n                if (isPrimitive(expression)) {\n                    return expression;\n                }\n                if (expression instanceof Array) {\n                    var /** @type {?} */ result_2 = [];\n                    for (var _i = 0, _a = (/** @type {?} */ (expression)); _i < _a.length; _i++) {\n                        var item = _a[_i];\n                        // Check for a spread expression\n                        if (item && item.__symbolic === 'spread') {\n                            // We call with references as 0 because we require the actual value and cannot\n                            // tolerate a reference here.\n                            var /** @type {?} */ spreadArray = simplifyEagerly(item.expression);\n                            if (Array.isArray(spreadArray)) {\n                                for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {\n                                    var spreadItem = spreadArray_1[_b];\n                                    result_2.push(spreadItem);\n                                }\n                                continue;\n                            }\n                        }\n                        var /** @type {?} */ value_2 = simplify(item);\n                        if (shouldIgnore(value_2)) {\n                            continue;\n                        }\n                        result_2.push(value_2);\n                    }\n                    return result_2;\n                }\n                if (expression instanceof StaticSymbol) {\n                    // Stop simplification at builtin symbols or if we are in a reference context and\n                    // the symbol doesn't have members.\n                    if (expression === self.injectionToken || self.conversionMap.has(expression) ||\n                        (references > 0 && !expression.members.length)) {\n                        return expression;\n                    }\n                    else {\n                        var /** @type {?} */ staticSymbol = expression;\n                        var /** @type {?} */ declarationValue = resolveReferenceValue(staticSymbol);\n                        if (declarationValue != null) {\n                            return simplifyNested(staticSymbol, declarationValue);\n                        }\n                        else {\n                            return staticSymbol;\n                        }\n                    }\n                }\n                if (expression) {\n                    if (expression['__symbolic']) {\n                        var /** @type {?} */ staticSymbol = void 0;\n                        switch (expression['__symbolic']) {\n                            case 'binop':\n                                var /** @type {?} */ left = simplify(expression['left']);\n                                if (shouldIgnore(left))\n                                    return left;\n                                var /** @type {?} */ right = simplify(expression['right']);\n                                if (shouldIgnore(right))\n                                    return right;\n                                switch (expression['operator']) {\n                                    case '&&':\n                                        return left && right;\n                                    case '||':\n                                        return left || right;\n                                    case '|':\n                                        return left | right;\n                                    case '^':\n                                        return left ^ right;\n                                    case '&':\n                                        return left & right;\n                                    case '==':\n                                        return left == right;\n                                    case '!=':\n                                        return left != right;\n                                    case '===':\n                                        return left === right;\n                                    case '!==':\n                                        return left !== right;\n                                    case '<':\n                                        return left < right;\n                                    case '>':\n                                        return left > right;\n                                    case '<=':\n                                        return left <= right;\n                                    case '>=':\n                                        return left >= right;\n                                    case '<<':\n                                        return left << right;\n                                    case '>>':\n                                        return left >> right;\n                                    case '+':\n                                        return left + right;\n                                    case '-':\n                                        return left - right;\n                                    case '*':\n                                        return left * right;\n                                    case '/':\n                                        return left / right;\n                                    case '%':\n                                        return left % right;\n                                }\n                                return null;\n                            case 'if':\n                                var /** @type {?} */ condition = simplify(expression['condition']);\n                                return condition ? simplify(expression['thenExpression']) :\n                                    simplify(expression['elseExpression']);\n                            case 'pre':\n                                var /** @type {?} */ operand = simplify(expression['operand']);\n                                if (shouldIgnore(operand))\n                                    return operand;\n                                switch (expression['operator']) {\n                                    case '+':\n                                        return operand;\n                                    case '-':\n                                        return -operand;\n                                    case '!':\n                                        return !operand;\n                                    case '~':\n                                        return ~operand;\n                                }\n                                return null;\n                            case 'index':\n                                var /** @type {?} */ indexTarget = simplifyEagerly(expression['expression']);\n                                var /** @type {?} */ index = simplifyEagerly(expression['index']);\n                                if (indexTarget && isPrimitive(index))\n                                    return indexTarget[index];\n                                return null;\n                            case 'select':\n                                var /** @type {?} */ member = expression['member'];\n                                var /** @type {?} */ selectContext = context;\n                                var /** @type {?} */ selectTarget = simplify(expression['expression']);\n                                if (selectTarget instanceof StaticSymbol) {\n                                    var /** @type {?} */ members = selectTarget.members.concat(member);\n                                    selectContext =\n                                        self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);\n                                    var /** @type {?} */ declarationValue = resolveReferenceValue(selectContext);\n                                    if (declarationValue != null) {\n                                        return simplifyNested(selectContext, declarationValue);\n                                    }\n                                    else {\n                                        return selectContext;\n                                    }\n                                }\n                                if (selectTarget && isPrimitive(member))\n                                    return simplifyNested(selectContext, selectTarget[member]);\n                                return null;\n                            case 'reference':\n                                // Note: This only has to deal with variable references, as symbol references have\n                                // been converted into 'resolved'\n                                // in the StaticSymbolResolver.\n                                var /** @type {?} */ name_2 = expression['name'];\n                                var /** @type {?} */ localValue = scope.resolve(name_2);\n                                if (localValue != BindingScope.missing) {\n                                    return localValue;\n                                }\n                                break;\n                            case 'resolved':\n                                try {\n                                    return simplify(expression.symbol);\n                                }\n                                catch (/** @type {?} */ e) {\n                                    // If an error is reported evaluating the symbol record the position of the\n                                    // reference in the error so it can\n                                    // be reported in the error message generated from the exception.\n                                    if (isMetadataError(e) && expression.fileName != null &&\n                                        expression.line != null && expression.character != null) {\n                                        e.position = {\n                                            fileName: expression.fileName,\n                                            line: expression.line,\n                                            column: expression.character\n                                        };\n                                    }\n                                    throw e;\n                                }\n                            case 'class':\n                                return context;\n                            case 'function':\n                                return context;\n                            case 'new':\n                            case 'call':\n                                // Determine if the function is a built-in conversion\n                                staticSymbol = simplifyInContext(context, expression['expression'], depth + 1, /* references */ 0);\n                                if (staticSymbol instanceof StaticSymbol) {\n                                    if (staticSymbol === self.injectionToken || staticSymbol === self.opaqueToken) {\n                                        // if somebody calls new InjectionToken, don't create an InjectionToken,\n                                        // but rather return the symbol to which the InjectionToken is assigned to.\n                                        // OpaqueToken is supported too as it is required by the language service to\n                                        // support v4 and prior versions of Angular.\n                                        return context;\n                                    }\n                                    var /** @type {?} */ argExpressions = expression['arguments'] || [];\n                                    var /** @type {?} */ converter = self.conversionMap.get(staticSymbol);\n                                    if (converter) {\n                                        var /** @type {?} */ args = argExpressions.map(function (arg) { return simplifyNested(context, arg); })\n                                            .map(function (arg) { return shouldIgnore(arg) ? undefined : arg; });\n                                        return converter(context, args);\n                                    }\n                                    else {\n                                        // Determine if the function is one we can simplify.\n                                        var /** @type {?} */ targetFunction = resolveReferenceValue(staticSymbol);\n                                        return simplifyCall(staticSymbol, targetFunction, argExpressions, expression['expression']);\n                                    }\n                                }\n                                return IGNORE;\n                            case 'error':\n                                var /** @type {?} */ message = expression.message;\n                                if (expression['line'] != null) {\n                                    self.error({\n                                        message: message,\n                                        context: expression.context,\n                                        value: expression,\n                                        position: {\n                                            fileName: expression['fileName'],\n                                            line: expression['line'],\n                                            column: expression['character']\n                                        }\n                                    }, context);\n                                }\n                                else {\n                                    self.error({ message: message, context: expression.context }, context);\n                                }\n                                return IGNORE;\n                            case 'ignore':\n                                return expression;\n                        }\n                        return null;\n                    }\n                    return mapStringMap(expression, function (value, name) {\n                        if (REFERENCE_SET.has(name)) {\n                            if (name === USE_VALUE && PROVIDE in expression) {\n                                // If this is a provider expression, check for special tokens that need the value\n                                // during analysis.\n                                var /** @type {?} */ provide = simplify(expression.provide);\n                                if (provide === self.ROUTES || provide == self.ANALYZE_FOR_ENTRY_COMPONENTS) {\n                                    return simplify(value);\n                                }\n                            }\n                            return simplifyLazily(value);\n                        }\n                        return simplify(value);\n                    });\n                }\n                return IGNORE;\n            }\n            return simplify(value);\n        }\n        var /** @type {?} */ result;\n        try {\n            result = simplifyInContext(context, value, 0, lazy ? 1 : 0);\n        }\n        catch (/** @type {?} */ e) {\n            if (this.errorRecorder) {\n                this.reportError(e, context);\n            }\n            else {\n                throw formatMetadataError(e, context);\n            }\n        }\n        if (shouldIgnore(result)) {\n            return undefined;\n        }\n        return result;\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    StaticReflector.prototype.getTypeMetadata = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(type);\n        return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :\n            { __symbolic: 'class' };\n    };\n    /**\n     * @param {?} error\n     * @param {?} context\n     * @param {?=} path\n     * @return {?}\n     */\n    StaticReflector.prototype.reportError = /**\n     * @param {?} error\n     * @param {?} context\n     * @param {?=} path\n     * @return {?}\n     */\n    function (error, context, path) {\n        if (this.errorRecorder) {\n            this.errorRecorder(formatMetadataError(error, context), (context && context.filePath) || path);\n        }\n        else {\n            throw error;\n        }\n    };\n    /**\n     * @param {?} __0\n     * @param {?} reportingContext\n     * @return {?}\n     */\n    StaticReflector.prototype.error = /**\n     * @param {?} __0\n     * @param {?} reportingContext\n     * @return {?}\n     */\n    function (_a, reportingContext) {\n        var message = _a.message, summary = _a.summary, advise = _a.advise, position = _a.position, context = _a.context, value = _a.value, symbol = _a.symbol, chain = _a.chain;\n        this.reportError(metadataError(message, summary, advise, position, symbol, context, chain), reportingContext);\n    };\n    return StaticReflector;\n}());\n/**\n * A static reflector implements enough of the Reflector API that is necessary to compile\n * templates statically.\n */\nexport { StaticReflector };\nfunction StaticReflector_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StaticReflector.prototype.annotationCache;\n    /** @type {?} */\n    StaticReflector.prototype.shallowAnnotationCache;\n    /** @type {?} */\n    StaticReflector.prototype.propertyCache;\n    /** @type {?} */\n    StaticReflector.prototype.parameterCache;\n    /** @type {?} */\n    StaticReflector.prototype.methodCache;\n    /** @type {?} */\n    StaticReflector.prototype.staticCache;\n    /** @type {?} */\n    StaticReflector.prototype.conversionMap;\n    /** @type {?} */\n    StaticReflector.prototype.resolvedExternalReferences;\n    /** @type {?} */\n    StaticReflector.prototype.injectionToken;\n    /** @type {?} */\n    StaticReflector.prototype.opaqueToken;\n    /** @type {?} */\n    StaticReflector.prototype.ROUTES;\n    /** @type {?} */\n    StaticReflector.prototype.ANALYZE_FOR_ENTRY_COMPONENTS;\n    /** @type {?} */\n    StaticReflector.prototype.annotationForParentClassWithSummaryKind;\n    /** @type {?} */\n    StaticReflector.prototype.summaryResolver;\n    /** @type {?} */\n    StaticReflector.prototype.symbolResolver;\n    /** @type {?} */\n    StaticReflector.prototype.errorRecorder;\n}\n/**\n * @record\n */\nfunction Position() { }\nfunction Position_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Position.prototype.fileName;\n    /** @type {?} */\n    Position.prototype.line;\n    /** @type {?} */\n    Position.prototype.column;\n}\n/**\n * @record\n */\nfunction MetadataMessageChain() { }\nfunction MetadataMessageChain_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MetadataMessageChain.prototype.message;\n    /** @type {?|undefined} */\n    MetadataMessageChain.prototype.summary;\n    /** @type {?|undefined} */\n    MetadataMessageChain.prototype.position;\n    /** @type {?|undefined} */\n    MetadataMessageChain.prototype.context;\n    /** @type {?|undefined} */\n    MetadataMessageChain.prototype.symbol;\n    /** @type {?|undefined} */\n    MetadataMessageChain.prototype.next;\n}\nvar /** @type {?} */ METADATA_ERROR = 'ngMetadataError';\n/**\n * @param {?} message\n * @param {?=} summary\n * @param {?=} advise\n * @param {?=} position\n * @param {?=} symbol\n * @param {?=} context\n * @param {?=} chain\n * @return {?}\n */\nfunction metadataError(message, summary, advise, position, symbol, context, chain) {\n    var /** @type {?} */ error = /** @type {?} */ (syntaxError(message));\n    (/** @type {?} */ (error))[METADATA_ERROR] = true;\n    if (advise)\n        error.advise = advise;\n    if (position)\n        error.position = position;\n    if (summary)\n        error.summary = summary;\n    if (context)\n        error.context = context;\n    if (chain)\n        error.chain = chain;\n    if (symbol)\n        error.symbol = symbol;\n    return error;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction isMetadataError(error) {\n    return !!(/** @type {?} */ (error))[METADATA_ERROR];\n}\nvar /** @type {?} */ REFERENCE_TO_NONEXPORTED_CLASS = 'Reference to non-exported class';\nvar /** @type {?} */ VARIABLE_NOT_INITIALIZED = 'Variable not initialized';\nvar /** @type {?} */ DESTRUCTURE_NOT_SUPPORTED = 'Destructuring not supported';\nvar /** @type {?} */ COULD_NOT_RESOLVE_TYPE = 'Could not resolve type';\nvar /** @type {?} */ FUNCTION_CALL_NOT_SUPPORTED = 'Function call not supported';\nvar /** @type {?} */ REFERENCE_TO_LOCAL_SYMBOL = 'Reference to a local symbol';\nvar /** @type {?} */ LAMBDA_NOT_SUPPORTED = 'Lambda not supported';\n/**\n * @param {?} message\n * @param {?} context\n * @return {?}\n */\nfunction expandedMessage(message, context) {\n    switch (message) {\n        case REFERENCE_TO_NONEXPORTED_CLASS:\n            if (context && context.className) {\n                return \"References to a non-exported class are not supported in decorators but \" + context.className + \" was referenced.\";\n            }\n            break;\n        case VARIABLE_NOT_INITIALIZED:\n            return 'Only initialized variables and constants can be referenced in decorators because the value of this variable is needed by the template compiler';\n        case DESTRUCTURE_NOT_SUPPORTED:\n            return 'Referencing an exported destructured variable or constant is not supported in decorators and this value is needed by the template compiler';\n        case COULD_NOT_RESOLVE_TYPE:\n            if (context && context.typeName) {\n                return \"Could not resolve type \" + context.typeName;\n            }\n            break;\n        case FUNCTION_CALL_NOT_SUPPORTED:\n            if (context && context.name) {\n                return \"Function calls are not supported in decorators but '\" + context.name + \"' was called\";\n            }\n            return 'Function calls are not supported in decorators';\n        case REFERENCE_TO_LOCAL_SYMBOL:\n            if (context && context.name) {\n                return \"Reference to a local (non-exported) symbols are not supported in decorators but '\" + context.name + \"' was referenced\";\n            }\n            break;\n        case LAMBDA_NOT_SUPPORTED:\n            return \"Function expressions are not supported in decorators\";\n    }\n    return message;\n}\n/**\n * @param {?} message\n * @param {?} context\n * @return {?}\n */\nfunction messageAdvise(message, context) {\n    switch (message) {\n        case REFERENCE_TO_NONEXPORTED_CLASS:\n            if (context && context.className) {\n                return \"Consider exporting '\" + context.className + \"'\";\n            }\n            break;\n        case DESTRUCTURE_NOT_SUPPORTED:\n            return 'Consider simplifying to avoid destructuring';\n        case REFERENCE_TO_LOCAL_SYMBOL:\n            if (context && context.name) {\n                return \"Consider exporting '\" + context.name + \"'\";\n            }\n            break;\n        case LAMBDA_NOT_SUPPORTED:\n            return \"Consider changing the function expression into an exported function\";\n    }\n    return undefined;\n}\n/**\n * @param {?} error\n * @return {?}\n */\nfunction errorSummary(error) {\n    if (error.summary) {\n        return error.summary;\n    }\n    switch (error.message) {\n        case REFERENCE_TO_NONEXPORTED_CLASS:\n            if (error.context && error.context.className) {\n                return \"references non-exported class \" + error.context.className;\n            }\n            break;\n        case VARIABLE_NOT_INITIALIZED:\n            return 'is not initialized';\n        case DESTRUCTURE_NOT_SUPPORTED:\n            return 'is a destructured variable';\n        case COULD_NOT_RESOLVE_TYPE:\n            return 'could not be resolved';\n        case FUNCTION_CALL_NOT_SUPPORTED:\n            if (error.context && error.context.name) {\n                return \"calls '\" + error.context.name + \"'\";\n            }\n            return \"calls a function\";\n        case REFERENCE_TO_LOCAL_SYMBOL:\n            if (error.context && error.context.name) {\n                return \"references local variable \" + error.context.name;\n            }\n            return \"references a local variable\";\n    }\n    return 'contains the error';\n}\n/**\n * @param {?} input\n * @param {?} transform\n * @return {?}\n */\nfunction mapStringMap(input, transform) {\n    if (!input)\n        return {};\n    var /** @type {?} */ result = {};\n    Object.keys(input).forEach(function (key) {\n        var /** @type {?} */ value = transform(input[key], key);\n        if (!shouldIgnore(value)) {\n            if (HIDDEN_KEY.test(key)) {\n                Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });\n            }\n            else {\n                result[key] = value;\n            }\n        }\n    });\n    return result;\n}\n/**\n * @param {?} o\n * @return {?}\n */\nfunction isPrimitive(o) {\n    return o === null || (typeof o !== 'function' && typeof o !== 'object');\n}\n/**\n * @record\n */\nfunction BindingScopeBuilder() { }\nfunction BindingScopeBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingScopeBuilder.prototype.define;\n    /** @type {?} */\n    BindingScopeBuilder.prototype.done;\n}\n/**\n * @abstract\n */\nvar BindingScope = /** @class */ (function () {\n    function BindingScope() {\n    }\n    /**\n     * @return {?}\n     */\n    BindingScope.build = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ current = new Map();\n        return {\n            define: function (name, value) {\n                current.set(name, value);\n                return this;\n            },\n            done: function () {\n                return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;\n            }\n        };\n    };\n    BindingScope.missing = {};\n    BindingScope.empty = { resolve: function (name) { return BindingScope.missing; } };\n    return BindingScope;\n}());\nfunction BindingScope_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BindingScope.missing;\n    /** @type {?} */\n    BindingScope.empty;\n    /**\n     * @abstract\n     * @param {?} name\n     * @return {?}\n     */\n    BindingScope.prototype.resolve = function (name) { };\n}\nvar PopulatedScope = /** @class */ (function (_super) {\n    tslib_1.__extends(PopulatedScope, _super);\n    function PopulatedScope(bindings) {\n        var _this = _super.call(this) || this;\n        _this.bindings = bindings;\n        return _this;\n    }\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    PopulatedScope.prototype.resolve = /**\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;\n    };\n    return PopulatedScope;\n}(BindingScope));\nfunction PopulatedScope_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PopulatedScope.prototype.bindings;\n}\n/**\n * @param {?} chain\n * @param {?} advise\n * @return {?}\n */\nfunction formatMetadataMessageChain(chain, advise) {\n    var /** @type {?} */ expanded = expandedMessage(chain.message, chain.context);\n    var /** @type {?} */ nesting = chain.symbol ? \" in '\" + chain.symbol.name + \"'\" : '';\n    var /** @type {?} */ message = \"\" + expanded + nesting;\n    var /** @type {?} */ position = chain.position;\n    var /** @type {?} */ next = chain.next ?\n        formatMetadataMessageChain(chain.next, advise) :\n        advise ? { message: advise } : undefined;\n    return { message: message, position: position, next: next };\n}\n/**\n * @param {?} e\n * @param {?} context\n * @return {?}\n */\nfunction formatMetadataError(e, context) {\n    if (isMetadataError(e)) {\n        // Produce a formatted version of the and leaving enough information in the original error\n        // to recover the formatting information to eventually produce a diagnostic error message.\n        var /** @type {?} */ position = e.position;\n        var /** @type {?} */ chain = {\n            message: \"Error during template compile of '\" + context.name + \"'\",\n            position: position,\n            next: { message: e.message, next: e.chain, context: e.context, symbol: e.symbol }\n        };\n        var /** @type {?} */ advise = e.advise || messageAdvise(e.message, e.context);\n        return formattedError(formatMetadataMessageChain(chain, advise));\n    }\n    return e;\n}\n//# sourceMappingURL=static_reflector.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { deserializeSummaries } from './summary_serializer';\nimport { stripGeneratedFileSuffix, summaryFileName } from './util';\n/**\n * @record\n */\nexport function AotSummaryResolverHost() { }\nfunction AotSummaryResolverHost_tsickle_Closure_declarations() {\n    /**\n     * Loads an NgModule/Directive/Pipe summary file\n     * @type {?}\n     */\n    AotSummaryResolverHost.prototype.loadSummary;\n    /**\n     * Returns whether a file is a source file or not.\n     * @type {?}\n     */\n    AotSummaryResolverHost.prototype.isSourceFile;\n    /**\n     * Converts a file name into a representation that should be stored in a summary file.\n     * This has to include changing the suffix as well.\n     * E.g.\n     * `some_file.ts` -> `some_file.d.ts`\n     *\n     * \\@param referringSrcFileName the soure file that refers to fileName\n     * @type {?}\n     */\n    AotSummaryResolverHost.prototype.toSummaryFileName;\n    /**\n     * Converts a fileName that was processed by `toSummaryFileName` back into a real fileName\n     * given the fileName of the library that is referrig to it.\n     * @type {?}\n     */\n    AotSummaryResolverHost.prototype.fromSummaryFileName;\n}\nvar AotSummaryResolver = /** @class */ (function () {\n    function AotSummaryResolver(host, staticSymbolCache) {\n        this.host = host;\n        this.staticSymbolCache = staticSymbolCache;\n        this.summaryCache = new Map();\n        this.loadedFilePaths = new Map();\n        this.importAs = new Map();\n        this.knownFileNameToModuleNames = new Map();\n    }\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.isLibraryFile = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        // Note: We need to strip the .ngfactory. file path,\n        // so this method also works for generated files\n        // (for which host.isSourceFile will always return false).\n        return !this.host.isSourceFile(stripGeneratedFileSuffix(filePath));\n    };\n    /**\n     * @param {?} filePath\n     * @param {?} referringSrcFileName\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.toSummaryFileName = /**\n     * @param {?} filePath\n     * @param {?} referringSrcFileName\n     * @return {?}\n     */\n    function (filePath, referringSrcFileName) {\n        return this.host.toSummaryFileName(filePath, referringSrcFileName);\n    };\n    /**\n     * @param {?} fileName\n     * @param {?} referringLibFileName\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.fromSummaryFileName = /**\n     * @param {?} fileName\n     * @param {?} referringLibFileName\n     * @return {?}\n     */\n    function (fileName, referringLibFileName) {\n        return this.host.fromSummaryFileName(fileName, referringLibFileName);\n    };\n    /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.resolveSummary = /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        var /** @type {?} */ rootSymbol = staticSymbol.members.length ?\n            this.staticSymbolCache.get(staticSymbol.filePath, staticSymbol.name) :\n            staticSymbol;\n        var /** @type {?} */ summary = this.summaryCache.get(rootSymbol);\n        if (!summary) {\n            this._loadSummaryFile(staticSymbol.filePath);\n            summary = /** @type {?} */ ((this.summaryCache.get(staticSymbol)));\n        }\n        return (rootSymbol === staticSymbol && summary) || null;\n    };\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.getSymbolsOf = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        if (this._loadSummaryFile(filePath)) {\n            return Array.from(this.summaryCache.keys()).filter(function (symbol) { return symbol.filePath === filePath; });\n        }\n        return null;\n    };\n    /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.getImportAs = /**\n     * @param {?} staticSymbol\n     * @return {?}\n     */\n    function (staticSymbol) {\n        staticSymbol.assertNoMembers();\n        return /** @type {?} */ ((this.importAs.get(staticSymbol)));\n    };\n    /**\n     * Converts a file path to a module name that can be used as an `import`.\n     */\n    /**\n     * Converts a file path to a module name that can be used as an `import`.\n     * @param {?} importedFilePath\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.getKnownModuleName = /**\n     * Converts a file path to a module name that can be used as an `import`.\n     * @param {?} importedFilePath\n     * @return {?}\n     */\n    function (importedFilePath) {\n        return this.knownFileNameToModuleNames.get(importedFilePath) || null;\n    };\n    /**\n     * @param {?} summary\n     * @return {?}\n     */\n    AotSummaryResolver.prototype.addSummary = /**\n     * @param {?} summary\n     * @return {?}\n     */\n    function (summary) { this.summaryCache.set(summary.symbol, summary); };\n    /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    AotSummaryResolver.prototype._loadSummaryFile = /**\n     * @param {?} filePath\n     * @return {?}\n     */\n    function (filePath) {\n        var _this = this;\n        var /** @type {?} */ hasSummary = this.loadedFilePaths.get(filePath);\n        if (hasSummary != null) {\n            return hasSummary;\n        }\n        var /** @type {?} */ json = null;\n        if (this.isLibraryFile(filePath)) {\n            var /** @type {?} */ summaryFilePath = summaryFileName(filePath);\n            try {\n                json = this.host.loadSummary(summaryFilePath);\n            }\n            catch (/** @type {?} */ e) {\n                console.error(\"Error loading summary file \" + summaryFilePath);\n                throw e;\n            }\n        }\n        hasSummary = json != null;\n        this.loadedFilePaths.set(filePath, hasSummary);\n        if (json) {\n            var _a = deserializeSummaries(this.staticSymbolCache, this, filePath, json), moduleName = _a.moduleName, summaries = _a.summaries, importAs = _a.importAs;\n            summaries.forEach(function (summary) { return _this.summaryCache.set(summary.symbol, summary); });\n            if (moduleName) {\n                this.knownFileNameToModuleNames.set(filePath, moduleName);\n            }\n            importAs.forEach(function (importAs) { _this.importAs.set(importAs.symbol, importAs.importAs); });\n        }\n        return hasSummary;\n    };\n    return AotSummaryResolver;\n}());\nexport { AotSummaryResolver };\nfunction AotSummaryResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    AotSummaryResolver.prototype.summaryCache;\n    /** @type {?} */\n    AotSummaryResolver.prototype.loadedFilePaths;\n    /** @type {?} */\n    AotSummaryResolver.prototype.importAs;\n    /** @type {?} */\n    AotSummaryResolver.prototype.knownFileNameToModuleNames;\n    /** @type {?} */\n    AotSummaryResolver.prototype.host;\n    /** @type {?} */\n    AotSummaryResolver.prototype.staticSymbolCache;\n}\n//# sourceMappingURL=summary_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CompilerConfig } from '../config';\nimport { ViewEncapsulation } from '../core';\nimport { DirectiveNormalizer } from '../directive_normalizer';\nimport { DirectiveResolver } from '../directive_resolver';\nimport { Lexer } from '../expression_parser/lexer';\nimport { Parser } from '../expression_parser/parser';\nimport { I18NHtmlParser } from '../i18n/i18n_html_parser';\nimport { InjectableCompiler } from '../injectable_compiler';\nimport { CompileMetadataResolver } from '../metadata_resolver';\nimport { HtmlParser } from '../ml_parser/html_parser';\nimport { NgModuleCompiler } from '../ng_module_compiler';\nimport { NgModuleResolver } from '../ng_module_resolver';\nimport { TypeScriptEmitter } from '../output/ts_emitter';\nimport { PipeResolver } from '../pipe_resolver';\nimport { DomElementSchemaRegistry } from '../schema/dom_element_schema_registry';\nimport { StyleCompiler } from '../style_compiler';\nimport { TemplateParser } from '../template_parser/template_parser';\nimport { syntaxError } from '../util';\nimport { TypeCheckCompiler } from '../view_compiler/type_check_compiler';\nimport { ViewCompiler } from '../view_compiler/view_compiler';\nimport { AotCompiler } from './compiler';\nimport { StaticReflector } from './static_reflector';\nimport { StaticSymbolCache } from './static_symbol';\nimport { StaticSymbolResolver } from './static_symbol_resolver';\nimport { AotSummaryResolver } from './summary_resolver';\n/**\n * @param {?} host\n * @return {?}\n */\nexport function createAotUrlResolver(host) {\n    return {\n        resolve: function (basePath, url) {\n            var /** @type {?} */ filePath = host.resourceNameToFileName(url, basePath);\n            if (!filePath) {\n                throw syntaxError(\"Couldn't resolve resource \" + url + \" from \" + basePath);\n            }\n            return filePath;\n        }\n    };\n}\n/**\n * Creates a new AotCompiler based on options and a host.\n * @param {?} compilerHost\n * @param {?} options\n * @param {?=} errorCollector\n * @return {?}\n */\nexport function createAotCompiler(compilerHost, options, errorCollector) {\n    var /** @type {?} */ translations = options.translations || '';\n    var /** @type {?} */ urlResolver = createAotUrlResolver(compilerHost);\n    var /** @type {?} */ symbolCache = new StaticSymbolCache();\n    var /** @type {?} */ summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);\n    var /** @type {?} */ symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);\n    var /** @type {?} */ staticReflector = new StaticReflector(summaryResolver, symbolResolver, [], [], errorCollector);\n    var /** @type {?} */ htmlParser;\n    if (!!options.enableIvy) {\n        // Ivy handles i18n at the compiler level so we must use a regular parser\n        htmlParser = /** @type {?} */ (new HtmlParser());\n    }\n    else {\n        htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat, options.missingTranslation, console);\n    }\n    var /** @type {?} */ config = new CompilerConfig({\n        defaultEncapsulation: ViewEncapsulation.Emulated,\n        useJit: false,\n        missingTranslation: options.missingTranslation,\n        preserveWhitespaces: options.preserveWhitespaces,\n        strictInjectionParameters: options.strictInjectionParameters,\n    });\n    var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return compilerHost.loadResource(url); } }, urlResolver, htmlParser, config);\n    var /** @type {?} */ expressionParser = new Parser(new Lexer());\n    var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();\n    var /** @type {?} */ tmplParser = new TemplateParser(config, staticReflector, expressionParser, elementSchemaRegistry, htmlParser, console, []);\n    var /** @type {?} */ resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector, errorCollector);\n    // TODO(vicb): do not pass options.i18nFormat here\n    var /** @type {?} */ viewCompiler = new ViewCompiler(staticReflector);\n    var /** @type {?} */ typeCheckCompiler = new TypeCheckCompiler(options, staticReflector);\n    var /** @type {?} */ compiler = new AotCompiler(config, options, compilerHost, staticReflector, resolver, tmplParser, new StyleCompiler(urlResolver), viewCompiler, typeCheckCompiler, new NgModuleCompiler(staticReflector), new InjectableCompiler(staticReflector, !!options.enableIvy), new TypeScriptEmitter(), summaryResolver, symbolResolver);\n    return { compiler: compiler, reflector: staticReflector };\n}\n//# sourceMappingURL=compiler_factory.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n * @template T\n */\nexport function Summary() { }\nfunction Summary_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Summary.prototype.symbol;\n    /** @type {?} */\n    Summary.prototype.metadata;\n    /** @type {?|undefined} */\n    Summary.prototype.type;\n}\n/**\n * @abstract\n * @template T\n */\nvar /**\n * @abstract\n * @template T\n */\nSummaryResolver = /** @class */ (function () {\n    function SummaryResolver() {\n    }\n    return SummaryResolver;\n}());\n/**\n * @abstract\n * @template T\n */\nexport { SummaryResolver };\nfunction SummaryResolver_tsickle_Closure_declarations() {\n    /**\n     * @abstract\n     * @param {?} fileName\n     * @return {?}\n     */\n    SummaryResolver.prototype.isLibraryFile = function (fileName) { };\n    /**\n     * @abstract\n     * @param {?} fileName\n     * @param {?} referringSrcFileName\n     * @return {?}\n     */\n    SummaryResolver.prototype.toSummaryFileName = function (fileName, referringSrcFileName) { };\n    /**\n     * @abstract\n     * @param {?} fileName\n     * @param {?} referringLibFileName\n     * @return {?}\n     */\n    SummaryResolver.prototype.fromSummaryFileName = function (fileName, referringLibFileName) { };\n    /**\n     * @abstract\n     * @param {?} reference\n     * @return {?}\n     */\n    SummaryResolver.prototype.resolveSummary = function (reference) { };\n    /**\n     * @abstract\n     * @param {?} filePath\n     * @return {?}\n     */\n    SummaryResolver.prototype.getSymbolsOf = function (filePath) { };\n    /**\n     * @abstract\n     * @param {?} reference\n     * @return {?}\n     */\n    SummaryResolver.prototype.getImportAs = function (reference) { };\n    /**\n     * @abstract\n     * @param {?} fileName\n     * @return {?}\n     */\n    SummaryResolver.prototype.getKnownModuleName = function (fileName) { };\n    /**\n     * @abstract\n     * @param {?} summary\n     * @return {?}\n     */\n    SummaryResolver.prototype.addSummary = function (summary) { };\n}\nvar JitSummaryResolver = /** @class */ (function () {\n    function JitSummaryResolver() {\n        this._summaries = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.isLibraryFile = /**\n     * @return {?}\n     */\n    function () { return false; };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.toSummaryFileName = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) { return fileName; };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.fromSummaryFileName = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) { return fileName; };\n    /**\n     * @param {?} reference\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.resolveSummary = /**\n     * @param {?} reference\n     * @return {?}\n     */\n    function (reference) {\n        return this._summaries.get(reference) || null;\n    };\n    /**\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.getSymbolsOf = /**\n     * @return {?}\n     */\n    function () { return []; };\n    /**\n     * @param {?} reference\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.getImportAs = /**\n     * @param {?} reference\n     * @return {?}\n     */\n    function (reference) { return reference; };\n    /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.getKnownModuleName = /**\n     * @param {?} fileName\n     * @return {?}\n     */\n    function (fileName) { return null; };\n    /**\n     * @param {?} summary\n     * @return {?}\n     */\n    JitSummaryResolver.prototype.addSummary = /**\n     * @param {?} summary\n     * @return {?}\n     */\n    function (summary) { this._summaries.set(summary.symbol, summary); };\n    return JitSummaryResolver;\n}());\nexport { JitSummaryResolver };\nfunction JitSummaryResolver_tsickle_Closure_declarations() {\n    /** @type {?} */\n    JitSummaryResolver.prototype._summaries;\n}\n//# sourceMappingURL=summary_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as o from './output_ast';\nimport { debugOutputAstAsTypeScript } from './ts_emitter';\n/**\n * @param {?} statements\n * @param {?} reflector\n * @return {?}\n */\nexport function interpretStatements(statements, reflector) {\n    var /** @type {?} */ ctx = new _ExecutionContext(null, null, null, new Map());\n    var /** @type {?} */ visitor = new StatementInterpreter(reflector);\n    visitor.visitAllStatements(statements, ctx);\n    var /** @type {?} */ result = {};\n    ctx.exports.forEach(function (exportName) { result[exportName] = ctx.vars.get(exportName); });\n    return result;\n}\n/**\n * @param {?} varNames\n * @param {?} varValues\n * @param {?} statements\n * @param {?} ctx\n * @param {?} visitor\n * @return {?}\n */\nfunction _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {\n    var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();\n    for (var /** @type {?} */ i = 0; i < varNames.length; i++) {\n        childCtx.vars.set(varNames[i], varValues[i]);\n    }\n    var /** @type {?} */ result = visitor.visitAllStatements(statements, childCtx);\n    return result ? result.value : null;\n}\nvar _ExecutionContext = /** @class */ (function () {\n    function _ExecutionContext(parent, instance, className, vars) {\n        this.parent = parent;\n        this.instance = instance;\n        this.className = className;\n        this.vars = vars;\n        this.exports = [];\n    }\n    /**\n     * @return {?}\n     */\n    _ExecutionContext.prototype.createChildWihtLocalVars = /**\n     * @return {?}\n     */\n    function () {\n        return new _ExecutionContext(this, this.instance, this.className, new Map());\n    };\n    return _ExecutionContext;\n}());\nfunction _ExecutionContext_tsickle_Closure_declarations() {\n    /** @type {?} */\n    _ExecutionContext.prototype.exports;\n    /** @type {?} */\n    _ExecutionContext.prototype.parent;\n    /** @type {?} */\n    _ExecutionContext.prototype.instance;\n    /** @type {?} */\n    _ExecutionContext.prototype.className;\n    /** @type {?} */\n    _ExecutionContext.prototype.vars;\n}\nvar ReturnValue = /** @class */ (function () {\n    function ReturnValue(value) {\n        this.value = value;\n    }\n    return ReturnValue;\n}());\nfunction ReturnValue_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ReturnValue.prototype.value;\n}\n/**\n * @param {?} _classStmt\n * @param {?} _ctx\n * @param {?} _visitor\n * @return {?}\n */\nfunction createDynamicClass(_classStmt, _ctx, _visitor) {\n    var /** @type {?} */ propertyDescriptors = {};\n    _classStmt.getters.forEach(function (getter) {\n        // Note: use `function` instead of arrow function to capture `this`\n        propertyDescriptors[getter.name] = {\n            configurable: false,\n            get: function () {\n                var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n                return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);\n            }\n        };\n    });\n    _classStmt.methods.forEach(function (method) {\n        var /** @type {?} */ paramNames = method.params.map(function (param) { return param.name; });\n        // Note: use `function` instead of arrow function to capture `this`\n        propertyDescriptors[/** @type {?} */ ((method.name))] = {\n            writable: false,\n            configurable: false,\n            value: function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n                return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);\n            }\n        };\n    });\n    var /** @type {?} */ ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });\n    // Note: use `function` instead of arrow function to capture `this`\n    var /** @type {?} */ ctor = function () {\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);\n        _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });\n        _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);\n    };\n    var /** @type {?} */ superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;\n    ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);\n    return ctor;\n}\nvar StatementInterpreter = /** @class */ (function () {\n    function StatementInterpreter(reflector) {\n        this.reflector = reflector;\n    }\n    /**\n     * @param {?} ast\n     * @return {?}\n     */\n    StatementInterpreter.prototype.debugAst = /**\n     * @param {?} ast\n     * @return {?}\n     */\n    function (ast) { return debugOutputAstAsTypeScript(ast); };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var /** @type {?} */ initialValue = stmt.value ? stmt.value.visitExpression(this, ctx) : undefined;\n        ctx.vars.set(stmt.name, initialValue);\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.exports.push(stmt.name);\n        }\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitWriteVarExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n        var /** @type {?} */ currCtx = ctx;\n        while (currCtx != null) {\n            if (currCtx.vars.has(expr.name)) {\n                currCtx.vars.set(expr.name, value);\n                return value;\n            }\n            currCtx = /** @type {?} */ ((currCtx.parent));\n        }\n        throw new Error(\"Not declared variable \" + expr.name);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ varName = /** @type {?} */ ((ast.name));\n        if (ast.builtin != null) {\n            switch (ast.builtin) {\n                case o.BuiltinVar.Super:\n                    return ctx.instance.__proto__;\n                case o.BuiltinVar.This:\n                    return ctx.instance;\n                case o.BuiltinVar.CatchError:\n                    varName = CATCH_ERROR_VAR;\n                    break;\n                case o.BuiltinVar.CatchStack:\n                    varName = CATCH_STACK_VAR;\n                    break;\n                default:\n                    throw new Error(\"Unknown builtin variable \" + ast.builtin);\n            }\n        }\n        var /** @type {?} */ currCtx = ctx;\n        while (currCtx != null) {\n            if (currCtx.vars.has(varName)) {\n                return currCtx.vars.get(varName);\n            }\n            currCtx = /** @type {?} */ ((currCtx.parent));\n        }\n        throw new Error(\"Not declared variable \" + varName);\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitWriteKeyExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n        var /** @type {?} */ index = expr.index.visitExpression(this, ctx);\n        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n        receiver[index] = value;\n        return value;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitWritePropExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n        var /** @type {?} */ value = expr.value.visitExpression(this, ctx);\n        receiver[expr.name] = value;\n        return value;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitInvokeMethodExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);\n        var /** @type {?} */ args = this.visitAllExpressions(expr.args, ctx);\n        var /** @type {?} */ result;\n        if (expr.builtin != null) {\n            switch (expr.builtin) {\n                case o.BuiltinMethod.ConcatArray:\n                    result = receiver.concat.apply(receiver, args);\n                    break;\n                case o.BuiltinMethod.SubscribeObservable:\n                    result = receiver.subscribe({ next: args[0] });\n                    break;\n                case o.BuiltinMethod.Bind:\n                    result = receiver.bind.apply(receiver, args);\n                    break;\n                default:\n                    throw new Error(\"Unknown builtin method \" + expr.builtin);\n            }\n        }\n        else {\n            result = receiver[/** @type {?} */ ((expr.name))].apply(receiver, args);\n        }\n        return result;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitInvokeFunctionExpr = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var /** @type {?} */ args = this.visitAllExpressions(stmt.args, ctx);\n        var /** @type {?} */ fnExpr = stmt.fn;\n        if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {\n            ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);\n            return null;\n        }\n        else {\n            var /** @type {?} */ fn = stmt.fn.visitExpression(this, ctx);\n            return fn.apply(null, args);\n        }\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitReturnStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        return new ReturnValue(stmt.value.visitExpression(this, ctx));\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var /** @type {?} */ clazz = createDynamicClass(stmt, ctx, this);\n        ctx.vars.set(stmt.name, clazz);\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.exports.push(stmt.name);\n        }\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitExpressionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        return stmt.expr.visitExpression(this, ctx);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitIfStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var /** @type {?} */ condition = stmt.condition.visitExpression(this, ctx);\n        if (condition) {\n            return this.visitAllStatements(stmt.trueCase, ctx);\n        }\n        else if (stmt.falseCase != null) {\n            return this.visitAllStatements(stmt.falseCase, ctx);\n        }\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitTryCatchStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        try {\n            return this.visitAllStatements(stmt.bodyStmts, ctx);\n        }\n        catch (/** @type {?} */ e) {\n            var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();\n            childCtx.vars.set(CATCH_ERROR_VAR, e);\n            childCtx.vars.set(CATCH_STACK_VAR, e.stack);\n            return this.visitAllStatements(stmt.catchStmts, childCtx);\n        }\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitThrowStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        throw stmt.error.visitExpression(this, ctx);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?=} context\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitCommentStmt = /**\n     * @param {?} stmt\n     * @param {?=} context\n     * @return {?}\n     */\n    function (stmt, context) { return null; };\n    /**\n     * @param {?} stmt\n     * @param {?=} context\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitJSDocCommentStmt = /**\n     * @param {?} stmt\n     * @param {?=} context\n     * @return {?}\n     */\n    function (stmt, context) { return null; };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitInstantiateExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ args = this.visitAllExpressions(ast.args, ctx);\n        var /** @type {?} */ clazz = ast.classExpr.visitExpression(this, ctx);\n        return new (clazz.bind.apply(clazz, [void 0].concat(args)))();\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitLiteralExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) { return ast.value; };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        return this.reflector.resolveExternalReference(ast.value);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitConditionalExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        if (ast.condition.visitExpression(this, ctx)) {\n            return ast.trueCase.visitExpression(this, ctx);\n        }\n        else if (ast.falseCase != null) {\n            return ast.falseCase.visitExpression(this, ctx);\n        }\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitNotExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        return !ast.condition.visitExpression(this, ctx);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitAssertNotNullExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        return ast.condition.visitExpression(this, ctx);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitCastExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        return ast.value.visitExpression(this, ctx);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ paramNames = ast.params.map(function (param) { return param.name; });\n        return _declareFn(paramNames, ast.statements, ctx, this);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var /** @type {?} */ paramNames = stmt.params.map(function (param) { return param.name; });\n        ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            ctx.exports.push(stmt.name);\n        }\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitBinaryOperatorExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var _this = this;\n        var /** @type {?} */ lhs = function () { return ast.lhs.visitExpression(_this, ctx); };\n        var /** @type {?} */ rhs = function () { return ast.rhs.visitExpression(_this, ctx); };\n        switch (ast.operator) {\n            case o.BinaryOperator.Equals:\n                return lhs() == rhs();\n            case o.BinaryOperator.Identical:\n                return lhs() === rhs();\n            case o.BinaryOperator.NotEquals:\n                return lhs() != rhs();\n            case o.BinaryOperator.NotIdentical:\n                return lhs() !== rhs();\n            case o.BinaryOperator.And:\n                return lhs() && rhs();\n            case o.BinaryOperator.Or:\n                return lhs() || rhs();\n            case o.BinaryOperator.Plus:\n                return lhs() + rhs();\n            case o.BinaryOperator.Minus:\n                return lhs() - rhs();\n            case o.BinaryOperator.Divide:\n                return lhs() / rhs();\n            case o.BinaryOperator.Multiply:\n                return lhs() * rhs();\n            case o.BinaryOperator.Modulo:\n                return lhs() % rhs();\n            case o.BinaryOperator.Lower:\n                return lhs() < rhs();\n            case o.BinaryOperator.LowerEquals:\n                return lhs() <= rhs();\n            case o.BinaryOperator.Bigger:\n                return lhs() > rhs();\n            case o.BinaryOperator.BiggerEquals:\n                return lhs() >= rhs();\n            default:\n                throw new Error(\"Unknown operator \" + ast.operator);\n        }\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitReadPropExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);\n        result = receiver[ast.name];\n        return result;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitReadKeyExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);\n        var /** @type {?} */ prop = ast.index.visitExpression(this, ctx);\n        return receiver[prop];\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitLiteralArrayExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        return this.visitAllExpressions(ast.entries, ctx);\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitLiteralMapExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var _this = this;\n        var /** @type {?} */ result = {};\n        ast.entries.forEach(function (entry) { return result[entry.key] = entry.value.visitExpression(_this, ctx); });\n        return result;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitCommaExpr = /**\n     * @param {?} ast\n     * @param {?} context\n     * @return {?}\n     */\n    function (ast, context) {\n        var /** @type {?} */ values = this.visitAllExpressions(ast.parts, context);\n        return values[values.length - 1];\n    };\n    /**\n     * @param {?} expressions\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitAllExpressions = /**\n     * @param {?} expressions\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expressions, ctx) {\n        var _this = this;\n        return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });\n    };\n    /**\n     * @param {?} statements\n     * @param {?} ctx\n     * @return {?}\n     */\n    StatementInterpreter.prototype.visitAllStatements = /**\n     * @param {?} statements\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (statements, ctx) {\n        for (var /** @type {?} */ i = 0; i < statements.length; i++) {\n            var /** @type {?} */ stmt = statements[i];\n            var /** @type {?} */ val = stmt.visitStatement(this, ctx);\n            if (val instanceof ReturnValue) {\n                return val;\n            }\n        }\n        return null;\n    };\n    return StatementInterpreter;\n}());\nfunction StatementInterpreter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StatementInterpreter.prototype.reflector;\n}\n/**\n * @param {?} varNames\n * @param {?} statements\n * @param {?} ctx\n * @param {?} visitor\n * @return {?}\n */\nfunction _declareFn(varNames, statements, ctx, visitor) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return _executeFunctionStatements(varNames, args, statements, ctx, visitor);\n    };\n}\nvar /** @type {?} */ CATCH_ERROR_VAR = 'error';\nvar /** @type {?} */ CATCH_STACK_VAR = 'stack';\n//# sourceMappingURL=output_interpreter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { identifierName } from '../compile_metadata';\nimport { EmitterVisitorContext } from './abstract_emitter';\nimport { AbstractJsEmitterVisitor } from './abstract_js_emitter';\nimport * as o from './output_ast';\n/**\n * @param {?} sourceUrl\n * @param {?} ctx\n * @param {?} vars\n * @param {?} createSourceMap\n * @return {?}\n */\nfunction evalExpression(sourceUrl, ctx, vars, createSourceMap) {\n    var /** @type {?} */ fnBody = ctx.toSource() + \"\\n//# sourceURL=\" + sourceUrl;\n    var /** @type {?} */ fnArgNames = [];\n    var /** @type {?} */ fnArgValues = [];\n    for (var /** @type {?} */ argName in vars) {\n        fnArgNames.push(argName);\n        fnArgValues.push(vars[argName]);\n    }\n    if (createSourceMap) {\n        // using `new Function(...)` generates a header, 1 line of no arguments, 2 lines otherwise\n        // E.g. ```\n        // function anonymous(a,b,c\n        // /**/) { ... }```\n        // We don't want to hard code this fact, so we auto detect it via an empty function first.\n        var /** @type {?} */ emptyFn = new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat('return null;'))))().toString();\n        var /** @type {?} */ headerLines = emptyFn.slice(0, emptyFn.indexOf('return null;')).split('\\n').length - 1;\n        fnBody += \"\\n\" + ctx.toSourceMapGenerator(sourceUrl, headerLines).toJsComment();\n    }\n    return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);\n}\n/**\n * @param {?} sourceUrl\n * @param {?} statements\n * @param {?} reflector\n * @param {?} createSourceMaps\n * @return {?}\n */\nexport function jitStatements(sourceUrl, statements, reflector, createSourceMaps) {\n    var /** @type {?} */ converter = new JitEmitterVisitor(reflector);\n    var /** @type {?} */ ctx = EmitterVisitorContext.createRoot();\n    converter.visitAllStatements(statements, ctx);\n    converter.createReturnStmt(ctx);\n    return evalExpression(sourceUrl, ctx, converter.getArgs(), createSourceMaps);\n}\nvar JitEmitterVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(JitEmitterVisitor, _super);\n    function JitEmitterVisitor(reflector) {\n        var _this = _super.call(this) || this;\n        _this.reflector = reflector;\n        _this._evalArgNames = [];\n        _this._evalArgValues = [];\n        _this._evalExportedVars = [];\n        return _this;\n    }\n    /**\n     * @param {?} ctx\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.createReturnStmt = /**\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ctx) {\n        var /** @type {?} */ stmt = new o.ReturnStatement(new o.LiteralMapExpr(this._evalExportedVars.map(function (resultVar) { return new o.LiteralMapEntry(resultVar, o.variable(resultVar), false); })));\n        stmt.visitStatement(this, ctx);\n    };\n    /**\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.getArgs = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ result = {};\n        for (var /** @type {?} */ i = 0; i < this._evalArgNames.length; i++) {\n            result[this._evalArgNames[i]] = this._evalArgValues[i];\n        }\n        return result;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.visitExternalExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        var /** @type {?} */ value = this.reflector.resolveExternalReference(ast.value);\n        var /** @type {?} */ id = this._evalArgValues.indexOf(value);\n        if (id === -1) {\n            id = this._evalArgValues.length;\n            this._evalArgValues.push(value);\n            var /** @type {?} */ name_1 = identifierName({ reference: value }) || 'val';\n            this._evalArgNames.push(\"jit_\" + name_1 + \"_\" + id);\n        }\n        ctx.print(ast, this._evalArgNames[id]);\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return _super.prototype.visitDeclareVarStmt.call(this, stmt, ctx);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return _super.prototype.visitDeclareFunctionStmt.call(this, stmt, ctx);\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    JitEmitterVisitor.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        if (stmt.hasModifier(o.StmtModifier.Exported)) {\n            this._evalExportedVars.push(stmt.name);\n        }\n        return _super.prototype.visitDeclareClassStmt.call(this, stmt, ctx);\n    };\n    return JitEmitterVisitor;\n}(AbstractJsEmitterVisitor));\nexport { JitEmitterVisitor };\nfunction JitEmitterVisitor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    JitEmitterVisitor.prototype._evalArgNames;\n    /** @type {?} */\n    JitEmitterVisitor.prototype._evalArgValues;\n    /** @type {?} */\n    JitEmitterVisitor.prototype._evalExportedVars;\n    /** @type {?} */\n    JitEmitterVisitor.prototype.reflector;\n}\n//# sourceMappingURL=output_jit.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as tslib_1 from \"tslib\";\nimport { AbstractEmitterVisitor, CATCH_ERROR_VAR, CATCH_STACK_VAR } from './abstract_emitter';\nimport * as o from './output_ast';\n/**\n * @abstract\n */\nvar /**\n * @abstract\n */\nAbstractJsEmitterVisitor = /** @class */ (function (_super) {\n    tslib_1.__extends(AbstractJsEmitterVisitor, _super);\n    function AbstractJsEmitterVisitor() {\n        return _super.call(this, false) || this;\n    }\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        var _this = this;\n        ctx.pushClass(stmt);\n        this._visitClassConstructor(stmt, ctx);\n        if (stmt.parent != null) {\n            ctx.print(stmt, stmt.name + \".prototype = Object.create(\");\n            stmt.parent.visitExpression(this, ctx);\n            ctx.println(stmt, \".prototype);\");\n        }\n        stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });\n        stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });\n        ctx.popClass();\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype._visitClassConstructor = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"function \" + stmt.name + \"(\");\n        if (stmt.constructorMethod != null) {\n            this._visitParams(stmt.constructorMethod.params, ctx);\n        }\n        ctx.println(stmt, \") {\");\n        ctx.incIndent();\n        if (stmt.constructorMethod != null) {\n            if (stmt.constructorMethod.body.length > 0) {\n                ctx.println(stmt, \"var self = this;\");\n                this.visitAllStatements(stmt.constructorMethod.body, ctx);\n            }\n        }\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} getter\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype._visitClassGetter = /**\n     * @param {?} stmt\n     * @param {?} getter\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, getter, ctx) {\n        ctx.println(stmt, \"Object.defineProperty(\" + stmt.name + \".prototype, '\" + getter.name + \"', { get: function() {\");\n        ctx.incIndent();\n        if (getter.body.length > 0) {\n            ctx.println(stmt, \"var self = this;\");\n            this.visitAllStatements(getter.body, ctx);\n        }\n        ctx.decIndent();\n        ctx.println(stmt, \"}});\");\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} method\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype._visitClassMethod = /**\n     * @param {?} stmt\n     * @param {?} method\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, method, ctx) {\n        ctx.print(stmt, stmt.name + \".prototype.\" + method.name + \" = function(\");\n        this._visitParams(method.params, ctx);\n        ctx.println(stmt, \") {\");\n        ctx.incIndent();\n        if (method.body.length > 0) {\n            ctx.println(stmt, \"var self = this;\");\n            this.visitAllStatements(method.body, ctx);\n        }\n        ctx.decIndent();\n        ctx.println(stmt, \"};\");\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitReadVarExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        if (ast.builtin === o.BuiltinVar.This) {\n            ctx.print(ast, 'self');\n        }\n        else if (ast.builtin === o.BuiltinVar.Super) {\n            throw new Error(\"'super' needs to be handled at a parent ast node, not at the variable level!\");\n        }\n        else {\n            _super.prototype.visitReadVarExpr.call(this, ast, ctx);\n        }\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"var \" + stmt.name);\n        if (stmt.value) {\n            ctx.print(stmt, ' = ');\n            stmt.value.visitExpression(this, ctx);\n        }\n        ctx.println(stmt, \";\");\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitCastExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ast.value.visitExpression(this, ctx);\n        return null;\n    };\n    /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = /**\n     * @param {?} expr\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (expr, ctx) {\n        var /** @type {?} */ fnExpr = expr.fn;\n        if (fnExpr instanceof o.ReadVarExpr && fnExpr.builtin === o.BuiltinVar.Super) {\n            /** @type {?} */ ((/** @type {?} */ ((ctx.currentClass)).parent)).visitExpression(this, ctx);\n            ctx.print(expr, \".call(this\");\n            if (expr.args.length > 0) {\n                ctx.print(expr, \", \");\n                this.visitAllExpressions(expr.args, ctx, ',');\n            }\n            ctx.print(expr, \")\");\n        }\n        else {\n            _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);\n        }\n        return null;\n    };\n    /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitFunctionExpr = /**\n     * @param {?} ast\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (ast, ctx) {\n        ctx.print(ast, \"function\" + (ast.name ? ' ' + ast.name : '') + \"(\");\n        this._visitParams(ast.params, ctx);\n        ctx.println(ast, \") {\");\n        ctx.incIndent();\n        this.visitAllStatements(ast.statements, ctx);\n        ctx.decIndent();\n        ctx.print(ast, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.print(stmt, \"function \" + stmt.name + \"(\");\n        this._visitParams(stmt.params, ctx);\n        ctx.println(stmt, \") {\");\n        ctx.incIndent();\n        this.visitAllStatements(stmt.statements, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = /**\n     * @param {?} stmt\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (stmt, ctx) {\n        ctx.println(stmt, \"try {\");\n        ctx.incIndent();\n        this.visitAllStatements(stmt.bodyStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"} catch (\" + CATCH_ERROR_VAR.name + \") {\");\n        ctx.incIndent();\n        var /** @type {?} */ catchStmts = [/** @type {?} */ (CATCH_STACK_VAR.set(CATCH_ERROR_VAR.prop('stack')).toDeclStmt(null, [\n                o.StmtModifier.Final\n            ]))].concat(stmt.catchStmts);\n        this.visitAllStatements(catchStmts, ctx);\n        ctx.decIndent();\n        ctx.println(stmt, \"}\");\n        return null;\n    };\n    /**\n     * @param {?} params\n     * @param {?} ctx\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype._visitParams = /**\n     * @param {?} params\n     * @param {?} ctx\n     * @return {?}\n     */\n    function (params, ctx) {\n        this.visitAllObjects(function (param) { return ctx.print(null, param.name); }, params, ctx, ',');\n    };\n    /**\n     * @param {?} method\n     * @return {?}\n     */\n    AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = /**\n     * @param {?} method\n     * @return {?}\n     */\n    function (method) {\n        var /** @type {?} */ name;\n        switch (method) {\n            case o.BuiltinMethod.ConcatArray:\n                name = 'concat';\n                break;\n            case o.BuiltinMethod.SubscribeObservable:\n                name = 'subscribe';\n                break;\n            case o.BuiltinMethod.Bind:\n                name = 'bind';\n                break;\n            default:\n                throw new Error(\"Unknown builtin method: \" + method);\n        }\n        return name;\n    };\n    return AbstractJsEmitterVisitor;\n}(AbstractEmitterVisitor));\n/**\n * @abstract\n */\nexport { AbstractJsEmitterVisitor };\n//# sourceMappingURL=abstract_js_emitter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { identifierName, ngModuleJitUrl, sharedStylesheetJitUrl, templateJitUrl, templateSourceUrl } from '../compile_metadata';\nimport { ConstantPool } from '../constant_pool';\nimport * as ir from '../output/output_ast';\nimport { interpretStatements } from '../output/output_interpreter';\nimport { jitStatements } from '../output/output_jit';\nimport { SyncAsync, stringify } from '../util';\n/**\n * @record\n */\nexport function ModuleWithComponentFactories() { }\nfunction ModuleWithComponentFactories_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.ngModuleFactory;\n    /** @type {?} */\n    ModuleWithComponentFactories.prototype.componentFactories;\n}\n/**\n * An internal module of the Angular compiler that begins with component types,\n * extracts templates, and eventually produces a compiled version of the component\n * ready for linking into an application.\n *\n * \\@security When compiling templates at runtime, you must ensure that the entire template comes\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\n * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nvar /**\n * An internal module of the Angular compiler that begins with component types,\n * extracts templates, and eventually produces a compiled version of the component\n * ready for linking into an application.\n *\n * \\@security When compiling templates at runtime, you must ensure that the entire template comes\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\n * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nJitCompiler = /** @class */ (function () {\n    function JitCompiler(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _summaryResolver, _reflector, _compilerConfig, _console, getExtraNgModuleProviders) {\n        this._metadataResolver = _metadataResolver;\n        this._templateParser = _templateParser;\n        this._styleCompiler = _styleCompiler;\n        this._viewCompiler = _viewCompiler;\n        this._ngModuleCompiler = _ngModuleCompiler;\n        this._summaryResolver = _summaryResolver;\n        this._reflector = _reflector;\n        this._compilerConfig = _compilerConfig;\n        this._console = _console;\n        this.getExtraNgModuleProviders = getExtraNgModuleProviders;\n        this._compiledTemplateCache = new Map();\n        this._compiledHostTemplateCache = new Map();\n        this._compiledDirectiveWrapperCache = new Map();\n        this._compiledNgModuleCache = new Map();\n        this._sharedStylesheetCount = 0;\n        this._addedAotSummaries = new Set();\n    }\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    JitCompiler.prototype.compileModuleSync = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return SyncAsync.assertSync(this._compileModuleAndComponents(moduleType, true));\n    };\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    JitCompiler.prototype.compileModuleAsync = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return Promise.resolve(this._compileModuleAndComponents(moduleType, false));\n    };\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    JitCompiler.prototype.compileModuleAndAllComponentsSync = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return SyncAsync.assertSync(this._compileModuleAndAllComponents(moduleType, true));\n    };\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    JitCompiler.prototype.compileModuleAndAllComponentsAsync = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        return Promise.resolve(this._compileModuleAndAllComponents(moduleType, false));\n    };\n    /**\n     * @param {?} component\n     * @return {?}\n     */\n    JitCompiler.prototype.getComponentFactory = /**\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        var /** @type {?} */ summary = this._metadataResolver.getDirectiveSummary(component);\n        return /** @type {?} */ (summary.componentFactory);\n    };\n    /**\n     * @param {?} summaries\n     * @return {?}\n     */\n    JitCompiler.prototype.loadAotSummaries = /**\n     * @param {?} summaries\n     * @return {?}\n     */\n    function (summaries) {\n        this.clearCache();\n        this._addAotSummaries(summaries);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    JitCompiler.prototype._addAotSummaries = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        if (this._addedAotSummaries.has(fn)) {\n            return;\n        }\n        this._addedAotSummaries.add(fn);\n        var /** @type {?} */ summaries = fn();\n        for (var /** @type {?} */ i = 0; i < summaries.length; i++) {\n            var /** @type {?} */ entry = summaries[i];\n            if (typeof entry === 'function') {\n                this._addAotSummaries(entry);\n            }\n            else {\n                var /** @type {?} */ summary = /** @type {?} */ (entry);\n                this._summaryResolver.addSummary({ symbol: summary.type.reference, metadata: null, type: summary });\n            }\n        }\n    };\n    /**\n     * @param {?} ref\n     * @return {?}\n     */\n    JitCompiler.prototype.hasAotSummary = /**\n     * @param {?} ref\n     * @return {?}\n     */\n    function (ref) { return !!this._summaryResolver.resolveSummary(ref); };\n    /**\n     * @param {?} ids\n     * @return {?}\n     */\n    JitCompiler.prototype._filterJitIdentifiers = /**\n     * @param {?} ids\n     * @return {?}\n     */\n    function (ids) {\n        var _this = this;\n        return ids.map(function (mod) { return mod.reference; }).filter(function (ref) { return !_this.hasAotSummary(ref); });\n    };\n    /**\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @return {?}\n     */\n    JitCompiler.prototype._compileModuleAndComponents = /**\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @return {?}\n     */\n    function (moduleType, isSync) {\n        var _this = this;\n        return SyncAsync.then(this._loadModules(moduleType, isSync), function () {\n            _this._compileComponents(moduleType, null);\n            return _this._compileModule(moduleType);\n        });\n    };\n    /**\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @return {?}\n     */\n    JitCompiler.prototype._compileModuleAndAllComponents = /**\n     * @param {?} moduleType\n     * @param {?} isSync\n     * @return {?}\n     */\n    function (moduleType, isSync) {\n        var _this = this;\n        return SyncAsync.then(this._loadModules(moduleType, isSync), function () {\n            var /** @type {?} */ componentFactories = [];\n            _this._compileComponents(moduleType, componentFactories);\n            return {\n                ngModuleFactory: _this._compileModule(moduleType),\n                componentFactories: componentFactories\n            };\n        });\n    };\n    /**\n     * @param {?} mainModule\n     * @param {?} isSync\n     * @return {?}\n     */\n    JitCompiler.prototype._loadModules = /**\n     * @param {?} mainModule\n     * @param {?} isSync\n     * @return {?}\n     */\n    function (mainModule, isSync) {\n        var _this = this;\n        var /** @type {?} */ loading = [];\n        var /** @type {?} */ mainNgModule = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(mainModule)));\n        // Note: for runtime compilation, we want to transitively compile all modules,\n        // so we also need to load the declared directives / pipes for all nested modules.\n        this._filterJitIdentifiers(mainNgModule.transitiveModule.modules).forEach(function (nestedNgModule) {\n            // getNgModuleMetadata only returns null if the value passed in is not an NgModule\n            var /** @type {?} */ moduleMeta = /** @type {?} */ ((_this._metadataResolver.getNgModuleMetadata(nestedNgModule)));\n            _this._filterJitIdentifiers(moduleMeta.declaredDirectives).forEach(function (ref) {\n                var /** @type {?} */ promise = _this._metadataResolver.loadDirectiveMetadata(moduleMeta.type.reference, ref, isSync);\n                if (promise) {\n                    loading.push(promise);\n                }\n            });\n            _this._filterJitIdentifiers(moduleMeta.declaredPipes)\n                .forEach(function (ref) { return _this._metadataResolver.getOrLoadPipeMetadata(ref); });\n        });\n        return SyncAsync.all(loading);\n    };\n    /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    JitCompiler.prototype._compileModule = /**\n     * @param {?} moduleType\n     * @return {?}\n     */\n    function (moduleType) {\n        var /** @type {?} */ ngModuleFactory = /** @type {?} */ ((this._compiledNgModuleCache.get(moduleType)));\n        if (!ngModuleFactory) {\n            var /** @type {?} */ moduleMeta = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(moduleType)));\n            // Always provide a bound Compiler\n            var /** @type {?} */ extraProviders = this.getExtraNgModuleProviders(moduleMeta.type.reference);\n            var /** @type {?} */ outputCtx = createOutputContext();\n            var /** @type {?} */ compileResult = this._ngModuleCompiler.compile(outputCtx, moduleMeta, extraProviders);\n            ngModuleFactory = this._interpretOrJit(ngModuleJitUrl(moduleMeta), outputCtx.statements)[compileResult.ngModuleFactoryVar];\n            this._compiledNgModuleCache.set(moduleMeta.type.reference, ngModuleFactory);\n        }\n        return ngModuleFactory;\n    };\n    /**\n     * @internal\n     */\n    /**\n     * \\@internal\n     * @param {?} mainModule\n     * @param {?} allComponentFactories\n     * @return {?}\n     */\n    JitCompiler.prototype._compileComponents = /**\n     * \\@internal\n     * @param {?} mainModule\n     * @param {?} allComponentFactories\n     * @return {?}\n     */\n    function (mainModule, allComponentFactories) {\n        var _this = this;\n        var /** @type {?} */ ngModule = /** @type {?} */ ((this._metadataResolver.getNgModuleMetadata(mainModule)));\n        var /** @type {?} */ moduleByJitDirective = new Map();\n        var /** @type {?} */ templates = new Set();\n        var /** @type {?} */ transJitModules = this._filterJitIdentifiers(ngModule.transitiveModule.modules);\n        transJitModules.forEach(function (localMod) {\n            var /** @type {?} */ localModuleMeta = /** @type {?} */ ((_this._metadataResolver.getNgModuleMetadata(localMod)));\n            _this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach(function (dirRef) {\n                moduleByJitDirective.set(dirRef, localModuleMeta);\n                var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirRef);\n                if (dirMeta.isComponent) {\n                    templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));\n                    if (allComponentFactories) {\n                        var /** @type {?} */ template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);\n                        templates.add(template);\n                        allComponentFactories.push(/** @type {?} */ (dirMeta.componentFactory));\n                    }\n                }\n            });\n        });\n        transJitModules.forEach(function (localMod) {\n            var /** @type {?} */ localModuleMeta = /** @type {?} */ ((_this._metadataResolver.getNgModuleMetadata(localMod)));\n            _this._filterJitIdentifiers(localModuleMeta.declaredDirectives).forEach(function (dirRef) {\n                var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirRef);\n                if (dirMeta.isComponent) {\n                    dirMeta.entryComponents.forEach(function (entryComponentType) {\n                        var /** @type {?} */ moduleMeta = /** @type {?} */ ((moduleByJitDirective.get(entryComponentType.componentType)));\n                        templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n                    });\n                }\n            });\n            localModuleMeta.entryComponents.forEach(function (entryComponentType) {\n                if (!_this.hasAotSummary(entryComponentType.componentType.reference)) {\n                    var /** @type {?} */ moduleMeta = /** @type {?} */ ((moduleByJitDirective.get(entryComponentType.componentType)));\n                    templates.add(_this._createCompiledHostTemplate(entryComponentType.componentType, moduleMeta));\n                }\n            });\n        });\n        templates.forEach(function (template) { return _this._compileTemplate(template); });\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    JitCompiler.prototype.clearCacheFor = /**\n     * @param {?} type\n     * @return {?}\n     */\n    function (type) {\n        this._compiledNgModuleCache.delete(type);\n        this._metadataResolver.clearCacheFor(type);\n        this._compiledHostTemplateCache.delete(type);\n        var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(type);\n        if (compiledTemplate) {\n            this._compiledTemplateCache.delete(type);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    JitCompiler.prototype.clearCache = /**\n     * @return {?}\n     */\n    function () {\n        // Note: don't clear the _addedAotSummaries, as they don't change!\n        this._metadataResolver.clearCache();\n        this._compiledTemplateCache.clear();\n        this._compiledHostTemplateCache.clear();\n        this._compiledNgModuleCache.clear();\n    };\n    /**\n     * @param {?} compType\n     * @param {?} ngModule\n     * @return {?}\n     */\n    JitCompiler.prototype._createCompiledHostTemplate = /**\n     * @param {?} compType\n     * @param {?} ngModule\n     * @return {?}\n     */\n    function (compType, ngModule) {\n        if (!ngModule) {\n            throw new Error(\"Component \" + stringify(compType) + \" is not part of any NgModule or the module has not been imported into your module.\");\n        }\n        var /** @type {?} */ compiledTemplate = this._compiledHostTemplateCache.get(compType);\n        if (!compiledTemplate) {\n            var /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata(compType);\n            assertComponent(compMeta);\n            var /** @type {?} */ hostMeta = this._metadataResolver.getHostComponentMetadata(compMeta, (/** @type {?} */ (compMeta.componentFactory)).viewDefFactory);\n            compiledTemplate =\n                new CompiledTemplate(true, compMeta.type, hostMeta, ngModule, [compMeta.type]);\n            this._compiledHostTemplateCache.set(compType, compiledTemplate);\n        }\n        return compiledTemplate;\n    };\n    /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @return {?}\n     */\n    JitCompiler.prototype._createCompiledTemplate = /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @return {?}\n     */\n    function (compMeta, ngModule) {\n        var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);\n        if (!compiledTemplate) {\n            assertComponent(compMeta);\n            compiledTemplate = new CompiledTemplate(false, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);\n            this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);\n        }\n        return compiledTemplate;\n    };\n    /**\n     * @param {?} template\n     * @return {?}\n     */\n    JitCompiler.prototype._compileTemplate = /**\n     * @param {?} template\n     * @return {?}\n     */\n    function (template) {\n        var _this = this;\n        if (template.isCompiled) {\n            return;\n        }\n        var /** @type {?} */ compMeta = template.compMeta;\n        var /** @type {?} */ externalStylesheetsByModuleUrl = new Map();\n        var /** @type {?} */ outputContext = createOutputContext();\n        var /** @type {?} */ componentStylesheet = this._styleCompiler.compileComponent(outputContext, compMeta); /** @type {?} */\n        ((compMeta.template)).externalStylesheets.forEach(function (stylesheetMeta) {\n            var /** @type {?} */ compiledStylesheet = _this._styleCompiler.compileStyles(createOutputContext(), compMeta, stylesheetMeta);\n            externalStylesheetsByModuleUrl.set(/** @type {?} */ ((stylesheetMeta.moduleUrl)), compiledStylesheet);\n        });\n        this._resolveStylesCompileResult(componentStylesheet, externalStylesheetsByModuleUrl);\n        var /** @type {?} */ pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });\n        var _a = this._parseTemplate(compMeta, template.ngModule, template.directives), parsedTemplate = _a.template, usedPipes = _a.pipes;\n        var /** @type {?} */ compileResult = this._viewCompiler.compileComponent(outputContext, compMeta, parsedTemplate, ir.variable(componentStylesheet.stylesVar), usedPipes);\n        var /** @type {?} */ evalResult = this._interpretOrJit(templateJitUrl(template.ngModule.type, template.compMeta), outputContext.statements);\n        var /** @type {?} */ viewClass = evalResult[compileResult.viewClassVar];\n        var /** @type {?} */ rendererType = evalResult[compileResult.rendererTypeVar];\n        template.compiled(viewClass, rendererType);\n    };\n    /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @return {?}\n     */\n    JitCompiler.prototype._parseTemplate = /**\n     * @param {?} compMeta\n     * @param {?} ngModule\n     * @param {?} directiveIdentifiers\n     * @return {?}\n     */\n    function (compMeta, ngModule, directiveIdentifiers) {\n        var _this = this;\n        // Note: ! is ok here as components always have a template.\n        var /** @type {?} */ preserveWhitespaces = /** @type {?} */ ((compMeta.template)).preserveWhitespaces;\n        var /** @type {?} */ directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });\n        var /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });\n        return this._templateParser.parse(compMeta, /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).htmlAst)), directives, pipes, ngModule.schemas, templateSourceUrl(ngModule.type, compMeta, /** @type {?} */ ((compMeta.template))), preserveWhitespaces);\n    };\n    /**\n     * @param {?} result\n     * @param {?} externalStylesheetsByModuleUrl\n     * @return {?}\n     */\n    JitCompiler.prototype._resolveStylesCompileResult = /**\n     * @param {?} result\n     * @param {?} externalStylesheetsByModuleUrl\n     * @return {?}\n     */\n    function (result, externalStylesheetsByModuleUrl) {\n        var _this = this;\n        result.dependencies.forEach(function (dep, i) {\n            var /** @type {?} */ nestedCompileResult = /** @type {?} */ ((externalStylesheetsByModuleUrl.get(dep.moduleUrl)));\n            var /** @type {?} */ nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);\n            dep.setValue(nestedStylesArr);\n        });\n    };\n    /**\n     * @param {?} result\n     * @param {?} externalStylesheetsByModuleUrl\n     * @return {?}\n     */\n    JitCompiler.prototype._resolveAndEvalStylesCompileResult = /**\n     * @param {?} result\n     * @param {?} externalStylesheetsByModuleUrl\n     * @return {?}\n     */\n    function (result, externalStylesheetsByModuleUrl) {\n        this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);\n        return this._interpretOrJit(sharedStylesheetJitUrl(result.meta, this._sharedStylesheetCount++), result.outputCtx.statements)[result.stylesVar];\n    };\n    /**\n     * @param {?} sourceUrl\n     * @param {?} statements\n     * @return {?}\n     */\n    JitCompiler.prototype._interpretOrJit = /**\n     * @param {?} sourceUrl\n     * @param {?} statements\n     * @return {?}\n     */\n    function (sourceUrl, statements) {\n        if (!this._compilerConfig.useJit) {\n            return interpretStatements(statements, this._reflector);\n        }\n        else {\n            return jitStatements(sourceUrl, statements, this._reflector, this._compilerConfig.jitDevMode);\n        }\n    };\n    return JitCompiler;\n}());\n/**\n * An internal module of the Angular compiler that begins with component types,\n * extracts templates, and eventually produces a compiled version of the component\n * ready for linking into an application.\n *\n * \\@security When compiling templates at runtime, you must ensure that the entire template comes\n * from a trusted source. Attacker-controlled data introduced by a template could expose your\n * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).\n */\nexport { JitCompiler };\nfunction JitCompiler_tsickle_Closure_declarations() {\n    /** @type {?} */\n    JitCompiler.prototype._compiledTemplateCache;\n    /** @type {?} */\n    JitCompiler.prototype._compiledHostTemplateCache;\n    /** @type {?} */\n    JitCompiler.prototype._compiledDirectiveWrapperCache;\n    /** @type {?} */\n    JitCompiler.prototype._compiledNgModuleCache;\n    /** @type {?} */\n    JitCompiler.prototype._sharedStylesheetCount;\n    /** @type {?} */\n    JitCompiler.prototype._addedAotSummaries;\n    /** @type {?} */\n    JitCompiler.prototype._metadataResolver;\n    /** @type {?} */\n    JitCompiler.prototype._templateParser;\n    /** @type {?} */\n    JitCompiler.prototype._styleCompiler;\n    /** @type {?} */\n    JitCompiler.prototype._viewCompiler;\n    /** @type {?} */\n    JitCompiler.prototype._ngModuleCompiler;\n    /** @type {?} */\n    JitCompiler.prototype._summaryResolver;\n    /** @type {?} */\n    JitCompiler.prototype._reflector;\n    /** @type {?} */\n    JitCompiler.prototype._compilerConfig;\n    /** @type {?} */\n    JitCompiler.prototype._console;\n    /** @type {?} */\n    JitCompiler.prototype.getExtraNgModuleProviders;\n}\nvar CompiledTemplate = /** @class */ (function () {\n    function CompiledTemplate(isHost, compType, compMeta, ngModule, directives) {\n        this.isHost = isHost;\n        this.compType = compType;\n        this.compMeta = compMeta;\n        this.ngModule = ngModule;\n        this.directives = directives;\n        this._viewClass = /** @type {?} */ ((null));\n        this.isCompiled = false;\n    }\n    /**\n     * @param {?} viewClass\n     * @param {?} rendererType\n     * @return {?}\n     */\n    CompiledTemplate.prototype.compiled = /**\n     * @param {?} viewClass\n     * @param {?} rendererType\n     * @return {?}\n     */\n    function (viewClass, rendererType) {\n        this._viewClass = viewClass;\n        (/** @type {?} */ (this.compMeta.componentViewType)).setDelegate(viewClass);\n        for (var /** @type {?} */ prop in rendererType) {\n            (/** @type {?} */ (this.compMeta.rendererType))[prop] = rendererType[prop];\n        }\n        this.isCompiled = true;\n    };\n    return CompiledTemplate;\n}());\nfunction CompiledTemplate_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CompiledTemplate.prototype._viewClass;\n    /** @type {?} */\n    CompiledTemplate.prototype.isCompiled;\n    /** @type {?} */\n    CompiledTemplate.prototype.isHost;\n    /** @type {?} */\n    CompiledTemplate.prototype.compType;\n    /** @type {?} */\n    CompiledTemplate.prototype.compMeta;\n    /** @type {?} */\n    CompiledTemplate.prototype.ngModule;\n    /** @type {?} */\n    CompiledTemplate.prototype.directives;\n}\n/**\n * @param {?} meta\n * @return {?}\n */\nfunction assertComponent(meta) {\n    if (!meta.isComponent) {\n        throw new Error(\"Could not compile '\" + identifierName(meta.type) + \"' because it is not a component.\");\n    }\n}\n/**\n * @return {?}\n */\nfunction createOutputContext() {\n    var /** @type {?} */ importExpr = function (symbol) {\n        return ir.importExpr({ name: identifierName(symbol), moduleName: null, runtime: symbol });\n    };\n    return { statements: [], genFilePath: '', importExpr: importExpr, constantPool: new ConstantPool() };\n}\n//# sourceMappingURL=compiler.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Create a {\\@link UrlResolver} with no package prefix.\n * @return {?}\n */\nexport function createUrlResolverWithoutPackagePrefix() {\n    return new UrlResolver();\n}\n/**\n * @return {?}\n */\nexport function createOfflineCompileUrlResolver() {\n    return new UrlResolver('.');\n}\n/**\n * @record\n */\nexport function UrlResolverCtor() { }\nfunction UrlResolverCtor_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    new (packagePrefix?: string|null): UrlResolver;\n    */\n}\nexport var /** @type {?} */ UrlResolver = /** @class */ (function () {\n    function UrlResolverImpl(_packagePrefix) {\n        if (_packagePrefix === void 0) { _packagePrefix = null; }\n        this._packagePrefix = _packagePrefix;\n    }\n    /**\n     * Resolves the `url` given the `baseUrl`:\n     * - when the `url` is null, the `baseUrl` is returned,\n     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n     * `baseUrl` and `url`,\n     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n     * returned as is (ignoring the `baseUrl`)\n     */\n    /**\n     * Resolves the `url` given the `baseUrl`:\n     * - when the `url` is null, the `baseUrl` is returned,\n     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n     * `baseUrl` and `url`,\n     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n     * returned as is (ignoring the `baseUrl`)\n     * @param {?} baseUrl\n     * @param {?} url\n     * @return {?}\n     */\n    UrlResolverImpl.prototype.resolve = /**\n     * Resolves the `url` given the `baseUrl`:\n     * - when the `url` is null, the `baseUrl` is returned,\n     * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of\n     * `baseUrl` and `url`,\n     * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is\n     * returned as is (ignoring the `baseUrl`)\n     * @param {?} baseUrl\n     * @param {?} url\n     * @return {?}\n     */\n    function (baseUrl, url) {\n        var /** @type {?} */ resolvedUrl = url;\n        if (baseUrl != null && baseUrl.length > 0) {\n            resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);\n        }\n        var /** @type {?} */ resolvedParts = _split(resolvedUrl);\n        var /** @type {?} */ prefix = this._packagePrefix;\n        if (prefix != null && resolvedParts != null &&\n            resolvedParts[_ComponentIndex.Scheme] == 'package') {\n            var /** @type {?} */ path = resolvedParts[_ComponentIndex.Path];\n            prefix = prefix.replace(/\\/+$/, '');\n            path = path.replace(/^\\/+/, '');\n            return prefix + \"/\" + path;\n        }\n        return resolvedUrl;\n    };\n    return UrlResolverImpl;\n}());\n/**\n * Extract the scheme of a URL.\n * @param {?} url\n * @return {?}\n */\nexport function getUrlScheme(url) {\n    var /** @type {?} */ match = _split(url);\n    return (match && match[_ComponentIndex.Scheme]) || '';\n}\n/**\n * Builds a URI string from already-encoded parts.\n *\n * No encoding is performed.  Any component may be omitted as either null or\n * undefined.\n *\n * @param {?=} opt_scheme The scheme such as 'http'.\n * @param {?=} opt_userInfo The user name before the '\\@'.\n * @param {?=} opt_domain The domain such as 'www.google.com', already\n *     URI-encoded.\n * @param {?=} opt_port The port number.\n * @param {?=} opt_path The path, already URI-encoded.  If it is not\n *     empty, it must begin with a slash.\n * @param {?=} opt_queryData The URI-encoded query data.\n * @param {?=} opt_fragment The URI-encoded fragment identifier.\n * @return {?} The fully combined URI.\n */\nfunction _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {\n    var /** @type {?} */ out = [];\n    if (opt_scheme != null) {\n        out.push(opt_scheme + ':');\n    }\n    if (opt_domain != null) {\n        out.push('//');\n        if (opt_userInfo != null) {\n            out.push(opt_userInfo + '@');\n        }\n        out.push(opt_domain);\n        if (opt_port != null) {\n            out.push(':' + opt_port);\n        }\n    }\n    if (opt_path != null) {\n        out.push(opt_path);\n    }\n    if (opt_queryData != null) {\n        out.push('?' + opt_queryData);\n    }\n    if (opt_fragment != null) {\n        out.push('#' + opt_fragment);\n    }\n    return out.join('');\n}\n/**\n * A regular expression for breaking a URI into its component parts.\n *\n * {\\@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says\n * As the \"first-match-wins\" algorithm is identical to the \"greedy\"\n * disambiguation method used by POSIX regular expressions, it is natural and\n * commonplace to use a regular expression for parsing the potential five\n * components of a URI reference.\n *\n * The following line is the regular expression for breaking-down a\n * well-formed URI reference into its components.\n *\n * <pre>\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n * </pre>\n *\n * The numbers in the second line above are only to assist readability; they\n * indicate the reference points for each subexpression (i.e., each paired\n * parenthesis). We refer to the value matched for subexpression <n> as $<n>.\n * For example, matching the above expression to\n * <pre>\n *     http://www.ics.uci.edu/pub/ietf/uri/#Related\n * </pre>\n * results in the following subexpression matches:\n * <pre>\n *    $1 = http:\n *    $2 = http\n *    $3 = //www.ics.uci.edu\n *    $4 = www.ics.uci.edu\n *    $5 = /pub/ietf/uri/\n *    $6 = <undefined>\n *    $7 = <undefined>\n *    $8 = #Related\n *    $9 = Related\n * </pre>\n * where <undefined> indicates that the component is not present, as is the\n * case for the query component in the above example. Therefore, we can\n * determine the value of the five components as\n * <pre>\n *    scheme    = $2\n *    authority = $4\n *    path      = $5\n *    query     = $7\n *    fragment  = $9\n * </pre>\n *\n * The regular expression has been modified slightly to expose the\n * userInfo, domain, and port separately from the authority.\n * The modified version yields\n * <pre>\n *    $1 = http              scheme\n *    $2 = <undefined>       userInfo -\\\n *    $3 = www.ics.uci.edu   domain     | authority\n *    $4 = <undefined>       port     -/\n *    $5 = /pub/ietf/uri/    path\n *    $6 = <undefined>       query without ?\n *    $7 = Related           fragment without #\n * </pre>\n * \\@internal\n */\nvar /** @type {?} */ _splitRe = new RegExp('^' +\n    '(?:' +\n    '([^:/?#.]+)' + // scheme - ignore special characters\n    ':)?' +\n    '(?://' +\n    '(?:([^/?#]*)@)?' + // userInfo\n    '([\\\\w\\\\d\\\\-\\\\u0100-\\\\uffff.%]*)' + // domain - restrict to letters,\n    '(?::([0-9]+))?' + // port\n    ')?' +\n    '([^?#]+)?' + // path\n    '(?:\\\\?([^#]*))?' + // query\n    '(?:#(.*))?' + // fragment\n    '$');\n/** @enum {number} */\nvar _ComponentIndex = {\n    Scheme: 1,\n    UserInfo: 2,\n    Domain: 3,\n    Port: 4,\n    Path: 5,\n    QueryData: 6,\n    Fragment: 7,\n};\n_ComponentIndex[_ComponentIndex.Scheme] = \"Scheme\";\n_ComponentIndex[_ComponentIndex.UserInfo] = \"UserInfo\";\n_ComponentIndex[_ComponentIndex.Domain] = \"Domain\";\n_ComponentIndex[_ComponentIndex.Port] = \"Port\";\n_ComponentIndex[_ComponentIndex.Path] = \"Path\";\n_ComponentIndex[_ComponentIndex.QueryData] = \"QueryData\";\n_ComponentIndex[_ComponentIndex.Fragment] = \"Fragment\";\n/**\n * Splits a URI into its component parts.\n *\n * Each component can be accessed via the component indices; for example:\n * <pre>\n * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];\n * </pre>\n *\n * @param {?} uri The URI string to examine.\n * @return {?} Each component still URI-encoded.\n *     Each component that is present will contain the encoded value, whereas\n *     components that are not present will be undefined or empty, depending\n *     on the browser's regular expression implementation.  Never null, since\n *     arbitrary strings may still look like path names.\n */\nfunction _split(uri) {\n    return /** @type {?} */ ((uri.match(_splitRe)));\n}\n/**\n * Removes dot segments in given path component, as described in\n * RFC 3986, section 5.2.4.\n *\n * @param {?} path A non-empty path component.\n * @return {?} Path component with removed dot segments.\n */\nfunction _removeDotSegments(path) {\n    if (path == '/')\n        return '/';\n    var /** @type {?} */ leadingSlash = path[0] == '/' ? '/' : '';\n    var /** @type {?} */ trailingSlash = path[path.length - 1] === '/' ? '/' : '';\n    var /** @type {?} */ segments = path.split('/');\n    var /** @type {?} */ out = [];\n    var /** @type {?} */ up = 0;\n    for (var /** @type {?} */ pos = 0; pos < segments.length; pos++) {\n        var /** @type {?} */ segment = segments[pos];\n        switch (segment) {\n            case '':\n            case '.':\n                break;\n            case '..':\n                if (out.length > 0) {\n                    out.pop();\n                }\n                else {\n                    up++;\n                }\n                break;\n            default:\n                out.push(segment);\n        }\n    }\n    if (leadingSlash == '') {\n        while (up-- > 0) {\n            out.unshift('..');\n        }\n        if (out.length === 0)\n            out.push('.');\n    }\n    return leadingSlash + out.join('/') + trailingSlash;\n}\n/**\n * Takes an array of the parts from split and canonicalizes the path part\n * and then joins all the parts.\n * @param {?} parts\n * @return {?}\n */\nfunction _joinAndCanonicalizePath(parts) {\n    var /** @type {?} */ path = parts[_ComponentIndex.Path];\n    path = path == null ? '' : _removeDotSegments(path);\n    parts[_ComponentIndex.Path] = path;\n    return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);\n}\n/**\n * Resolves a URL.\n * @param {?} base The URL acting as the base URL.\n * @param {?} url\n * @return {?}\n */\nfunction _resolveUrl(base, url) {\n    var /** @type {?} */ parts = _split(encodeURI(url));\n    var /** @type {?} */ baseParts = _split(base);\n    if (parts[_ComponentIndex.Scheme] != null) {\n        return _joinAndCanonicalizePath(parts);\n    }\n    else {\n        parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];\n    }\n    for (var /** @type {?} */ i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {\n        if (parts[i] == null) {\n            parts[i] = baseParts[i];\n        }\n    }\n    if (parts[_ComponentIndex.Path][0] == '/') {\n        return _joinAndCanonicalizePath(parts);\n    }\n    var /** @type {?} */ path = baseParts[_ComponentIndex.Path];\n    if (path == null)\n        path = '/';\n    var /** @type {?} */ index = path.lastIndexOf('/');\n    path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];\n    parts[_ComponentIndex.Path] = path;\n    return _joinAndCanonicalizePath(parts);\n}\n//# sourceMappingURL=url_resolver.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An interface for retrieving documents by URL that the compiler uses\n * to load templates.\n */\nvar /**\n * An interface for retrieving documents by URL that the compiler uses\n * to load templates.\n */\nResourceLoader = /** @class */ (function () {\n    function ResourceLoader() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    ResourceLoader.prototype.get = /**\n     * @param {?} url\n     * @return {?}\n     */\n    function (url) { return ''; };\n    return ResourceLoader;\n}());\n/**\n * An interface for retrieving documents by URL that the compiler uses\n * to load templates.\n */\nexport { ResourceLoader };\n//# sourceMappingURL=resource_loader.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { analyzeAndValidateNgModules } from '../aot/compiler';\nimport { createAotUrlResolver } from '../aot/compiler_factory';\nimport { StaticReflector } from '../aot/static_reflector';\nimport { StaticSymbolCache } from '../aot/static_symbol';\nimport { StaticSymbolResolver } from '../aot/static_symbol_resolver';\nimport { AotSummaryResolver } from '../aot/summary_resolver';\nimport { CompilerConfig } from '../config';\nimport { ViewEncapsulation } from '../core';\nimport { DirectiveNormalizer } from '../directive_normalizer';\nimport { DirectiveResolver } from '../directive_resolver';\nimport { CompileMetadataResolver } from '../metadata_resolver';\nimport { HtmlParser } from '../ml_parser/html_parser';\nimport { InterpolationConfig } from '../ml_parser/interpolation_config';\nimport { NgModuleResolver } from '../ng_module_resolver';\nimport { PipeResolver } from '../pipe_resolver';\nimport { DomElementSchemaRegistry } from '../schema/dom_element_schema_registry';\nimport { MessageBundle } from './message_bundle';\n/**\n * The host of the Extractor disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n * @record\n */\nexport function ExtractorHost() { }\nfunction ExtractorHost_tsickle_Closure_declarations() {\n    /**\n     * Converts a path that refers to a resource into an absolute filePath\n     * that can be lateron used for loading the resource via `loadResource.\n     * @type {?}\n     */\n    ExtractorHost.prototype.resourceNameToFileName;\n    /**\n     * Loads a resource (e.g. html / css)\n     * @type {?}\n     */\n    ExtractorHost.prototype.loadResource;\n}\nvar Extractor = /** @class */ (function () {\n    function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {\n        this.host = host;\n        this.staticSymbolResolver = staticSymbolResolver;\n        this.messageBundle = messageBundle;\n        this.metadataResolver = metadataResolver;\n    }\n    /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    Extractor.prototype.extract = /**\n     * @param {?} rootFiles\n     * @return {?}\n     */\n    function (rootFiles) {\n        var _this = this;\n        var _a = analyzeAndValidateNgModules(rootFiles, this.host, this.staticSymbolResolver, this.metadataResolver), files = _a.files, ngModules = _a.ngModules;\n        return Promise\n            .all(ngModules.map(function (ngModule) {\n            return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);\n        }))\n            .then(function () {\n            var /** @type {?} */ errors = [];\n            files.forEach(function (file) {\n                var /** @type {?} */ compMetas = [];\n                file.directives.forEach(function (directiveType) {\n                    var /** @type {?} */ dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);\n                    if (dirMeta && dirMeta.isComponent) {\n                        compMetas.push(dirMeta);\n                    }\n                });\n                compMetas.forEach(function (compMeta) {\n                    var /** @type {?} */ html = /** @type {?} */ ((/** @type {?} */ ((compMeta.template)).template));\n                    var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(/** @type {?} */ ((compMeta.template)).interpolation);\n                    errors.push.apply(errors, /** @type {?} */ ((_this.messageBundle.updateFromTemplate(html, file.fileName, interpolationConfig))));\n                });\n            });\n            if (errors.length) {\n                throw new Error(errors.map(function (e) { return e.toString(); }).join('\\n'));\n            }\n            return _this.messageBundle;\n        });\n    };\n    /**\n     * @param {?} host\n     * @param {?} locale\n     * @return {?}\n     */\n    Extractor.create = /**\n     * @param {?} host\n     * @param {?} locale\n     * @return {?}\n     */\n    function (host, locale) {\n        var /** @type {?} */ htmlParser = new HtmlParser();\n        var /** @type {?} */ urlResolver = createAotUrlResolver(host);\n        var /** @type {?} */ symbolCache = new StaticSymbolCache();\n        var /** @type {?} */ summaryResolver = new AotSummaryResolver(host, symbolCache);\n        var /** @type {?} */ staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\n        var /** @type {?} */ staticReflector = new StaticReflector(summaryResolver, staticSymbolResolver);\n        var /** @type {?} */ config = new CompilerConfig({ defaultEncapsulation: ViewEncapsulation.Emulated, useJit: false });\n        var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return host.loadResource(url); } }, urlResolver, htmlParser, config);\n        var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();\n        var /** @type {?} */ resolver = new CompileMetadataResolver(config, htmlParser, new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, console, symbolCache, staticReflector);\n        // TODO(vicb): implicit tags & attributes\n        var /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {}, locale);\n        var /** @type {?} */ extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n        return { extractor: extractor, staticReflector: staticReflector };\n    };\n    return Extractor;\n}());\nexport { Extractor };\nfunction Extractor_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Extractor.prototype.host;\n    /** @type {?} */\n    Extractor.prototype.staticSymbolResolver;\n    /** @type {?} */\n    Extractor.prototype.messageBundle;\n    /** @type {?} */\n    Extractor.prototype.metadataResolver;\n}\n//# sourceMappingURL=extractor.js.map"]}