{"version":3,"file":"r3_pipe_compiler.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/render3/r3_pipe_compiler.ts"],"names":[],"mappings":";;;;;;;;;;;AAQA,OAAO,EAAgD,cAAc,EAAC,MAAM,qBAAqB,CAAC;AAGlG,OAAO,KAAK,CAAC,MAAM,sBAAsB,CAAC;AAC1C,OAAO,EAAgB,KAAK,EAAC,MAAM,SAAS,CAAC;AAE7C,OAAO,EAAC,WAAW,IAAI,EAAE,EAAC,MAAM,kBAAkB,CAAC;AACnD,OAAO,EAAC,wBAAwB,EAAa,MAAM,YAAY,CAAC;AAChE,OAAO,EAAC,aAAa,EAAC,MAAM,oBAAoB,CAAC;;;;;;;;;AAKjD,MAAM,sBACF,SAAwB,EAAE,IAAyB,EAAE,SAA2B,EAChF,IAAgB;IAClB,qBAAM,mBAAmB,GAA0D,EAAE,CAAC;;IAGtF,mBAAmB,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;;IAGpF,mBAAmB,CAAC,IAAI,CACpB,EAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;;IAGpF,qBAAM,eAAe,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;IAC3E,mBAAmB,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,eAAe,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;;IAGlF,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,mBAAmB,CAAC,IAAI,CAAC,EAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC;KAChF;IAED,qBAAM,SAAS,sBAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IAC9C,SAAS,IAAI,KAAK,CAAC,gCAA8B,IAAI,CAAC,IAAM,CAAC,CAAC;IAE9D,qBAAM,eAAe,GAAG,SAAS,CAAC,YAAY,CAAC,cAAc,cAAqB,CAAC;IACnF,qBAAM,kBAAkB,GACpB,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;IAE5E,EAAE,CAAC,CAAC,IAAI,yBAA4B,CAAC,CAAC,CAAC;QACrC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAC1B,SAAS,EACP,IAAI,eACL,CAAC,IAAI,CAAC,CAAC,UAAU,CACd,eAAe,aACf,CAAC,CAAC,aAAa,kBACX,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,EACpB,kBAAkB,CAAC,CAAC,gBAC7B,EAAE,0BACS,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,gBAC1C,EAAE,CAAC,CAAC,CAAC;KACvB;IAAC,IAAI,CAAC,CAAC;;QAEN,qBAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;;QAGjE,SAAS,CAAC,UAAU,CAAC,IAAI,CACrB,IAAI,CAAC,CAAC,WAAW,CAAC,wBAAwB,CAAC,EAC3C,cAAc,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;KAC5E;CACF","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompilePipeMetadata, identifierName} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\nimport {DefinitionKind} from '../constant_pool';\nimport * as o from '../output/output_ast';\nimport {OutputContext, error} from '../util';\n\nimport {Identifiers as R3} from './r3_identifiers';\nimport {BUILD_OPTIMIZER_COLOCATE, OutputMode} from './r3_types';\nimport {createFactory} from './r3_view_compiler';\n\n/**\n * Write a pipe definition to the output context.\n */\nexport function compilePipe(\n    outputCtx: OutputContext, pipe: CompilePipeMetadata, reflector: CompileReflector,\n    mode: OutputMode) {\n  const definitionMapValues: {key: string, quoted: boolean, value: o.Expression}[] = [];\n\n  // e.g. `name: 'myPipe'`\n  definitionMapValues.push({key: 'name', value: o.literal(pipe.name), quoted: false});\n\n  // e.g. `type: MyPipe`\n  definitionMapValues.push(\n      {key: 'type', value: outputCtx.importExpr(pipe.type.reference), quoted: false});\n\n  // e.g. factory: function MyPipe_Factory() { return new MyPipe(); },\n  const templateFactory = createFactory(pipe.type, outputCtx, reflector, []);\n  definitionMapValues.push({key: 'factory', value: templateFactory, quoted: false});\n\n  // e.g. pure: true\n  if (pipe.pure) {\n    definitionMapValues.push({key: 'pure', value: o.literal(true), quoted: false});\n  }\n\n  const className = identifierName(pipe.type) !;\n  className || error(`Cannot resolve the name of ${pipe.type}`);\n\n  const definitionField = outputCtx.constantPool.propertyNameOf(DefinitionKind.Pipe);\n  const definitionFunction =\n      o.importExpr(R3.definePipe).callFn([o.literalMap(definitionMapValues)]);\n\n  if (mode === OutputMode.PartialClass) {\n    outputCtx.statements.push(new o.ClassStmt(\n        /* name */ className,\n        /* parent */ null,\n        /* fields */[new o.ClassField(\n            /* name */ definitionField,\n            /* type */ o.INFERRED_TYPE,\n            /* modifiers */[o.StmtModifier.Static],\n            /* initializer */ definitionFunction)],\n        /* getters */[],\n        /* constructorMethod */ new o.ClassMethod(null, [], []),\n        /* methods */[]));\n  } else {\n    // Create back-patch definition.\n    const classReference = outputCtx.importExpr(pipe.type.reference);\n\n    // Create the back-patch statement\n    outputCtx.statements.push(\n        new o.CommentStmt(BUILD_OPTIMIZER_COLOCATE),\n        classReference.prop(definitionField).set(definitionFunction).toStmt());\n  }\n}"]}