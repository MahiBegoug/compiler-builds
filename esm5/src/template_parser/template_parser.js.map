{"version":3,"file":"template_parser.js","sourceRoot":"","sources":["../../../../../../packages/compiler/src/template_parser/template_parser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileDirectiveMetadata, CompileDirectiveSummary, CompilePipeSummary, CompileTokenMetadata, CompileTypeMetadata, identifierName} from '../compile_metadata';\nimport {CompileReflector} from '../compile_reflector';\nimport {CompilerConfig} from '../config';\nimport {SchemaMetadata} from '../core';\nimport {AST, ASTWithSource, EmptyExpr} from '../expression_parser/ast';\nimport {Parser} from '../expression_parser/parser';\nimport {I18NHtmlParser} from '../i18n/i18n_html_parser';\nimport {Identifiers, createTokenForExternalReference, createTokenForReference} from '../identifiers';\nimport * as html from '../ml_parser/ast';\nimport {ParseTreeResult} from '../ml_parser/html_parser';\nimport {removeWhitespaces, replaceNgsp} from '../ml_parser/html_whitespaces';\nimport {expandNodes} from '../ml_parser/icu_ast_expander';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {isNgTemplate, splitNsName} from '../ml_parser/tags';\nimport {ParseError, ParseErrorLevel, ParseSourceSpan} from '../parse_util';\nimport {ProviderElementContext, ProviderViewContext} from '../provider_analyzer';\nimport {ElementSchemaRegistry} from '../schema/element_schema_registry';\nimport {CssSelector, SelectorMatcher} from '../selector';\nimport {isStyleUrlResolvable} from '../style_url_resolver';\nimport {Console, syntaxError} from '../util';\n\nimport {BindingParser, BoundProperty} from './binding_parser';\nimport {AttrAst, BoundDirectivePropertyAst, BoundElementPropertyAst, BoundEventAst, BoundTextAst, DirectiveAst, ElementAst, EmbeddedTemplateAst, NgContentAst, PropertyBindingType, ReferenceAst, TemplateAst, TemplateAstVisitor, TextAst, VariableAst, templateVisitAll} from './template_ast';\nimport {PreparsedElementType, preparseElement} from './template_preparser';\n\nconst BIND_NAME_REGEXP =\n    /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\\[\\(([^\\)]+)\\)\\]|\\[([^\\]]+)\\]|\\(([^\\)]+)\\))$/;\n\n// Group 1 = \"bind-\"\nconst KW_BIND_IDX = 1;\n// Group 2 = \"let-\"\nconst KW_LET_IDX = 2;\n// Group 3 = \"ref-/#\"\nconst KW_REF_IDX = 3;\n// Group 4 = \"on-\"\nconst KW_ON_IDX = 4;\n// Group 5 = \"bindon-\"\nconst KW_BINDON_IDX = 5;\n// Group 6 = \"@\"\nconst KW_AT_IDX = 6;\n// Group 7 = the identifier after \"bind-\", \"let-\", \"ref-/#\", \"on-\", \"bindon-\" or \"@\"\nconst IDENT_KW_IDX = 7;\n// Group 8 = identifier inside [()]\nconst IDENT_BANANA_BOX_IDX = 8;\n// Group 9 = identifier inside []\nconst IDENT_PROPERTY_IDX = 9;\n// Group 10 = identifier inside ()\nconst IDENT_EVENT_IDX = 10;\n\nconst TEMPLATE_ATTR_PREFIX = '*';\nconst CLASS_ATTR = 'class';\n\nconst TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];\n\nlet warningCounts: {[warning: string]: number} = {};\n\nfunction warnOnlyOnce(warnings: string[]): (warning: ParseError) => boolean {\n  return (error: ParseError) => {\n    if (warnings.indexOf(error.msg) !== -1) {\n      warningCounts[error.msg] = (warningCounts[error.msg] || 0) + 1;\n      return warningCounts[error.msg] <= 1;\n    }\n    return true;\n  };\n}\n\nexport class TemplateParseError extends ParseError {\n  constructor(message: string, span: ParseSourceSpan, level: ParseErrorLevel) {\n    super(span, message, level);\n  }\n}\n\nexport class TemplateParseResult {\n  constructor(\n      public templateAst?: TemplateAst[], public usedPipes?: CompilePipeSummary[],\n      public errors?: ParseError[]) {}\n}\n\nexport class TemplateParser {\n  constructor(\n      private _config: CompilerConfig, private _reflector: CompileReflector,\n      private _exprParser: Parser, private _schemaRegistry: ElementSchemaRegistry,\n      private _htmlParser: I18NHtmlParser, private _console: Console,\n      public transforms: TemplateAstVisitor[]) {}\n\n  public get expressionParser() { return this._exprParser; }\n\n  parse(\n      component: CompileDirectiveMetadata, template: string|ParseTreeResult,\n      directives: CompileDirectiveSummary[], pipes: CompilePipeSummary[], schemas: SchemaMetadata[],\n      templateUrl: string,\n      preserveWhitespaces: boolean): {template: TemplateAst[], pipes: CompilePipeSummary[]} {\n    const result = this.tryParse(\n        component, template, directives, pipes, schemas, templateUrl, preserveWhitespaces);\n    const warnings = result.errors !.filter(error => error.level === ParseErrorLevel.WARNING);\n\n    const errors = result.errors !.filter(error => error.level === ParseErrorLevel.ERROR);\n\n    if (warnings.length > 0) {\n      this._console.warn(`Template parse warnings:\\n${warnings.join('\\n')}`);\n    }\n\n    if (errors.length > 0) {\n      const errorString = errors.join('\\n');\n      throw syntaxError(`Template parse errors:\\n${errorString}`, errors);\n    }\n\n    return {template: result.templateAst !, pipes: result.usedPipes !};\n  }\n\n  tryParse(\n      component: CompileDirectiveMetadata, template: string|ParseTreeResult,\n      directives: CompileDirectiveSummary[], pipes: CompilePipeSummary[], schemas: SchemaMetadata[],\n      templateUrl: string, preserveWhitespaces: boolean): TemplateParseResult {\n    let htmlParseResult = typeof template === 'string' ?\n        this._htmlParser !.parse(\n            template, templateUrl, true, this.getInterpolationConfig(component)) :\n        template;\n\n    if (!preserveWhitespaces) {\n      htmlParseResult = removeWhitespaces(htmlParseResult);\n    }\n\n    return this.tryParseHtml(\n        this.expandHtml(htmlParseResult), component, directives, pipes, schemas);\n  }\n\n  tryParseHtml(\n      htmlAstWithErrors: ParseTreeResult, component: CompileDirectiveMetadata,\n      directives: CompileDirectiveSummary[], pipes: CompilePipeSummary[],\n      schemas: SchemaMetadata[]): TemplateParseResult {\n    let result: TemplateAst[];\n    const errors = htmlAstWithErrors.errors;\n    const usedPipes: CompilePipeSummary[] = [];\n    if (htmlAstWithErrors.rootNodes.length > 0) {\n      const uniqDirectives = removeSummaryDuplicates(directives);\n      const uniqPipes = removeSummaryDuplicates(pipes);\n      const providerViewContext = new ProviderViewContext(this._reflector, component);\n      let interpolationConfig: InterpolationConfig = undefined !;\n      if (component.template && component.template.interpolation) {\n        interpolationConfig = {\n          start: component.template.interpolation[0],\n          end: component.template.interpolation[1]\n        };\n      }\n      const bindingParser = new BindingParser(\n          this._exprParser, interpolationConfig !, this._schemaRegistry, uniqPipes, errors);\n      const parseVisitor = new TemplateParseVisitor(\n          this._reflector, this._config, providerViewContext, uniqDirectives, bindingParser,\n          this._schemaRegistry, schemas, errors);\n      result = html.visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);\n      errors.push(...providerViewContext.errors);\n      usedPipes.push(...bindingParser.getUsedPipes());\n    } else {\n      result = [];\n    }\n    this._assertNoReferenceDuplicationOnTemplate(result, errors);\n\n    if (errors.length > 0) {\n      return new TemplateParseResult(result, usedPipes, errors);\n    }\n\n    if (this.transforms) {\n      this.transforms.forEach(\n          (transform: TemplateAstVisitor) => { result = templateVisitAll(transform, result); });\n    }\n\n    return new TemplateParseResult(result, usedPipes, errors);\n  }\n\n  expandHtml(htmlAstWithErrors: ParseTreeResult, forced: boolean = false): ParseTreeResult {\n    const errors: ParseError[] = htmlAstWithErrors.errors;\n\n    if (errors.length == 0 || forced) {\n      // Transform ICU messages to angular directives\n      const expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);\n      errors.push(...expandedHtmlAst.errors);\n      htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);\n    }\n    return htmlAstWithErrors;\n  }\n\n  getInterpolationConfig(component: CompileDirectiveMetadata): InterpolationConfig|undefined {\n    if (component.template) {\n      return InterpolationConfig.fromArray(component.template.interpolation);\n    }\n    return undefined;\n  }\n\n  /** @internal */\n  _assertNoReferenceDuplicationOnTemplate(result: TemplateAst[], errors: TemplateParseError[]):\n      void {\n    const existingReferences: string[] = [];\n\n    result.filter(element => !!(<any>element).references)\n        .forEach(element => (<any>element).references.forEach((reference: ReferenceAst) => {\n          const name = reference.name;\n          if (existingReferences.indexOf(name) < 0) {\n            existingReferences.push(name);\n          } else {\n            const error = new TemplateParseError(\n                `Reference \"#${name}\" is defined several times`, reference.sourceSpan,\n                ParseErrorLevel.ERROR);\n            errors.push(error);\n          }\n        }));\n  }\n}\n\nclass TemplateParseVisitor implements html.Visitor {\n  selectorMatcher = new SelectorMatcher();\n  directivesIndex = new Map<CompileDirectiveSummary, number>();\n  ngContentCount = 0;\n  contentQueryStartId: number;\n\n  constructor(\n      private reflector: CompileReflector, private config: CompilerConfig,\n      public providerViewContext: ProviderViewContext, directives: CompileDirectiveSummary[],\n      private _bindingParser: BindingParser, private _schemaRegistry: ElementSchemaRegistry,\n      private _schemas: SchemaMetadata[], private _targetErrors: TemplateParseError[]) {\n    // Note: queries start with id 1 so we can use the number in a Bloom filter!\n    this.contentQueryStartId = providerViewContext.component.viewQueries.length + 1;\n    directives.forEach((directive, index) => {\n      const selector = CssSelector.parse(directive.selector !);\n      this.selectorMatcher.addSelectables(selector, directive);\n      this.directivesIndex.set(directive, index);\n    });\n  }\n\n  visitExpansion(expansion: html.Expansion, context: any): any { return null; }\n\n  visitExpansionCase(expansionCase: html.ExpansionCase, context: any): any { return null; }\n\n  visitText(text: html.Text, parent: ElementContext): any {\n    const ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR) !;\n    const valueNoNgsp = replaceNgsp(text.value);\n    const expr = this._bindingParser.parseInterpolation(valueNoNgsp, text.sourceSpan !);\n    return expr ? new BoundTextAst(expr, ngContentIndex, text.sourceSpan !) :\n                  new TextAst(valueNoNgsp, ngContentIndex, text.sourceSpan !);\n  }\n\n  visitAttribute(attribute: html.Attribute, context: any): any {\n    return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n  }\n\n  visitComment(comment: html.Comment, context: any): any { return null; }\n\n  visitElement(element: html.Element, parent: ElementContext): any {\n    const queryStartIndex = this.contentQueryStartId;\n    const nodeName = element.name;\n    const preparsedElement = preparseElement(element);\n    if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n        preparsedElement.type === PreparsedElementType.STYLE) {\n      // Skipping <script> for security reasons\n      // Skipping <style> as we already processed them\n      // in the StyleCompiler\n      return null;\n    }\n    if (preparsedElement.type === PreparsedElementType.STYLESHEET &&\n        isStyleUrlResolvable(preparsedElement.hrefAttr)) {\n      // Skipping stylesheets with either relative urls or package scheme as we already processed\n      // them in the StyleCompiler\n      return null;\n    }\n\n    const matchableAttrs: [string, string][] = [];\n    const elementOrDirectiveProps: BoundProperty[] = [];\n    const elementOrDirectiveRefs: ElementOrDirectiveRef[] = [];\n    const elementVars: VariableAst[] = [];\n    const events: BoundEventAst[] = [];\n\n    const templateElementOrDirectiveProps: BoundProperty[] = [];\n    const templateMatchableAttrs: [string, string][] = [];\n    const templateElementVars: VariableAst[] = [];\n\n    let hasInlineTemplates = false;\n    const attrs: AttrAst[] = [];\n    const isTemplateElement = isNgTemplate(element.name);\n\n    element.attrs.forEach(attr => {\n      const hasBinding = this._parseAttr(\n          isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events,\n          elementOrDirectiveRefs, elementVars);\n\n      let templateBindingsSource: string|undefined;\n      let prefixToken: string|undefined;\n      const normalizedName = this._normalizeAttributeName(attr.name);\n\n      if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {\n        templateBindingsSource = attr.value;\n        prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';\n      }\n\n      const hasTemplateBinding = templateBindingsSource != null;\n      if (hasTemplateBinding) {\n        if (hasInlineTemplates) {\n          this._reportError(\n              `Can't have multiple template bindings on one element. Use only one attribute prefixed with *`,\n              attr.sourceSpan);\n        }\n        hasInlineTemplates = true;\n        this._bindingParser.parseInlineTemplateBinding(\n            prefixToken !, templateBindingsSource !, attr.sourceSpan, templateMatchableAttrs,\n            templateElementOrDirectiveProps, templateElementVars);\n      }\n\n      if (!hasBinding && !hasTemplateBinding) {\n        // don't include the bindings as attributes as well in the AST\n        attrs.push(this.visitAttribute(attr, null));\n        matchableAttrs.push([attr.name, attr.value]);\n      }\n    });\n\n    const elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);\n    const {directives: directiveMetas, matchElement} =\n        this._parseDirectives(this.selectorMatcher, elementCssSelector);\n    const references: ReferenceAst[] = [];\n    const boundDirectivePropNames = new Set<string>();\n    const directiveAsts = this._createDirectiveAsts(\n        isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps,\n        elementOrDirectiveRefs, element.sourceSpan !, references, boundDirectivePropNames);\n    const elementProps: BoundElementPropertyAst[] = this._createElementPropertyAsts(\n        element.name, elementOrDirectiveProps, boundDirectivePropNames);\n    const isViewRoot = parent.isTemplateElement || hasInlineTemplates;\n\n    const providerContext = new ProviderElementContext(\n        this.providerViewContext, parent.providerContext !, isViewRoot, directiveAsts, attrs,\n        references, isTemplateElement, queryStartIndex, element.sourceSpan !);\n\n    const children: TemplateAst[] = html.visitAll(\n        preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children,\n        ElementContext.create(\n            isTemplateElement, directiveAsts,\n            isTemplateElement ? parent.providerContext ! : providerContext));\n    providerContext.afterElement();\n    // Override the actual selector when the `ngProjectAs` attribute is provided\n    const projectionSelector = preparsedElement.projectAs != null ?\n        CssSelector.parse(preparsedElement.projectAs)[0] :\n        elementCssSelector;\n    const ngContentIndex = parent.findNgContentIndex(projectionSelector) !;\n    let parsedElement: TemplateAst;\n\n    if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {\n      if (element.children && !element.children.every(_isEmptyTextNode)) {\n        this._reportError(`<ng-content> element cannot have content.`, element.sourceSpan !);\n      }\n\n      parsedElement = new NgContentAst(\n          this.ngContentCount++, hasInlineTemplates ? null ! : ngContentIndex,\n          element.sourceSpan !);\n    } else if (isTemplateElement) {\n      this._assertAllEventsPublishedByDirectives(directiveAsts, events);\n      this._assertNoComponentsNorElementBindingsOnTemplate(\n          directiveAsts, elementProps, element.sourceSpan !);\n\n      parsedElement = new EmbeddedTemplateAst(\n          attrs, events, references, elementVars, providerContext.transformedDirectiveAsts,\n          providerContext.transformProviders, providerContext.transformedHasViewContainer,\n          providerContext.queryMatches, children, hasInlineTemplates ? null ! : ngContentIndex,\n          element.sourceSpan !);\n    } else {\n      this._assertElementExists(matchElement, element);\n      this._assertOnlyOneComponent(directiveAsts, element.sourceSpan !);\n\n      const ngContentIndex =\n          hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);\n      parsedElement = new ElementAst(\n          nodeName, attrs, elementProps, events, references,\n          providerContext.transformedDirectiveAsts, providerContext.transformProviders,\n          providerContext.transformedHasViewContainer, providerContext.queryMatches, children,\n          hasInlineTemplates ? null : ngContentIndex, element.sourceSpan,\n          element.endSourceSpan || null);\n    }\n\n    if (hasInlineTemplates) {\n      const templateQueryStartIndex = this.contentQueryStartId;\n      const templateSelector = createElementCssSelector('ng-template', templateMatchableAttrs);\n      const {directives: templateDirectiveMetas} =\n          this._parseDirectives(this.selectorMatcher, templateSelector);\n      const templateBoundDirectivePropNames = new Set<string>();\n      const templateDirectiveAsts = this._createDirectiveAsts(\n          true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [],\n          element.sourceSpan !, [], templateBoundDirectivePropNames);\n      const templateElementProps: BoundElementPropertyAst[] = this._createElementPropertyAsts(\n          element.name, templateElementOrDirectiveProps, templateBoundDirectivePropNames);\n      this._assertNoComponentsNorElementBindingsOnTemplate(\n          templateDirectiveAsts, templateElementProps, element.sourceSpan !);\n      const templateProviderContext = new ProviderElementContext(\n          this.providerViewContext, parent.providerContext !, parent.isTemplateElement,\n          templateDirectiveAsts, [], [], true, templateQueryStartIndex, element.sourceSpan !);\n      templateProviderContext.afterElement();\n\n      parsedElement = new EmbeddedTemplateAst(\n          [], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts,\n          templateProviderContext.transformProviders,\n          templateProviderContext.transformedHasViewContainer, templateProviderContext.queryMatches,\n          [parsedElement], ngContentIndex, element.sourceSpan !);\n    }\n\n    return parsedElement;\n  }\n\n  private _parseAttr(\n      isTemplateElement: boolean, attr: html.Attribute, targetMatchableAttrs: string[][],\n      targetProps: BoundProperty[], targetEvents: BoundEventAst[],\n      targetRefs: ElementOrDirectiveRef[], targetVars: VariableAst[]): boolean {\n    const name = this._normalizeAttributeName(attr.name);\n    const value = attr.value;\n    const srcSpan = attr.sourceSpan;\n\n    const bindParts = name.match(BIND_NAME_REGEXP);\n    let hasBinding = false;\n    const boundEvents: BoundEventAst[] = [];\n\n    if (bindParts !== null) {\n      hasBinding = true;\n      if (bindParts[KW_BIND_IDX] != null) {\n        this._bindingParser.parsePropertyBinding(\n            bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n\n      } else if (bindParts[KW_LET_IDX]) {\n        if (isTemplateElement) {\n          const identifier = bindParts[IDENT_KW_IDX];\n          this._parseVariable(identifier, value, srcSpan, targetVars);\n        } else {\n          this._reportError(`\"let-\" is only supported on ng-template elements.`, srcSpan);\n        }\n\n      } else if (bindParts[KW_REF_IDX]) {\n        const identifier = bindParts[IDENT_KW_IDX];\n        this._parseReference(identifier, value, srcSpan, targetRefs);\n\n      } else if (bindParts[KW_ON_IDX]) {\n        this._bindingParser.parseEvent(\n            bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n\n      } else if (bindParts[KW_BINDON_IDX]) {\n        this._bindingParser.parsePropertyBinding(\n            bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);\n        this._parseAssignmentEvent(\n            bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n\n      } else if (bindParts[KW_AT_IDX]) {\n        this._bindingParser.parseLiteralAttr(\n            name, value, srcSpan, targetMatchableAttrs, targetProps);\n\n      } else if (bindParts[IDENT_BANANA_BOX_IDX]) {\n        this._bindingParser.parsePropertyBinding(\n            bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs,\n            targetProps);\n        this._parseAssignmentEvent(\n            bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n\n      } else if (bindParts[IDENT_PROPERTY_IDX]) {\n        this._bindingParser.parsePropertyBinding(\n            bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs,\n            targetProps);\n\n      } else if (bindParts[IDENT_EVENT_IDX]) {\n        this._bindingParser.parseEvent(\n            bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);\n      }\n    } else {\n      hasBinding = this._bindingParser.parsePropertyInterpolation(\n          name, value, srcSpan, targetMatchableAttrs, targetProps);\n    }\n\n    if (!hasBinding) {\n      this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);\n    }\n\n    return hasBinding;\n  }\n\n  private _normalizeAttributeName(attrName: string): string {\n    return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;\n  }\n\n  private _parseVariable(\n      identifier: string, value: string, sourceSpan: ParseSourceSpan, targetVars: VariableAst[]) {\n    if (identifier.indexOf('-') > -1) {\n      this._reportError(`\"-\" is not allowed in variable names`, sourceSpan);\n    }\n\n    targetVars.push(new VariableAst(identifier, value, sourceSpan));\n  }\n\n  private _parseReference(\n      identifier: string, value: string, sourceSpan: ParseSourceSpan,\n      targetRefs: ElementOrDirectiveRef[]) {\n    if (identifier.indexOf('-') > -1) {\n      this._reportError(`\"-\" is not allowed in reference names`, sourceSpan);\n    }\n\n    targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));\n  }\n\n  private _parseAssignmentEvent(\n      name: string, expression: string, sourceSpan: ParseSourceSpan,\n      targetMatchableAttrs: string[][], targetEvents: BoundEventAst[]) {\n    this._bindingParser.parseEvent(\n        `${name}Change`, `${expression}=$event`, sourceSpan, targetMatchableAttrs, targetEvents);\n  }\n\n  private _parseDirectives(selectorMatcher: SelectorMatcher, elementCssSelector: CssSelector):\n      {directives: CompileDirectiveSummary[], matchElement: boolean} {\n    // Need to sort the directives so that we get consistent results throughout,\n    // as selectorMatcher uses Maps inside.\n    // Also deduplicate directives as they might match more than one time!\n    const directives = new Array(this.directivesIndex.size);\n    // Whether any directive selector matches on the element name\n    let matchElement = false;\n\n    selectorMatcher.match(elementCssSelector, (selector, directive) => {\n      directives[this.directivesIndex.get(directive) !] = directive;\n      matchElement = matchElement || selector.hasElementSelector();\n    });\n\n    return {\n      directives: directives.filter(dir => !!dir),\n      matchElement,\n    };\n  }\n\n  private _createDirectiveAsts(\n      isTemplateElement: boolean, elementName: string, directives: CompileDirectiveSummary[],\n      props: BoundProperty[], elementOrDirectiveRefs: ElementOrDirectiveRef[],\n      elementSourceSpan: ParseSourceSpan, targetReferences: ReferenceAst[],\n      targetBoundDirectivePropNames: Set<string>): DirectiveAst[] {\n    const matchedReferences = new Set<string>();\n    let component: CompileDirectiveSummary = null !;\n\n    const directiveAsts = directives.map((directive) => {\n      const sourceSpan = new ParseSourceSpan(\n          elementSourceSpan.start, elementSourceSpan.end,\n          `Directive ${identifierName(directive.type)}`);\n\n      if (directive.isComponent) {\n        component = directive;\n      }\n      const directiveProperties: BoundDirectivePropertyAst[] = [];\n      let hostProperties =\n          this._bindingParser.createDirectiveHostPropertyAsts(directive, elementName, sourceSpan) !;\n      // Note: We need to check the host properties here as well,\n      // as we don't know the element name in the DirectiveWrapperCompiler yet.\n      hostProperties = this._checkPropertiesInSchema(elementName, hostProperties);\n      const hostEvents = this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan) !;\n      this._createDirectivePropertyAsts(\n          directive.inputs, props, directiveProperties, targetBoundDirectivePropNames);\n      elementOrDirectiveRefs.forEach((elOrDirRef) => {\n        if ((elOrDirRef.value.length === 0 && directive.isComponent) ||\n            (elOrDirRef.isReferenceToDirective(directive))) {\n          targetReferences.push(new ReferenceAst(\n              elOrDirRef.name, createTokenForReference(directive.type.reference), elOrDirRef.value,\n              elOrDirRef.sourceSpan));\n          matchedReferences.add(elOrDirRef.name);\n        }\n      });\n      const contentQueryStartId = this.contentQueryStartId;\n      this.contentQueryStartId += directive.queries.length;\n      return new DirectiveAst(\n          directive, directiveProperties, hostProperties, hostEvents, contentQueryStartId,\n          sourceSpan);\n    });\n\n    elementOrDirectiveRefs.forEach((elOrDirRef) => {\n      if (elOrDirRef.value.length > 0) {\n        if (!matchedReferences.has(elOrDirRef.name)) {\n          this._reportError(\n              `There is no directive with \"exportAs\" set to \"${elOrDirRef.value}\"`,\n              elOrDirRef.sourceSpan);\n        }\n      } else if (!component) {\n        let refToken: CompileTokenMetadata = null !;\n        if (isTemplateElement) {\n          refToken = createTokenForExternalReference(this.reflector, Identifiers.TemplateRef);\n        }\n        targetReferences.push(\n            new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.value, elOrDirRef.sourceSpan));\n      }\n    });\n    return directiveAsts;\n  }\n\n  private _createDirectivePropertyAsts(\n      directiveProperties: {[key: string]: string}, boundProps: BoundProperty[],\n      targetBoundDirectiveProps: BoundDirectivePropertyAst[],\n      targetBoundDirectivePropNames: Set<string>) {\n    if (directiveProperties) {\n      const boundPropsByName = new Map<string, BoundProperty>();\n      boundProps.forEach(boundProp => {\n        const prevValue = boundPropsByName.get(boundProp.name);\n        if (!prevValue || prevValue.isLiteral) {\n          // give [a]=\"b\" a higher precedence than a=\"b\" on the same element\n          boundPropsByName.set(boundProp.name, boundProp);\n        }\n      });\n\n      Object.keys(directiveProperties).forEach(dirProp => {\n        const elProp = directiveProperties[dirProp];\n        const boundProp = boundPropsByName.get(elProp);\n\n        // Bindings are optional, so this binding only needs to be set up if an expression is given.\n        if (boundProp) {\n          targetBoundDirectivePropNames.add(boundProp.name);\n          if (!isEmptyExpression(boundProp.expression)) {\n            targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(\n                dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));\n          }\n        }\n      });\n    }\n  }\n\n  private _createElementPropertyAsts(\n      elementName: string, props: BoundProperty[],\n      boundDirectivePropNames: Set<string>): BoundElementPropertyAst[] {\n    const boundElementProps: BoundElementPropertyAst[] = [];\n\n    props.forEach((prop: BoundProperty) => {\n      if (!prop.isLiteral && !boundDirectivePropNames.has(prop.name)) {\n        boundElementProps.push(this._bindingParser.createElementPropertyAst(elementName, prop));\n      }\n    });\n    return this._checkPropertiesInSchema(elementName, boundElementProps);\n  }\n\n  private _findComponentDirectives(directives: DirectiveAst[]): DirectiveAst[] {\n    return directives.filter(directive => directive.directive.isComponent);\n  }\n\n  private _findComponentDirectiveNames(directives: DirectiveAst[]): string[] {\n    return this._findComponentDirectives(directives)\n        .map(directive => identifierName(directive.directive.type) !);\n  }\n\n  private _assertOnlyOneComponent(directives: DirectiveAst[], sourceSpan: ParseSourceSpan) {\n    const componentTypeNames = this._findComponentDirectiveNames(directives);\n    if (componentTypeNames.length > 1) {\n      this._reportError(\n          `More than one component matched on this element.\\n` +\n              `Make sure that only one component's selector can match a given element.\\n` +\n              `Conflicting components: ${componentTypeNames.join(',')}`,\n          sourceSpan);\n    }\n  }\n\n  /**\n   * Make sure that non-angular tags conform to the schemas.\n   *\n   * Note: An element is considered an angular tag when at least one directive selector matches the\n   * tag name.\n   *\n   * @param matchElement Whether any directive has matched on the tag name\n   * @param element the html element\n   */\n  private _assertElementExists(matchElement: boolean, element: html.Element) {\n    const elName = element.name.replace(/^:xhtml:/, '');\n\n    if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {\n      let errorMsg = `'${elName}' is not a known element:\\n`;\n      errorMsg +=\n          `1. If '${elName}' is an Angular component, then verify that it is part of this module.\\n`;\n      if (elName.indexOf('-') > -1) {\n        errorMsg +=\n            `2. If '${elName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;\n      } else {\n        errorMsg +=\n            `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n      }\n      this._reportError(errorMsg, element.sourceSpan !);\n    }\n  }\n\n  private _assertNoComponentsNorElementBindingsOnTemplate(\n      directives: DirectiveAst[], elementProps: BoundElementPropertyAst[],\n      sourceSpan: ParseSourceSpan) {\n    const componentTypeNames: string[] = this._findComponentDirectiveNames(directives);\n    if (componentTypeNames.length > 0) {\n      this._reportError(\n          `Components on an embedded template: ${componentTypeNames.join(',')}`, sourceSpan);\n    }\n    elementProps.forEach(prop => {\n      this._reportError(\n          `Property binding ${prop.name} not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".`,\n          sourceSpan);\n    });\n  }\n\n  private _assertAllEventsPublishedByDirectives(\n      directives: DirectiveAst[], events: BoundEventAst[]) {\n    const allDirectiveEvents = new Set<string>();\n\n    directives.forEach(directive => {\n      Object.keys(directive.directive.outputs).forEach(k => {\n        const eventName = directive.directive.outputs[k];\n        allDirectiveEvents.add(eventName);\n      });\n    });\n\n    events.forEach(event => {\n      if (event.target != null || !allDirectiveEvents.has(event.name)) {\n        this._reportError(\n            `Event binding ${event.fullName} not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".`,\n            event.sourceSpan);\n      }\n    });\n  }\n\n  private _checkPropertiesInSchema(elementName: string, boundProps: BoundElementPropertyAst[]):\n      BoundElementPropertyAst[] {\n    // Note: We can't filter out empty expressions before this method,\n    // as we still want to validate them!\n    return boundProps.filter((boundProp) => {\n      if (boundProp.type === PropertyBindingType.Property &&\n          !this._schemaRegistry.hasProperty(elementName, boundProp.name, this._schemas)) {\n        let errorMsg =\n            `Can't bind to '${boundProp.name}' since it isn't a known property of '${elementName}'.`;\n        if (elementName.startsWith('ng-')) {\n          errorMsg +=\n              `\\n1. If '${boundProp.name}' is an Angular directive, then add 'CommonModule' to the '@NgModule.imports' of this component.` +\n              `\\n2. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n        } else if (elementName.indexOf('-') > -1) {\n          errorMsg +=\n              `\\n1. If '${elementName}' is an Angular component and it has '${boundProp.name}' input, then verify that it is part of this module.` +\n              `\\n2. If '${elementName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.` +\n              `\\n3. To allow any property add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;\n        }\n        this._reportError(errorMsg, boundProp.sourceSpan);\n      }\n      return !isEmptyExpression(boundProp.value);\n    });\n  }\n\n  private _reportError(\n      message: string, sourceSpan: ParseSourceSpan,\n      level: ParseErrorLevel = ParseErrorLevel.ERROR) {\n    this._targetErrors.push(new ParseError(sourceSpan, message, level));\n  }\n}\n\nclass NonBindableVisitor implements html.Visitor {\n  visitElement(ast: html.Element, parent: ElementContext): ElementAst|null {\n    const preparsedElement = preparseElement(ast);\n    if (preparsedElement.type === PreparsedElementType.SCRIPT ||\n        preparsedElement.type === PreparsedElementType.STYLE ||\n        preparsedElement.type === PreparsedElementType.STYLESHEET) {\n      // Skipping <script> for security reasons\n      // Skipping <style> and stylesheets as we already processed them\n      // in the StyleCompiler\n      return null;\n    }\n\n    const attrNameAndValues = ast.attrs.map((attr): [string, string] => [attr.name, attr.value]);\n    const selector = createElementCssSelector(ast.name, attrNameAndValues);\n    const ngContentIndex = parent.findNgContentIndex(selector);\n    const children: TemplateAst[] = html.visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);\n    return new ElementAst(\n        ast.name, html.visitAll(this, ast.attrs), [], [], [], [], [], false, [], children,\n        ngContentIndex, ast.sourceSpan, ast.endSourceSpan);\n  }\n  visitComment(comment: html.Comment, context: any): any { return null; }\n\n  visitAttribute(attribute: html.Attribute, context: any): AttrAst {\n    return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);\n  }\n\n  visitText(text: html.Text, parent: ElementContext): TextAst {\n    const ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR) !;\n    return new TextAst(text.value, ngContentIndex, text.sourceSpan !);\n  }\n\n  visitExpansion(expansion: html.Expansion, context: any): any { return expansion; }\n\n  visitExpansionCase(expansionCase: html.ExpansionCase, context: any): any { return expansionCase; }\n}\n\n/**\n * A reference to an element or directive in a template. E.g., the reference in this template:\n *\n * <div #myMenu=\"coolMenu\">\n *\n * would be {name: 'myMenu', value: 'coolMenu', sourceSpan: ...}\n */\nclass ElementOrDirectiveRef {\n  constructor(public name: string, public value: string, public sourceSpan: ParseSourceSpan) {}\n\n  /** Gets whether this is a reference to the given directive. */\n  isReferenceToDirective(directive: CompileDirectiveSummary) {\n    return splitExportAs(directive.exportAs).indexOf(this.value) !== -1;\n  }\n}\n\n/** Splits a raw, potentially comma-delimited `exportAs` value into an array of names. */\nfunction splitExportAs(exportAs: string | null): string[] {\n  return exportAs ? exportAs.split(',').map(e => e.trim()) : [];\n}\n\nexport function splitClasses(classAttrValue: string): string[] {\n  return classAttrValue.trim().split(/\\s+/g);\n}\n\nclass ElementContext {\n  static create(\n      isTemplateElement: boolean, directives: DirectiveAst[],\n      providerContext: ProviderElementContext): ElementContext {\n    const matcher = new SelectorMatcher();\n    let wildcardNgContentIndex: number = null !;\n    const component = directives.find(directive => directive.directive.isComponent);\n    if (component) {\n      const ngContentSelectors = component.directive.template !.ngContentSelectors;\n      for (let i = 0; i < ngContentSelectors.length; i++) {\n        const selector = ngContentSelectors[i];\n        if (selector === '*') {\n          wildcardNgContentIndex = i;\n        } else {\n          matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);\n        }\n      }\n    }\n    return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);\n  }\n  constructor(\n      public isTemplateElement: boolean, private _ngContentIndexMatcher: SelectorMatcher,\n      private _wildcardNgContentIndex: number|null,\n      public providerContext: ProviderElementContext|null) {}\n\n  findNgContentIndex(selector: CssSelector): number|null {\n    const ngContentIndices: number[] = [];\n    this._ngContentIndexMatcher.match(\n        selector, (selector, ngContentIndex) => { ngContentIndices.push(ngContentIndex); });\n    ngContentIndices.sort();\n    if (this._wildcardNgContentIndex != null) {\n      ngContentIndices.push(this._wildcardNgContentIndex);\n    }\n    return ngContentIndices.length > 0 ? ngContentIndices[0] : null;\n  }\n}\n\nexport function createElementCssSelector(\n    elementName: string, attributes: [string, string][]): CssSelector {\n  const cssSelector = new CssSelector();\n  const elNameNoNs = splitNsName(elementName)[1];\n\n  cssSelector.setElement(elNameNoNs);\n\n  for (let i = 0; i < attributes.length; i++) {\n    const attrName = attributes[i][0];\n    const attrNameNoNs = splitNsName(attrName)[1];\n    const attrValue = attributes[i][1];\n\n    cssSelector.addAttribute(attrNameNoNs, attrValue);\n    if (attrName.toLowerCase() == CLASS_ATTR) {\n      const classes = splitClasses(attrValue);\n      classes.forEach(className => cssSelector.addClassName(className));\n    }\n  }\n  return cssSelector;\n}\n\nconst EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);\nconst NON_BINDABLE_VISITOR = new NonBindableVisitor();\n\nfunction _isEmptyTextNode(node: html.Node): boolean {\n  return node instanceof html.Text && node.value.trim().length == 0;\n}\n\nexport function removeSummaryDuplicates<T extends{type: CompileTypeMetadata}>(items: T[]): T[] {\n  const map = new Map<any, T>();\n\n  items.forEach((item) => {\n    if (!map.get(item.type.reference)) {\n      map.set(item.type.reference, item);\n    }\n  });\n\n  return Array.from(map.values());\n}\n\nfunction isEmptyExpression(ast: AST): boolean {\n  if (ast instanceof ASTWithSource) {\n    ast = ast.ast;\n  }\n  return ast instanceof EmptyExpr;\n}"]}