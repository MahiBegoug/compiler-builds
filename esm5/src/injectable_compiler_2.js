/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import * as o from './output/output_ast';
import { Identifiers } from './render3/r3_identifiers';
function mapToMapExpression(map) {
    var result = Object.keys(map).map(function (key) { return ({ key: key, value: map[key], quoted: false }); });
    return o.literalMap(result);
}
export function compileIvyInjectable(meta) {
    var ret = o.NULL_EXPR;
    if (meta.useType !== undefined) {
        var args = meta.useType.map(function (dep) { return injectDep(dep); });
        ret = new o.InstantiateExpr(meta.type, args);
    }
    else if (meta.useClass !== undefined) {
        var factory_1 = new o.ReadPropExpr(new o.ReadPropExpr(meta.useClass, 'ngInjectableDef'), 'factory');
        ret = new o.InvokeFunctionExpr(factory_1, []);
    }
    else if (meta.useValue !== undefined) {
        ret = meta.useValue;
    }
    else if (meta.useExisting !== undefined) {
        ret = o.importExpr(Identifiers.inject).callFn([meta.useExisting]);
    }
    else if (meta.useFactory !== undefined) {
        var args = meta.useFactory.deps.map(function (dep) { return injectDep(dep); });
        ret = new o.InvokeFunctionExpr(meta.useFactory.factory, args);
    }
    else {
        throw new Error('No instructions for injectable compiler!');
    }
    var token = meta.type;
    var providedIn = meta.providedIn;
    var factory = o.fn([], [new o.ReturnStatement(ret)], undefined, undefined, meta.name + "_Factory");
    var expression = o.importExpr({
        moduleName: '@angular/core',
        name: 'defineInjectable',
    }).callFn([mapToMapExpression({ token: token, factory: factory, providedIn: providedIn })]);
    var type = new o.ExpressionType(o.importExpr({
        moduleName: '@angular/core',
        name: 'InjectableDef',
    }, [new o.ExpressionType(meta.type)]));
    return {
        expression: expression, type: type,
    };
}
function injectDep(dep) {
    var defaultValue = dep.optional ? o.NULL_EXPR : o.literal(undefined);
    var flags = o.literal(0 /* Default */ | (dep.self && 2 /* Self */ || 0) |
        (dep.skipSelf && 4 /* SkipSelf */ || 0));
    if (!dep.optional && !dep.skipSelf && !dep.self) {
        return o.importExpr(Identifiers.inject).callFn([dep.token]);
    }
    else {
        return o.importExpr(Identifiers.inject).callFn([
            dep.token,
            defaultValue,
            flags,
        ]);
    }
}
//# sourceMappingURL=data:application/json;base64,